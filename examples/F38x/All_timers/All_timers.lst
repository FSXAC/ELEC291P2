0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Sun Feb 26 19:39:14 2017
0000              5   ;--------------------------------------------------------
                  5   $name All_timers
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _main
0000             27            public _PCA_ISR
0000             28            public _Timer5_ISR
0000             29            public _Timer4_ISR
0000             30            public _Timer3_ISR
0000             31            public _Timer2_ISR
0000             32            public _Timer1_ISR
0000             33            public _Timer0_ISR
0000             34            public __c51_external_startup
0000             35   ;--------------------------------------------------------
0000             36   ; Special Function Registers
0000             37   ;--------------------------------------------------------
0000             38   _P0             DATA 0x80
0000             39   _SP             DATA 0x81
0000             40   _DPL            DATA 0x82
0000             41   _DPH            DATA 0x83
0000             42   _EMI0TC         DATA 0x84
0000             43   _EMI0CF         DATA 0x85
0000             44   _OSCLCN         DATA 0x86
0000             45   _PCON           DATA 0x87
0000             46   _TCON           DATA 0x88
0000             47   _TMOD           DATA 0x89
0000             48   _TL0            DATA 0x8a
0000             49   _TL1            DATA 0x8b
0000             50   _TH0            DATA 0x8c
0000             51   _TH1            DATA 0x8d
0000             52   _CKCON          DATA 0x8e
0000             53   _PSCTL          DATA 0x8f
0000             54   _P1             DATA 0x90
0000             55   _TMR3CN         DATA 0x91
0000             56   _TMR4CN         DATA 0x91
0000             57   _TMR3RLL        DATA 0x92
0000             58   _TMR4RLL        DATA 0x92
0000             59   _TMR3RLH        DATA 0x93
0000             60   _TMR4RLH        DATA 0x93
0000             61   _TMR3L          DATA 0x94
0000             62   _TMR4L          DATA 0x94
0000             63   _TMR3H          DATA 0x95
0000             64   _TMR4H          DATA 0x95
0000             65   _USB0ADR        DATA 0x96
0000             66   _USB0DAT        DATA 0x97
0000             67   _SCON           DATA 0x98
0000             68   _SCON0          DATA 0x98
0000             69   _SBUF           DATA 0x99
0000             70   _SBUF0          DATA 0x99
0000             71   _CPT1CN         DATA 0x9a
0000             72   _CPT0CN         DATA 0x9b
0000             73   _CPT1MD         DATA 0x9c
0000             74   _CPT0MD         DATA 0x9d
0000             75   _CPT1MX         DATA 0x9e
0000             76   _CPT0MX         DATA 0x9f
0000             77   _P2             DATA 0xa0
0000             78   _SPI0CFG        DATA 0xa1
0000             79   _SPI0CKR        DATA 0xa2
0000             80   _SPI0DAT        DATA 0xa3
0000             81   _P0MDOUT        DATA 0xa4
0000             82   _P1MDOUT        DATA 0xa5
0000             83   _P2MDOUT        DATA 0xa6
0000             84   _P3MDOUT        DATA 0xa7
0000             85   _IE             DATA 0xa8
0000             86   _CLKSEL         DATA 0xa9
0000             87   _EMI0CN         DATA 0xaa
0000             88   __XPAGE         DATA 0xaa
0000             89   _SBCON1         DATA 0xac
0000             90   _P4MDOUT        DATA 0xae
0000             91   _PFE0CN         DATA 0xaf
0000             92   _P3             DATA 0xb0
0000             93   _OSCXCN         DATA 0xb1
0000             94   _OSCICN         DATA 0xb2
0000             95   _OSCICL         DATA 0xb3
0000             96   _SBRLL1         DATA 0xb4
0000             97   _SBRLH1         DATA 0xb5
0000             98   _FLSCL          DATA 0xb6
0000             99   _FLKEY          DATA 0xb7
0000            100   _IP             DATA 0xb8
0000            101   _CLKMUL         DATA 0xb9
0000            102   _SMBTC          DATA 0xb9
0000            103   _AMX0N          DATA 0xba
0000            104   _AMX0P          DATA 0xbb
0000            105   _ADC0CF         DATA 0xbc
0000            106   _ADC0L          DATA 0xbd
0000            107   _ADC0H          DATA 0xbe
0000            108   _SFRPAGE        DATA 0xbf
0000            109   _SMB0CN         DATA 0xc0
0000            110   _SMB1CN         DATA 0xc0
0000            111   _SMB0CF         DATA 0xc1
0000            112   _SMB1CF         DATA 0xc1
0000            113   _SMB0DAT        DATA 0xc2
0000            114   _SMB1DAT        DATA 0xc2
0000            115   _ADC0GTL        DATA 0xc3
0000            116   _ADC0GTH        DATA 0xc4
0000            117   _ADC0LTL        DATA 0xc5
0000            118   _ADC0LTH        DATA 0xc6
0000            119   _P4             DATA 0xc7
0000            120   _TMR2CN         DATA 0xc8
0000            121   _TMR5CN         DATA 0xc8
0000            122   _REG01CN        DATA 0xc9
0000            123   _TMR2RLL        DATA 0xca
0000            124   _TMR5RLL        DATA 0xca
0000            125   _TMR2RLH        DATA 0xcb
0000            126   _TMR5RLH        DATA 0xcb
0000            127   _TMR2L          DATA 0xcc
0000            128   _TMR5L          DATA 0xcc
0000            129   _TMR2H          DATA 0xcd
0000            130   _TMR5H          DATA 0xcd
0000            131   _SMB0ADM        DATA 0xce
0000            132   _SMB1ADM        DATA 0xce
0000            133   _SMB0ADR        DATA 0xcf
0000            134   _SMB1ADR        DATA 0xcf
0000            135   _PSW            DATA 0xd0
0000            136   _REF0CN         DATA 0xd1
0000            137   _SCON1          DATA 0xd2
0000            138   _SBUF1          DATA 0xd3
0000            139   _P0SKIP         DATA 0xd4
0000            140   _P1SKIP         DATA 0xd5
0000            141   _P2SKIP         DATA 0xd6
0000            142   _USB0XCN        DATA 0xd7
0000            143   _PCA0CN         DATA 0xd8
0000            144   _PCA0MD         DATA 0xd9
0000            145   _PCA0CPM0       DATA 0xda
0000            146   _PCA0CPM1       DATA 0xdb
0000            147   _PCA0CPM2       DATA 0xdc
0000            148   _PCA0CPM3       DATA 0xdd
0000            149   _PCA0CPM4       DATA 0xde
0000            150   _P3SKIP         DATA 0xdf
0000            151   _ACC            DATA 0xe0
0000            152   _XBR0           DATA 0xe1
0000            153   _XBR1           DATA 0xe2
0000            154   _XBR2           DATA 0xe3
0000            155   _IT01CF         DATA 0xe4
0000            156   _CKCON1         DATA 0xe4
0000            157   _SMOD1          DATA 0xe5
0000            158   _EIE1           DATA 0xe6
0000            159   _EIE2           DATA 0xe7
0000            160   _ADC0CN         DATA 0xe8
0000            161   _PCA0CPL1       DATA 0xe9
0000            162   _PCA0CPH1       DATA 0xea
0000            163   _PCA0CPL2       DATA 0xeb
0000            164   _PCA0CPH2       DATA 0xec
0000            165   _PCA0CPL3       DATA 0xed
0000            166   _PCA0CPH3       DATA 0xee
0000            167   _RSTSRC         DATA 0xef
0000            168   _B              DATA 0xf0
0000            169   _P0MDIN         DATA 0xf1
0000            170   _P1MDIN         DATA 0xf2
0000            171   _P2MDIN         DATA 0xf3
0000            172   _P3MDIN         DATA 0xf4
0000            173   _P4MDIN         DATA 0xf5
0000            174   _EIP1           DATA 0xf6
0000            175   _EIP2           DATA 0xf7
0000            176   _SPI0CN         DATA 0xf8
0000            177   _PCA0L          DATA 0xf9
0000            178   _PCA0H          DATA 0xfa
0000            179   _PCA0CPL0       DATA 0xfb
0000            180   _PCA0CPH0       DATA 0xfc
0000            181   _PCA0CPL4       DATA 0xfd
0000            182   _PCA0CPH4       DATA 0xfe
0000            183   _VDM0CN         DATA 0xff
0000            184   _DPTR           DATA 0x8382
0000            185   _TMR2RL         DATA 0xcbca
0000            186   _TMR3RL         DATA 0x9392
0000            187   _TMR4RL         DATA 0x9392
0000            188   _TMR5RL         DATA 0xcbca
0000            189   _TMR2           DATA 0xcdcc
0000            190   _TMR3           DATA 0x9594
0000            191   _TMR4           DATA 0x9594
0000            192   _TMR5           DATA 0xcdcc
0000            193   _SBRL1          DATA 0xb5b4
0000            194   _ADC0           DATA 0xbebd
0000            195   _ADC0GT         DATA 0xc4c3
0000            196   _ADC0LT         DATA 0xc6c5
0000            197   _PCA0           DATA 0xfaf9
0000            198   _PCA0CP1        DATA 0xeae9
0000            199   _PCA0CP2        DATA 0xeceb
0000            200   _PCA0CP3        DATA 0xeeed
0000            201   _PCA0CP0        DATA 0xfcfb
0000            202   _PCA0CP4        DATA 0xfefd
0000            203   ;--------------------------------------------------------
0000            204   ; special function bits
0000            205   ;--------------------------------------------------------
0000            206   _P0_0           BIT 0x80
0000            207   _P0_1           BIT 0x81
0000            208   _P0_2           BIT 0x82
0000            209   _P0_3           BIT 0x83
0000            210   _P0_4           BIT 0x84
0000            211   _P0_5           BIT 0x85
0000            212   _P0_6           BIT 0x86
0000            213   _P0_7           BIT 0x87
0000            214   _TF1            BIT 0x8f
0000            215   _TR1            BIT 0x8e
0000            216   _TF0            BIT 0x8d
0000            217   _TR0            BIT 0x8c
0000            218   _IE1            BIT 0x8b
0000            219   _IT1            BIT 0x8a
0000            220   _IE0            BIT 0x89
0000            221   _IT0            BIT 0x88
0000            222   _P1_0           BIT 0x90
0000            223   _P1_1           BIT 0x91
0000            224   _P1_2           BIT 0x92
0000            225   _P1_3           BIT 0x93
0000            226   _P1_4           BIT 0x94
0000            227   _P1_5           BIT 0x95
0000            228   _P1_6           BIT 0x96
0000            229   _P1_7           BIT 0x97
0000            230   _S0MODE         BIT 0x9f
0000            231   _SCON0_6        BIT 0x9e
0000            232   _MCE0           BIT 0x9d
0000            233   _REN0           BIT 0x9c
0000            234   _TB80           BIT 0x9b
0000            235   _RB80           BIT 0x9a
0000            236   _TI0            BIT 0x99
0000            237   _RI0            BIT 0x98
0000            238   _SCON_6         BIT 0x9e
0000            239   _MCE            BIT 0x9d
0000            240   _REN            BIT 0x9c
0000            241   _TB8            BIT 0x9b
0000            242   _RB8            BIT 0x9a
0000            243   _TI             BIT 0x99
0000            244   _RI             BIT 0x98
0000            245   _P2_0           BIT 0xa0
0000            246   _P2_1           BIT 0xa1
0000            247   _P2_2           BIT 0xa2
0000            248   _P2_3           BIT 0xa3
0000            249   _P2_4           BIT 0xa4
0000            250   _P2_5           BIT 0xa5
0000            251   _P2_6           BIT 0xa6
0000            252   _P2_7           BIT 0xa7
0000            253   _EA             BIT 0xaf
0000            254   _ESPI0          BIT 0xae
0000            255   _ET2            BIT 0xad
0000            256   _ES0            BIT 0xac
0000            257   _ET1            BIT 0xab
0000            258   _EX1            BIT 0xaa
0000            259   _ET0            BIT 0xa9
0000            260   _EX0            BIT 0xa8
0000            261   _P3_0           BIT 0xb0
0000            262   _P3_1           BIT 0xb1
0000            263   _P3_2           BIT 0xb2
0000            264   _P3_3           BIT 0xb3
0000            265   _P3_4           BIT 0xb4
0000            266   _P3_5           BIT 0xb5
0000            267   _P3_6           BIT 0xb6
0000            268   _P3_7           BIT 0xb7
0000            269   _IP_7           BIT 0xbf
0000            270   _PSPI0          BIT 0xbe
0000            271   _PT2            BIT 0xbd
0000            272   _PS0            BIT 0xbc
0000            273   _PT1            BIT 0xbb
0000            274   _PX1            BIT 0xba
0000            275   _PT0            BIT 0xb9
0000            276   _PX0            BIT 0xb8
0000            277   _MASTER0        BIT 0xc7
0000            278   _TXMODE0        BIT 0xc6
0000            279   _STA0           BIT 0xc5
0000            280   _STO0           BIT 0xc4
0000            281   _ACKRQ0         BIT 0xc3
0000            282   _ARBLOST0       BIT 0xc2
0000            283   _ACK0           BIT 0xc1
0000            284   _SI0            BIT 0xc0
0000            285   _MASTER1        BIT 0xc7
0000            286   _TXMODE1        BIT 0xc6
0000            287   _STA1           BIT 0xc5
0000            288   _STO1           BIT 0xc4
0000            289   _ACKRQ1         BIT 0xc3
0000            290   _ARBLOST1       BIT 0xc2
0000            291   _ACK1           BIT 0xc1
0000            292   _SI1            BIT 0xc0
0000            293   _TF2            BIT 0xcf
0000            294   _TF2H           BIT 0xcf
0000            295   _TF2L           BIT 0xce
0000            296   _TF2LEN         BIT 0xcd
0000            297   _TF2CEN         BIT 0xcc
0000            298   _T2SPLIT        BIT 0xcb
0000            299   _TR2            BIT 0xca
0000            300   _T2CSS          BIT 0xc9
0000            301   _T2XCLK         BIT 0xc8
0000            302   _TF5H           BIT 0xcf
0000            303   _TF5L           BIT 0xce
0000            304   _TF5LEN         BIT 0xcd
0000            305   _TMR5CN_4       BIT 0xcc
0000            306   _T5SPLIT        BIT 0xcb
0000            307   _TR5            BIT 0xca
0000            308   _TMR5CN_1       BIT 0xc9
0000            309   _T5XCLK         BIT 0xc8
0000            310   _CY             BIT 0xd7
0000            311   _AC             BIT 0xd6
0000            312   _F0             BIT 0xd5
0000            313   _RS1            BIT 0xd4
0000            314   _RS0            BIT 0xd3
0000            315   _OV             BIT 0xd2
0000            316   _F1             BIT 0xd1
0000            317   _PARITY         BIT 0xd0
0000            318   _CF             BIT 0xdf
0000            319   _CR             BIT 0xde
0000            320   _PCA0CN_5       BIT 0xde
0000            321   _CCF4           BIT 0xdc
0000            322   _CCF3           BIT 0xdb
0000            323   _CCF2           BIT 0xda
0000            324   _CCF1           BIT 0xd9
0000            325   _CCF0           BIT 0xd8
0000            326   _ACC_7          BIT 0xe7
0000            327   _ACC_6          BIT 0xe6
0000            328   _ACC_5          BIT 0xe5
0000            329   _ACC_4          BIT 0xe4
0000            330   _ACC_3          BIT 0xe3
0000            331   _ACC_2          BIT 0xe2
0000            332   _ACC_1          BIT 0xe1
0000            333   _ACC_0          BIT 0xe0
0000            334   _AD0EN          BIT 0xef
0000            335   _AD0TM          BIT 0xee
0000            336   _AD0INT         BIT 0xed
0000            337   _AD0BUSY        BIT 0xec
0000            338   _AD0WINT        BIT 0xeb
0000            339   _AD0CM2         BIT 0xea
0000            340   _AD0CM1         BIT 0xe9
0000            341   _AD0CM0         BIT 0xe8
0000            342   _B_7            BIT 0xf7
0000            343   _B_6            BIT 0xf6
0000            344   _B_5            BIT 0xf5
0000            345   _B_4            BIT 0xf4
0000            346   _B_3            BIT 0xf3
0000            347   _B_2            BIT 0xf2
0000            348   _B_1            BIT 0xf1
0000            349   _B_0            BIT 0xf0
0000            350   _SPIF           BIT 0xff
0000            351   _WCOL           BIT 0xfe
0000            352   _MODF           BIT 0xfd
0000            353   _RXOVRN         BIT 0xfc
0000            354   _NSSMD1         BIT 0xfb
0000            355   _NSSMD0         BIT 0xfa
0000            356   _TXBMT          BIT 0xf9
0000            357   _SPIEN          BIT 0xf8
0000            358   ;--------------------------------------------------------
0000            359   ; overlayable register banks
0000            360   ;--------------------------------------------------------
0000            361            rbank0 segment data overlay
0000            362   ;--------------------------------------------------------
0000            363   ; internal ram data
0000            364   ;--------------------------------------------------------
0000            365            rseg R_DSEG
0000            366   ;--------------------------------------------------------
0000            367   ; overlayable items in internal ram 
0000            368   ;--------------------------------------------------------
0000            369            rseg R_OSEG
0000            370   ;--------------------------------------------------------
0000            371   ; indirectly addressable internal ram data
0000            372   ;--------------------------------------------------------
0000            373            rseg R_ISEG
0000            374   ;--------------------------------------------------------
0000            375   ; absolute internal ram data
0000            376   ;--------------------------------------------------------
0000            377            DSEG
0000            378   ;--------------------------------------------------------
0000            379   ; bit data
0000            380   ;--------------------------------------------------------
0000            381            rseg R_BSEG
0000            382   ;--------------------------------------------------------
0000            383   ; paged external ram data
0000            384   ;--------------------------------------------------------
0000            385            rseg R_PSEG
0000            386   ;--------------------------------------------------------
0000            387   ; external ram data
0000            388   ;--------------------------------------------------------
0000            389            rseg R_XSEG
0000            390   ;--------------------------------------------------------
0000            391   ; absolute external ram data
0000            392   ;--------------------------------------------------------
0000            393            XSEG
0000            394   ;--------------------------------------------------------
0000            395   ; external initialized ram data
0000            396   ;--------------------------------------------------------
0000            397            rseg R_IXSEG
0000            398            rseg R_HOME
0000            399            rseg R_GSINIT
0000            400            rseg R_CSEG
0000            401   ;--------------------------------------------------------
0000            402   ; Reset entry point and interrupt vectors
0000            403   ;--------------------------------------------------------
0000            404            CSEG at 0x0000
0000 020100     405            ljmp    _crt0
000B            406            CSEG at 0x000b
000B 020100     407            ljmp    _Timer0_ISR
001B            408            CSEG at 0x001b
001B 020100     409            ljmp    _Timer1_ISR
002B            410            CSEG at 0x002b
002B 020100     411            ljmp    _Timer2_ISR
005B            412            CSEG at 0x005b
005B 020100     413            ljmp    _PCA_ISR
0073            414            CSEG at 0x0073
0073 020100     415            ljmp    _Timer3_ISR
009B            416            CSEG at 0x009b
009B 020100     417            ljmp    _Timer4_ISR
00A3            418            CSEG at 0x00a3
00A3 020100     419            ljmp    _Timer5_ISR
00A6            420   ;--------------------------------------------------------
00A6            421   ; global & static initialisations
00A6            422   ;--------------------------------------------------------
0000            423            rseg R_HOME
0000            424            rseg R_GSINIT
0000            425            rseg R_GSINIT
0000            426   ;--------------------------------------------------------
0000            427   ; data variables initialization
0000            428   ;--------------------------------------------------------
0000            429            rseg R_DINIT
0000            430            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            431   ;--------------------------------------------------------
0000            432   ; code
0000            433   ;--------------------------------------------------------
0000            434            rseg R_CSEG
0000            435   ;------------------------------------------------------------
0000            436   ;Allocation info for local variables in function '_c51_external_startup'
0000            437   ;------------------------------------------------------------
0000            438   ;------------------------------------------------------------
0000            439   ;        All_timers.c:42: char _c51_external_startup (void)
0000            440   ;        -----------------------------------------
0000            441   ;         function _c51_external_startup
0000            442   ;        -----------------------------------------
0000            443   __c51_external_startup:
0000            444            using   0
0000            445   ;        All_timers.c:44: PCA0MD&=(~WDTE) ;    // DISABLE WDT: clear Watchdog Enable bit
0000 53D9BF     446            anl     _PCA0MD,#0xBF
0003            447   ;        All_timers.c:45: VDM0CN=0x80; // enable VDD monitor
0003 75FF80     448            mov     _VDM0CN,#0x80
0006            449   ;        All_timers.c:46: RSTSRC=0x02|0x04; // Enable reset on missing clock detector and VDD
0006 75EF06     450            mov     _RSTSRC,#0x06
0009            451   ;        All_timers.c:54: CLKSEL|=0b_0000_0011; // SYSCLK derived from the Internal High-Frequency Oscillator / 1.
0009 43A903     452            orl     _CLKSEL,#0x03
000C            453   ;        All_timers.c:58: OSCICN |= 0x03; // Configure internal oscillator for its maximum frequency
000C 43B203     454            orl     _OSCICN,#0x03
000F            455   ;        All_timers.c:61: P1MDOUT|=0b_0001_1111;
000F 43A51F     456            orl     _P1MDOUT,#0x1F
0012            457   ;        All_timers.c:62: P2MDOUT|=0b_0111_1111;
0012 43A67F     458            orl     _P2MDOUT,#0x7F
0015            459   ;        All_timers.c:63: XBR1     = 0x40; // Enable crossbar and weak pull-ups
0015 75E240     460            mov     _XBR1,#0x40
0018            461   ;        All_timers.c:66: TR0=0;
0018 C28C       462            clr     _TR0
001A            463   ;        All_timers.c:67: TF0=0;
001A C28D       464            clr     _TF0
001C            465   ;        All_timers.c:68: CKCON|=0b_0000_0100; // Timer 0 uses the system clock
001C 438E04     466            orl     _CKCON,#0x04
001F            467   ;        All_timers.c:69: TMOD&=0xf0;
001F 5389F0     468            anl     _TMOD,#0xF0
0022            469   ;        All_timers.c:70: TMOD|=0x01; // Timer 0 in mode 1: 16-bit timer
0022 438901     470            orl     _TMOD,#0x01
0025            471   ;        All_timers.c:72: TH0=(65536L-(SYSCLK/(2*TIMER_0_FREQ)))/0x100;
0025 758CA2     472            mov     _TH0,#0xA2
0028            473   ;        All_timers.c:73: TL0=(65536L-(SYSCLK/(2*TIMER_0_FREQ)))%0x100;
0028 758A40     474            mov     _TL0,#0x40
002B            475   ;        All_timers.c:74: ET0=1;     // Enable Timer0 interrupts
002B D2A9       476            setb    _ET0
002D            477   ;        All_timers.c:75: TR0=1;     // Start Timer0
002D D28C       478            setb    _TR0
002F            479   ;        All_timers.c:78: TR1=0;
002F C28E       480            clr     _TR1
0031            481   ;        All_timers.c:79: TF1=0;
0031 C28F       482            clr     _TF1
0033            483   ;        All_timers.c:80: CKCON|=0b_0000_1000; // Timer 1 uses the system clock
0033 438E08     484            orl     _CKCON,#0x08
0036            485   ;        All_timers.c:81: TMOD&=0x0f;
0036 53890F     486            anl     _TMOD,#0x0F
0039            487   ;        All_timers.c:82: TMOD|=0x10; // Timer 1 in mode 1: 16-bit timer
0039 438910     488            orl     _TMOD,#0x10
003C            489   ;        All_timers.c:84: TH1=(65536L-(SYSCLK/(2*TIMER_1_FREQ)))/0x100;
003C 758DD1     490            mov     _TH1,#0xD1
003F            491   ;        All_timers.c:85: TL1=(65536L-(SYSCLK/(2*TIMER_1_FREQ)))%0x100;
003F 758B20     492            mov     _TL1,#0x20
0042            493   ;        All_timers.c:86: ET1=1;     // Enable Timer1 interrupts
0042 D2AB       494            setb    _ET1
0044            495   ;        All_timers.c:87: TR1=1;     // Start Timer1
0044 D28E       496            setb    _TR1
0046            497   ;        All_timers.c:90: TMR2CN=0x00;   // Stop Timer2; Clear TF2;
0046 75C800     498            mov     _TMR2CN,#0x00
0049            499   ;        All_timers.c:91: CKCON|=0b_0001_0000; // Timer 2 uses the system clock
0049 438E10     500            orl     _CKCON,#0x10
004C            501   ;        All_timers.c:92: TMR2RL=(0x10000L-(SYSCLK/(2*TIMER_2_FREQ))); // Initialize reload value
004C 75CAC0     502            mov     _TMR2RL,#0xC0
004F 75CBE0     503            mov     (_TMR2RL >> 8),#0xE0
0052            504   ;        All_timers.c:93: TMR2=0xffff;   // Set to reload immediately
0052 75CCFF     505            mov     _TMR2,#0xFF
0055 75CDFF     506            mov     (_TMR2 >> 8),#0xFF
0058            507   ;        All_timers.c:94: ET2=1;         // Enable Timer2 interrupts
0058 D2AD       508            setb    _ET2
005A            509   ;        All_timers.c:95: TR2=1;         // Start Timer2 (TMR2CN is bit addressable)
005A D2CA       510            setb    _TR2
005C            511   ;        All_timers.c:98: TMR3CN=0x00;   // Stop Timer3; Clear TF3;
005C 759100     512            mov     _TMR3CN,#0x00
005F            513   ;        All_timers.c:99: CKCON|=0b_0100_0000; // Timer 3 uses the system clock
005F 438E40     514            orl     _CKCON,#0x40
0062            515   ;        All_timers.c:100: TMR3RL=(0x10000L-(SYSCLK/(2*TIMER_3_FREQ))); // Initialize reload value
0062 759290     516            mov     _TMR3RL,#0x90
0065 7593E8     517            mov     (_TMR3RL >> 8),#0xE8
0068            518   ;        All_timers.c:101: TMR3=0xffff;   // Set to reload immediately
0068 7594FF     519            mov     _TMR3,#0xFF
006B 7595FF     520            mov     (_TMR3 >> 8),#0xFF
006E            521   ;        All_timers.c:102: EIE1|=ET3;     // Enable Timer3 interrupts
006E 43E680     522            orl     _EIE1,#0x80
0071            523   ;        All_timers.c:103: TMR3CN|=TR3;   // Start Timer3 (TMR3CN is not bit addressable)
0071 439104     524            orl     _TMR3CN,#0x04
0074            525   ;        All_timers.c:106: SFRPAGE=0xf;   // WARNING: Select SFR page 0xf!
0074 75BF0F     526            mov     _SFRPAGE,#0x0F
0077            527   ;        All_timers.c:107: TMR4CN=0x00;   // Stop Timer4; Clear TF4;
0077 759100     528            mov     _TMR4CN,#0x00
007A            529   ;        All_timers.c:108: CKCON1|=0b_0000_0001; // Timer 4 uses the system clock
007A 43E401     530            orl     _CKCON1,#0x01
007D            531   ;        All_timers.c:109: TMR4RL=(0x10000L-(SYSCLK/(2*TIMER_4_FREQ))); // Initialize reload value
007D 759240     532            mov     _TMR4RL,#0x40
0080 7593ED     533            mov     (_TMR4RL >> 8),#0xED
0083            534   ;        All_timers.c:110: TMR4=0xffff;   // Set to reload immediately
0083 7594FF     535            mov     _TMR4,#0xFF
0086 7595FF     536            mov     (_TMR4 >> 8),#0xFF
0089            537   ;        All_timers.c:111: EIE2|=ET4;     // Enable Timer3 interrupts
0089 43E710     538            orl     _EIE2,#0x10
008C            539   ;        All_timers.c:112: TMR4CN|=TR4;   // Start Timer4 (TMR4CN is not bit addressable)
008C 439104     540            orl     _TMR4CN,#0x04
008F            541   ;        All_timers.c:115: SFRPAGE=0xf;   // WARNING: Select SFR page 0xf!
008F 75BF0F     542            mov     _SFRPAGE,#0x0F
0092            543   ;        All_timers.c:116: TMR5CN=0x00;   // Stop Timer5; Clear TF5;
0092 75C800     544            mov     _TMR5CN,#0x00
0095            545   ;        All_timers.c:117: CKCON1|=0b_0000_0100; // Timer 5 uses the system clock
0095 43E404     546            orl     _CKCON1,#0x04
0098            547   ;        All_timers.c:118: TMR5RL=(0x10000L-(SYSCLK/(2*TIMER_5_FREQ))); // Initialize reload value
0098 75CA60     548            mov     _TMR5RL,#0x60
009B 75CBF0     549            mov     (_TMR5RL >> 8),#0xF0
009E            550   ;        All_timers.c:119: TMR5=0xffff;   // Set to reload immediately
009E 75CCFF     551            mov     _TMR5,#0xFF
00A1 75CDFF     552            mov     (_TMR5 >> 8),#0xFF
00A4            553   ;        All_timers.c:120: EIE2|=ET5;     // Enable Timer5 interrupts
00A4 43E720     554            orl     _EIE2,#0x20
00A7            555   ;        All_timers.c:121: TR5=1;         // Start Timer5 (TMR5CN is bit addressable)
00A7 D2CA       556            setb    _TR5
00A9            557   ;        All_timers.c:125: SFRPAGE=0x0;
00A9 75BF00     558            mov     _SFRPAGE,#0x00
00AC            559   ;        All_timers.c:126: PCA0MD=0x00; // Disable and clear everything in the PCA
00AC 75D900     560            mov     _PCA0MD,#0x00
00AF            561   ;        All_timers.c:127: PCA0L=0; // Initialize the PCA counter to zero
00AF 75F900     562            mov     _PCA0L,#0x00
00B2            563   ;        All_timers.c:128: PCA0H=0;
00B2 75FA00     564            mov     _PCA0H,#0x00
00B5            565   ;        All_timers.c:129: PCA0MD=CPS2; // Configure PCA.  CLK is the frequency input for the PCA
00B5 75D908     566            mov     _PCA0MD,#0x08
00B8            567   ;        All_timers.c:131: PCA0CPM0=PCA0CPM1=PCA0CPM2=PCA0CPM3=PCA0CPM4=ECOM|MAT|ECCF;
00B8 75DE49     568            mov     _PCA0CPM4,#0x49
00BB 75DD49     569            mov     _PCA0CPM3,#0x49
00BE 75DC49     570            mov     _PCA0CPM2,#0x49
00C1 75DB49     571            mov     _PCA0CPM1,#0x49
00C4 75DA49     572            mov     _PCA0CPM0,#0x49
00C7            573   ;        All_timers.c:133: PCA0CPL0=(SYSCLK/(2*PCA_0_FREQ))%0x100; //Always write low byte first!
00C7 75FB64     574            mov     _PCA0CPL0,#0x64
00CA            575   ;        All_timers.c:134: PCA0CPH0=(SYSCLK/(2*PCA_0_FREQ))/0x100;
00CA 75FC0D     576            mov     _PCA0CPH0,#0x0D
00CD            577   ;        All_timers.c:136: PCA0CPL1=(SYSCLK/(2*PCA_1_FREQ))%0x100; //Always write low byte first!
00CD 75E9B8     578            mov     _PCA0CPL1,#0xB8
00D0            579   ;        All_timers.c:137: PCA0CPH1=(SYSCLK/(2*PCA_1_FREQ))/0x100;
00D0 75EA0B     580            mov     _PCA0CPH1,#0x0B
00D3            581   ;        All_timers.c:139: PCA0CPL2=(SYSCLK/(2*PCA_2_FREQ))%0x100; //Always write low byte first!
00D3 75EB6A     582            mov     _PCA0CPL2,#0x6A
00D6            583   ;        All_timers.c:140: PCA0CPH2=(SYSCLK/(2*PCA_2_FREQ))/0x100;
00D6 75EC0A     584            mov     _PCA0CPH2,#0x0A
00D9            585   ;        All_timers.c:142: PCA0CPL3=(SYSCLK/(2*PCA_3_FREQ))%0x100; //Always write low byte first!
00D9 75ED60     586            mov     _PCA0CPL3,#0x60
00DC            587   ;        All_timers.c:143: PCA0CPH3=(SYSCLK/(2*PCA_3_FREQ))/0x100;
00DC 75EE09     588            mov     _PCA0CPH3,#0x09
00DF            589   ;        All_timers.c:145: PCA0CPL4=(SYSCLK/(2*PCA_4_FREQ))%0x100; //Always write low byte first!
00DF 75FD85     590            mov     _PCA0CPL4,#0x85
00E2            591   ;        All_timers.c:146: PCA0CPH4=(SYSCLK/(2*PCA_4_FREQ))/0x100;
00E2 75FE08     592            mov     _PCA0CPH4,#0x08
00E5            593   ;        All_timers.c:147: CR=1; // Enable PCA counter
00E5 D2DE       594            setb    _CR
00E7            595   ;        All_timers.c:148: EIE1|=EPCA0; // Enable PCA interrupts
00E7 43E610     596            orl     _EIE1,#0x10
00EA            597   ;        All_timers.c:150: EA=1; // Enable interrupts
00EA D2AF       598            setb    _EA
00EC            599   ;        All_timers.c:152: return 0;
00EC 758200     600            mov     dpl,#0x00
00EF 22         601            ret
00F0            602   ;------------------------------------------------------------
00F0            603   ;Allocation info for local variables in function 'Timer0_ISR'
00F0            604   ;------------------------------------------------------------
00F0            605   ;------------------------------------------------------------
00F0            606   ;        All_timers.c:155: void Timer0_ISR (void) interrupt INTERRUPT_TIMER0
00F0            607   ;        -----------------------------------------
00F0            608   ;         function Timer0_ISR
00F0            609   ;        -----------------------------------------
00F0            610   _Timer0_ISR:
00F0            611   ;        All_timers.c:157: PUSH_SFRPAGE;
00F0 C0BF       612             push _SFRPAGE 
00F2            613   ;        All_timers.c:158: SFRPAGE=0x0;
00F2 75BF00     614            mov     _SFRPAGE,#0x00
00F5            615   ;        All_timers.c:160: TH0=(0x10000L-(SYSCLK/(2*TIMER_0_FREQ)))/0x100;
00F5 758CA2     616            mov     _TH0,#0xA2
00F8            617   ;        All_timers.c:161: TL0=(0x10000L-(SYSCLK/(2*TIMER_0_FREQ)))%0x100;
00F8 758A40     618            mov     _TL0,#0x40
00FB            619   ;        All_timers.c:162: TIMER_OUT_0=!TIMER_OUT_0;
00FB B2A0       620            cpl     _P2_0
00FD            621   ;        All_timers.c:163: POP_SFRPAGE;
00FD D0BF       622             pop _SFRPAGE 
00FF 32         623            reti
0100            624   ;        eliminated unneeded push/pop psw
0100            625   ;        eliminated unneeded push/pop dpl
0100            626   ;        eliminated unneeded push/pop dph
0100            627   ;        eliminated unneeded push/pop b
0100            628   ;        eliminated unneeded push/pop acc
0100            629   ;------------------------------------------------------------
0100            630   ;Allocation info for local variables in function 'Timer1_ISR'
0100            631   ;------------------------------------------------------------
0100            632   ;------------------------------------------------------------
0100            633   ;        All_timers.c:166: void Timer1_ISR (void) interrupt INTERRUPT_TIMER1
0100            634   ;        -----------------------------------------
0100            635   ;         function Timer1_ISR
0100            636   ;        -----------------------------------------
0100            637   _Timer1_ISR:
0100            638   ;        All_timers.c:168: PUSH_SFRPAGE;
0100 C0BF       639             push _SFRPAGE 
0102            640   ;        All_timers.c:169: SFRPAGE=0x0;
0102 75BF00     641            mov     _SFRPAGE,#0x00
0105            642   ;        All_timers.c:171: TH1=(0x10000L-(SYSCLK/(2*TIMER_1_FREQ)))/0x100;
0105 758DD1     643            mov     _TH1,#0xD1
0108            644   ;        All_timers.c:172: TL1=(0x10000L-(SYSCLK/(2*TIMER_1_FREQ)))%0x100;
0108 758B20     645            mov     _TL1,#0x20
010B            646   ;        All_timers.c:173: TIMER_OUT_1=!TIMER_OUT_1;
010B B2A1       647            cpl     _P2_1
010D            648   ;        All_timers.c:174: POP_SFRPAGE;
010D D0BF       649             pop _SFRPAGE 
010F 32         650            reti
0110            651   ;        eliminated unneeded push/pop psw
0110            652   ;        eliminated unneeded push/pop dpl
0110            653   ;        eliminated unneeded push/pop dph
0110            654   ;        eliminated unneeded push/pop b
0110            655   ;        eliminated unneeded push/pop acc
0110            656   ;------------------------------------------------------------
0110            657   ;Allocation info for local variables in function 'Timer2_ISR'
0110            658   ;------------------------------------------------------------
0110            659   ;------------------------------------------------------------
0110            660   ;        All_timers.c:177: void Timer2_ISR (void) interrupt INTERRUPT_TIMER2
0110            661   ;        -----------------------------------------
0110            662   ;         function Timer2_ISR
0110            663   ;        -----------------------------------------
0110            664   _Timer2_ISR:
0110            665   ;        All_timers.c:179: PUSH_SFRPAGE;
0110 C0BF       666             push _SFRPAGE 
0112            667   ;        All_timers.c:180: SFRPAGE=0x0;
0112 75BF00     668            mov     _SFRPAGE,#0x00
0115            669   ;        All_timers.c:181: TF2H = 0; // Clear Timer2 interrupt flag
0115 C2CF       670            clr     _TF2H
0117            671   ;        All_timers.c:182: TIMER_OUT_2=!TIMER_OUT_2;
0117 B2A2       672            cpl     _P2_2
0119            673   ;        All_timers.c:183: POP_SFRPAGE;
0119 D0BF       674             pop _SFRPAGE 
011B 32         675            reti
011C            676   ;        eliminated unneeded push/pop psw
011C            677   ;        eliminated unneeded push/pop dpl
011C            678   ;        eliminated unneeded push/pop dph
011C            679   ;        eliminated unneeded push/pop b
011C            680   ;        eliminated unneeded push/pop acc
011C            681   ;------------------------------------------------------------
011C            682   ;Allocation info for local variables in function 'Timer3_ISR'
011C            683   ;------------------------------------------------------------
011C            684   ;------------------------------------------------------------
011C            685   ;        All_timers.c:186: void Timer3_ISR (void) interrupt INTERRUPT_TIMER3
011C            686   ;        -----------------------------------------
011C            687   ;         function Timer3_ISR
011C            688   ;        -----------------------------------------
011C            689   _Timer3_ISR:
011C            690   ;        All_timers.c:188: PUSH_SFRPAGE;
011C C0BF       691             push _SFRPAGE 
011E            692   ;        All_timers.c:189: SFRPAGE=0x0;
011E 75BF00     693            mov     _SFRPAGE,#0x00
0121            694   ;        All_timers.c:190: TMR3CN&=~TF3H; // Clear Timer3 interrupt flag
0121 53917F     695            anl     _TMR3CN,#0x7F
0124            696   ;        All_timers.c:191: TIMER_OUT_3=!TIMER_OUT_3;
0124 B2A3       697            cpl     _P2_3
0126            698   ;        All_timers.c:192: POP_SFRPAGE;
0126 D0BF       699             pop _SFRPAGE 
0128 32         700            reti
0129            701   ;        eliminated unneeded push/pop psw
0129            702   ;        eliminated unneeded push/pop dpl
0129            703   ;        eliminated unneeded push/pop dph
0129            704   ;        eliminated unneeded push/pop b
0129            705   ;        eliminated unneeded push/pop acc
0129            706   ;------------------------------------------------------------
0129            707   ;Allocation info for local variables in function 'Timer4_ISR'
0129            708   ;------------------------------------------------------------
0129            709   ;------------------------------------------------------------
0129            710   ;        All_timers.c:195: void Timer4_ISR (void) interrupt INTERRUPT_TIMER4
0129            711   ;        -----------------------------------------
0129            712   ;         function Timer4_ISR
0129            713   ;        -----------------------------------------
0129            714   _Timer4_ISR:
0129            715   ;        All_timers.c:197: PUSH_SFRPAGE;
0129 C0BF       716             push _SFRPAGE 
012B            717   ;        All_timers.c:198: SFRPAGE=0xf;
012B 75BF0F     718            mov     _SFRPAGE,#0x0F
012E            719   ;        All_timers.c:199: TMR4CN&=~TF4H; // Clear Timer4 interrupt flag
012E 53917F     720            anl     _TMR4CN,#0x7F
0131            721   ;        All_timers.c:200: TIMER_OUT_4=!TIMER_OUT_4;
0131 B2A4       722            cpl     _P2_4
0133            723   ;        All_timers.c:201: POP_SFRPAGE;
0133 D0BF       724             pop _SFRPAGE 
0135 32         725            reti
0136            726   ;        eliminated unneeded push/pop psw
0136            727   ;        eliminated unneeded push/pop dpl
0136            728   ;        eliminated unneeded push/pop dph
0136            729   ;        eliminated unneeded push/pop b
0136            730   ;        eliminated unneeded push/pop acc
0136            731   ;------------------------------------------------------------
0136            732   ;Allocation info for local variables in function 'Timer5_ISR'
0136            733   ;------------------------------------------------------------
0136            734   ;------------------------------------------------------------
0136            735   ;        All_timers.c:204: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
0136            736   ;        -----------------------------------------
0136            737   ;         function Timer5_ISR
0136            738   ;        -----------------------------------------
0136            739   _Timer5_ISR:
0136            740   ;        All_timers.c:206: PUSH_SFRPAGE;
0136 C0BF       741             push _SFRPAGE 
0138            742   ;        All_timers.c:207: SFRPAGE=0xf;
0138 75BF0F     743            mov     _SFRPAGE,#0x0F
013B            744   ;        All_timers.c:208: TF5H = 0; // Clear Timer5 interrupt flag
013B C2CF       745            clr     _TF5H
013D            746   ;        All_timers.c:209: SFRPAGE=0xf;
013D 75BF0F     747            mov     _SFRPAGE,#0x0F
0140            748   ;        All_timers.c:210: TIMER_OUT_5=!TIMER_OUT_5;
0140 B2A5       749            cpl     _P2_5
0142            750   ;        All_timers.c:211: POP_SFRPAGE;
0142 D0BF       751             pop _SFRPAGE 
0144 32         752            reti
0145            753   ;        eliminated unneeded push/pop psw
0145            754   ;        eliminated unneeded push/pop dpl
0145            755   ;        eliminated unneeded push/pop dph
0145            756   ;        eliminated unneeded push/pop b
0145            757   ;        eliminated unneeded push/pop acc
0145            758   ;------------------------------------------------------------
0145            759   ;Allocation info for local variables in function 'PCA_ISR'
0145            760   ;------------------------------------------------------------
0145            761   ;j                         Allocated to registers r2 r3 
0145            762   ;------------------------------------------------------------
0145            763   ;        All_timers.c:214: void PCA_ISR (void) interrupt INTERRUPT_PCA0
0145            764   ;        -----------------------------------------
0145            765   ;         function PCA_ISR
0145            766   ;        -----------------------------------------
0145            767   _PCA_ISR:
0145 C0E0       768            push    acc
0147 C002       769            push    ar2
0149 C003       770            push    ar3
014B C004       771            push    ar4
014D C005       772            push    ar5
014F C006       773            push    ar6
0151 C007       774            push    ar7
0153 C0D0       775            push    psw
0155 75D000     776            mov     psw,#0x00
0158            777   ;        All_timers.c:218: PUSH_SFRPAGE;
0158 C0BF       778             push _SFRPAGE 
015A            779   ;        All_timers.c:219: SFRPAGE=0x0;
015A 75BF00     780            mov     _SFRPAGE,#0x00
015D            781   ;        All_timers.c:221: if (CCF0)
015D 30D830     782            jnb     _CCF0,L009002?
0160            783   ;        All_timers.c:223: j=(PCA0CPH0*0x100+PCA0CPL0)+(SYSCLK/(2L*PCA_0_FREQ));
0160 ABFC       784            mov     r3,_PCA0CPH0
0162 7A00       785            mov     r2,#0x00
0164 ACFB       786            mov     r4,_PCA0CPL0
0166 7D00       787            mov     r5,#0x00
0168 EC         788            mov     a,r4
0169 2A         789            add     a,r2
016A FA         790            mov     r2,a
016B ED         791            mov     a,r5
016C 3B         792            addc    a,r3
016D FB         793            mov     r3,a
016E 33         794            rlc     a
016F 95E0       795            subb    a,acc
0171 FC         796            mov     r4,a
0172 FD         797            mov     r5,a
0173 7464       798            mov     a,#0x64
0175 2A         799            add     a,r2
0176 FA         800            mov     r2,a
0177 740D       801            mov     a,#0x0D
0179 3B         802            addc    a,r3
017A FB         803            mov     r3,a
017B E4         804            clr     a
017C 3C         805            addc    a,r4
017D E4         806            clr     a
017E 3D         807            addc    a,r5
017F            808   ;        All_timers.c:224: PCA0CPL0=j%0x100; //Always write low byte first!
017F 8A04       809            mov     ar4,r2
0181 8CFB       810            mov     _PCA0CPL0,r4
0183            811   ;        All_timers.c:225: PCA0CPH0=j/0x100;
0183 8B04       812            mov     ar4,r3
0185 7D00       813            mov     r5,#0x00
0187 8CFC       814            mov     _PCA0CPH0,r4
0189            815   ;        All_timers.c:226: CCF0=0;
0189 C2D8       816            clr     _CCF0
018B            817   ;        All_timers.c:227: PCA_OUT_0=!PCA_OUT_0;
018B B290       818            cpl     _P1_0
018D            819   L009002?:
018D            820   ;        All_timers.c:229: if (CCF1)
018D 30D970     821            jnb     _CCF1,L009004?
0190            822   ;        All_timers.c:231: j=(PCA0CPH1*0x100+PCA0CPL1)+(SYSCLK/(2L*PCA_1_FREQ));
0190 ADEA       823            mov     r5,_PCA0CPH1
0192 7C00       824            mov     r4,#0x00
0194 AEE9       825            mov     r6,_PCA0CPL1
0196 7F00       826            mov     r7,#0x00
0198 EE         827            mov     a,r6
0199 2C         828            add     a,r4
019A FC         829            mov     r4,a
019B EF         830            mov     a,r7
019C 3D         831            addc    a,r5
019D FD         832            mov     r5,a
019E 33         833            rlc     a
019F 95E0       834            subb    a,acc
01A1 FE         835            mov     r6,a
01A2 FF         836            mov     r7,a
01A3 74B8       837            mov     a,#0xB8
01A5 2C         838            add     a,r4
01A6 FC         839            mov     r4,a
01A7 740B       840            mov     a,#0x0B
01A9 3D         841            addc    a,r5
01AA FD         842            mov     r5,a
01AB E4         843            clr     a
01AC 3E         844            addc    a,r6
01AD FE         845            mov     r6,a
01AE E4         846            clr     a
01AF 3F         847            addc    a,r7
01B0 FF         848            mov     r7,a
01B1 8C02       849            mov     ar2,r4
01B3 8D03       850            mov     ar3,r5
01B5            851   ;        All_timers.c:232: PCA0CPL1=j%0x100; //Always write low byte first!
01B5 8A04       852            mov     ar4,r2
01B7 8CE9       853            mov     _PCA0CPL1,r4
01B9            854   ;        All_timers.c:233: PCA0CPH1=j/0x100;
01B9 8B04       855            mov     ar4,r3
01BB 7D00       856            mov     r5,#0x00
01BD 8CEA       857            mov     _PCA0CPH1,r4
01BF            858   ;        All_timers.c:234: CCF1=0;
01BF C2D9       859            clr     _CCF1
01C1            860   ;        All_timers.c:235: PCA_OUT_1=!PCA_OUT_1;
01C1 B291       861            cpl     _P1_1
01C3            862   L009004?:
01C3            863   ;        All_timers.c:237: if (CCF2)
01C3 30DAB0     864            jnb     _CCF2,L009006?
01C6            865   ;        All_timers.c:239: j=(PCA0CPH2*0x100+PCA0CPL2)+(SYSCLK/(2L*PCA_2_FREQ));
01C6 ADEC       866            mov     r5,_PCA0CPH2
01C8 7C00       867            mov     r4,#0x00
01CA AEEB       868            mov     r6,_PCA0CPL2
01CC 7F00       869            mov     r7,#0x00
01CE EE         870            mov     a,r6
01CF 2C         871            add     a,r4
01D0 FC         872            mov     r4,a
01D1 EF         873            mov     a,r7
01D2 3D         874            addc    a,r5
01D3 FD         875            mov     r5,a
01D4 33         876            rlc     a
01D5 95E0       877            subb    a,acc
01D7 FE         878            mov     r6,a
01D8 FF         879            mov     r7,a
01D9 746A       880            mov     a,#0x6A
01DB 2C         881            add     a,r4
01DC FC         882            mov     r4,a
01DD 740A       883            mov     a,#0x0A
01DF 3D         884            addc    a,r5
01E0 FD         885            mov     r5,a
01E1 E4         886            clr     a
01E2 3E         887            addc    a,r6
01E3 FE         888            mov     r6,a
01E4 E4         889            clr     a
01E5 3F         890            addc    a,r7
01E6 FF         891            mov     r7,a
01E7 8C02       892            mov     ar2,r4
01E9 8D03       893            mov     ar3,r5
01EB            894   ;        All_timers.c:240: PCA0CPL2=j%0x100; //Always write low byte first!
01EB 8A04       895            mov     ar4,r2
01ED 8CEB       896            mov     _PCA0CPL2,r4
01EF            897   ;        All_timers.c:241: PCA0CPH2=j/0x100;
01EF 8B04       898            mov     ar4,r3
01F1 7D00       899            mov     r5,#0x00
01F3 8CEC       900            mov     _PCA0CPH2,r4
01F5            901   ;        All_timers.c:242: CCF2=0;
01F5 C2DA       902            clr     _CCF2
01F7            903   ;        All_timers.c:243: PCA_OUT_2=!PCA_OUT_2;
01F7 B292       904            cpl     _P1_2
01F9            905   L009006?:
01F9            906   ;        All_timers.c:245: if (CCF3)
01F9 30DBF0     907            jnb     _CCF3,L009008?
01FC            908   ;        All_timers.c:247: j=(PCA0CPH3*0x100+PCA0CPL3)+(SYSCLK/(2L*PCA_3_FREQ));
01FC ADEE       909            mov     r5,_PCA0CPH3
01FE 7C00       910            mov     r4,#0x00
0200 AEED       911            mov     r6,_PCA0CPL3
0202 7F00       912            mov     r7,#0x00
0204 EE         913            mov     a,r6
0205 2C         914            add     a,r4
0206 FC         915            mov     r4,a
0207 EF         916            mov     a,r7
0208 3D         917            addc    a,r5
0209 FD         918            mov     r5,a
020A 33         919            rlc     a
020B 95E0       920            subb    a,acc
020D FE         921            mov     r6,a
020E FF         922            mov     r7,a
020F 7460       923            mov     a,#0x60
0211 2C         924            add     a,r4
0212 FC         925            mov     r4,a
0213 7409       926            mov     a,#0x09
0215 3D         927            addc    a,r5
0216 FD         928            mov     r5,a
0217 E4         929            clr     a
0218 3E         930            addc    a,r6
0219 FE         931            mov     r6,a
021A E4         932            clr     a
021B 3F         933            addc    a,r7
021C FF         934            mov     r7,a
021D 8C02       935            mov     ar2,r4
021F 8D03       936            mov     ar3,r5
0221            937   ;        All_timers.c:248: PCA0CPL3=j%0x100; //Always write low byte first!
0221 8A04       938            mov     ar4,r2
0223 8CED       939            mov     _PCA0CPL3,r4
0225            940   ;        All_timers.c:249: PCA0CPH3=j/0x100;
0225 8B04       941            mov     ar4,r3
0227 7D00       942            mov     r5,#0x00
0229 8CEE       943            mov     _PCA0CPH3,r4
022B            944   ;        All_timers.c:250: CCF3=0;
022B C2DB       945            clr     _CCF3
022D            946   ;        All_timers.c:251: PCA_OUT_3=!PCA_OUT_3;
022D B293       947            cpl     _P1_3
022F            948   L009008?:
022F            949   ;        All_timers.c:253: if (CCF4)
022F 30DC30     950            jnb     _CCF4,L009010?
0232            951   ;        All_timers.c:255: j=(PCA0CPH4*0x100+PCA0CPL4)+(SYSCLK/(2L*PCA_4_FREQ));
0232 ADFE       952            mov     r5,_PCA0CPH4
0234 7C00       953            mov     r4,#0x00
0236 AEFD       954            mov     r6,_PCA0CPL4
0238 7F00       955            mov     r7,#0x00
023A EE         956            mov     a,r6
023B 2C         957            add     a,r4
023C FC         958            mov     r4,a
023D EF         959            mov     a,r7
023E 3D         960            addc    a,r5
023F FD         961            mov     r5,a
0240 33         962            rlc     a
0241 95E0       963            subb    a,acc
0243 FE         964            mov     r6,a
0244 FF         965            mov     r7,a
0245 7485       966            mov     a,#0x85
0247 2C         967            add     a,r4
0248 FC         968            mov     r4,a
0249 7408       969            mov     a,#0x08
024B 3D         970            addc    a,r5
024C FD         971            mov     r5,a
024D E4         972            clr     a
024E 3E         973            addc    a,r6
024F FE         974            mov     r6,a
0250 E4         975            clr     a
0251 3F         976            addc    a,r7
0252 FF         977            mov     r7,a
0253 8C02       978            mov     ar2,r4
0255 8D03       979            mov     ar3,r5
0257            980   ;        All_timers.c:256: PCA0CPL4=j%0x100; //Always write low byte first!
0257 8A04       981            mov     ar4,r2
0259 7D00       982            mov     r5,#0x00
025B 8CFD       983            mov     _PCA0CPL4,r4
025D            984   ;        All_timers.c:257: PCA0CPH4=j/0x100;
025D 8B02       985            mov     ar2,r3
025F 7B00       986            mov     r3,#0x00
0261 8AFE       987            mov     _PCA0CPH4,r2
0263            988   ;        All_timers.c:258: CCF4=0;
0263 C2DC       989            clr     _CCF4
0265            990   ;        All_timers.c:259: PCA_OUT_4=!PCA_OUT_4;
0265 B294       991            cpl     _P1_4
0267            992   L009010?:
0267            993   ;        All_timers.c:262: CF=0;
0267 C2DF       994            clr     _CF
0269            995   ;        All_timers.c:263: POP_SFRPAGE;
0269 D0BF       996             pop _SFRPAGE 
026B D0D0       997            pop     psw
026D D007       998            pop     ar7
026F D006       999            pop     ar6
0271 D005      1000            pop     ar5
0273 D004      1001            pop     ar4
0275 D003      1002            pop     ar3
0277 D002      1003            pop     ar2
0279 D0E0      1004            pop     acc
027B 32        1005            reti
027C           1006   ;        eliminated unneeded push/pop dpl
027C           1007   ;        eliminated unneeded push/pop dph
027C           1008   ;        eliminated unneeded push/pop b
027C           1009   ;------------------------------------------------------------
027C           1010   ;Allocation info for local variables in function 'main'
027C           1011   ;------------------------------------------------------------
027C           1012   ;------------------------------------------------------------
027C           1013   ;        All_timers.c:266: void main (void)
027C           1014   ;        -----------------------------------------
027C           1015   ;         function main
027C           1016   ;        -----------------------------------------
027C           1017   _main:
027C           1018   ;        All_timers.c:268: while(1)
027C           1019   L010002?:
027C           1020   ;        All_timers.c:270: MAIN_OUT=!MAIN_OUT;
027C B2A6      1021            cpl     _P2_6
027E 8001      1022            sjmp    L010002?
0280           1023            rseg R_CSEG
0280           1024   
0000           1025            rseg R_XINIT
0000           1026   
0000           1027            rseg R_CONST
0000           1028   
00A6           1029            CSEG
00A6           1030   
00A6           1031   end
