0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Sat Apr 01 20:29:25 2017
0000              5   ;--------------------------------------------------------
                  5   $name motors
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _main
0000             28            public _uturn
0000             29            public _turncar
0000             30            public _stopcar
0000             31            public _linetrack
0000             32            public _readData
0000             33            public _Volts_at_Pin
0000             34            public _ADC_at_Pin
0000             35            public _InitPinADC
0000             36            public _InitADC
0000             37            public _forward_backward
0000             38            public _Timer2_ISR
0000             39            public _waitms
0000             40            public _Timer3us
0000             41            public __c51_external_startup
0000             42            public _currentstate
0000             43            public _currentcmd
0000             44            public _direction
0000             45            public _pwm_Right1
0000             46            public _pwm_Right0
0000             47            public _pwm_Left1
0000             48            public _pwm_Left0
0000             49            public _pwm_both
0000             50            public _mode
0000             51            public _pwm_count
0000             52   ;--------------------------------------------------------
0000             53   ; Special Function Registers
0000             54   ;--------------------------------------------------------
0000             55   _P0             DATA 0x80
0000             56   _SP             DATA 0x81
0000             57   _DPL            DATA 0x82
0000             58   _DPH            DATA 0x83
0000             59   _EMI0TC         DATA 0x84
0000             60   _EMI0CF         DATA 0x85
0000             61   _OSCLCN         DATA 0x86
0000             62   _PCON           DATA 0x87
0000             63   _TCON           DATA 0x88
0000             64   _TMOD           DATA 0x89
0000             65   _TL0            DATA 0x8a
0000             66   _TL1            DATA 0x8b
0000             67   _TH0            DATA 0x8c
0000             68   _TH1            DATA 0x8d
0000             69   _CKCON          DATA 0x8e
0000             70   _PSCTL          DATA 0x8f
0000             71   _P1             DATA 0x90
0000             72   _TMR3CN         DATA 0x91
0000             73   _TMR4CN         DATA 0x91
0000             74   _TMR3RLL        DATA 0x92
0000             75   _TMR4RLL        DATA 0x92
0000             76   _TMR3RLH        DATA 0x93
0000             77   _TMR4RLH        DATA 0x93
0000             78   _TMR3L          DATA 0x94
0000             79   _TMR4L          DATA 0x94
0000             80   _TMR3H          DATA 0x95
0000             81   _TMR4H          DATA 0x95
0000             82   _USB0ADR        DATA 0x96
0000             83   _USB0DAT        DATA 0x97
0000             84   _SCON           DATA 0x98
0000             85   _SCON0          DATA 0x98
0000             86   _SBUF           DATA 0x99
0000             87   _SBUF0          DATA 0x99
0000             88   _CPT1CN         DATA 0x9a
0000             89   _CPT0CN         DATA 0x9b
0000             90   _CPT1MD         DATA 0x9c
0000             91   _CPT0MD         DATA 0x9d
0000             92   _CPT1MX         DATA 0x9e
0000             93   _CPT0MX         DATA 0x9f
0000             94   _P2             DATA 0xa0
0000             95   _SPI0CFG        DATA 0xa1
0000             96   _SPI0CKR        DATA 0xa2
0000             97   _SPI0DAT        DATA 0xa3
0000             98   _P0MDOUT        DATA 0xa4
0000             99   _P1MDOUT        DATA 0xa5
0000            100   _P2MDOUT        DATA 0xa6
0000            101   _P3MDOUT        DATA 0xa7
0000            102   _IE             DATA 0xa8
0000            103   _CLKSEL         DATA 0xa9
0000            104   _EMI0CN         DATA 0xaa
0000            105   __XPAGE         DATA 0xaa
0000            106   _SBCON1         DATA 0xac
0000            107   _P4MDOUT        DATA 0xae
0000            108   _PFE0CN         DATA 0xaf
0000            109   _P3             DATA 0xb0
0000            110   _OSCXCN         DATA 0xb1
0000            111   _OSCICN         DATA 0xb2
0000            112   _OSCICL         DATA 0xb3
0000            113   _SBRLL1         DATA 0xb4
0000            114   _SBRLH1         DATA 0xb5
0000            115   _FLSCL          DATA 0xb6
0000            116   _FLKEY          DATA 0xb7
0000            117   _IP             DATA 0xb8
0000            118   _CLKMUL         DATA 0xb9
0000            119   _SMBTC          DATA 0xb9
0000            120   _AMX0N          DATA 0xba
0000            121   _AMX0P          DATA 0xbb
0000            122   _ADC0CF         DATA 0xbc
0000            123   _ADC0L          DATA 0xbd
0000            124   _ADC0H          DATA 0xbe
0000            125   _SFRPAGE        DATA 0xbf
0000            126   _SMB0CN         DATA 0xc0
0000            127   _SMB1CN         DATA 0xc0
0000            128   _SMB0CF         DATA 0xc1
0000            129   _SMB1CF         DATA 0xc1
0000            130   _SMB0DAT        DATA 0xc2
0000            131   _SMB1DAT        DATA 0xc2
0000            132   _ADC0GTL        DATA 0xc3
0000            133   _ADC0GTH        DATA 0xc4
0000            134   _ADC0LTL        DATA 0xc5
0000            135   _ADC0LTH        DATA 0xc6
0000            136   _P4             DATA 0xc7
0000            137   _TMR2CN         DATA 0xc8
0000            138   _TMR5CN         DATA 0xc8
0000            139   _REG01CN        DATA 0xc9
0000            140   _TMR2RLL        DATA 0xca
0000            141   _TMR5RLL        DATA 0xca
0000            142   _TMR2RLH        DATA 0xcb
0000            143   _TMR5RLH        DATA 0xcb
0000            144   _TMR2L          DATA 0xcc
0000            145   _TMR5L          DATA 0xcc
0000            146   _TMR2H          DATA 0xcd
0000            147   _TMR5H          DATA 0xcd
0000            148   _SMB0ADM        DATA 0xce
0000            149   _SMB1ADM        DATA 0xce
0000            150   _SMB0ADR        DATA 0xcf
0000            151   _SMB1ADR        DATA 0xcf
0000            152   _PSW            DATA 0xd0
0000            153   _REF0CN         DATA 0xd1
0000            154   _SCON1          DATA 0xd2
0000            155   _SBUF1          DATA 0xd3
0000            156   _P0SKIP         DATA 0xd4
0000            157   _P1SKIP         DATA 0xd5
0000            158   _P2SKIP         DATA 0xd6
0000            159   _USB0XCN        DATA 0xd7
0000            160   _PCA0CN         DATA 0xd8
0000            161   _PCA0MD         DATA 0xd9
0000            162   _PCA0CPM0       DATA 0xda
0000            163   _PCA0CPM1       DATA 0xdb
0000            164   _PCA0CPM2       DATA 0xdc
0000            165   _PCA0CPM3       DATA 0xdd
0000            166   _PCA0CPM4       DATA 0xde
0000            167   _P3SKIP         DATA 0xdf
0000            168   _ACC            DATA 0xe0
0000            169   _XBR0           DATA 0xe1
0000            170   _XBR1           DATA 0xe2
0000            171   _XBR2           DATA 0xe3
0000            172   _IT01CF         DATA 0xe4
0000            173   _CKCON1         DATA 0xe4
0000            174   _SMOD1          DATA 0xe5
0000            175   _EIE1           DATA 0xe6
0000            176   _EIE2           DATA 0xe7
0000            177   _ADC0CN         DATA 0xe8
0000            178   _PCA0CPL1       DATA 0xe9
0000            179   _PCA0CPH1       DATA 0xea
0000            180   _PCA0CPL2       DATA 0xeb
0000            181   _PCA0CPH2       DATA 0xec
0000            182   _PCA0CPL3       DATA 0xed
0000            183   _PCA0CPH3       DATA 0xee
0000            184   _RSTSRC         DATA 0xef
0000            185   _B              DATA 0xf0
0000            186   _P0MDIN         DATA 0xf1
0000            187   _P1MDIN         DATA 0xf2
0000            188   _P2MDIN         DATA 0xf3
0000            189   _P3MDIN         DATA 0xf4
0000            190   _P4MDIN         DATA 0xf5
0000            191   _EIP1           DATA 0xf6
0000            192   _EIP2           DATA 0xf7
0000            193   _SPI0CN         DATA 0xf8
0000            194   _PCA0L          DATA 0xf9
0000            195   _PCA0H          DATA 0xfa
0000            196   _PCA0CPL0       DATA 0xfb
0000            197   _PCA0CPH0       DATA 0xfc
0000            198   _PCA0CPL4       DATA 0xfd
0000            199   _PCA0CPH4       DATA 0xfe
0000            200   _VDM0CN         DATA 0xff
0000            201   _DPTR           DATA 0x8382
0000            202   _TMR2RL         DATA 0xcbca
0000            203   _TMR3RL         DATA 0x9392
0000            204   _TMR4RL         DATA 0x9392
0000            205   _TMR5RL         DATA 0xcbca
0000            206   _TMR2           DATA 0xcdcc
0000            207   _TMR3           DATA 0x9594
0000            208   _TMR4           DATA 0x9594
0000            209   _TMR5           DATA 0xcdcc
0000            210   _SBRL1          DATA 0xb5b4
0000            211   _ADC0           DATA 0xbebd
0000            212   _ADC0GT         DATA 0xc4c3
0000            213   _ADC0LT         DATA 0xc6c5
0000            214   _PCA0           DATA 0xfaf9
0000            215   _PCA0CP1        DATA 0xeae9
0000            216   _PCA0CP2        DATA 0xeceb
0000            217   _PCA0CP3        DATA 0xeeed
0000            218   _PCA0CP0        DATA 0xfcfb
0000            219   _PCA0CP4        DATA 0xfefd
0000            220   ;--------------------------------------------------------
0000            221   ; special function bits
0000            222   ;--------------------------------------------------------
0000            223   _P0_0           BIT 0x80
0000            224   _P0_1           BIT 0x81
0000            225   _P0_2           BIT 0x82
0000            226   _P0_3           BIT 0x83
0000            227   _P0_4           BIT 0x84
0000            228   _P0_5           BIT 0x85
0000            229   _P0_6           BIT 0x86
0000            230   _P0_7           BIT 0x87
0000            231   _TF1            BIT 0x8f
0000            232   _TR1            BIT 0x8e
0000            233   _TF0            BIT 0x8d
0000            234   _TR0            BIT 0x8c
0000            235   _IE1            BIT 0x8b
0000            236   _IT1            BIT 0x8a
0000            237   _IE0            BIT 0x89
0000            238   _IT0            BIT 0x88
0000            239   _P1_0           BIT 0x90
0000            240   _P1_1           BIT 0x91
0000            241   _P1_2           BIT 0x92
0000            242   _P1_3           BIT 0x93
0000            243   _P1_4           BIT 0x94
0000            244   _P1_5           BIT 0x95
0000            245   _P1_6           BIT 0x96
0000            246   _P1_7           BIT 0x97
0000            247   _S0MODE         BIT 0x9f
0000            248   _SCON0_6        BIT 0x9e
0000            249   _MCE0           BIT 0x9d
0000            250   _REN0           BIT 0x9c
0000            251   _TB80           BIT 0x9b
0000            252   _RB80           BIT 0x9a
0000            253   _TI0            BIT 0x99
0000            254   _RI0            BIT 0x98
0000            255   _SCON_6         BIT 0x9e
0000            256   _MCE            BIT 0x9d
0000            257   _REN            BIT 0x9c
0000            258   _TB8            BIT 0x9b
0000            259   _RB8            BIT 0x9a
0000            260   _TI             BIT 0x99
0000            261   _RI             BIT 0x98
0000            262   _P2_0           BIT 0xa0
0000            263   _P2_1           BIT 0xa1
0000            264   _P2_2           BIT 0xa2
0000            265   _P2_3           BIT 0xa3
0000            266   _P2_4           BIT 0xa4
0000            267   _P2_5           BIT 0xa5
0000            268   _P2_6           BIT 0xa6
0000            269   _P2_7           BIT 0xa7
0000            270   _EA             BIT 0xaf
0000            271   _ESPI0          BIT 0xae
0000            272   _ET2            BIT 0xad
0000            273   _ES0            BIT 0xac
0000            274   _ET1            BIT 0xab
0000            275   _EX1            BIT 0xaa
0000            276   _ET0            BIT 0xa9
0000            277   _EX0            BIT 0xa8
0000            278   _P3_0           BIT 0xb0
0000            279   _P3_1           BIT 0xb1
0000            280   _P3_2           BIT 0xb2
0000            281   _P3_3           BIT 0xb3
0000            282   _P3_4           BIT 0xb4
0000            283   _P3_5           BIT 0xb5
0000            284   _P3_6           BIT 0xb6
0000            285   _P3_7           BIT 0xb7
0000            286   _IP_7           BIT 0xbf
0000            287   _PSPI0          BIT 0xbe
0000            288   _PT2            BIT 0xbd
0000            289   _PS0            BIT 0xbc
0000            290   _PT1            BIT 0xbb
0000            291   _PX1            BIT 0xba
0000            292   _PT0            BIT 0xb9
0000            293   _PX0            BIT 0xb8
0000            294   _MASTER0        BIT 0xc7
0000            295   _TXMODE0        BIT 0xc6
0000            296   _STA0           BIT 0xc5
0000            297   _STO0           BIT 0xc4
0000            298   _ACKRQ0         BIT 0xc3
0000            299   _ARBLOST0       BIT 0xc2
0000            300   _ACK0           BIT 0xc1
0000            301   _SI0            BIT 0xc0
0000            302   _MASTER1        BIT 0xc7
0000            303   _TXMODE1        BIT 0xc6
0000            304   _STA1           BIT 0xc5
0000            305   _STO1           BIT 0xc4
0000            306   _ACKRQ1         BIT 0xc3
0000            307   _ARBLOST1       BIT 0xc2
0000            308   _ACK1           BIT 0xc1
0000            309   _SI1            BIT 0xc0
0000            310   _TF2            BIT 0xcf
0000            311   _TF2H           BIT 0xcf
0000            312   _TF2L           BIT 0xce
0000            313   _TF2LEN         BIT 0xcd
0000            314   _TF2CEN         BIT 0xcc
0000            315   _T2SPLIT        BIT 0xcb
0000            316   _TR2            BIT 0xca
0000            317   _T2CSS          BIT 0xc9
0000            318   _T2XCLK         BIT 0xc8
0000            319   _TF5H           BIT 0xcf
0000            320   _TF5L           BIT 0xce
0000            321   _TF5LEN         BIT 0xcd
0000            322   _TMR5CN_4       BIT 0xcc
0000            323   _T5SPLIT        BIT 0xcb
0000            324   _TR5            BIT 0xca
0000            325   _TMR5CN_1       BIT 0xc9
0000            326   _T5XCLK         BIT 0xc8
0000            327   _CY             BIT 0xd7
0000            328   _AC             BIT 0xd6
0000            329   _F0             BIT 0xd5
0000            330   _RS1            BIT 0xd4
0000            331   _RS0            BIT 0xd3
0000            332   _OV             BIT 0xd2
0000            333   _F1             BIT 0xd1
0000            334   _PARITY         BIT 0xd0
0000            335   _CF             BIT 0xdf
0000            336   _CR             BIT 0xde
0000            337   _PCA0CN_5       BIT 0xde
0000            338   _CCF4           BIT 0xdc
0000            339   _CCF3           BIT 0xdb
0000            340   _CCF2           BIT 0xda
0000            341   _CCF1           BIT 0xd9
0000            342   _CCF0           BIT 0xd8
0000            343   _ACC_7          BIT 0xe7
0000            344   _ACC_6          BIT 0xe6
0000            345   _ACC_5          BIT 0xe5
0000            346   _ACC_4          BIT 0xe4
0000            347   _ACC_3          BIT 0xe3
0000            348   _ACC_2          BIT 0xe2
0000            349   _ACC_1          BIT 0xe1
0000            350   _ACC_0          BIT 0xe0
0000            351   _AD0EN          BIT 0xef
0000            352   _AD0TM          BIT 0xee
0000            353   _AD0INT         BIT 0xed
0000            354   _AD0BUSY        BIT 0xec
0000            355   _AD0WINT        BIT 0xeb
0000            356   _AD0CM2         BIT 0xea
0000            357   _AD0CM1         BIT 0xe9
0000            358   _AD0CM0         BIT 0xe8
0000            359   _B_7            BIT 0xf7
0000            360   _B_6            BIT 0xf6
0000            361   _B_5            BIT 0xf5
0000            362   _B_4            BIT 0xf4
0000            363   _B_3            BIT 0xf3
0000            364   _B_2            BIT 0xf2
0000            365   _B_1            BIT 0xf1
0000            366   _B_0            BIT 0xf0
0000            367   _SPIF           BIT 0xff
0000            368   _WCOL           BIT 0xfe
0000            369   _MODF           BIT 0xfd
0000            370   _RXOVRN         BIT 0xfc
0000            371   _NSSMD1         BIT 0xfb
0000            372   _NSSMD0         BIT 0xfa
0000            373   _TXBMT          BIT 0xf9
0000            374   _SPIEN          BIT 0xf8
0000            375   ;--------------------------------------------------------
0000            376   ; overlayable register banks
0000            377   ;--------------------------------------------------------
0000            378            rbank0 segment data overlay
0000            379   ;--------------------------------------------------------
0000            380   ; internal ram data
0000            381   ;--------------------------------------------------------
0000            382            rseg R_DSEG
0000            383   _pwm_count:
0000            384            ds 1
0001            385   _mode:
0001            386            ds 1
0002            387   _pwm_both:
0002            388            ds 1
0003            389   _pwm_Left0:
0003            390            ds 1
0004            391   _pwm_Left1:
0004            392            ds 1
0005            393   _pwm_Right0:
0005            394            ds 1
0006            395   _pwm_Right1:
0006            396            ds 1
0007            397   _direction:
0007            398            ds 1
0008            399   _currentcmd:
0008            400            ds 1
0009            401   _currentstate:
0009            402            ds 1
000A            403   _linetrack_forwardbackward_1_83:
000A            404            ds 2
000C            405   _linetrack_vleft_1_84:
000C            406            ds 4
0010            407   _linetrack_vright_1_84:
0010            408            ds 4
0014            409   _linetrack_sloc0_1_0:
0014            410            ds 4
0018            411   _turncar_vleft_1_88:
0018            412            ds 4
001C            413   _turncar_vright_1_88:
001C            414            ds 4
0020            415   _uturn_vleft_1_93:
0020            416            ds 4
0024            417   _uturn_vright_1_93:
0024            418            ds 4
0028            419   ;--------------------------------------------------------
0028            420   ; overlayable items in internal ram 
0028            421   ;--------------------------------------------------------
0000            422            rseg    R_OSEG
0000            423            rseg    R_OSEG
0000            424            rseg    R_OSEG
0000            425   _InitPinADC_PARM_2:
0000            426            ds 1
0001            427            rseg    R_OSEG
0001            428   ;--------------------------------------------------------
0001            429   ; indirectly addressable internal ram data
0001            430   ;--------------------------------------------------------
0000            431            rseg R_ISEG
0000            432   ;--------------------------------------------------------
0000            433   ; absolute internal ram data
0000            434   ;--------------------------------------------------------
0000            435            DSEG
0000            436   ;--------------------------------------------------------
0000            437   ; bit data
0000            438   ;--------------------------------------------------------
0000            439            rseg R_BSEG
0000            440   _Timer2_ISR_sloc0_1_0:
0000            441            DBIT    1
0001            442   ;--------------------------------------------------------
0001            443   ; paged external ram data
0001            444   ;--------------------------------------------------------
0000            445            rseg R_PSEG
0000            446   ;--------------------------------------------------------
0000            447   ; external ram data
0000            448   ;--------------------------------------------------------
0000            449            rseg R_XSEG
0000            450   ;--------------------------------------------------------
0000            451   ; absolute external ram data
0000            452   ;--------------------------------------------------------
0000            453            XSEG
0000            454   ;--------------------------------------------------------
0000            455   ; external initialized ram data
0000            456   ;--------------------------------------------------------
0000            457            rseg R_IXSEG
0000            458            rseg R_HOME
0000            459            rseg R_GSINIT
0000            460            rseg R_CSEG
0000            461   ;--------------------------------------------------------
0000            462   ; Reset entry point and interrupt vectors
0000            463   ;--------------------------------------------------------
0000            464            CSEG at 0x0000
0000 020100     465            ljmp    _crt0
002B            466            CSEG at 0x002b
002B 020100     467            ljmp    _Timer2_ISR
002E            468   ;--------------------------------------------------------
002E            469   ; global & static initialisations
002E            470   ;--------------------------------------------------------
0000            471            rseg R_HOME
0000            472            rseg R_GSINIT
0000            473            rseg R_GSINIT
0000            474   ;--------------------------------------------------------
0000            475   ; data variables initialization
0000            476   ;--------------------------------------------------------
0000            477            rseg R_DINIT
0000            478   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:20: volatile  char pwm_count=0;
0000 75A000     479            mov     _pwm_count,#0x00
0003            480   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:21: volatile  char mode = 0;
0003 756000     481            mov     _mode,#0x00
0006            482   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:22: volatile  char pwm_both =0;
0006 752000     483            mov     _pwm_both,#0x00
0009            484   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:23: volatile  char pwm_Left0 = 0; //p1.5
0009 75E000     485            mov     _pwm_Left0,#0x00
000C            486   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:24: volatile  char pwm_Left1 = 0; //p1.6
000C 75A000     487            mov     _pwm_Left1,#0x00
000F            488   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:25: volatile  char pwm_Right0 = 0; //p2.0
000F 756000     489            mov     _pwm_Right0,#0x00
0012            490   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:26: volatile  char pwm_Right1 = 0; //p2.1
0012 752000     491            mov     _pwm_Right1,#0x00
0015            492   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:27: volatile  char direction = 0; // 1 for back 0 for forward
0015 75E000     493            mov     _direction,#0x00
0018            494   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:29: volatile  char currentcmd = 0;
0018 75A000     495            mov     _currentcmd,#0x00
001B            496   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:30: volatile  char currentstate = 1;
001B 756001     497            mov     _currentstate,#0x01
001E            498            ; The linker places a 'ret' at the end of segment R_DINIT.
001E            499   ;--------------------------------------------------------
001E            500   ; code
001E            501   ;--------------------------------------------------------
0000            502            rseg R_CSEG
0000            503   ;------------------------------------------------------------
0000            504   ;Allocation info for local variables in function '_c51_external_startup'
0000            505   ;------------------------------------------------------------
0000            506   ;------------------------------------------------------------
0000            507   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:34: char _c51_external_startup (void)
0000            508   ;        -----------------------------------------
0000            509   ;         function _c51_external_startup
0000            510   ;        -----------------------------------------
0000            511   __c51_external_startup:
0000            512            using   0
0000            513   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:36: PCA0MD&=(~0x40) ;    // DISABLE WDT: clear Watchdog Enable bit
0000 53D9BF     514            anl     _PCA0MD,#0xBF
0003            515   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:37: VDM0CN=0x80; // enable VDD monitor
0003 75FF80     516            mov     _VDM0CN,#0x80
0006            517   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:38: RSTSRC=0x02|0x04; // Enable reset on missing clock detector and VDD
0006 75EF06     518            mov     _RSTSRC,#0x06
0009            519   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:46: CLKSEL|=0b_0000_0011; // SYSCLK derived from the Internal High-Frequency Oscillator / 1.
0009 43A903     520            orl     _CLKSEL,#0x03
000C            521   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:50: OSCICN |= 0x03; // Configure internal oscillator for its maximum frequency
000C 43B203     522            orl     _OSCICN,#0x03
000F            523   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:53: SCON0 = 0x10;
000F 759810     524            mov     _SCON0,#0x10
0012            525   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:55: TH1 = 0x10000-((SYSCLK/BAUDRATE)/2L);
0012 758D30     526            mov     _TH1,#0x30
0015            527   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:56: CKCON &= ~0x0B;                  // T1M = 1; SCA1:0 = xx
0015 538EF4     528            anl     _CKCON,#0xF4
0018            529   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:57: CKCON |=  0x08;
0018 438E08     530            orl     _CKCON,#0x08
001B            531   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:70: TL1 = TH1;      // Init Timer1
001B 858D8B     532            mov     _TL1,_TH1
001E            533   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:71: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit autoreload
001E 53890F     534            anl     _TMOD,#0x0F
0021            535   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:72: TMOD |=  0x20;
0021 438920     536            orl     _TMOD,#0x20
0024            537   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:73: TR1 = 1; // START Timer1
0024 D28E       538            setb    _TR1
0026            539   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:74: TI = 1;  // Indicate TX0 ready
0026 D299       540            setb    _TI
0028            541   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:77: P2MDOUT|=0b_0000_0011;
0028 43A603     542            orl     _P2MDOUT,#0x03
002B            543   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:78: P0MDOUT |= 0x10; // Enable UTX as push-pull output
002B 43A410     544            orl     _P0MDOUT,#0x10
002E            545   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:79: XBR0     = 0x01; // Enable UART on P0.4(TX) and P0.5(RX)
002E 75E101     546            mov     _XBR0,#0x01
0031            547   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:80: XBR1     = 0x40; // Enable crossbar and weak pull-ups
0031 75E240     548            mov     _XBR1,#0x40
0034            549   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:83: TMR2CN=0x00;   // Stop Timer2; Clear TF2;
0034 75C800     550            mov     _TMR2CN,#0x00
0037            551   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:84: CKCON|=0b_0001_0000;
0037 438E10     552            orl     _CKCON,#0x10
003A            553   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:85: TMR2RL=(-(SYSCLK/(2*48))/(100L)); // Initialize reload value
003A 75CA78     554            mov     _TMR2RL,#0x78
003D 75CBEC     555            mov     (_TMR2RL >> 8),#0xEC
0040            556   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:86: TMR2=0xffff;   // Set to reload immediately
0040 75CCFF     557            mov     _TMR2,#0xFF
0043 75CDFF     558            mov     (_TMR2 >> 8),#0xFF
0046            559   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:87: ET2=1;         // Enable Timer2 interrupts
0046 D2AD       560            setb    _ET2
0048            561   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:88: TR2=1;         // Start Timer2
0048 D2CA       562            setb    _TR2
004A            563   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:90: EA=1; // Enable interrupts
004A D2AF       564            setb    _EA
004C            565   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:92: return 0;
004C 758200     566            mov     dpl,#0x00
004F 22         567            ret
0050            568   ;------------------------------------------------------------
0050            569   ;Allocation info for local variables in function 'Timer3us'
0050            570   ;------------------------------------------------------------
0050            571   ;us                        Allocated to registers r2 
0050            572   ;i                         Allocated to registers r3 
0050            573   ;------------------------------------------------------------
0050            574   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:96: void Timer3us(unsigned char us)
0050            575   ;        -----------------------------------------
0050            576   ;         function Timer3us
0050            577   ;        -----------------------------------------
0050            578   _Timer3us:
0050 AA82       579            mov     r2,dpl
0052            580   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:101: CKCON|=0b_0100_0000;
0052 438E40     581            orl     _CKCON,#0x40
0055            582   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:103: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0055 7592D0     583            mov     _TMR3RL,#0xD0
0058 7593FF     584            mov     (_TMR3RL >> 8),#0xFF
005B            585   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:104: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
005B 859294     586            mov     _TMR3,_TMR3RL
005E 859395     587            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0061            588   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:106: TMR3CN = 0x04;                 // Sart Timer3 and clear overflow flag
0061 759104     589            mov     _TMR3CN,#0x04
0064            590   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:107: for (i = 0; i < us; i++)       // Count <us> overflows
0064 7B00       591            mov     r3,#0x00
0066            592   L003004?:
0066 C3         593            clr     c
0067 EB         594            mov     a,r3
0068 9A         595            subb    a,r2
0069 5001       596            jnc     L003007?
006B            597   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:109: while (!(TMR3CN & 0x80));  // Wait for overflow
006B            598   L003001?:
006B E591       599            mov     a,_TMR3CN
006D 30E738     600            jnb     acc.7,L003001?
0070            601   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:110: TMR3CN &= ~(0x80);         // Clear overflow indicator
0070 53917F     602            anl     _TMR3CN,#0x7F
0073            603   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:107: for (i = 0; i < us; i++)       // Count <us> overflows
0073 0B         604            inc     r3
0074 8001       605            sjmp    L003004?
0076            606   L003007?:
0076            607   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:112: TMR3CN = 0 ;                   // Stop Timer3 and clear overflow flag
0076 759100     608            mov     _TMR3CN,#0x00
0079 22         609            ret
007A            610   ;------------------------------------------------------------
007A            611   ;Allocation info for local variables in function 'waitms'
007A            612   ;------------------------------------------------------------
007A            613   ;ms                        Allocated to registers r2 r3 
007A            614   ;j                         Allocated to registers r2 r3 
007A            615   ;------------------------------------------------------------
007A            616   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:115: void waitms (unsigned int ms)
007A            617   ;        -----------------------------------------
007A            618   ;         function waitms
007A            619   ;        -----------------------------------------
007A            620   _waitms:
007A AA82       621            mov     r2,dpl
007C AB83       622            mov     r3,dph
007E            623   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:118: for(j=ms; j!=0; j--)
007E            624   L004001?:
007E BA0038     625            cjne    r2,#0x00,L004010?
0081 BB0038     626            cjne    r3,#0x00,L004010?
0084 22         627            ret
0085            628   L004010?:
0085            629   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:120: Timer3us(249);
0085 7582F9     630            mov     dpl,#0xF9
0088 C002       631            push    ar2
008A C003       632            push    ar3
008C 120100     633            lcall   _Timer3us
008F            634   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:121: Timer3us(249);
008F 7582F9     635            mov     dpl,#0xF9
0092 120100     636            lcall   _Timer3us
0095            637   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:122: Timer3us(249);
0095 7582F9     638            mov     dpl,#0xF9
0098 120100     639            lcall   _Timer3us
009B            640   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:123: Timer3us(250);
009B 7582FA     641            mov     dpl,#0xFA
009E 120100     642            lcall   _Timer3us
00A1 D003       643            pop     ar3
00A3 D002       644            pop     ar2
00A5            645   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:118: for(j=ms; j!=0; j--)
00A5 1A         646            dec     r2
00A6 BAFF78     647            cjne    r2,#0xff,L004011?
00A9 1B         648            dec     r3
00AA            649   L004011?:
00AA 8001       650            sjmp    L004001?
00AC            651   ;------------------------------------------------------------
00AC            652   ;Allocation info for local variables in function 'Timer2_ISR'
00AC            653   ;------------------------------------------------------------
00AC            654   ;------------------------------------------------------------
00AC            655   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:128: void Timer2_ISR (void) interrupt 5
00AC            656   ;        -----------------------------------------
00AC            657   ;         function Timer2_ISR
00AC            658   ;        -----------------------------------------
00AC            659   _Timer2_ISR:
00AC C0E0       660            push    acc
00AE C0F0       661            push    b
00B0 C0D0       662            push    psw
00B2 75D000     663            mov     psw,#0x00
00B5            664   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:130: TF2H = 0; // Clear Timer2 interrupt flag
00B5 C2CF       665            clr     _TF2H
00B7            666   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:132: pwm_count++;
00B7 05A0       667            inc     _pwm_count
00B9            668   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:133: if(pwm_count>100) pwm_count=0;
00B9 C3         669            clr     c
00BA 74E4       670            mov     a,#(0x64 ^ 0x80)
00BC 85A0F0     671            mov     b,_pwm_count
00BF 63F080     672            xrl     b,#0x80
00C2 95F0       673            subb    a,b
00C4 5001       674            jnc     L005002?
00C6 75A000     675            mov     _pwm_count,#0x00
00C9            676   L005002?:
00C9            677   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:136: MOTOR_LEFT0 = pwm_count > pwm_Left0 ? 0 : 1; //p1.5
00C9 C3         678            clr     c
00CA E5E0       679            mov     a,_pwm_Left0
00CC 6480       680            xrl     a,#0x80
00CE 85A0F0     681            mov     b,_pwm_count
00D1 63F080     682            xrl     b,#0x80
00D4 95F0       683            subb    a,b
00D6 92F8       684            mov  _Timer2_ISR_sloc0_1_0,c
00D8 B3         685            cpl     c
00D9 9295       686            mov     _P1_5,c
00DB            687   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:137: MOTOR_LEFT1 = pwm_count > pwm_Left1 ? 0 : 1; //p1.6
00DB C3         688            clr     c
00DC E5A0       689            mov     a,_pwm_Left1
00DE 6480       690            xrl     a,#0x80
00E0 85A0F0     691            mov     b,_pwm_count
00E3 63F080     692            xrl     b,#0x80
00E6 95F0       693            subb    a,b
00E8 92F8       694            mov  _Timer2_ISR_sloc0_1_0,c
00EA B3         695            cpl     c
00EB 9296       696            mov     _P1_6,c
00ED            697   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:138: MOTOR_RIGHT0 = pwm_count > pwm_Right0 ? 0 : 1; //p2.0
00ED C3         698            clr     c
00EE E560       699            mov     a,_pwm_Right0
00F0 6480       700            xrl     a,#0x80
00F2 85A0F0     701            mov     b,_pwm_count
00F5 63F080     702            xrl     b,#0x80
00F8 95F0       703            subb    a,b
00FA 92F8       704            mov  _Timer2_ISR_sloc0_1_0,c
00FC B3         705            cpl     c
00FD 92A0       706            mov     _P2_0,c
00FF            707   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:139: MOTOR_RIGHT1 = pwm_count > pwm_Right1 ? 0 : 1; //p2.1
00FF C3         708            clr     c
0100 E520       709            mov     a,_pwm_Right1
0102 6480       710            xrl     a,#0x80
0104 85A0F0     711            mov     b,_pwm_count
0107 63F080     712            xrl     b,#0x80
010A 95F0       713            subb    a,b
010C 92F8       714            mov  _Timer2_ISR_sloc0_1_0,c
010E B3         715            cpl     c
010F 92A1       716            mov     _P2_1,c
0111 D0D0       717            pop     psw
0113 D0F0       718            pop     b
0115 D0E0       719            pop     acc
0117 32         720            reti
0118            721   ;        eliminated unneeded push/pop dpl
0118            722   ;        eliminated unneeded push/pop dph
0118            723   ;------------------------------------------------------------
0118            724   ;Allocation info for local variables in function 'forward_backward'
0118            725   ;------------------------------------------------------------
0118            726   ;direction                 Allocated to registers r2 
0118            727   ;------------------------------------------------------------
0118            728   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:146: void forward_backward(unsigned char direction)
0118            729   ;        -----------------------------------------
0118            730   ;         function forward_backward
0118            731   ;        -----------------------------------------
0118            732   _forward_backward:
0118            733   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:149: if (direction == 0) { //p2.1,1.6 on
0118 E582       734            mov     a,dpl
011A FA         735            mov     r2,a
011B 7001       736            jnz     L006004?
011D            737   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:150: pwm_Left0 = pwm_Right0 = -1;
011D 7560FF     738            mov     _pwm_Right0,#0xFF
0120 75E0FF     739            mov     _pwm_Left0,#0xFF
0123            740   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:151: pwm_Left1 = pwm_Right1 = pwm_both;  //MOTOR_LEFT1 = MOTOR_RIGHT1 = pwm_both;
0123 852020     741            mov     _pwm_Right1,_pwm_both
0126 8520A0     742            mov     _pwm_Left1,_pwm_both
0129 22         743            ret
012A            744   L006004?:
012A            745   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:154: else if (direction == 1) { //p2.0,1.5 on
012A BA01B8     746            cjne    r2,#0x01,L006006?
012D            747   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:155: pwm_Left1 = pwm_Right1 = -1;
012D 7520FF     748            mov     _pwm_Right1,#0xFF
0130 75A0FF     749            mov     _pwm_Left1,#0xFF
0133            750   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:156: pwm_Left0 = pwm_Right0 = pwm_both; 
0133 852060     751            mov     _pwm_Right0,_pwm_both
0136 8520E0     752            mov     _pwm_Left0,_pwm_both
0139            753   L006006?:
0139 22         754            ret
013A            755   ;------------------------------------------------------------
013A            756   ;Allocation info for local variables in function 'InitADC'
013A            757   ;------------------------------------------------------------
013A            758   ;------------------------------------------------------------
013A            759   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:162: void InitADC (void)
013A            760   ;        -----------------------------------------
013A            761   ;         function InitADC
013A            762   ;        -----------------------------------------
013A            763   _InitADC:
013A            764   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:165: ADC0CF = 0xF8; // SAR clock = 31, Right-justified result
013A 75BCF8     765            mov     _ADC0CF,#0xF8
013D            766   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:166: ADC0CN = 0b_1000_0000; // AD0EN=1, AD0TM=0
013D 75E880     767            mov     _ADC0CN,#0x80
0140            768   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:167: REF0CN = 0b_0000_1000; //Select VDD as the voltage reference for the converter
0140 75D108     769            mov     _REF0CN,#0x08
0143 22         770            ret
0144            771   ;------------------------------------------------------------
0144            772   ;Allocation info for local variables in function 'InitPinADC'
0144            773   ;------------------------------------------------------------
0144            774   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
0144            775   ;portno                    Allocated to registers r2 
0144            776   ;mask                      Allocated to registers r3 
0144            777   ;------------------------------------------------------------
0144            778   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:170: void InitPinADC (unsigned char portno, unsigned char pinno)
0144            779   ;        -----------------------------------------
0144            780   ;         function InitPinADC
0144            781   ;        -----------------------------------------
0144            782   _InitPinADC:
0144 AA82       783            mov     r2,dpl
0146            784   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:174: mask=1<<pinno;
0146 8540F0     785            mov     b,_InitPinADC_PARM_2
0149 05F0       786            inc     b
014B 7401       787            mov     a,#0x01
014D 8001       788            sjmp    L008012?
014F            789   L008010?:
014F 25E0       790            add     a,acc
0151            791   L008012?:
0151 D5F038     792            djnz    b,L008010?
0154 FB         793            mov     r3,a
0155            794   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:176: switch (portno)
0155 EA         795            mov     a,r2
0156 24FC       796            add     a,#0xff - 0x03
0158 4001       797            jc      L008007?
015A EA         798            mov     a,r2
015B 2A         799            add     a,r2
015C 2A         800            add     a,r2
015D 909EB8     801            mov     dptr,#L008014?
0160 73         802            jmp     @a+dptr
0161            803   L008014?:
0161 020100     804            ljmp    L008001?
0164 020100     805            ljmp    L008002?
0167 020100     806            ljmp    L008003?
016A 020100     807            ljmp    L008004?
016D            808   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:178: case 0:
016D            809   L008001?:
016D            810   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:179: P0MDIN &= (~mask); // Set pin as analog input
016D EB         811            mov     a,r3
016E F4         812            cpl     a
016F 52F1       813            anl     _P0MDIN,a
0171            814   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:180: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0171 EB         815            mov     a,r3
0172 42D4       816            orl     _P0SKIP,a
0174            817   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:181: break;
0174            818   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:182: case 1:
0174 22         819            ret
0175            820   L008002?:
0175            821   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:183: P1MDIN &= (~mask); // Set pin as analog input
0175 EB         822            mov     a,r3
0176 F4         823            cpl     a
0177 52F2       824            anl     _P1MDIN,a
0179            825   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:184: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0179 EB         826            mov     a,r3
017A 42D5       827            orl     _P1SKIP,a
017C            828   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:185: break;
017C            829   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:186: case 2:
017C 22         830            ret
017D            831   L008003?:
017D            832   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:187: P2MDIN &= (~mask); // Set pin as analog input
017D EB         833            mov     a,r3
017E F4         834            cpl     a
017F 52F3       835            anl     _P2MDIN,a
0181            836   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:188: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0181 EB         837            mov     a,r3
0182 42D6       838            orl     _P2SKIP,a
0184            839   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:189: break;
0184            840   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:190: case 3:
0184 22         841            ret
0185            842   L008004?:
0185            843   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:191: P3MDIN &= (~mask); // Set pin as analog input
0185 EB         844            mov     a,r3
0186 F4         845            cpl     a
0187 FA         846            mov     r2,a
0188 52F4       847            anl     _P3MDIN,a
018A            848   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:192: P3SKIP |= mask; // Skip Crossbar decoding for this pin
018A EB         849            mov     a,r3
018B 42DF       850            orl     _P3SKIP,a
018D            851   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:196: }
018D            852   L008007?:
018D 22         853            ret
018E            854   ;------------------------------------------------------------
018E            855   ;Allocation info for local variables in function 'ADC_at_Pin'
018E            856   ;------------------------------------------------------------
018E            857   ;pin                       Allocated to registers 
018E            858   ;------------------------------------------------------------
018E            859   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:199: unsigned int ADC_at_Pin(unsigned char pin)
018E            860   ;        -----------------------------------------
018E            861   ;         function ADC_at_Pin
018E            862   ;        -----------------------------------------
018E            863   _ADC_at_Pin:
018E 8582BB     864            mov     _AMX0P,dpl
0191            865   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:202: AMX0N = LQFP32_MUX_GND;  // GND is negative input (Single-ended Mode)
0191 75BA1F     866            mov     _AMX0N,#0x1F
0194            867   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:204: AD0BUSY=1;
0194 D2EC       868            setb    _AD0BUSY
0196            869   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:205: while (AD0BUSY); // Wait for dummy conversion to finish
0196            870   L009001?:
0196 20EC00     871            jb      _AD0BUSY,L009001?
0199            872   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:207: AD0BUSY = 1;
0199 D2EC       873            setb    _AD0BUSY
019B            874   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:208: while (AD0BUSY); // Wait for conversion to complete
019B            875   L009004?:
019B 20EC40     876            jb      _AD0BUSY,L009004?
019E            877   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:209: return (ADC0L+(ADC0H*0x100));
019E AABD       878            mov     r2,_ADC0L
01A0 7B00       879            mov     r3,#0x00
01A2 ADBE       880            mov     r5,_ADC0H
01A4 7C00       881            mov     r4,#0x00
01A6 EC         882            mov     a,r4
01A7 2A         883            add     a,r2
01A8 F582       884            mov     dpl,a
01AA ED         885            mov     a,r5
01AB 3B         886            addc    a,r3
01AC F583       887            mov     dph,a
01AE 22         888            ret
01AF            889   ;------------------------------------------------------------
01AF            890   ;Allocation info for local variables in function 'Volts_at_Pin'
01AF            891   ;------------------------------------------------------------
01AF            892   ;pin                       Allocated to registers r2 
01AF            893   ;------------------------------------------------------------
01AF            894   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:212: float Volts_at_Pin(unsigned char pin)
01AF            895   ;        -----------------------------------------
01AF            896   ;         function Volts_at_Pin
01AF            897   ;        -----------------------------------------
01AF            898   _Volts_at_Pin:
01AF            899   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:214: return ((ADC_at_Pin(pin)*3.30)/1024.0);
01AF 120100     900            lcall   _ADC_at_Pin
01B2 120100     901            lcall   ___uint2fs
01B5 AA82       902            mov     r2,dpl
01B7 AB83       903            mov     r3,dph
01B9 ACF0       904            mov     r4,b
01BB FD         905            mov     r5,a
01BC C002       906            push    ar2
01BE C003       907            push    ar3
01C0 C004       908            push    ar4
01C2 C005       909            push    ar5
01C4 903333     910            mov     dptr,#0x3333
01C7 75F053     911            mov     b,#0x53
01CA 7440       912            mov     a,#0x40
01CC 120100     913            lcall   ___fsmul
01CF AA82       914            mov     r2,dpl
01D1 AB83       915            mov     r3,dph
01D3 ACF0       916            mov     r4,b
01D5 FD         917            mov     r5,a
01D6 E581       918            mov     a,sp
01D8 24FC       919            add     a,#0xfc
01DA F581       920            mov     sp,a
01DC E4         921            clr     a
01DD C0E0       922            push    acc
01DF C0E0       923            push    acc
01E1 7480       924            mov     a,#0x80
01E3 C0E0       925            push    acc
01E5 7444       926            mov     a,#0x44
01E7 C0E0       927            push    acc
01E9 8A82       928            mov     dpl,r2
01EB 8B83       929            mov     dph,r3
01ED 8CF0       930            mov     b,r4
01EF ED         931            mov     a,r5
01F0 120100     932            lcall   ___fsdiv
01F3 AA82       933            mov     r2,dpl
01F5 AB83       934            mov     r3,dph
01F7 ACF0       935            mov     r4,b
01F9 FD         936            mov     r5,a
01FA E581       937            mov     a,sp
01FC 24FC       938            add     a,#0xfc
01FE F581       939            mov     sp,a
0200 8A82       940            mov     dpl,r2
0202 8B83       941            mov     dph,r3
0204 8CF0       942            mov     b,r4
0206 ED         943            mov     a,r5
0207 22         944            ret
0208            945   ;------------------------------------------------------------
0208            946   ;Allocation info for local variables in function 'readData'
0208            947   ;------------------------------------------------------------
0208            948   ;commandflag               Allocated to registers r2 r3 
0208            949   ;------------------------------------------------------------
0208            950   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:218: void readData (void) {
0208            951   ;        -----------------------------------------
0208            952   ;         function readData
0208            953   ;        -----------------------------------------
0208            954   _readData:
0208            955   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:219: int commandflag = 0;                                        //determines if there's a real command coming in or not
0208 7A00       956            mov     r2,#0x00
020A 7B00       957            mov     r3,#0x00
020C            958   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:221: if (COMMAND_PIN == 0) {                                     //0---
020C 309080     959            jnb     _P1_0,L011039?
020F 020100     960            ljmp    L011022?
0212            961   L011039?:
0212            962   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:222: waitms(6);
0212 900006     963            mov     dptr,#0x0006
0215 C002       964            push    ar2
0217 C003       965            push    ar3
0219 120100     966            lcall   _waitms
021C D003       967            pop     ar3
021E D002       968            pop     ar2
0220            969   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:223: if (COMMAND_PIN == 1) {                             //01--
0220 309000     970            jnb     _P1_0,L011019?
0223            971   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:224: waitms(4);
0223 900004     972            mov     dptr,#0x0004
0226 C002       973            push    ar2
0228 C003       974            push    ar3
022A 120100     975            lcall   _waitms
022D D003       976            pop     ar3
022F D002       977            pop     ar2
0231            978   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:225: if (COMMAND_PIN == 0) {                     //010-
0231 209040     979            jb      _P1_0,L011007?
0234            980   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:226: waitms(4);
0234 900004     981            mov     dptr,#0x0004
0237 C002       982            push    ar2
0239 C003       983            push    ar3
023B 120100     984            lcall   _waitms
023E D003       985            pop     ar3
0240 D002       986            pop     ar2
0242            987   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:227: if (COMMAND_PIN == 0) {             //0100  
0242 209080     988            jb      _P1_0,L011002?
0245            989   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:228: currentcmd = 4;
0245 75A004     990            mov     _currentcmd,#0x04
0248 8001       991            sjmp    L011022?
024A            992   L011002?:
024A            993   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:231: currentcmd = 5;
024A 75A005     994            mov     _currentcmd,#0x05
024D 8001       995            sjmp    L011022?
024F            996   L011007?:
024F            997   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:235: waitms(4);
024F 900004     998            mov     dptr,#0x0004
0252 C002       999            push    ar2
0254 C003      1000            push    ar3
0256 120100    1001            lcall   _waitms
0259 D003      1002            pop     ar3
025B D002      1003            pop     ar2
025D           1004   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:236: if (COMMAND_PIN == 0) {             //0110
025D 2090C0    1005            jb      _P1_0,L011022?
0260           1006   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:237: currentcmd = 6;
0260 75A006    1007            mov     _currentcmd,#0x06
0263 8001      1008            sjmp    L011022?
0265           1009   L011019?:
0265           1010   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:242: waitms(4);
0265 900004    1011            mov     dptr,#0x0004
0268 C002      1012            push    ar2
026A C003      1013            push    ar3
026C 120100    1014            lcall   _waitms
026F D003      1015            pop     ar3
0271 D002      1016            pop     ar2
0273           1017   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:243: if (COMMAND_PIN == 1) {                     //001-
0273 3090C0    1018            jnb     _P1_0,L011016?
0276           1019   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:244: waitms(4);
0276 900004    1020            mov     dptr,#0x0004
0279 C002      1021            push    ar2
027B C003      1022            push    ar3
027D 120100    1023            lcall   _waitms
0280 D003      1024            pop     ar3
0282 D002      1025            pop     ar2
0284           1026   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:245: if (COMMAND_PIN == 1) {             //0011
0284 309000    1027            jnb     _P1_0,L011010?
0287           1028   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:246: currentcmd = 3;
0287 75A003    1029            mov     _currentcmd,#0x03
028A 8001      1030            sjmp    L011022?
028C           1031   L011010?:
028C           1032   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:249: currentcmd = 2;
028C 75A002    1033            mov     _currentcmd,#0x02
028F 8001      1034            sjmp    L011022?
0291           1035   L011016?:
0291           1036   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:253: waitms(4);
0291 900004    1037            mov     dptr,#0x0004
0294 C002      1038            push    ar2
0296 C003      1039            push    ar3
0298 120100    1040            lcall   _waitms
029B D003      1041            pop     ar3
029D D002      1042            pop     ar2
029F           1043   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:254: if (COMMAND_PIN == 1) {             //0001  
029F 309040    1044            jnb     _P1_0,L011013?
02A2           1045   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:255: currentcmd == 1;
02A2 E5A0      1046            mov     a,_currentcmd
02A4 8001      1047            sjmp    L011022?
02A6           1048   L011013?:
02A6           1049   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:258: commandflag = 1;
02A6 7A01      1050            mov     r2,#0x01
02A8 7B00      1051            mov     r3,#0x00
02AA           1052   L011022?:
02AA           1053   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:263: if (commandflag == 0) {                                     //only wait for signal to end if a command has been received. 
02AA EA        1054            mov     a,r2
02AB 4B        1055            orl     a,r3
02AC 7001      1056            jnz     L011027?
02AE           1057   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:264: while (COMMAND_PIN == 0) {}
02AE           1058   L011023?:
02AE 3090C0    1059            jnb     _P1_0,L011023?
02B1           1060   L011027?:
02B1           1061   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:267: printf("current command is %d\r\n", currentcmd);            
02B1 AAA0      1062            mov     r2,_currentcmd
02B3 E5A0      1063            mov     a,_currentcmd
02B5 33        1064            rlc     a
02B6 95E0      1065            subb    a,acc
02B8 FB        1066            mov     r3,a
02B9 C002      1067            push    ar2
02BB C003      1068            push    ar3
02BD 7400      1069            mov     a,#__str_0
02BF C0E0      1070            push    acc
02C1 74A4      1071            mov     a,#(__str_0 >> 8)
02C3 C0E0      1072            push    acc
02C5 7480      1073            mov     a,#0x80
02C7 C0E0      1074            push    acc
02C9 120100    1075            lcall   _printf
02CC E581      1076            mov     a,sp
02CE 24FB      1077            add     a,#0xfb
02D0 F581      1078            mov     sp,a
02D2 22        1079            ret
02D3           1080   ;------------------------------------------------------------
02D3           1081   ;Allocation info for local variables in function 'linetrack'
02D3           1082   ;------------------------------------------------------------
02D3           1083   ;forwardbackward           Allocated with name '_linetrack_forwardbackward_1_83'
02D3           1084   ;vleft                     Allocated with name '_linetrack_vleft_1_84'
02D3           1085   ;vright                    Allocated with name '_linetrack_vright_1_84'
02D3           1086   ;sloc0                     Allocated with name '_linetrack_sloc0_1_0'
02D3           1087   ;------------------------------------------------------------
02D3           1088   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:271: void linetrack (int forwardbackward) {
02D3           1089   ;        -----------------------------------------
02D3           1090   ;         function linetrack
02D3           1091   ;        -----------------------------------------
02D3           1092   _linetrack:
02D3 858278    1093            mov     _linetrack_forwardbackward_1_83,dpl
02D6 858379    1094            mov     (_linetrack_forwardbackward_1_83 + 1),dph
02D9           1095   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:275: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
02D9 75820B    1096            mov     dpl,#0x0B
02DC 120100    1097            lcall   _Volts_at_Pin
02DF 8582C8    1098            mov     _linetrack_vleft_1_84,dpl
02E2 8583C9    1099            mov     (_linetrack_vleft_1_84 + 1),dph
02E5 85F0CA    1100            mov     (_linetrack_vleft_1_84 + 2),b
02E8 F5CB      1101            mov     (_linetrack_vleft_1_84 + 3),a
02EA           1102   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:276: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
02EA 75820C    1103            mov     dpl,#0x0C
02ED 120100    1104            lcall   _Volts_at_Pin
02F0 858218    1105            mov     _linetrack_vright_1_84,dpl
02F3 858319    1106            mov     (_linetrack_vright_1_84 + 1),dph
02F6 85F01A    1107            mov     (_linetrack_vright_1_84 + 2),b
02F9 F51B      1108            mov     (_linetrack_vright_1_84 + 3),a
02FB           1109   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:278: pwm_Left0 = -1;
02FB 75E0FF    1110            mov     _pwm_Left0,#0xFF
02FE           1111   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:280: pwm_Left1 = vright*vright*75/(vright*vright+vleft*vleft);
02FE C018      1112            push    _linetrack_vright_1_84
0300 C019      1113            push    (_linetrack_vright_1_84 + 1)
0302 C01A      1114            push    (_linetrack_vright_1_84 + 2)
0304 C01B      1115            push    (_linetrack_vright_1_84 + 3)
0306 851882    1116            mov     dpl,_linetrack_vright_1_84
0309 851983    1117            mov     dph,(_linetrack_vright_1_84 + 1)
030C 851AF0    1118            mov     b,(_linetrack_vright_1_84 + 2)
030F E51B      1119            mov     a,(_linetrack_vright_1_84 + 3)
0311 120100    1120            lcall   ___fsmul
0314 AC82      1121            mov     r4,dpl
0316 AD83      1122            mov     r5,dph
0318 AEF0      1123            mov     r6,b
031A FF        1124            mov     r7,a
031B E581      1125            mov     a,sp
031D 24FC      1126            add     a,#0xfc
031F F581      1127            mov     sp,a
0321 C004      1128            push    ar4
0323 C005      1129            push    ar5
0325 C006      1130            push    ar6
0327 C007      1131            push    ar7
0329 900000    1132            mov     dptr,#0x0000
032C 75F096    1133            mov     b,#0x96
032F 7442      1134            mov     a,#0x42
0331 120100    1135            lcall   ___fsmul
0334 AC82      1136            mov     r4,dpl
0336 AD83      1137            mov     r5,dph
0338 AEF0      1138            mov     r6,b
033A FF        1139            mov     r7,a
033B E581      1140            mov     a,sp
033D 24FC      1141            add     a,#0xfc
033F F581      1142            mov     sp,a
0341 C004      1143            push    ar4
0343 C005      1144            push    ar5
0345 C006      1145            push    ar6
0347 C007      1146            push    ar7
0349 C018      1147            push    _linetrack_vright_1_84
034B C019      1148            push    (_linetrack_vright_1_84 + 1)
034D C01A      1149            push    (_linetrack_vright_1_84 + 2)
034F C01B      1150            push    (_linetrack_vright_1_84 + 3)
0351 851882    1151            mov     dpl,_linetrack_vright_1_84
0354 851983    1152            mov     dph,(_linetrack_vright_1_84 + 1)
0357 851AF0    1153            mov     b,(_linetrack_vright_1_84 + 2)
035A E51B      1154            mov     a,(_linetrack_vright_1_84 + 3)
035C 120100    1155            lcall   ___fsmul
035F 858268    1156            mov     _linetrack_sloc0_1_0,dpl
0362 858369    1157            mov     (_linetrack_sloc0_1_0 + 1),dph
0365 85F06A    1158            mov     (_linetrack_sloc0_1_0 + 2),b
0368 F56B      1159            mov     (_linetrack_sloc0_1_0 + 3),a
036A E581      1160            mov     a,sp
036C 24FC      1161            add     a,#0xfc
036E F581      1162            mov     sp,a
0370 C0C8      1163            push    _linetrack_vleft_1_84
0372 C0C9      1164            push    (_linetrack_vleft_1_84 + 1)
0374 C0CA      1165            push    (_linetrack_vleft_1_84 + 2)
0376 C0CB      1166            push    (_linetrack_vleft_1_84 + 3)
0378 85C882    1167            mov     dpl,_linetrack_vleft_1_84
037B 85C983    1168            mov     dph,(_linetrack_vleft_1_84 + 1)
037E 85CAF0    1169            mov     b,(_linetrack_vleft_1_84 + 2)
0381 E5CB      1170            mov     a,(_linetrack_vleft_1_84 + 3)
0383 120100    1171            lcall   ___fsmul
0386 AA82      1172            mov     r2,dpl
0388 AB83      1173            mov     r3,dph
038A A8F0      1174            mov     r0,b
038C F9        1175            mov     r1,a
038D E581      1176            mov     a,sp
038F 24FC      1177            add     a,#0xfc
0391 F581      1178            mov     sp,a
0393 C002      1179            push    ar2
0395 C003      1180            push    ar3
0397 C000      1181            push    ar0
0399 C001      1182            push    ar1
039B 856882    1183            mov     dpl,_linetrack_sloc0_1_0
039E 856983    1184            mov     dph,(_linetrack_sloc0_1_0 + 1)
03A1 856AF0    1185            mov     b,(_linetrack_sloc0_1_0 + 2)
03A4 E56B      1186            mov     a,(_linetrack_sloc0_1_0 + 3)
03A6 120100    1187            lcall   ___fsadd
03A9 AA82      1188            mov     r2,dpl
03AB AB83      1189            mov     r3,dph
03AD A8F0      1190            mov     r0,b
03AF F9        1191            mov     r1,a
03B0 E581      1192            mov     a,sp
03B2 24FC      1193            add     a,#0xfc
03B4 F581      1194            mov     sp,a
03B6 D007      1195            pop     ar7
03B8 D006      1196            pop     ar6
03BA D005      1197            pop     ar5
03BC D004      1198            pop     ar4
03BE C002      1199            push    ar2
03C0 C003      1200            push    ar3
03C2 C000      1201            push    ar0
03C4 C001      1202            push    ar1
03C6 8C82      1203            mov     dpl,r4
03C8 8D83      1204            mov     dph,r5
03CA 8EF0      1205            mov     b,r6
03CC EF        1206            mov     a,r7
03CD 120100    1207            lcall   ___fsdiv
03D0 AA82      1208            mov     r2,dpl
03D2 AB83      1209            mov     r3,dph
03D4 ACF0      1210            mov     r4,b
03D6 FD        1211            mov     r5,a
03D7 E581      1212            mov     a,sp
03D9 24FC      1213            add     a,#0xfc
03DB F581      1214            mov     sp,a
03DD 8A82      1215            mov     dpl,r2
03DF 8B83      1216            mov     dph,r3
03E1 8CF0      1217            mov     b,r4
03E3 ED        1218            mov     a,r5
03E4 120100    1219            lcall   ___fs2schar
03E7 8582A0    1220            mov     _pwm_Left1,dpl
03EA           1221   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:281: pwm_Right1 = -1;
03EA 7520FF    1222            mov     _pwm_Right1,#0xFF
03ED           1223   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:283: pwm_Right0 = vleft*vleft*75/(vright*vright+vleft*vleft);
03ED C0C8      1224            push    _linetrack_vleft_1_84
03EF C0C9      1225            push    (_linetrack_vleft_1_84 + 1)
03F1 C0CA      1226            push    (_linetrack_vleft_1_84 + 2)
03F3 C0CB      1227            push    (_linetrack_vleft_1_84 + 3)
03F5 85C882    1228            mov     dpl,_linetrack_vleft_1_84
03F8 85C983    1229            mov     dph,(_linetrack_vleft_1_84 + 1)
03FB 85CAF0    1230            mov     b,(_linetrack_vleft_1_84 + 2)
03FE E5CB      1231            mov     a,(_linetrack_vleft_1_84 + 3)
0400 120100    1232            lcall   ___fsmul
0403 AA82      1233            mov     r2,dpl
0405 AB83      1234            mov     r3,dph
0407 ACF0      1235            mov     r4,b
0409 FD        1236            mov     r5,a
040A E581      1237            mov     a,sp
040C 24FC      1238            add     a,#0xfc
040E F581      1239            mov     sp,a
0410 C002      1240            push    ar2
0412 C003      1241            push    ar3
0414 C004      1242            push    ar4
0416 C005      1243            push    ar5
0418 900000    1244            mov     dptr,#0x0000
041B 75F096    1245            mov     b,#0x96
041E 7442      1246            mov     a,#0x42
0420 120100    1247            lcall   ___fsmul
0423 AA82      1248            mov     r2,dpl
0425 AB83      1249            mov     r3,dph
0427 ACF0      1250            mov     r4,b
0429 FD        1251            mov     r5,a
042A E581      1252            mov     a,sp
042C 24FC      1253            add     a,#0xfc
042E F581      1254            mov     sp,a
0430 C002      1255            push    ar2
0432 C003      1256            push    ar3
0434 C004      1257            push    ar4
0436 C005      1258            push    ar5
0438 C018      1259            push    _linetrack_vright_1_84
043A C019      1260            push    (_linetrack_vright_1_84 + 1)
043C C01A      1261            push    (_linetrack_vright_1_84 + 2)
043E C01B      1262            push    (_linetrack_vright_1_84 + 3)
0440 851882    1263            mov     dpl,_linetrack_vright_1_84
0443 851983    1264            mov     dph,(_linetrack_vright_1_84 + 1)
0446 851AF0    1265            mov     b,(_linetrack_vright_1_84 + 2)
0449 E51B      1266            mov     a,(_linetrack_vright_1_84 + 3)
044B 120100    1267            lcall   ___fsmul
044E 858268    1268            mov     _linetrack_sloc0_1_0,dpl
0451 858369    1269            mov     (_linetrack_sloc0_1_0 + 1),dph
0454 85F06A    1270            mov     (_linetrack_sloc0_1_0 + 2),b
0457 F56B      1271            mov     (_linetrack_sloc0_1_0 + 3),a
0459 E581      1272            mov     a,sp
045B 24FC      1273            add     a,#0xfc
045D F581      1274            mov     sp,a
045F C0C8      1275            push    _linetrack_vleft_1_84
0461 C0C9      1276            push    (_linetrack_vleft_1_84 + 1)
0463 C0CA      1277            push    (_linetrack_vleft_1_84 + 2)
0465 C0CB      1278            push    (_linetrack_vleft_1_84 + 3)
0467 85C882    1279            mov     dpl,_linetrack_vleft_1_84
046A 85C983    1280            mov     dph,(_linetrack_vleft_1_84 + 1)
046D 85CAF0    1281            mov     b,(_linetrack_vleft_1_84 + 2)
0470 E5CB      1282            mov     a,(_linetrack_vleft_1_84 + 3)
0472 120100    1283            lcall   ___fsmul
0475 AE82      1284            mov     r6,dpl
0477 AF83      1285            mov     r7,dph
0479 A8F0      1286            mov     r0,b
047B F9        1287            mov     r1,a
047C E581      1288            mov     a,sp
047E 24FC      1289            add     a,#0xfc
0480 F581      1290            mov     sp,a
0482 C006      1291            push    ar6
0484 C007      1292            push    ar7
0486 C000      1293            push    ar0
0488 C001      1294            push    ar1
048A 856882    1295            mov     dpl,_linetrack_sloc0_1_0
048D 856983    1296            mov     dph,(_linetrack_sloc0_1_0 + 1)
0490 856AF0    1297            mov     b,(_linetrack_sloc0_1_0 + 2)
0493 E56B      1298            mov     a,(_linetrack_sloc0_1_0 + 3)
0495 120100    1299            lcall   ___fsadd
0498 AE82      1300            mov     r6,dpl
049A AF83      1301            mov     r7,dph
049C A8F0      1302            mov     r0,b
049E F9        1303            mov     r1,a
049F E581      1304            mov     a,sp
04A1 24FC      1305            add     a,#0xfc
04A3 F581      1306            mov     sp,a
04A5 D005      1307            pop     ar5
04A7 D004      1308            pop     ar4
04A9 D003      1309            pop     ar3
04AB D002      1310            pop     ar2
04AD C006      1311            push    ar6
04AF C007      1312            push    ar7
04B1 C000      1313            push    ar0
04B3 C001      1314            push    ar1
04B5 8A82      1315            mov     dpl,r2
04B7 8B83      1316            mov     dph,r3
04B9 8CF0      1317            mov     b,r4
04BB ED        1318            mov     a,r5
04BC 120100    1319            lcall   ___fsdiv
04BF AA82      1320            mov     r2,dpl
04C1 AB83      1321            mov     r3,dph
04C3 ACF0      1322            mov     r4,b
04C5 FD        1323            mov     r5,a
04C6 E581      1324            mov     a,sp
04C8 24FC      1325            add     a,#0xfc
04CA F581      1326            mov     sp,a
04CC 8A82      1327            mov     dpl,r2
04CE 8B83      1328            mov     dph,r3
04D0 8CF0      1329            mov     b,r4
04D2 ED        1330            mov     a,r5
04D3 120100    1331            lcall   ___fs2schar
04D6 858260    1332            mov     _pwm_Right0,dpl
04D9           1333   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:285: if (forwardbackward) {
04D9 E578      1334            mov     a,_linetrack_forwardbackward_1_83
04DB 4579      1335            orl     a,(_linetrack_forwardbackward_1_83 + 1)
04DD 6001      1336            jz      L012003?
04DF           1337   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:286: pwm_Left0 = pwm_Left1;
04DF 85A0E0    1338            mov     _pwm_Left0,_pwm_Left1
04E2           1339   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:287: pwm_Left1 = -1;
04E2 75A0FF    1340            mov     _pwm_Left1,#0xFF
04E5           1341   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:288: pwm_Right1 = pwm_Right1;
04E5 852020    1342            mov     _pwm_Right1,_pwm_Right1
04E8           1343   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:289: pwm_Right0 = -1;
04E8 7560FF    1344            mov     _pwm_Right0,#0xFF
04EB           1345   L012003?:
04EB 22        1346            ret
04EC           1347   ;------------------------------------------------------------
04EC           1348   ;Allocation info for local variables in function 'stopcar'
04EC           1349   ;------------------------------------------------------------
04EC           1350   ;------------------------------------------------------------
04EC           1351   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:296: void stopcar () {
04EC           1352   ;        -----------------------------------------
04EC           1353   ;         function stopcar
04EC           1354   ;        -----------------------------------------
04EC           1355   _stopcar:
04EC           1356   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:297: pwm_Left1 = -1;
04EC 75A0FF    1357            mov     _pwm_Left1,#0xFF
04EF           1358   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:298: pwm_Right1 = -1;
04EF 7520FF    1359            mov     _pwm_Right1,#0xFF
04F2           1360   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:299: pwm_Left0 = -1;
04F2 75E0FF    1361            mov     _pwm_Left0,#0xFF
04F5           1362   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:300: pwm_Right0 = -1;
04F5 7560FF    1363            mov     _pwm_Right0,#0xFF
04F8 22        1364            ret
04F9           1365   ;------------------------------------------------------------
04F9           1366   ;Allocation info for local variables in function 'turncar'
04F9           1367   ;------------------------------------------------------------
04F9           1368   ;leftright                 Allocated to registers r2 r3 
04F9           1369   ;vleft                     Allocated with name '_turncar_vleft_1_88'
04F9           1370   ;vright                    Allocated with name '_turncar_vright_1_88'
04F9           1371   ;------------------------------------------------------------
04F9           1372   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:303: void turncar (int leftright) {
04F9           1373   ;        -----------------------------------------
04F9           1374   ;         function turncar
04F9           1375   ;        -----------------------------------------
04F9           1376   _turncar:
04F9 AA82      1377            mov     r2,dpl
04FB AB83      1378            mov     r3,dph
04FD           1379   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:307: pwm_Left0 = -1;
04FD 75E0FF    1380            mov     _pwm_Left0,#0xFF
0500           1381   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:308: pwm_Left1 = -1;
0500 75A0FF    1382            mov     _pwm_Left1,#0xFF
0503           1383   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:309: pwm_Right0 = -1;
0503 7560FF    1384            mov     _pwm_Right0,#0xFF
0506           1385   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:310: pwm_Right1 = -1;
0506 7520FF    1386            mov     _pwm_Right1,#0xFF
0509           1387   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:313: if (leftright == 0) {
0509 EA        1388            mov     a,r2
050A 4B        1389            orl     a,r3
050B 6001      1390            jz      L014022?
050D 020100    1391            ljmp    L014012?
0510           1392   L014022?:
0510           1393   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:315: pwm_Right0 = 50;
0510 756032    1394            mov     _pwm_Right0,#0x32
0513           1395   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:317: waitms(1000);
0513 9003E8    1396            mov     dptr,#0x03E8
0516 120100    1397            lcall   _waitms
0519           1398   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:319: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0519 75820B    1399            mov     dpl,#0x0B
051C 120100    1400            lcall   _Volts_at_Pin
051F 8582B8    1401            mov     _turncar_vleft_1_88,dpl
0522 8583B9    1402            mov     (_turncar_vleft_1_88 + 1),dph
0525 85F0BA    1403            mov     (_turncar_vleft_1_88 + 2),b
0528 F5BB      1404            mov     (_turncar_vleft_1_88 + 3),a
052A           1405   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:320: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
052A 75820C    1406            mov     dpl,#0x0C
052D 120100    1407            lcall   _Volts_at_Pin
0530 858208    1408            mov     _turncar_vright_1_88,dpl
0533 858309    1409            mov     (_turncar_vright_1_88 + 1),dph
0536 85F00A    1410            mov     (_turncar_vright_1_88 + 2),b
0539 F50B      1411            mov     (_turncar_vright_1_88 + 3),a
053B           1412   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:322: while (((vleft - vright) > 0.2) || ((vleft - vright) < (-0.2))) {
053B           1413   L014002?:
053B C008      1414            push    _turncar_vright_1_88
053D C009      1415            push    (_turncar_vright_1_88 + 1)
053F C00A      1416            push    (_turncar_vright_1_88 + 2)
0541 C00B      1417            push    (_turncar_vright_1_88 + 3)
0543 85B882    1418            mov     dpl,_turncar_vleft_1_88
0546 85B983    1419            mov     dph,(_turncar_vleft_1_88 + 1)
0549 85BAF0    1420            mov     b,(_turncar_vleft_1_88 + 2)
054C E5BB      1421            mov     a,(_turncar_vleft_1_88 + 3)
054E 120100    1422            lcall   ___fssub
0551 AC82      1423            mov     r4,dpl
0553 AD83      1424            mov     r5,dph
0555 AEF0      1425            mov     r6,b
0557 FF        1426            mov     r7,a
0558 E581      1427            mov     a,sp
055A 24FC      1428            add     a,#0xfc
055C F581      1429            mov     sp,a
055E 74CD      1430            mov     a,#0xCD
0560 C0E0      1431            push    acc
0562 74CC      1432            mov     a,#0xCC
0564 C0E0      1433            push    acc
0566 744C      1434            mov     a,#0x4C
0568 C0E0      1435            push    acc
056A 743E      1436            mov     a,#0x3E
056C C0E0      1437            push    acc
056E 8C82      1438            mov     dpl,r4
0570 8D83      1439            mov     dph,r5
0572 8EF0      1440            mov     b,r6
0574 EF        1441            mov     a,r7
0575 120100    1442            lcall   ___fsgt
0578 AC82      1443            mov     r4,dpl
057A E581      1444            mov     a,sp
057C 24FC      1445            add     a,#0xfc
057E F581      1446            mov     sp,a
0580 EC        1447            mov     a,r4
0581 7001      1448            jnz     L014003?
0583 C008      1449            push    _turncar_vright_1_88
0585 C009      1450            push    (_turncar_vright_1_88 + 1)
0587 C00A      1451            push    (_turncar_vright_1_88 + 2)
0589 C00B      1452            push    (_turncar_vright_1_88 + 3)
058B 85B882    1453            mov     dpl,_turncar_vleft_1_88
058E 85B983    1454            mov     dph,(_turncar_vleft_1_88 + 1)
0591 85BAF0    1455            mov     b,(_turncar_vleft_1_88 + 2)
0594 E5BB      1456            mov     a,(_turncar_vleft_1_88 + 3)
0596 120100    1457            lcall   ___fssub
0599 AC82      1458            mov     r4,dpl
059B AD83      1459            mov     r5,dph
059D AEF0      1460            mov     r6,b
059F FF        1461            mov     r7,a
05A0 E581      1462            mov     a,sp
05A2 24FC      1463            add     a,#0xfc
05A4 F581      1464            mov     sp,a
05A6 74CD      1465            mov     a,#0xCD
05A8 C0E0      1466            push    acc
05AA 74CC      1467            mov     a,#0xCC
05AC C0E0      1468            push    acc
05AE 744C      1469            mov     a,#0x4C
05B0 C0E0      1470            push    acc
05B2 74BE      1471            mov     a,#0xBE
05B4 C0E0      1472            push    acc
05B6 8C82      1473            mov     dpl,r4
05B8 8D83      1474            mov     dph,r5
05BA 8EF0      1475            mov     b,r6
05BC EF        1476            mov     a,r7
05BD 120100    1477            lcall   ___fslt
05C0 AC82      1478            mov     r4,dpl
05C2 E581      1479            mov     a,sp
05C4 24FC      1480            add     a,#0xfc
05C6 F581      1481            mov     sp,a
05C8 EC        1482            mov     a,r4
05C9 6001      1483            jz      L014004?
05CB           1484   L014003?:
05CB           1485   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:324: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
05CB 75820B    1486            mov     dpl,#0x0B
05CE 120100    1487            lcall   _Volts_at_Pin
05D1 8582B8    1488            mov     _turncar_vleft_1_88,dpl
05D4 8583B9    1489            mov     (_turncar_vleft_1_88 + 1),dph
05D7 85F0BA    1490            mov     (_turncar_vleft_1_88 + 2),b
05DA F5BB      1491            mov     (_turncar_vleft_1_88 + 3),a
05DC           1492   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:325: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
05DC 75820C    1493            mov     dpl,#0x0C
05DF 120100    1494            lcall   _Volts_at_Pin
05E2 858208    1495            mov     _turncar_vright_1_88,dpl
05E5 858309    1496            mov     (_turncar_vright_1_88 + 1),dph
05E8 85F00A    1497            mov     (_turncar_vright_1_88 + 2),b
05EB F50B      1498            mov     (_turncar_vright_1_88 + 3),a
05ED 020100    1499            ljmp    L014002?
05F0           1500   L014004?:
05F0           1501   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:329: pwm_Right0 = -1;            
05F0 7560FF    1502            mov     _pwm_Right0,#0xFF
05F3 22        1503            ret
05F4           1504   L014012?:
05F4           1505   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:332: else if (leftright == 1) {
05F4 BA0140    1506            cjne    r2,#0x01,L014025?
05F7 BB0040    1507            cjne    r3,#0x00,L014025?
05FA 8001      1508            sjmp    L014026?
05FC           1509   L014025?:
05FC 22        1510            ret
05FD           1511   L014026?:
05FD           1512   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:334: pwm_Left1 = 50;
05FD 75A032    1513            mov     _pwm_Left1,#0x32
0600           1514   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:336: waitms(1000);
0600 9003E8    1515            mov     dptr,#0x03E8
0603 120100    1516            lcall   _waitms
0606           1517   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:338: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0606 75820B    1518            mov     dpl,#0x0B
0609 120100    1519            lcall   _Volts_at_Pin
060C 8582B8    1520            mov     _turncar_vleft_1_88,dpl
060F 8583B9    1521            mov     (_turncar_vleft_1_88 + 1),dph
0612 85F0BA    1522            mov     (_turncar_vleft_1_88 + 2),b
0615 F5BB      1523            mov     (_turncar_vleft_1_88 + 3),a
0617           1524   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:339: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0617 75820C    1525            mov     dpl,#0x0C
061A 120100    1526            lcall   _Volts_at_Pin
061D 858208    1527            mov     _turncar_vright_1_88,dpl
0620 858309    1528            mov     (_turncar_vright_1_88 + 1),dph
0623 85F00A    1529            mov     (_turncar_vright_1_88 + 2),b
0626 F50B      1530            mov     (_turncar_vright_1_88 + 3),a
0628           1531   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:341: while (((vleft - vright) > 0.2) || ((vleft - vright) < (-0.2))) {
0628           1532   L014006?:
0628 C008      1533            push    _turncar_vright_1_88
062A C009      1534            push    (_turncar_vright_1_88 + 1)
062C C00A      1535            push    (_turncar_vright_1_88 + 2)
062E C00B      1536            push    (_turncar_vright_1_88 + 3)
0630 85B882    1537            mov     dpl,_turncar_vleft_1_88
0633 85B983    1538            mov     dph,(_turncar_vleft_1_88 + 1)
0636 85BAF0    1539            mov     b,(_turncar_vleft_1_88 + 2)
0639 E5BB      1540            mov     a,(_turncar_vleft_1_88 + 3)
063B 120100    1541            lcall   ___fssub
063E AA82      1542            mov     r2,dpl
0640 AB83      1543            mov     r3,dph
0642 ACF0      1544            mov     r4,b
0644 FD        1545            mov     r5,a
0645 E581      1546            mov     a,sp
0647 24FC      1547            add     a,#0xfc
0649 F581      1548            mov     sp,a
064B 74CD      1549            mov     a,#0xCD
064D C0E0      1550            push    acc
064F 74CC      1551            mov     a,#0xCC
0651 C0E0      1552            push    acc
0653 744C      1553            mov     a,#0x4C
0655 C0E0      1554            push    acc
0657 743E      1555            mov     a,#0x3E
0659 C0E0      1556            push    acc
065B 8A82      1557            mov     dpl,r2
065D 8B83      1558            mov     dph,r3
065F 8CF0      1559            mov     b,r4
0661 ED        1560            mov     a,r5
0662 120100    1561            lcall   ___fsgt
0665 AA82      1562            mov     r2,dpl
0667 E581      1563            mov     a,sp
0669 24FC      1564            add     a,#0xfc
066B F581      1565            mov     sp,a
066D EA        1566            mov     a,r2
066E 7001      1567            jnz     L014007?
0670 C008      1568            push    _turncar_vright_1_88
0672 C009      1569            push    (_turncar_vright_1_88 + 1)
0674 C00A      1570            push    (_turncar_vright_1_88 + 2)
0676 C00B      1571            push    (_turncar_vright_1_88 + 3)
0678 85B882    1572            mov     dpl,_turncar_vleft_1_88
067B 85B983    1573            mov     dph,(_turncar_vleft_1_88 + 1)
067E 85BAF0    1574            mov     b,(_turncar_vleft_1_88 + 2)
0681 E5BB      1575            mov     a,(_turncar_vleft_1_88 + 3)
0683 120100    1576            lcall   ___fssub
0686 AA82      1577            mov     r2,dpl
0688 AB83      1578            mov     r3,dph
068A ACF0      1579            mov     r4,b
068C FD        1580            mov     r5,a
068D E581      1581            mov     a,sp
068F 24FC      1582            add     a,#0xfc
0691 F581      1583            mov     sp,a
0693 74CD      1584            mov     a,#0xCD
0695 C0E0      1585            push    acc
0697 74CC      1586            mov     a,#0xCC
0699 C0E0      1587            push    acc
069B 744C      1588            mov     a,#0x4C
069D C0E0      1589            push    acc
069F 74BE      1590            mov     a,#0xBE
06A1 C0E0      1591            push    acc
06A3 8A82      1592            mov     dpl,r2
06A5 8B83      1593            mov     dph,r3
06A7 8CF0      1594            mov     b,r4
06A9 ED        1595            mov     a,r5
06AA 120100    1596            lcall   ___fslt
06AD AA82      1597            mov     r2,dpl
06AF E581      1598            mov     a,sp
06B1 24FC      1599            add     a,#0xfc
06B3 F581      1600            mov     sp,a
06B5 EA        1601            mov     a,r2
06B6 6001      1602            jz      L014008?
06B8           1603   L014007?:
06B8           1604   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:343: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
06B8 75820B    1605            mov     dpl,#0x0B
06BB 120100    1606            lcall   _Volts_at_Pin
06BE 8582B8    1607            mov     _turncar_vleft_1_88,dpl
06C1 8583B9    1608            mov     (_turncar_vleft_1_88 + 1),dph
06C4 85F0BA    1609            mov     (_turncar_vleft_1_88 + 2),b
06C7 F5BB      1610            mov     (_turncar_vleft_1_88 + 3),a
06C9           1611   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:344: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
06C9 75820C    1612            mov     dpl,#0x0C
06CC 120100    1613            lcall   _Volts_at_Pin
06CF 858208    1614            mov     _turncar_vright_1_88,dpl
06D2 858309    1615            mov     (_turncar_vright_1_88 + 1),dph
06D5 85F00A    1616            mov     (_turncar_vright_1_88 + 2),b
06D8 F50B      1617            mov     (_turncar_vright_1_88 + 3),a
06DA 020100    1618            ljmp    L014006?
06DD           1619   L014008?:
06DD           1620   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:348: pwm_Left1 = -1; 
06DD 75A0FF    1621            mov     _pwm_Left1,#0xFF
06E0 22        1622            ret
06E1           1623   ;------------------------------------------------------------
06E1           1624   ;Allocation info for local variables in function 'uturn'
06E1           1625   ;------------------------------------------------------------
06E1           1626   ;vleft                     Allocated with name '_uturn_vleft_1_93'
06E1           1627   ;vright                    Allocated with name '_uturn_vright_1_93'
06E1           1628   ;------------------------------------------------------------
06E1           1629   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:352: void uturn () {
06E1           1630   ;        -----------------------------------------
06E1           1631   ;         function uturn
06E1           1632   ;        -----------------------------------------
06E1           1633   _uturn:
06E1           1634   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:356: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
06E1 75820B    1635            mov     dpl,#0x0B
06E4 120100    1636            lcall   _Volts_at_Pin
06E7 858258    1637            mov     _uturn_vleft_1_93,dpl
06EA 858359    1638            mov     (_uturn_vleft_1_93 + 1),dph
06ED 85F05A    1639            mov     (_uturn_vleft_1_93 + 2),b
06F0 F55B      1640            mov     (_uturn_vleft_1_93 + 3),a
06F2           1641   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:357: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
06F2 75820C    1642            mov     dpl,#0x0C
06F5 120100    1643            lcall   _Volts_at_Pin
06F8 8582A8    1644            mov     _uturn_vright_1_93,dpl
06FB 8583A9    1645            mov     (_uturn_vright_1_93 + 1),dph
06FE 85F0AA    1646            mov     (_uturn_vright_1_93 + 2),b
0701 F5AB      1647            mov     (_uturn_vright_1_93 + 3),a
0703           1648   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:359: pwm_Left0 = -1;
0703 75E0FF    1649            mov     _pwm_Left0,#0xFF
0706           1650   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:360: pwm_Left1 = 50;
0706 75A032    1651            mov     _pwm_Left1,#0x32
0709           1652   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:361: pwm_Right0 = -1;
0709 7560FF    1653            mov     _pwm_Right0,#0xFF
070C           1654   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:362: pwm_Right1 = 50;
070C 752032    1655            mov     _pwm_Right1,#0x32
070F           1656   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:364: waitms(4000);
070F 900FA0    1657            mov     dptr,#0x0FA0
0712 120100    1658            lcall   _waitms
0715           1659   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:366: while (((vleft - vright) > 0.2) || ((vleft - vright) < (-0.2))) {
0715           1660   L015002?:
0715 C0A8      1661            push    _uturn_vright_1_93
0717 C0A9      1662            push    (_uturn_vright_1_93 + 1)
0719 C0AA      1663            push    (_uturn_vright_1_93 + 2)
071B C0AB      1664            push    (_uturn_vright_1_93 + 3)
071D 855882    1665            mov     dpl,_uturn_vleft_1_93
0720 855983    1666            mov     dph,(_uturn_vleft_1_93 + 1)
0723 855AF0    1667            mov     b,(_uturn_vleft_1_93 + 2)
0726 E55B      1668            mov     a,(_uturn_vleft_1_93 + 3)
0728 120100    1669            lcall   ___fssub
072B AA82      1670            mov     r2,dpl
072D AB83      1671            mov     r3,dph
072F ACF0      1672            mov     r4,b
0731 FD        1673            mov     r5,a
0732 E581      1674            mov     a,sp
0734 24FC      1675            add     a,#0xfc
0736 F581      1676            mov     sp,a
0738 74CD      1677            mov     a,#0xCD
073A C0E0      1678            push    acc
073C 74CC      1679            mov     a,#0xCC
073E C0E0      1680            push    acc
0740 744C      1681            mov     a,#0x4C
0742 C0E0      1682            push    acc
0744 743E      1683            mov     a,#0x3E
0746 C0E0      1684            push    acc
0748 8A82      1685            mov     dpl,r2
074A 8B83      1686            mov     dph,r3
074C 8CF0      1687            mov     b,r4
074E ED        1688            mov     a,r5
074F 120100    1689            lcall   ___fsgt
0752 AA82      1690            mov     r2,dpl
0754 E581      1691            mov     a,sp
0756 24FC      1692            add     a,#0xfc
0758 F581      1693            mov     sp,a
075A EA        1694            mov     a,r2
075B 7001      1695            jnz     L015003?
075D C0A8      1696            push    _uturn_vright_1_93
075F C0A9      1697            push    (_uturn_vright_1_93 + 1)
0761 C0AA      1698            push    (_uturn_vright_1_93 + 2)
0763 C0AB      1699            push    (_uturn_vright_1_93 + 3)
0765 855882    1700            mov     dpl,_uturn_vleft_1_93
0768 855983    1701            mov     dph,(_uturn_vleft_1_93 + 1)
076B 855AF0    1702            mov     b,(_uturn_vleft_1_93 + 2)
076E E55B      1703            mov     a,(_uturn_vleft_1_93 + 3)
0770 120100    1704            lcall   ___fssub
0773 AA82      1705            mov     r2,dpl
0775 AB83      1706            mov     r3,dph
0777 ACF0      1707            mov     r4,b
0779 FD        1708            mov     r5,a
077A E581      1709            mov     a,sp
077C 24FC      1710            add     a,#0xfc
077E F581      1711            mov     sp,a
0780 74CD      1712            mov     a,#0xCD
0782 C0E0      1713            push    acc
0784 74CC      1714            mov     a,#0xCC
0786 C0E0      1715            push    acc
0788 744C      1716            mov     a,#0x4C
078A C0E0      1717            push    acc
078C 74BE      1718            mov     a,#0xBE
078E C0E0      1719            push    acc
0790 8A82      1720            mov     dpl,r2
0792 8B83      1721            mov     dph,r3
0794 8CF0      1722            mov     b,r4
0796 ED        1723            mov     a,r5
0797 120100    1724            lcall   ___fslt
079A AA82      1725            mov     r2,dpl
079C E581      1726            mov     a,sp
079E 24FC      1727            add     a,#0xfc
07A0 F581      1728            mov     sp,a
07A2 EA        1729            mov     a,r2
07A3 6001      1730            jz      L015005?
07A5           1731   L015003?:
07A5           1732   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:368: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
07A5 75820B    1733            mov     dpl,#0x0B
07A8 120100    1734            lcall   _Volts_at_Pin
07AB 858258    1735            mov     _uturn_vleft_1_93,dpl
07AE 858359    1736            mov     (_uturn_vleft_1_93 + 1),dph
07B1 85F05A    1737            mov     (_uturn_vleft_1_93 + 2),b
07B4 F55B      1738            mov     (_uturn_vleft_1_93 + 3),a
07B6           1739   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:369: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
07B6 75820C    1740            mov     dpl,#0x0C
07B9 120100    1741            lcall   _Volts_at_Pin
07BC 8582A8    1742            mov     _uturn_vright_1_93,dpl
07BF 8583A9    1743            mov     (_uturn_vright_1_93 + 1),dph
07C2 85F0AA    1744            mov     (_uturn_vright_1_93 + 2),b
07C5 F5AB      1745            mov     (_uturn_vright_1_93 + 3),a
07C7 020100    1746            ljmp    L015002?
07CA           1747   L015005?:
07CA 22        1748            ret
07CB           1749   ;------------------------------------------------------------
07CB           1750   ;Allocation info for local variables in function 'main'
07CB           1751   ;------------------------------------------------------------
07CB           1752   ;------------------------------------------------------------
07CB           1753   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:373: void main (void)
07CB           1754   ;        -----------------------------------------
07CB           1755   ;         function main
07CB           1756   ;        -----------------------------------------
07CB           1757   _main:
07CB           1758   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:376: MOTOR_LEFT0 =0;
07CB C295      1759            clr     _P1_5
07CD           1760   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:377: MOTOR_LEFT1 =0;
07CD C296      1761            clr     _P1_6
07CF           1762   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:378: MOTOR_RIGHT0 =0;
07CF C2A0      1763            clr     _P2_0
07D1           1764   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:379: MOTOR_RIGHT1 =0;
07D1 C2A1      1765            clr     _P2_1
07D3           1766   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:381: currentstate = 1;           //initialize the car to be stopped
07D3 756001    1767            mov     _currentstate,#0x01
07D6           1768   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:382: currentcmd = 1;             //initialize the command to be null
07D6 75A001    1769            mov     _currentcmd,#0x01
07D9           1770   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:385: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
07D9 7440      1771            mov     a,#__str_1
07DB C0E0      1772            push    acc
07DD 74A9      1773            mov     a,#(__str_1 >> 8)
07DF C0E0      1774            push    acc
07E1 7480      1775            mov     a,#0x80
07E3 C0E0      1776            push    acc
07E5 120100    1777            lcall   _printf
07E8 1581      1778            dec     sp
07EA 1581      1779            dec     sp
07EC 1581      1780            dec     sp
07EE           1781   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:394: InitPinADC(2, 3); // Configure P2.3 as analog input
07EE 754003    1782            mov     _InitPinADC_PARM_2,#0x03
07F1 758202    1783            mov     dpl,#0x02
07F4 120100    1784            lcall   _InitPinADC
07F7           1785   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:395: InitPinADC(2, 4); // Configure P2.4 as analog input
07F7 754004    1786            mov     _InitPinADC_PARM_2,#0x04
07FA 758202    1787            mov     dpl,#0x02
07FD 120100    1788            lcall   _InitPinADC
0800           1789   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:396: InitPinADC(1, 0);
0800 754000    1790            mov     _InitPinADC_PARM_2,#0x00
0803 758201    1791            mov     dpl,#0x01
0806 120100    1792            lcall   _InitPinADC
0809           1793   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:397: InitADC();
0809 120100    1794            lcall   _InitADC
080C           1795   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:406: while(P1_1 !=0);
080C           1796   L016001?:
080C 209180    1797            jb      _P1_1,L016001?
080F           1798   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:407: printf("1\r\n");
080F 74C0      1799            mov     a,#__str_2
0811 C0E0      1800            push    acc
0813 74A9      1801            mov     a,#(__str_2 >> 8)
0815 C0E0      1802            push    acc
0817 7480      1803            mov     a,#0x80
0819 C0E0      1804            push    acc
081B 120100    1805            lcall   _printf
081E 1581      1806            dec     sp
0820 1581      1807            dec     sp
0822 1581      1808            dec     sp
0824           1809   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:408: while(P1_1 !=1);
0824           1810   L016004?:
0824 309100    1811            jnb     _P1_1,L016004?
0827           1812   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:409: printf("0\r\n");
0827 7440      1813            mov     a,#__str_3
0829 C0E0      1814            push    acc
082B 74AA      1815            mov     a,#(__str_3 >> 8)
082D C0E0      1816            push    acc
082F 7480      1817            mov     a,#0x80
0831 C0E0      1818            push    acc
0833 120100    1819            lcall   _printf
0836 1581      1820            dec     sp
0838 1581      1821            dec     sp
083A 1581      1822            dec     sp
083C           1823   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:413: switch (currentstate) {
083C AA60      1824            mov     r2,_currentstate
083E BA0180    1825            cjne    r2,#0x01,L016053?
0841 8001      1826            sjmp    L016007?
0843           1827   L016053?:
0843 BA0200    1828            cjne    r2,#0x02,L016054?
0846 8001      1829            sjmp    L016008?
0848           1830   L016054?:
0848           1831   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:414: case 1:
0848 BA0380    1832            cjne    r2,#0x03,L016010?
084B 8001      1833            sjmp    L016009?
084D           1834   L016007?:
084D           1835   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:415: linetrack(0);       //forwards
084D 900000    1836            mov     dptr,#0x0000
0850 120100    1837            lcall   _linetrack
0853           1838   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:416: break;
0853           1839   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:417: case 2:
0853 8001      1840            sjmp    L016010?
0855           1841   L016008?:
0855           1842   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:418: linetrack(1);       //backwards
0855 900001    1843            mov     dptr,#0x0001
0858 120100    1844            lcall   _linetrack
085B           1845   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:419: break;
085B           1846   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:420: case 3:
085B 8001      1847            sjmp    L016010?
085D           1848   L016009?:
085D           1849   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:421: stopcar();          //stop car
085D 120100    1850            lcall   _stopcar
0860           1851   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:423: }
0860           1852   L016010?:
0860           1853   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:425: switch (currentcmd) {
0860 E5A0      1854            mov     a,_currentcmd
0862 FA        1855            mov     r2,a
0863 30E700    1856            jnb     acc.7,L016056?
0866 020100    1857            ljmp    L016029?
0869           1858   L016056?:
0869 C3        1859            clr     c
086A 7486      1860            mov     a,#(0x06 ^ 0x80)
086C 8AF0      1861            mov     b,r2
086E 63F080    1862            xrl     b,#0x80
0871 95F0      1863            subb    a,b
0873 5001      1864            jnc     L016057?
0875 020100    1865            ljmp    L016029?
0878           1866   L016057?:
0878 EA        1867            mov     a,r2
0879 2A        1868            add     a,r2
087A 2A        1869            add     a,r2
087B 90ACC0    1870            mov     dptr,#L016058?
087E 73        1871            jmp     @a+dptr
087F           1872   L016058?:
087F 020100    1873            ljmp    L016011?
0882 020100    1874            ljmp    L016017?
0885 020100    1875            ljmp    L016021?
0888 020100    1876            ljmp    L016025?
088B 020100    1877            ljmp    L016026?
088E 020100    1878            ljmp    L016027?
0891 020100    1879            ljmp    L016028?
0894           1880   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:427: case 0 :
0894           1881   L016011?:
0894           1882   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:429: if (currentstate == 1) {
0894 7401      1883            mov     a,#0x01
0896 B560C0    1884            cjne    a,_currentstate,L016059?
0899 8001      1885            sjmp    L016060?
089B           1886   L016059?:
089B 020100    1887            ljmp    L016001?
089E           1888   L016060?:
089E           1889   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:430: if (Volts_at_Pin(LQFP32_MUX_P2_3) > 1 && Volts_at_Pin(LQFP32_MUX_P2_4) > 1) {
089E 75820B    1890            mov     dpl,#0x0B
08A1 120100    1891            lcall   _Volts_at_Pin
08A4 AA82      1892            mov     r2,dpl
08A6 AB83      1893            mov     r3,dph
08A8 ACF0      1894            mov     r4,b
08AA FD        1895            mov     r5,a
08AB E4        1896            clr     a
08AC C0E0      1897            push    acc
08AE C0E0      1898            push    acc
08B0 7480      1899            mov     a,#0x80
08B2 C0E0      1900            push    acc
08B4 743F      1901            mov     a,#0x3F
08B6 C0E0      1902            push    acc
08B8 8A82      1903            mov     dpl,r2
08BA 8B83      1904            mov     dph,r3
08BC 8CF0      1905            mov     b,r4
08BE ED        1906            mov     a,r5
08BF 120100    1907            lcall   ___fsgt
08C2 AA82      1908            mov     r2,dpl
08C4 E581      1909            mov     a,sp
08C6 24FC      1910            add     a,#0xfc
08C8 F581      1911            mov     sp,a
08CA EA        1912            mov     a,r2
08CB 7001      1913            jnz     L016061?
08CD 020100    1914            ljmp    L016001?
08D0           1915   L016061?:
08D0 75820C    1916            mov     dpl,#0x0C
08D3 120100    1917            lcall   _Volts_at_Pin
08D6 AA82      1918            mov     r2,dpl
08D8 AB83      1919            mov     r3,dph
08DA ACF0      1920            mov     r4,b
08DC FD        1921            mov     r5,a
08DD E4        1922            clr     a
08DE C0E0      1923            push    acc
08E0 C0E0      1924            push    acc
08E2 7480      1925            mov     a,#0x80
08E4 C0E0      1926            push    acc
08E6 743F      1927            mov     a,#0x3F
08E8 C0E0      1928            push    acc
08EA 8A82      1929            mov     dpl,r2
08EC 8B83      1930            mov     dph,r3
08EE 8CF0      1931            mov     b,r4
08F0 ED        1932            mov     a,r5
08F1 120100    1933            lcall   ___fsgt
08F4 AA82      1934            mov     r2,dpl
08F6 E581      1935            mov     a,sp
08F8 24FC      1936            add     a,#0xfc
08FA F581      1937            mov     sp,a
08FC EA        1938            mov     a,r2
08FD 7001      1939            jnz     L016062?
08FF 020100    1940            ljmp    L016001?
0902           1941   L016062?:
0902           1942   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:432: pwm_Left1 = 35;
0902 75A023    1943            mov     _pwm_Left1,#0x23
0905           1944   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:433: pwm_Left0 = -1;
0905 75E0FF    1945            mov     _pwm_Left0,#0xFF
0908           1946   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:434: pwm_Right0 = 35;
0908 756023    1947            mov     _pwm_Right0,#0x23
090B           1948   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:435: pwm_Right1 = -1;                                            
090B 7520FF    1949            mov     _pwm_Right1,#0xFF
090E           1950   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:436: waitms(1500);
090E 9005DC    1951            mov     dptr,#0x05DC
0911 120100    1952            lcall   _waitms
0914           1953   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:439: break;
0914 020100    1954            ljmp    L016001?
0917           1955   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:440: case 1 :
0917           1956   L016017?:
0917           1957   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:442: if (Volts_at_Pin(LQFP32_MUX_P2_3) > 1 && Volts_at_Pin(LQFP32_MUX_P2_4) > 1) {
0917 75820B    1958            mov     dpl,#0x0B
091A 120100    1959            lcall   _Volts_at_Pin
091D AA82      1960            mov     r2,dpl
091F AB83      1961            mov     r3,dph
0921 ACF0      1962            mov     r4,b
0923 FD        1963            mov     r5,a
0924 E4        1964            clr     a
0925 C0E0      1965            push    acc
0927 C0E0      1966            push    acc
0929 7480      1967            mov     a,#0x80
092B C0E0      1968            push    acc
092D 743F      1969            mov     a,#0x3F
092F C0E0      1970            push    acc
0931 8A82      1971            mov     dpl,r2
0933 8B83      1972            mov     dph,r3
0935 8CF0      1973            mov     b,r4
0937 ED        1974            mov     a,r5
0938 120100    1975            lcall   ___fsgt
093B AA82      1976            mov     r2,dpl
093D E581      1977            mov     a,sp
093F 24FC      1978            add     a,#0xfc
0941 F581      1979            mov     sp,a
0943 EA        1980            mov     a,r2
0944 7001      1981            jnz     L016063?
0946 020100    1982            ljmp    L016001?
0949           1983   L016063?:
0949 75820C    1984            mov     dpl,#0x0C
094C 120100    1985            lcall   _Volts_at_Pin
094F AA82      1986            mov     r2,dpl
0951 AB83      1987            mov     r3,dph
0953 ACF0      1988            mov     r4,b
0955 FD        1989            mov     r5,a
0956 E4        1990            clr     a
0957 C0E0      1991            push    acc
0959 C0E0      1992            push    acc
095B 7480      1993            mov     a,#0x80
095D C0E0      1994            push    acc
095F 743F      1995            mov     a,#0x3F
0961 C0E0      1996            push    acc
0963 8A82      1997            mov     dpl,r2
0965 8B83      1998            mov     dph,r3
0967 8CF0      1999            mov     b,r4
0969 ED        2000            mov     a,r5
096A 120100    2001            lcall   ___fsgt
096D AA82      2002            mov     r2,dpl
096F E581      2003            mov     a,sp
0971 24FC      2004            add     a,#0xfc
0973 F581      2005            mov     sp,a
0975 EA        2006            mov     a,r2
0976 7001      2007            jnz     L016064?
0978 020100    2008            ljmp    L016001?
097B           2009   L016064?:
097B           2010   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:444: pwm_Left1 = 35;
097B 75A023    2011            mov     _pwm_Left1,#0x23
097E           2012   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:445: pwm_Left0 = -1;
097E 75E0FF    2013            mov     _pwm_Left0,#0xFF
0981           2014   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:446: pwm_Right0 = 35;
0981 756023    2015            mov     _pwm_Right0,#0x23
0984           2016   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:447: pwm_Right1 = -1;                                            
0984 7520FF    2017            mov     _pwm_Right1,#0xFF
0987           2018   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:448: waitms(1500);
0987 9005DC    2019            mov     dptr,#0x05DC
098A 120100    2020            lcall   _waitms
098D           2021   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:450: turncar(0); //0 = left
098D 900000    2022            mov     dptr,#0x0000
0990 120100    2023            lcall   _turncar
0993           2024   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:451: currentcmd = 0;
0993 75A000    2025            mov     _currentcmd,#0x00
0996           2026   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:454: break;
0996 020100    2027            ljmp    L016001?
0999           2028   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:457: case 2 :
0999           2029   L016021?:
0999           2030   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:459: if (Volts_at_Pin(LQFP32_MUX_P2_4) > 1 || Volts_at_Pin(LQFP32_MUX_P2_3) > 1) {
0999 75820C    2031            mov     dpl,#0x0C
099C 120100    2032            lcall   _Volts_at_Pin
099F AA82      2033            mov     r2,dpl
09A1 AB83      2034            mov     r3,dph
09A3 ACF0      2035            mov     r4,b
09A5 FD        2036            mov     r5,a
09A6 E4        2037            clr     a
09A7 C0E0      2038            push    acc
09A9 C0E0      2039            push    acc
09AB 7480      2040            mov     a,#0x80
09AD C0E0      2041            push    acc
09AF 743F      2042            mov     a,#0x3F
09B1 C0E0      2043            push    acc
09B3 8A82      2044            mov     dpl,r2
09B5 8B83      2045            mov     dph,r3
09B7 8CF0      2046            mov     b,r4
09B9 ED        2047            mov     a,r5
09BA 120100    2048            lcall   ___fsgt
09BD AA82      2049            mov     r2,dpl
09BF E581      2050            mov     a,sp
09C1 24FC      2051            add     a,#0xfc
09C3 F581      2052            mov     sp,a
09C5 EA        2053            mov     a,r2
09C6 7001      2054            jnz     L016022?
09C8 75820B    2055            mov     dpl,#0x0B
09CB 120100    2056            lcall   _Volts_at_Pin
09CE AA82      2057            mov     r2,dpl
09D0 AB83      2058            mov     r3,dph
09D2 ACF0      2059            mov     r4,b
09D4 FD        2060            mov     r5,a
09D5 E4        2061            clr     a
09D6 C0E0      2062            push    acc
09D8 C0E0      2063            push    acc
09DA 7480      2064            mov     a,#0x80
09DC C0E0      2065            push    acc
09DE 743F      2066            mov     a,#0x3F
09E0 C0E0      2067            push    acc
09E2 8A82      2068            mov     dpl,r2
09E4 8B83      2069            mov     dph,r3
09E6 8CF0      2070            mov     b,r4
09E8 ED        2071            mov     a,r5
09E9 120100    2072            lcall   ___fsgt
09EC AA82      2073            mov     r2,dpl
09EE E581      2074            mov     a,sp
09F0 24FC      2075            add     a,#0xfc
09F2 F581      2076            mov     sp,a
09F4 EA        2077            mov     a,r2
09F5 7001      2078            jnz     L016066?
09F7 020100    2079            ljmp    L016001?
09FA           2080   L016066?:
09FA           2081   L016022?:
09FA           2082   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:460: printf("\n\r reached intersection :D");
09FA 74C0      2083            mov     a,#__str_4
09FC C0E0      2084            push    acc
09FE 74B0      2085            mov     a,#(__str_4 >> 8)
0A00 C0E0      2086            push    acc
0A02 7480      2087            mov     a,#0x80
0A04 C0E0      2088            push    acc
0A06 120100    2089            lcall   _printf
0A09 1581      2090            dec     sp
0A0B 1581      2091            dec     sp
0A0D 1581      2092            dec     sp
0A0F           2093   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:461: pwm_Left1 = 35;
0A0F 75A023    2094            mov     _pwm_Left1,#0x23
0A12           2095   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:462: pwm_Left0 = -1;
0A12 75E0FF    2096            mov     _pwm_Left0,#0xFF
0A15           2097   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:463: pwm_Right0 = 35;
0A15 756023    2098            mov     _pwm_Right0,#0x23
0A18           2099   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:464: pwm_Right1 = -1;
0A18 7520FF    2100            mov     _pwm_Right1,#0xFF
0A1B           2101   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:465: waitms(1500);
0A1B 9005DC    2102            mov     dptr,#0x05DC
0A1E 120100    2103            lcall   _waitms
0A21           2104   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:467: turncar(1); //1 = right
0A21 900001    2105            mov     dptr,#0x0001
0A24 120100    2106            lcall   _turncar
0A27           2107   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:468: currentcmd = 0;
0A27 75A000    2108            mov     _currentcmd,#0x00
0A2A           2109   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:470: break;
0A2A 020100    2110            ljmp    L016001?
0A2D           2111   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:473: case 3 :
0A2D           2112   L016025?:
0A2D           2113   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:474: currentstate = 1;
0A2D 756001    2114            mov     _currentstate,#0x01
0A30           2115   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:475: currentcmd = 0;
0A30 75A000    2116            mov     _currentcmd,#0x00
0A33           2117   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:476: break;
0A33 020100    2118            ljmp    L016001?
0A36           2119   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:479: case 4 :
0A36           2120   L016026?:
0A36           2121   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:480: currentstate = 2;
0A36 756002    2122            mov     _currentstate,#0x02
0A39           2123   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:481: currentcmd = 0;
0A39 75A000    2124            mov     _currentcmd,#0x00
0A3C           2125   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:482: break;
0A3C 020100    2126            ljmp    L016001?
0A3F           2127   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:485: case 5 :
0A3F           2128   L016027?:
0A3F           2129   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:486: currentstate = 3;
0A3F 756003    2130            mov     _currentstate,#0x03
0A42           2131   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:487: currentcmd = 0;
0A42 75A000    2132            mov     _currentcmd,#0x00
0A45           2133   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:488: break;
0A45 020100    2134            ljmp    L016001?
0A48           2135   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:491: case 6 :
0A48           2136   L016028?:
0A48           2137   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:492: uturn();  //uturn
0A48 120100    2138            lcall   _uturn
0A4B           2139   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:493: currentcmd = 0;
0A4B 75A000    2140            mov     _currentcmd,#0x00
0A4E           2141   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:494: break;
0A4E 020100    2142            ljmp    L016001?
0A51           2143   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:495: default: 
0A51           2144   L016029?:
0A51           2145   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:496: currentstate = 1;
0A51 756001    2146            mov     _currentstate,#0x01
0A54           2147   ;        C:\Users\Wenoa\Documents\GitHub\ELEC291P2\src\motors.c:497: }
0A54 020100    2148            ljmp    L016001?
0A57           2149            rseg R_CSEG
0A57           2150   
0000           2151            rseg R_XINIT
0000           2152   
0000           2153            rseg R_CONST
0000           2154   __str_0:
0000 63757272  2155            db 'current command is %d'
     656E7420
     636F6D6D
     616E6420
     69732025
     64
0015 0D        2156            db 0x0D
0016 0A        2157            db 0x0A
0017 00        2158            db 0x00
0018           2159   __str_1:
0018 1B        2160            db 0x1B
0019 5B324A    2161            db '[2J'
001C 00        2162            db 0x00
001D           2163   __str_2:
001D 31        2164            db '1'
001E 0D        2165            db 0x0D
001F 0A        2166            db 0x0A
0020 00        2167            db 0x00
0021           2168   __str_3:
0021 30        2169            db '0'
0022 0D        2170            db 0x0D
0023 0A        2171            db 0x0A
0024 00        2172            db 0x00
0025           2173   __str_4:
0025 0A        2174            db 0x0A
0026 0D        2175            db 0x0D
0027 20726561  2176            db ' reached intersection :D'
     63686564
     20696E74
     65727365
     6374696F
     6E203A44
003F 00        2177            db 0x00
0040           2178   
002E           2179            CSEG
002E           2180   
002E           2181   end
