0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Sat Apr 01 21:47:28 2017
0000              5   ;--------------------------------------------------------
                  5   $name motors
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _uturn
0000             30            public _turncar
0000             31            public _stopcar
0000             32            public _linetrack
0000             33            public _readData
0000             34            public _Volts_at_Pin
0000             35            public _ADC_at_Pin
0000             36            public _InitPinADC
0000             37            public _InitADC
0000             38            public _forward_backward
0000             39            public _Timer2_ISR
0000             40            public _waitms
0000             41            public _Timer3us
0000             42            public __c51_external_startup
0000             43            public _currentstate
0000             44            public _currentcmd
0000             45            public _direction
0000             46            public _pwm_Right1
0000             47            public _pwm_Right0
0000             48            public _pwm_Left1
0000             49            public _pwm_Left0
0000             50            public _pwm_both
0000             51            public _mode
0000             52            public _pwm_count
0000             53   ;--------------------------------------------------------
0000             54   ; Special Function Registers
0000             55   ;--------------------------------------------------------
0000             56   _P0             DATA 0x80
0000             57   _SP             DATA 0x81
0000             58   _DPL            DATA 0x82
0000             59   _DPH            DATA 0x83
0000             60   _EMI0TC         DATA 0x84
0000             61   _EMI0CF         DATA 0x85
0000             62   _OSCLCN         DATA 0x86
0000             63   _PCON           DATA 0x87
0000             64   _TCON           DATA 0x88
0000             65   _TMOD           DATA 0x89
0000             66   _TL0            DATA 0x8a
0000             67   _TL1            DATA 0x8b
0000             68   _TH0            DATA 0x8c
0000             69   _TH1            DATA 0x8d
0000             70   _CKCON          DATA 0x8e
0000             71   _PSCTL          DATA 0x8f
0000             72   _P1             DATA 0x90
0000             73   _TMR3CN         DATA 0x91
0000             74   _TMR4CN         DATA 0x91
0000             75   _TMR3RLL        DATA 0x92
0000             76   _TMR4RLL        DATA 0x92
0000             77   _TMR3RLH        DATA 0x93
0000             78   _TMR4RLH        DATA 0x93
0000             79   _TMR3L          DATA 0x94
0000             80   _TMR4L          DATA 0x94
0000             81   _TMR3H          DATA 0x95
0000             82   _TMR4H          DATA 0x95
0000             83   _USB0ADR        DATA 0x96
0000             84   _USB0DAT        DATA 0x97
0000             85   _SCON           DATA 0x98
0000             86   _SCON0          DATA 0x98
0000             87   _SBUF           DATA 0x99
0000             88   _SBUF0          DATA 0x99
0000             89   _CPT1CN         DATA 0x9a
0000             90   _CPT0CN         DATA 0x9b
0000             91   _CPT1MD         DATA 0x9c
0000             92   _CPT0MD         DATA 0x9d
0000             93   _CPT1MX         DATA 0x9e
0000             94   _CPT0MX         DATA 0x9f
0000             95   _P2             DATA 0xa0
0000             96   _SPI0CFG        DATA 0xa1
0000             97   _SPI0CKR        DATA 0xa2
0000             98   _SPI0DAT        DATA 0xa3
0000             99   _P0MDOUT        DATA 0xa4
0000            100   _P1MDOUT        DATA 0xa5
0000            101   _P2MDOUT        DATA 0xa6
0000            102   _P3MDOUT        DATA 0xa7
0000            103   _IE             DATA 0xa8
0000            104   _CLKSEL         DATA 0xa9
0000            105   _EMI0CN         DATA 0xaa
0000            106   __XPAGE         DATA 0xaa
0000            107   _SBCON1         DATA 0xac
0000            108   _P4MDOUT        DATA 0xae
0000            109   _PFE0CN         DATA 0xaf
0000            110   _P3             DATA 0xb0
0000            111   _OSCXCN         DATA 0xb1
0000            112   _OSCICN         DATA 0xb2
0000            113   _OSCICL         DATA 0xb3
0000            114   _SBRLL1         DATA 0xb4
0000            115   _SBRLH1         DATA 0xb5
0000            116   _FLSCL          DATA 0xb6
0000            117   _FLKEY          DATA 0xb7
0000            118   _IP             DATA 0xb8
0000            119   _CLKMUL         DATA 0xb9
0000            120   _SMBTC          DATA 0xb9
0000            121   _AMX0N          DATA 0xba
0000            122   _AMX0P          DATA 0xbb
0000            123   _ADC0CF         DATA 0xbc
0000            124   _ADC0L          DATA 0xbd
0000            125   _ADC0H          DATA 0xbe
0000            126   _SFRPAGE        DATA 0xbf
0000            127   _SMB0CN         DATA 0xc0
0000            128   _SMB1CN         DATA 0xc0
0000            129   _SMB0CF         DATA 0xc1
0000            130   _SMB1CF         DATA 0xc1
0000            131   _SMB0DAT        DATA 0xc2
0000            132   _SMB1DAT        DATA 0xc2
0000            133   _ADC0GTL        DATA 0xc3
0000            134   _ADC0GTH        DATA 0xc4
0000            135   _ADC0LTL        DATA 0xc5
0000            136   _ADC0LTH        DATA 0xc6
0000            137   _P4             DATA 0xc7
0000            138   _TMR2CN         DATA 0xc8
0000            139   _TMR5CN         DATA 0xc8
0000            140   _REG01CN        DATA 0xc9
0000            141   _TMR2RLL        DATA 0xca
0000            142   _TMR5RLL        DATA 0xca
0000            143   _TMR2RLH        DATA 0xcb
0000            144   _TMR5RLH        DATA 0xcb
0000            145   _TMR2L          DATA 0xcc
0000            146   _TMR5L          DATA 0xcc
0000            147   _TMR2H          DATA 0xcd
0000            148   _TMR5H          DATA 0xcd
0000            149   _SMB0ADM        DATA 0xce
0000            150   _SMB1ADM        DATA 0xce
0000            151   _SMB0ADR        DATA 0xcf
0000            152   _SMB1ADR        DATA 0xcf
0000            153   _PSW            DATA 0xd0
0000            154   _REF0CN         DATA 0xd1
0000            155   _SCON1          DATA 0xd2
0000            156   _SBUF1          DATA 0xd3
0000            157   _P0SKIP         DATA 0xd4
0000            158   _P1SKIP         DATA 0xd5
0000            159   _P2SKIP         DATA 0xd6
0000            160   _USB0XCN        DATA 0xd7
0000            161   _PCA0CN         DATA 0xd8
0000            162   _PCA0MD         DATA 0xd9
0000            163   _PCA0CPM0       DATA 0xda
0000            164   _PCA0CPM1       DATA 0xdb
0000            165   _PCA0CPM2       DATA 0xdc
0000            166   _PCA0CPM3       DATA 0xdd
0000            167   _PCA0CPM4       DATA 0xde
0000            168   _P3SKIP         DATA 0xdf
0000            169   _ACC            DATA 0xe0
0000            170   _XBR0           DATA 0xe1
0000            171   _XBR1           DATA 0xe2
0000            172   _XBR2           DATA 0xe3
0000            173   _IT01CF         DATA 0xe4
0000            174   _CKCON1         DATA 0xe4
0000            175   _SMOD1          DATA 0xe5
0000            176   _EIE1           DATA 0xe6
0000            177   _EIE2           DATA 0xe7
0000            178   _ADC0CN         DATA 0xe8
0000            179   _PCA0CPL1       DATA 0xe9
0000            180   _PCA0CPH1       DATA 0xea
0000            181   _PCA0CPL2       DATA 0xeb
0000            182   _PCA0CPH2       DATA 0xec
0000            183   _PCA0CPL3       DATA 0xed
0000            184   _PCA0CPH3       DATA 0xee
0000            185   _RSTSRC         DATA 0xef
0000            186   _B              DATA 0xf0
0000            187   _P0MDIN         DATA 0xf1
0000            188   _P1MDIN         DATA 0xf2
0000            189   _P2MDIN         DATA 0xf3
0000            190   _P3MDIN         DATA 0xf4
0000            191   _P4MDIN         DATA 0xf5
0000            192   _EIP1           DATA 0xf6
0000            193   _EIP2           DATA 0xf7
0000            194   _SPI0CN         DATA 0xf8
0000            195   _PCA0L          DATA 0xf9
0000            196   _PCA0H          DATA 0xfa
0000            197   _PCA0CPL0       DATA 0xfb
0000            198   _PCA0CPH0       DATA 0xfc
0000            199   _PCA0CPL4       DATA 0xfd
0000            200   _PCA0CPH4       DATA 0xfe
0000            201   _VDM0CN         DATA 0xff
0000            202   _DPTR           DATA 0x8382
0000            203   _TMR2RL         DATA 0xcbca
0000            204   _TMR3RL         DATA 0x9392
0000            205   _TMR4RL         DATA 0x9392
0000            206   _TMR5RL         DATA 0xcbca
0000            207   _TMR2           DATA 0xcdcc
0000            208   _TMR3           DATA 0x9594
0000            209   _TMR4           DATA 0x9594
0000            210   _TMR5           DATA 0xcdcc
0000            211   _SBRL1          DATA 0xb5b4
0000            212   _ADC0           DATA 0xbebd
0000            213   _ADC0GT         DATA 0xc4c3
0000            214   _ADC0LT         DATA 0xc6c5
0000            215   _PCA0           DATA 0xfaf9
0000            216   _PCA0CP1        DATA 0xeae9
0000            217   _PCA0CP2        DATA 0xeceb
0000            218   _PCA0CP3        DATA 0xeeed
0000            219   _PCA0CP0        DATA 0xfcfb
0000            220   _PCA0CP4        DATA 0xfefd
0000            221   ;--------------------------------------------------------
0000            222   ; special function bits
0000            223   ;--------------------------------------------------------
0000            224   _P0_0           BIT 0x80
0000            225   _P0_1           BIT 0x81
0000            226   _P0_2           BIT 0x82
0000            227   _P0_3           BIT 0x83
0000            228   _P0_4           BIT 0x84
0000            229   _P0_5           BIT 0x85
0000            230   _P0_6           BIT 0x86
0000            231   _P0_7           BIT 0x87
0000            232   _TF1            BIT 0x8f
0000            233   _TR1            BIT 0x8e
0000            234   _TF0            BIT 0x8d
0000            235   _TR0            BIT 0x8c
0000            236   _IE1            BIT 0x8b
0000            237   _IT1            BIT 0x8a
0000            238   _IE0            BIT 0x89
0000            239   _IT0            BIT 0x88
0000            240   _P1_0           BIT 0x90
0000            241   _P1_1           BIT 0x91
0000            242   _P1_2           BIT 0x92
0000            243   _P1_3           BIT 0x93
0000            244   _P1_4           BIT 0x94
0000            245   _P1_5           BIT 0x95
0000            246   _P1_6           BIT 0x96
0000            247   _P1_7           BIT 0x97
0000            248   _S0MODE         BIT 0x9f
0000            249   _SCON0_6        BIT 0x9e
0000            250   _MCE0           BIT 0x9d
0000            251   _REN0           BIT 0x9c
0000            252   _TB80           BIT 0x9b
0000            253   _RB80           BIT 0x9a
0000            254   _TI0            BIT 0x99
0000            255   _RI0            BIT 0x98
0000            256   _SCON_6         BIT 0x9e
0000            257   _MCE            BIT 0x9d
0000            258   _REN            BIT 0x9c
0000            259   _TB8            BIT 0x9b
0000            260   _RB8            BIT 0x9a
0000            261   _TI             BIT 0x99
0000            262   _RI             BIT 0x98
0000            263   _P2_0           BIT 0xa0
0000            264   _P2_1           BIT 0xa1
0000            265   _P2_2           BIT 0xa2
0000            266   _P2_3           BIT 0xa3
0000            267   _P2_4           BIT 0xa4
0000            268   _P2_5           BIT 0xa5
0000            269   _P2_6           BIT 0xa6
0000            270   _P2_7           BIT 0xa7
0000            271   _EA             BIT 0xaf
0000            272   _ESPI0          BIT 0xae
0000            273   _ET2            BIT 0xad
0000            274   _ES0            BIT 0xac
0000            275   _ET1            BIT 0xab
0000            276   _EX1            BIT 0xaa
0000            277   _ET0            BIT 0xa9
0000            278   _EX0            BIT 0xa8
0000            279   _P3_0           BIT 0xb0
0000            280   _P3_1           BIT 0xb1
0000            281   _P3_2           BIT 0xb2
0000            282   _P3_3           BIT 0xb3
0000            283   _P3_4           BIT 0xb4
0000            284   _P3_5           BIT 0xb5
0000            285   _P3_6           BIT 0xb6
0000            286   _P3_7           BIT 0xb7
0000            287   _IP_7           BIT 0xbf
0000            288   _PSPI0          BIT 0xbe
0000            289   _PT2            BIT 0xbd
0000            290   _PS0            BIT 0xbc
0000            291   _PT1            BIT 0xbb
0000            292   _PX1            BIT 0xba
0000            293   _PT0            BIT 0xb9
0000            294   _PX0            BIT 0xb8
0000            295   _MASTER0        BIT 0xc7
0000            296   _TXMODE0        BIT 0xc6
0000            297   _STA0           BIT 0xc5
0000            298   _STO0           BIT 0xc4
0000            299   _ACKRQ0         BIT 0xc3
0000            300   _ARBLOST0       BIT 0xc2
0000            301   _ACK0           BIT 0xc1
0000            302   _SI0            BIT 0xc0
0000            303   _MASTER1        BIT 0xc7
0000            304   _TXMODE1        BIT 0xc6
0000            305   _STA1           BIT 0xc5
0000            306   _STO1           BIT 0xc4
0000            307   _ACKRQ1         BIT 0xc3
0000            308   _ARBLOST1       BIT 0xc2
0000            309   _ACK1           BIT 0xc1
0000            310   _SI1            BIT 0xc0
0000            311   _TF2            BIT 0xcf
0000            312   _TF2H           BIT 0xcf
0000            313   _TF2L           BIT 0xce
0000            314   _TF2LEN         BIT 0xcd
0000            315   _TF2CEN         BIT 0xcc
0000            316   _T2SPLIT        BIT 0xcb
0000            317   _TR2            BIT 0xca
0000            318   _T2CSS          BIT 0xc9
0000            319   _T2XCLK         BIT 0xc8
0000            320   _TF5H           BIT 0xcf
0000            321   _TF5L           BIT 0xce
0000            322   _TF5LEN         BIT 0xcd
0000            323   _TMR5CN_4       BIT 0xcc
0000            324   _T5SPLIT        BIT 0xcb
0000            325   _TR5            BIT 0xca
0000            326   _TMR5CN_1       BIT 0xc9
0000            327   _T5XCLK         BIT 0xc8
0000            328   _CY             BIT 0xd7
0000            329   _AC             BIT 0xd6
0000            330   _F0             BIT 0xd5
0000            331   _RS1            BIT 0xd4
0000            332   _RS0            BIT 0xd3
0000            333   _OV             BIT 0xd2
0000            334   _F1             BIT 0xd1
0000            335   _PARITY         BIT 0xd0
0000            336   _CF             BIT 0xdf
0000            337   _CR             BIT 0xde
0000            338   _PCA0CN_5       BIT 0xde
0000            339   _CCF4           BIT 0xdc
0000            340   _CCF3           BIT 0xdb
0000            341   _CCF2           BIT 0xda
0000            342   _CCF1           BIT 0xd9
0000            343   _CCF0           BIT 0xd8
0000            344   _ACC_7          BIT 0xe7
0000            345   _ACC_6          BIT 0xe6
0000            346   _ACC_5          BIT 0xe5
0000            347   _ACC_4          BIT 0xe4
0000            348   _ACC_3          BIT 0xe3
0000            349   _ACC_2          BIT 0xe2
0000            350   _ACC_1          BIT 0xe1
0000            351   _ACC_0          BIT 0xe0
0000            352   _AD0EN          BIT 0xef
0000            353   _AD0TM          BIT 0xee
0000            354   _AD0INT         BIT 0xed
0000            355   _AD0BUSY        BIT 0xec
0000            356   _AD0WINT        BIT 0xeb
0000            357   _AD0CM2         BIT 0xea
0000            358   _AD0CM1         BIT 0xe9
0000            359   _AD0CM0         BIT 0xe8
0000            360   _B_7            BIT 0xf7
0000            361   _B_6            BIT 0xf6
0000            362   _B_5            BIT 0xf5
0000            363   _B_4            BIT 0xf4
0000            364   _B_3            BIT 0xf3
0000            365   _B_2            BIT 0xf2
0000            366   _B_1            BIT 0xf1
0000            367   _B_0            BIT 0xf0
0000            368   _SPIF           BIT 0xff
0000            369   _WCOL           BIT 0xfe
0000            370   _MODF           BIT 0xfd
0000            371   _RXOVRN         BIT 0xfc
0000            372   _NSSMD1         BIT 0xfb
0000            373   _NSSMD0         BIT 0xfa
0000            374   _TXBMT          BIT 0xf9
0000            375   _SPIEN          BIT 0xf8
0000            376   ;--------------------------------------------------------
0000            377   ; overlayable register banks
0000            378   ;--------------------------------------------------------
0000            379            rbank0 segment data overlay
0000            380   ;--------------------------------------------------------
0000            381   ; internal ram data
0000            382   ;--------------------------------------------------------
0000            383            rseg R_DSEG
0000            384   _pwm_count:
0000            385            ds 1
0001            386   _mode:
0001            387            ds 1
0002            388   _pwm_both:
0002            389            ds 1
0003            390   _pwm_Left0:
0003            391            ds 1
0004            392   _pwm_Left1:
0004            393            ds 1
0005            394   _pwm_Right0:
0005            395            ds 1
0006            396   _pwm_Right1:
0006            397            ds 1
0007            398   _direction:
0007            399            ds 1
0008            400   _currentcmd:
0008            401            ds 1
0009            402   _currentstate:
0009            403            ds 1
000A            404   _linetrack_forwardbackward_1_83:
000A            405            ds 2
000C            406   _linetrack_vleft_1_84:
000C            407            ds 4
0010            408   _linetrack_vright_1_84:
0010            409            ds 4
0014            410   _linetrack_sloc0_1_0:
0014            411            ds 4
0018            412   _turncar_vleft_1_88:
0018            413            ds 4
001C            414   _turncar_vright_1_88:
001C            415            ds 4
0020            416   _uturn_vleft_1_93:
0020            417            ds 4
0024            418   _uturn_vright_1_93:
0024            419            ds 4
0028            420   ;--------------------------------------------------------
0028            421   ; overlayable items in internal ram 
0028            422   ;--------------------------------------------------------
0000            423            rseg    R_OSEG
0000            424            rseg    R_OSEG
0000            425            rseg    R_OSEG
0000            426   _InitPinADC_PARM_2:
0000            427            ds 1
0001            428            rseg    R_OSEG
0001            429   ;--------------------------------------------------------
0001            430   ; indirectly addressable internal ram data
0001            431   ;--------------------------------------------------------
0000            432            rseg R_ISEG
0000            433   ;--------------------------------------------------------
0000            434   ; absolute internal ram data
0000            435   ;--------------------------------------------------------
0000            436            DSEG
0000            437   ;--------------------------------------------------------
0000            438   ; bit data
0000            439   ;--------------------------------------------------------
0000            440            rseg R_BSEG
0000            441   _Timer2_ISR_sloc0_1_0:
0000            442            DBIT    1
0001            443   ;--------------------------------------------------------
0001            444   ; paged external ram data
0001            445   ;--------------------------------------------------------
0000            446            rseg R_PSEG
0000            447   ;--------------------------------------------------------
0000            448   ; external ram data
0000            449   ;--------------------------------------------------------
0000            450            rseg R_XSEG
0000            451   ;--------------------------------------------------------
0000            452   ; absolute external ram data
0000            453   ;--------------------------------------------------------
0000            454            XSEG
0000            455   ;--------------------------------------------------------
0000            456   ; external initialized ram data
0000            457   ;--------------------------------------------------------
0000            458            rseg R_IXSEG
0000            459            rseg R_HOME
0000            460            rseg R_GSINIT
0000            461            rseg R_CSEG
0000            462   ;--------------------------------------------------------
0000            463   ; Reset entry point and interrupt vectors
0000            464   ;--------------------------------------------------------
0000            465            CSEG at 0x0000
0000 020100     466            ljmp    _crt0
002B            467            CSEG at 0x002b
002B 020100     468            ljmp    _Timer2_ISR
002E            469   ;--------------------------------------------------------
002E            470   ; global & static initialisations
002E            471   ;--------------------------------------------------------
0000            472            rseg R_HOME
0000            473            rseg R_GSINIT
0000            474            rseg R_GSINIT
0000            475   ;--------------------------------------------------------
0000            476   ; data variables initialization
0000            477   ;--------------------------------------------------------
0000            478            rseg R_DINIT
0000            479   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:22: volatile  char pwm_count=0;
0000 75B000     480            mov     _pwm_count,#0x00
0003            481   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:23: volatile  char mode = 0;
0003 757000     482            mov     _mode,#0x00
0006            483   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:24: volatile  char pwm_both =0;
0006 753000     484            mov     _pwm_both,#0x00
0009            485   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:25: volatile  char pwm_Left0 = 0; //p1.5
0009 75F000     486            mov     _pwm_Left0,#0x00
000C            487   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:26: volatile  char pwm_Left1 = 0; //p1.6
000C 75B000     488            mov     _pwm_Left1,#0x00
000F            489   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:27: volatile  char pwm_Right0 = 0; //p2.0
000F 757000     490            mov     _pwm_Right0,#0x00
0012            491   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:28: volatile  char pwm_Right1 = 0; //p2.1
0012 753000     492            mov     _pwm_Right1,#0x00
0015            493   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:29: volatile  char direction = 0; // 1 for back 0 for forward
0015 75F000     494            mov     _direction,#0x00
0018            495   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:31: volatile  char currentcmd = 0;
0018 75B000     496            mov     _currentcmd,#0x00
001B            497   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:32: volatile  char currentstate = 1;
001B 757001     498            mov     _currentstate,#0x01
001E            499            ; The linker places a 'ret' at the end of segment R_DINIT.
001E            500   ;--------------------------------------------------------
001E            501   ; code
001E            502   ;--------------------------------------------------------
0000            503            rseg R_CSEG
0000            504   ;------------------------------------------------------------
0000            505   ;Allocation info for local variables in function '_c51_external_startup'
0000            506   ;------------------------------------------------------------
0000            507   ;------------------------------------------------------------
0000            508   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:36: char _c51_external_startup (void)
0000            509   ;        -----------------------------------------
0000            510   ;         function _c51_external_startup
0000            511   ;        -----------------------------------------
0000            512   __c51_external_startup:
0000            513            using   0
0000            514   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:38: PCA0MD&=(~0x40) ;    // DISABLE WDT: clear Watchdog Enable bit
0000 53D9BF     515            anl     _PCA0MD,#0xBF
0003            516   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:39: VDM0CN=0x80; // enable VDD monitor
0003 75FF80     517            mov     _VDM0CN,#0x80
0006            518   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:40: RSTSRC=0x02|0x04; // Enable reset on missing clock detector and VDD
0006 75EF06     519            mov     _RSTSRC,#0x06
0009            520   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:48: CLKSEL|=0b_0000_0011; // SYSCLK derived from the Internal High-Frequency Oscillator / 1.
0009 43A903     521            orl     _CLKSEL,#0x03
000C            522   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:52: OSCICN |= 0x03; // Configure internal oscillator for its maximum frequency
000C 43B203     523            orl     _OSCICN,#0x03
000F            524   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:55: SCON0 = 0x10;
000F 759810     525            mov     _SCON0,#0x10
0012            526   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:57: TH1 = 0x10000-((SYSCLK/BAUDRATE)/2L);
0012 758D30     527            mov     _TH1,#0x30
0015            528   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:58: CKCON &= ~0x0B;                  // T1M = 1; SCA1:0 = xx
0015 538EF4     529            anl     _CKCON,#0xF4
0018            530   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:59: CKCON |=  0x08;
0018 438E08     531            orl     _CKCON,#0x08
001B            532   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:72: TL1 = TH1;      // Init Timer1
001B 858D8B     533            mov     _TL1,_TH1
001E            534   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:73: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit autoreload
001E 53890F     535            anl     _TMOD,#0x0F
0021            536   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:74: TMOD |=  0x20;
0021 438920     537            orl     _TMOD,#0x20
0024            538   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:75: TR1 = 1; // START Timer1
0024 D28E       539            setb    _TR1
0026            540   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:76: TI = 1;  // Indicate TX0 ready
0026 D299       541            setb    _TI
0028            542   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:79: P2MDOUT|=0b_0000_0011;
0028 43A603     543            orl     _P2MDOUT,#0x03
002B            544   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:80: P0MDOUT |= 0x10; // Enable UTX as push-pull output
002B 43A410     545            orl     _P0MDOUT,#0x10
002E            546   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:81: XBR0     = 0x01; // Enable UART on P0.4(TX) and P0.5(RX)
002E 75E101     547            mov     _XBR0,#0x01
0031            548   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:82: XBR1     = 0x40; // Enable crossbar and weak pull-ups
0031 75E240     549            mov     _XBR1,#0x40
0034            550   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:85: TMR2CN=0x00;   // Stop Timer2; Clear TF2;
0034 75C800     551            mov     _TMR2CN,#0x00
0037            552   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:86: CKCON|=0b_0001_0000;
0037 438E10     553            orl     _CKCON,#0x10
003A            554   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:87: TMR2RL=(-(SYSCLK/(2*48))/(100L)); // Initialize reload value
003A 75CA78     555            mov     _TMR2RL,#0x78
003D 75CBEC     556            mov     (_TMR2RL >> 8),#0xEC
0040            557   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:88: TMR2=0xffff;   // Set to reload immediately
0040 75CCFF     558            mov     _TMR2,#0xFF
0043 75CDFF     559            mov     (_TMR2 >> 8),#0xFF
0046            560   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:89: ET2=1;         // Enable Timer2 interrupts
0046 D2AD       561            setb    _ET2
0048            562   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:90: TR2=1;         // Start Timer2
0048 D2CA       563            setb    _TR2
004A            564   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:92: EA=1; // Enable interrupts
004A D2AF       565            setb    _EA
004C            566   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:94: return 0;
004C 758200     567            mov     dpl,#0x00
004F 22         568            ret
0050            569   ;------------------------------------------------------------
0050            570   ;Allocation info for local variables in function 'Timer3us'
0050            571   ;------------------------------------------------------------
0050            572   ;us                        Allocated to registers r2 
0050            573   ;i                         Allocated to registers r3 
0050            574   ;------------------------------------------------------------
0050            575   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:98: void Timer3us(unsigned char us)
0050            576   ;        -----------------------------------------
0050            577   ;         function Timer3us
0050            578   ;        -----------------------------------------
0050            579   _Timer3us:
0050 AA82       580            mov     r2,dpl
0052            581   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:103: CKCON|=0b_0100_0000;
0052 438E40     582            orl     _CKCON,#0x40
0055            583   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:105: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0055 7592D0     584            mov     _TMR3RL,#0xD0
0058 7593FF     585            mov     (_TMR3RL >> 8),#0xFF
005B            586   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:106: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
005B 859294     587            mov     _TMR3,_TMR3RL
005E 859395     588            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0061            589   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:108: TMR3CN = 0x04;                 // Sart Timer3 and clear overflow flag
0061 759104     590            mov     _TMR3CN,#0x04
0064            591   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:109: for (i = 0; i < us; i++)       // Count <us> overflows
0064 7B00       592            mov     r3,#0x00
0066            593   L003004?:
0066 C3         594            clr     c
0067 EB         595            mov     a,r3
0068 9A         596            subb    a,r2
0069 5001       597            jnc     L003007?
006B            598   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:111: while (!(TMR3CN & 0x80));  // Wait for overflow
006B            599   L003001?:
006B E591       600            mov     a,_TMR3CN
006D 30E7A8     601            jnb     acc.7,L003001?
0070            602   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:112: TMR3CN &= ~(0x80);         // Clear overflow indicator
0070 53917F     603            anl     _TMR3CN,#0x7F
0073            604   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:109: for (i = 0; i < us; i++)       // Count <us> overflows
0073 0B         605            inc     r3
0074 8001       606            sjmp    L003004?
0076            607   L003007?:
0076            608   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:114: TMR3CN = 0 ;                   // Stop Timer3 and clear overflow flag
0076 759100     609            mov     _TMR3CN,#0x00
0079 22         610            ret
007A            611   ;------------------------------------------------------------
007A            612   ;Allocation info for local variables in function 'waitms'
007A            613   ;------------------------------------------------------------
007A            614   ;ms                        Allocated to registers r2 r3 
007A            615   ;j                         Allocated to registers r2 r3 
007A            616   ;------------------------------------------------------------
007A            617   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:117: void waitms (unsigned int ms)
007A            618   ;        -----------------------------------------
007A            619   ;         function waitms
007A            620   ;        -----------------------------------------
007A            621   _waitms:
007A AA82       622            mov     r2,dpl
007C AB83       623            mov     r3,dph
007E            624   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:120: for(j=ms; j!=0; j--)
007E            625   L004001?:
007E BA00A8     626            cjne    r2,#0x00,L004010?
0081 BB00A8     627            cjne    r3,#0x00,L004010?
0084 22         628            ret
0085            629   L004010?:
0085            630   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:122: Timer3us(249);
0085 7582F9     631            mov     dpl,#0xF9
0088 C002       632            push    ar2
008A C003       633            push    ar3
008C 120100     634            lcall   _Timer3us
008F            635   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:123: Timer3us(249);
008F 7582F9     636            mov     dpl,#0xF9
0092 120100     637            lcall   _Timer3us
0095            638   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:124: Timer3us(249);
0095 7582F9     639            mov     dpl,#0xF9
0098 120100     640            lcall   _Timer3us
009B            641   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:125: Timer3us(250);
009B 7582FA     642            mov     dpl,#0xFA
009E 120100     643            lcall   _Timer3us
00A1 D003       644            pop     ar3
00A3 D002       645            pop     ar2
00A5            646   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:120: for(j=ms; j!=0; j--)
00A5 1A         647            dec     r2
00A6 BAFFE8     648            cjne    r2,#0xff,L004011?
00A9 1B         649            dec     r3
00AA            650   L004011?:
00AA 8001       651            sjmp    L004001?
00AC            652   ;------------------------------------------------------------
00AC            653   ;Allocation info for local variables in function 'Timer2_ISR'
00AC            654   ;------------------------------------------------------------
00AC            655   ;------------------------------------------------------------
00AC            656   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:130: void Timer2_ISR (void) interrupt 5
00AC            657   ;        -----------------------------------------
00AC            658   ;         function Timer2_ISR
00AC            659   ;        -----------------------------------------
00AC            660   _Timer2_ISR:
00AC C0E0       661            push    acc
00AE C0F0       662            push    b
00B0 C0D0       663            push    psw
00B2 75D000     664            mov     psw,#0x00
00B5            665   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:132: TF2H = 0; // Clear Timer2 interrupt flag
00B5 C2CF       666            clr     _TF2H
00B7            667   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:134: pwm_count++;
00B7 05B0       668            inc     _pwm_count
00B9            669   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:135: if(pwm_count>100) pwm_count=0;
00B9 C3         670            clr     c
00BA 74E4       671            mov     a,#(0x64 ^ 0x80)
00BC 85B0F0     672            mov     b,_pwm_count
00BF 63F080     673            xrl     b,#0x80
00C2 95F0       674            subb    a,b
00C4 5001       675            jnc     L005002?
00C6 75B000     676            mov     _pwm_count,#0x00
00C9            677   L005002?:
00C9            678   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:138: MOTOR_LEFT0 = pwm_count > pwm_Left0 ? 0 : 1; //p1.5
00C9 C3         679            clr     c
00CA E5F0       680            mov     a,_pwm_Left0
00CC 6480       681            xrl     a,#0x80
00CE 85B0F0     682            mov     b,_pwm_count
00D1 63F080     683            xrl     b,#0x80
00D4 95F0       684            subb    a,b
00D6 9268       685            mov  _Timer2_ISR_sloc0_1_0,c
00D8 B3         686            cpl     c
00D9 9295       687            mov     _P1_5,c
00DB            688   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:139: MOTOR_LEFT1 = pwm_count > pwm_Left1 ? 0 : 1; //p1.6
00DB C3         689            clr     c
00DC E5B0       690            mov     a,_pwm_Left1
00DE 6480       691            xrl     a,#0x80
00E0 85B0F0     692            mov     b,_pwm_count
00E3 63F080     693            xrl     b,#0x80
00E6 95F0       694            subb    a,b
00E8 9268       695            mov  _Timer2_ISR_sloc0_1_0,c
00EA B3         696            cpl     c
00EB 9296       697            mov     _P1_6,c
00ED            698   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:140: MOTOR_RIGHT0 = pwm_count > pwm_Right0 ? 0 : 1; //p2.0
00ED C3         699            clr     c
00EE E570       700            mov     a,_pwm_Right0
00F0 6480       701            xrl     a,#0x80
00F2 85B0F0     702            mov     b,_pwm_count
00F5 63F080     703            xrl     b,#0x80
00F8 95F0       704            subb    a,b
00FA 9268       705            mov  _Timer2_ISR_sloc0_1_0,c
00FC B3         706            cpl     c
00FD 92A0       707            mov     _P2_0,c
00FF            708   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:141: MOTOR_RIGHT1 = pwm_count > pwm_Right1 ? 0 : 1; //p2.1
00FF C3         709            clr     c
0100 E530       710            mov     a,_pwm_Right1
0102 6480       711            xrl     a,#0x80
0104 85B0F0     712            mov     b,_pwm_count
0107 63F080     713            xrl     b,#0x80
010A 95F0       714            subb    a,b
010C 9268       715            mov  _Timer2_ISR_sloc0_1_0,c
010E B3         716            cpl     c
010F 92A1       717            mov     _P2_1,c
0111 D0D0       718            pop     psw
0113 D0F0       719            pop     b
0115 D0E0       720            pop     acc
0117 32         721            reti
0118            722   ;        eliminated unneeded push/pop dpl
0118            723   ;        eliminated unneeded push/pop dph
0118            724   ;------------------------------------------------------------
0118            725   ;Allocation info for local variables in function 'forward_backward'
0118            726   ;------------------------------------------------------------
0118            727   ;direction                 Allocated to registers r2 
0118            728   ;------------------------------------------------------------
0118            729   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:148: void forward_backward(unsigned char direction)
0118            730   ;        -----------------------------------------
0118            731   ;         function forward_backward
0118            732   ;        -----------------------------------------
0118            733   _forward_backward:
0118            734   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:151: if (direction == 0) { //p2.1,1.6 on
0118 E582       735            mov     a,dpl
011A FA         736            mov     r2,a
011B 7001       737            jnz     L006004?
011D            738   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:152: pwm_Left0 = pwm_Right0 = -1;
011D 7570FF     739            mov     _pwm_Right0,#0xFF
0120 75F0FF     740            mov     _pwm_Left0,#0xFF
0123            741   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:153: pwm_Left1 = pwm_Right1 = pwm_both;  //MOTOR_LEFT1 = MOTOR_RIGHT1 = pwm_both;
0123 853030     742            mov     _pwm_Right1,_pwm_both
0126 8530B0     743            mov     _pwm_Left1,_pwm_both
0129 22         744            ret
012A            745   L006004?:
012A            746   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:156: else if (direction == 1) { //p2.0,1.5 on
012A BA0128     747            cjne    r2,#0x01,L006006?
012D            748   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:157: pwm_Left1 = pwm_Right1 = -1;
012D 7530FF     749            mov     _pwm_Right1,#0xFF
0130 75B0FF     750            mov     _pwm_Left1,#0xFF
0133            751   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:158: pwm_Left0 = pwm_Right0 = pwm_both; 
0133 853070     752            mov     _pwm_Right0,_pwm_both
0136 8530F0     753            mov     _pwm_Left0,_pwm_both
0139            754   L006006?:
0139 22         755            ret
013A            756   ;------------------------------------------------------------
013A            757   ;Allocation info for local variables in function 'InitADC'
013A            758   ;------------------------------------------------------------
013A            759   ;------------------------------------------------------------
013A            760   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:164: void InitADC (void)
013A            761   ;        -----------------------------------------
013A            762   ;         function InitADC
013A            763   ;        -----------------------------------------
013A            764   _InitADC:
013A            765   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:167: ADC0CF = 0xF8; // SAR clock = 31, Right-justified result
013A 75BCF8     766            mov     _ADC0CF,#0xF8
013D            767   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:168: ADC0CN = 0b_1000_0000; // AD0EN=1, AD0TM=0
013D 75E880     768            mov     _ADC0CN,#0x80
0140            769   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:169: REF0CN = 0b_0000_1000; //Select VDD as the voltage reference for the converter
0140 75D108     770            mov     _REF0CN,#0x08
0143 22         771            ret
0144            772   ;------------------------------------------------------------
0144            773   ;Allocation info for local variables in function 'InitPinADC'
0144            774   ;------------------------------------------------------------
0144            775   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
0144            776   ;portno                    Allocated to registers r2 
0144            777   ;mask                      Allocated to registers r3 
0144            778   ;------------------------------------------------------------
0144            779   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:172: void InitPinADC (unsigned char portno, unsigned char pinno)
0144            780   ;        -----------------------------------------
0144            781   ;         function InitPinADC
0144            782   ;        -----------------------------------------
0144            783   _InitPinADC:
0144 AA82       784            mov     r2,dpl
0146            785   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:176: mask=1<<pinno;
0146 8550F0     786            mov     b,_InitPinADC_PARM_2
0149 05F0       787            inc     b
014B 7401       788            mov     a,#0x01
014D 8001       789            sjmp    L008012?
014F            790   L008010?:
014F 25E0       791            add     a,acc
0151            792   L008012?:
0151 D5F0A8     793            djnz    b,L008010?
0154 FB         794            mov     r3,a
0155            795   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:178: switch (portno)
0155 EA         796            mov     a,r2
0156 24FC       797            add     a,#0xff - 0x03
0158 4001       798            jc      L008007?
015A EA         799            mov     a,r2
015B 2A         800            add     a,r2
015C 2A         801            add     a,r2
015D 90A328     802            mov     dptr,#L008014?
0160 73         803            jmp     @a+dptr
0161            804   L008014?:
0161 020100     805            ljmp    L008001?
0164 020100     806            ljmp    L008002?
0167 020100     807            ljmp    L008003?
016A 020100     808            ljmp    L008004?
016D            809   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:180: case 0:
016D            810   L008001?:
016D            811   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:181: P0MDIN &= (~mask); // Set pin as analog input
016D EB         812            mov     a,r3
016E F4         813            cpl     a
016F 52F1       814            anl     _P0MDIN,a
0171            815   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:182: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0171 EB         816            mov     a,r3
0172 42D4       817            orl     _P0SKIP,a
0174            818   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:183: break;
0174            819   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:184: case 1:
0174 22         820            ret
0175            821   L008002?:
0175            822   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:185: P1MDIN &= (~mask); // Set pin as analog input
0175 EB         823            mov     a,r3
0176 F4         824            cpl     a
0177 52F2       825            anl     _P1MDIN,a
0179            826   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:186: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0179 EB         827            mov     a,r3
017A 42D5       828            orl     _P1SKIP,a
017C            829   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:187: break;
017C            830   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:188: case 2:
017C 22         831            ret
017D            832   L008003?:
017D            833   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:189: P2MDIN &= (~mask); // Set pin as analog input
017D EB         834            mov     a,r3
017E F4         835            cpl     a
017F 52F3       836            anl     _P2MDIN,a
0181            837   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:190: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0181 EB         838            mov     a,r3
0182 42D6       839            orl     _P2SKIP,a
0184            840   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:191: break;
0184            841   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:192: case 3:
0184 22         842            ret
0185            843   L008004?:
0185            844   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:193: P3MDIN &= (~mask); // Set pin as analog input
0185 EB         845            mov     a,r3
0186 F4         846            cpl     a
0187 FA         847            mov     r2,a
0188 52F4       848            anl     _P3MDIN,a
018A            849   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:194: P3SKIP |= mask; // Skip Crossbar decoding for this pin
018A EB         850            mov     a,r3
018B 42DF       851            orl     _P3SKIP,a
018D            852   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:198: }
018D            853   L008007?:
018D 22         854            ret
018E            855   ;------------------------------------------------------------
018E            856   ;Allocation info for local variables in function 'ADC_at_Pin'
018E            857   ;------------------------------------------------------------
018E            858   ;pin                       Allocated to registers 
018E            859   ;------------------------------------------------------------
018E            860   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:201: unsigned int ADC_at_Pin(unsigned char pin)
018E            861   ;        -----------------------------------------
018E            862   ;         function ADC_at_Pin
018E            863   ;        -----------------------------------------
018E            864   _ADC_at_Pin:
018E 8582BB     865            mov     _AMX0P,dpl
0191            866   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:204: AMX0N = LQFP32_MUX_GND;  // GND is negative input (Single-ended Mode)
0191 75BA1F     867            mov     _AMX0N,#0x1F
0194            868   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:206: AD0BUSY=1;
0194 D2EC       869            setb    _AD0BUSY
0196            870   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:207: while (AD0BUSY); // Wait for dummy conversion to finish
0196            871   L009001?:
0196 20EC68     872            jb      _AD0BUSY,L009001?
0199            873   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:209: AD0BUSY = 1;
0199 D2EC       874            setb    _AD0BUSY
019B            875   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:210: while (AD0BUSY); // Wait for conversion to complete
019B            876   L009004?:
019B 20ECA8     877            jb      _AD0BUSY,L009004?
019E            878   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:211: return (ADC0L+(ADC0H*0x100));
019E AABD       879            mov     r2,_ADC0L
01A0 7B00       880            mov     r3,#0x00
01A2 ADBE       881            mov     r5,_ADC0H
01A4 7C00       882            mov     r4,#0x00
01A6 EC         883            mov     a,r4
01A7 2A         884            add     a,r2
01A8 F582       885            mov     dpl,a
01AA ED         886            mov     a,r5
01AB 3B         887            addc    a,r3
01AC F583       888            mov     dph,a
01AE 22         889            ret
01AF            890   ;------------------------------------------------------------
01AF            891   ;Allocation info for local variables in function 'Volts_at_Pin'
01AF            892   ;------------------------------------------------------------
01AF            893   ;pin                       Allocated to registers r2 
01AF            894   ;------------------------------------------------------------
01AF            895   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:214: float Volts_at_Pin(unsigned char pin)
01AF            896   ;        -----------------------------------------
01AF            897   ;         function Volts_at_Pin
01AF            898   ;        -----------------------------------------
01AF            899   _Volts_at_Pin:
01AF            900   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:216: return ((ADC_at_Pin(pin)*3.30)/1024.0);
01AF 120100     901            lcall   _ADC_at_Pin
01B2 120100     902            lcall   ___uint2fs
01B5 AA82       903            mov     r2,dpl
01B7 AB83       904            mov     r3,dph
01B9 ACF0       905            mov     r4,b
01BB FD         906            mov     r5,a
01BC C002       907            push    ar2
01BE C003       908            push    ar3
01C0 C004       909            push    ar4
01C2 C005       910            push    ar5
01C4 903333     911            mov     dptr,#0x3333
01C7 75F053     912            mov     b,#0x53
01CA 7440       913            mov     a,#0x40
01CC 120100     914            lcall   ___fsmul
01CF AA82       915            mov     r2,dpl
01D1 AB83       916            mov     r3,dph
01D3 ACF0       917            mov     r4,b
01D5 FD         918            mov     r5,a
01D6 E581       919            mov     a,sp
01D8 24FC       920            add     a,#0xfc
01DA F581       921            mov     sp,a
01DC E4         922            clr     a
01DD C0E0       923            push    acc
01DF C0E0       924            push    acc
01E1 7480       925            mov     a,#0x80
01E3 C0E0       926            push    acc
01E5 7444       927            mov     a,#0x44
01E7 C0E0       928            push    acc
01E9 8A82       929            mov     dpl,r2
01EB 8B83       930            mov     dph,r3
01ED 8CF0       931            mov     b,r4
01EF ED         932            mov     a,r5
01F0 120100     933            lcall   ___fsdiv
01F3 AA82       934            mov     r2,dpl
01F5 AB83       935            mov     r3,dph
01F7 ACF0       936            mov     r4,b
01F9 FD         937            mov     r5,a
01FA E581       938            mov     a,sp
01FC 24FC       939            add     a,#0xfc
01FE F581       940            mov     sp,a
0200 8A82       941            mov     dpl,r2
0202 8B83       942            mov     dph,r3
0204 8CF0       943            mov     b,r4
0206 ED         944            mov     a,r5
0207 22         945            ret
0208            946   ;------------------------------------------------------------
0208            947   ;Allocation info for local variables in function 'readData'
0208            948   ;------------------------------------------------------------
0208            949   ;commandflag               Allocated to registers r2 r3 
0208            950   ;------------------------------------------------------------
0208            951   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:220: void readData (void) {
0208            952   ;        -----------------------------------------
0208            953   ;         function readData
0208            954   ;        -----------------------------------------
0208            955   _readData:
0208            956   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:221: int commandflag = 1;                                        //determines if there's a real command coming in or not
0208 7A01       957            mov     r2,#0x01
020A 7B00       958            mov     r3,#0x00
020C            959   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:223: if (COMMAND_PIN == 0) {                                     //0---
020C 3091E8     960            jnb     _P1_1,L011039?
020F 020100     961            ljmp    L011022?
0212            962   L011039?:
0212            963   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:224: waitms(CMDFRQ*1.5);
0212 90003C     964            mov     dptr,#0x003C
0215 C002       965            push    ar2
0217 C003       966            push    ar3
0219 120100     967            lcall   _waitms
021C D003       968            pop     ar3
021E D002       969            pop     ar2
0220            970   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:225: if (COMMAND_PIN == 1) {                             //01--
0220 309168     971            jnb     _P1_1,L011019?
0223            972   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:226: waitms(CMDFRQ);
0223 900028     973            mov     dptr,#0x0028
0226 C002       974            push    ar2
0228 C003       975            push    ar3
022A 120100     976            lcall   _waitms
022D D003       977            pop     ar3
022F D002       978            pop     ar2
0231            979   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:227: if (COMMAND_PIN == 0) {                     //010-
0231 2091A8     980            jb      _P1_1,L011007?
0234            981   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:228: waitms(CMDFRQ);
0234 900028     982            mov     dptr,#0x0028
0237 120100     983            lcall   _waitms
023A            984   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:229: if (COMMAND_PIN == 0) {             //0100  
023A 2091E8     985            jb      _P1_1,L011002?
023D            986   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:230: currentcmd = 4;
023D 75B004     987            mov     _currentcmd,#0x04
0240            988   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:231: commandflag = 0;
0240 7A00       989            mov     r2,#0x00
0242 7B00       990            mov     r3,#0x00
0244 8001       991            sjmp    L011022?
0246            992   L011002?:
0246            993   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:234: currentcmd = 5;
0246 75B005     994            mov     _currentcmd,#0x05
0249            995   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:235: commandflag = 0;
0249 7A00       996            mov     r2,#0x00
024B 7B00       997            mov     r3,#0x00
024D 8001       998            sjmp    L011022?
024F            999   L011007?:
024F           1000   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:239: waitms(4);
024F 900004    1001            mov     dptr,#0x0004
0252 C002      1002            push    ar2
0254 C003      1003            push    ar3
0256 120100    1004            lcall   _waitms
0259 D003      1005            pop     ar3
025B D002      1006            pop     ar2
025D           1007   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:240: if (COMMAND_PIN == 0) {             //0110
025D 209128    1008            jb      _P1_1,L011022?
0260           1009   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:241: currentcmd = 6;
0260 75B006    1010            mov     _currentcmd,#0x06
0263           1011   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:242: commandflag = 0;
0263 7A00      1012            mov     r2,#0x00
0265 7B00      1013            mov     r3,#0x00
0267 8001      1014            sjmp    L011022?
0269           1015   L011019?:
0269           1016   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:247: waitms(CMDFRQ);
0269 900028    1017            mov     dptr,#0x0028
026C 120100    1018            lcall   _waitms
026F           1019   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:248: if (COMMAND_PIN == 1) {                     //001-
026F 309128    1020            jnb     _P1_1,L011016?
0272           1021   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:249: waitms(CMDFRQ);
0272 900028    1022            mov     dptr,#0x0028
0275 120100    1023            lcall   _waitms
0278           1024   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:250: if (COMMAND_PIN == 1) {             //0011
0278 309168    1025            jnb     _P1_1,L011010?
027B           1026   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:251: currentcmd = 3;
027B 75B003    1027            mov     _currentcmd,#0x03
027E           1028   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:252: commandflag = 0;
027E 7A00      1029            mov     r2,#0x00
0280 7B00      1030            mov     r3,#0x00
0282 8001      1031            sjmp    L011022?
0284           1032   L011010?:
0284           1033   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:255: currentcmd = 2;
0284 75B002    1034            mov     _currentcmd,#0x02
0287           1035   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:256: commandflag = 0;
0287 7A00      1036            mov     r2,#0x00
0289 7B00      1037            mov     r3,#0x00
028B 8001      1038            sjmp    L011022?
028D           1039   L011016?:
028D           1040   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:260: waitms(CMDFRQ);
028D 900028    1041            mov     dptr,#0x0028
0290 120100    1042            lcall   _waitms
0293           1043   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:261: if (COMMAND_PIN == 1) {             //0001  
0293 3091A8    1044            jnb     _P1_1,L011013?
0296           1045   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:262: currentcmd == 1;
0296 E5B0      1046            mov     a,_currentcmd
0298           1047   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:263: commandflag = 0;
0298 7A00      1048            mov     r2,#0x00
029A 7B00      1049            mov     r3,#0x00
029C 8001      1050            sjmp    L011022?
029E           1051   L011013?:
029E           1052   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:266: commandflag = 1;
029E 7A01      1053            mov     r2,#0x01
02A0 7B00      1054            mov     r3,#0x00
02A2           1055   L011022?:
02A2           1056   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:271: if (commandflag == 0) {                                     //only wait for signal to end if a command has been received. 
02A2 EA        1057            mov     a,r2
02A3 4B        1058            orl     a,r3
02A4 7001      1059            jnz     L011027?
02A6           1060   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:272: while (COMMAND_PIN == 0) {}
02A6           1061   L011023?:
02A6 309128    1062            jnb     _P1_1,L011023?
02A9           1063   L011027?:
02A9           1064   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:275: printf("current command is %d, commandflag = %d\r\n", currentcmd, commandflag);             
02A9 ACB0      1065            mov     r4,_currentcmd
02AB E5B0      1066            mov     a,_currentcmd
02AD 33        1067            rlc     a
02AE 95E0      1068            subb    a,acc
02B0 FD        1069            mov     r5,a
02B1 C002      1070            push    ar2
02B3 C003      1071            push    ar3
02B5 C004      1072            push    ar4
02B7 C005      1073            push    ar5
02B9 7468      1074            mov     a,#__str_0
02BB C0E0      1075            push    acc
02BD 74A8      1076            mov     a,#(__str_0 >> 8)
02BF C0E0      1077            push    acc
02C1 7480      1078            mov     a,#0x80
02C3 C0E0      1079            push    acc
02C5 120100    1080            lcall   _printf
02C8 E581      1081            mov     a,sp
02CA 24F9      1082            add     a,#0xf9
02CC F581      1083            mov     sp,a
02CE 22        1084            ret
02CF           1085   ;------------------------------------------------------------
02CF           1086   ;Allocation info for local variables in function 'linetrack'
02CF           1087   ;------------------------------------------------------------
02CF           1088   ;forwardbackward           Allocated with name '_linetrack_forwardbackward_1_83'
02CF           1089   ;vleft                     Allocated with name '_linetrack_vleft_1_84'
02CF           1090   ;vright                    Allocated with name '_linetrack_vright_1_84'
02CF           1091   ;sloc0                     Allocated with name '_linetrack_sloc0_1_0'
02CF           1092   ;------------------------------------------------------------
02CF           1093   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:279: void linetrack (int forwardbackward) {
02CF           1094   ;        -----------------------------------------
02CF           1095   ;         function linetrack
02CF           1096   ;        -----------------------------------------
02CF           1097   _linetrack:
02CF 8582E8    1098            mov     _linetrack_forwardbackward_1_83,dpl
02D2 8583E9    1099            mov     (_linetrack_forwardbackward_1_83 + 1),dph
02D5           1100   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:283: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
02D5 75820B    1101            mov     dpl,#0x0B
02D8 120100    1102            lcall   _Volts_at_Pin
02DB 858238    1103            mov     _linetrack_vleft_1_84,dpl
02DE 858339    1104            mov     (_linetrack_vleft_1_84 + 1),dph
02E1 85F03A    1105            mov     (_linetrack_vleft_1_84 + 2),b
02E4 F53B      1106            mov     (_linetrack_vleft_1_84 + 3),a
02E6           1107   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:284: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
02E6 75820C    1108            mov     dpl,#0x0C
02E9 120100    1109            lcall   _Volts_at_Pin
02EC 858288    1110            mov     _linetrack_vright_1_84,dpl
02EF 858389    1111            mov     (_linetrack_vright_1_84 + 1),dph
02F2 85F08A    1112            mov     (_linetrack_vright_1_84 + 2),b
02F5 F58B      1113            mov     (_linetrack_vright_1_84 + 3),a
02F7           1114   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:286: pwm_Left0 = -1;
02F7 75F0FF    1115            mov     _pwm_Left0,#0xFF
02FA           1116   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:288: pwm_Left1 = vright*vright*75/(vright*vright+vleft*vleft);
02FA C088      1117            push    _linetrack_vright_1_84
02FC C089      1118            push    (_linetrack_vright_1_84 + 1)
02FE C08A      1119            push    (_linetrack_vright_1_84 + 2)
0300 C08B      1120            push    (_linetrack_vright_1_84 + 3)
0302 858882    1121            mov     dpl,_linetrack_vright_1_84
0305 858983    1122            mov     dph,(_linetrack_vright_1_84 + 1)
0308 858AF0    1123            mov     b,(_linetrack_vright_1_84 + 2)
030B E58B      1124            mov     a,(_linetrack_vright_1_84 + 3)
030D 120100    1125            lcall   ___fsmul
0310 AC82      1126            mov     r4,dpl
0312 AD83      1127            mov     r5,dph
0314 AEF0      1128            mov     r6,b
0316 FF        1129            mov     r7,a
0317 E581      1130            mov     a,sp
0319 24FC      1131            add     a,#0xfc
031B F581      1132            mov     sp,a
031D C004      1133            push    ar4
031F C005      1134            push    ar5
0321 C006      1135            push    ar6
0323 C007      1136            push    ar7
0325 900000    1137            mov     dptr,#0x0000
0328 75F096    1138            mov     b,#0x96
032B 7442      1139            mov     a,#0x42
032D 120100    1140            lcall   ___fsmul
0330 AC82      1141            mov     r4,dpl
0332 AD83      1142            mov     r5,dph
0334 AEF0      1143            mov     r6,b
0336 FF        1144            mov     r7,a
0337 E581      1145            mov     a,sp
0339 24FC      1146            add     a,#0xfc
033B F581      1147            mov     sp,a
033D C004      1148            push    ar4
033F C005      1149            push    ar5
0341 C006      1150            push    ar6
0343 C007      1151            push    ar7
0345 C088      1152            push    _linetrack_vright_1_84
0347 C089      1153            push    (_linetrack_vright_1_84 + 1)
0349 C08A      1154            push    (_linetrack_vright_1_84 + 2)
034B C08B      1155            push    (_linetrack_vright_1_84 + 3)
034D 858882    1156            mov     dpl,_linetrack_vright_1_84
0350 858983    1157            mov     dph,(_linetrack_vright_1_84 + 1)
0353 858AF0    1158            mov     b,(_linetrack_vright_1_84 + 2)
0356 E58B      1159            mov     a,(_linetrack_vright_1_84 + 3)
0358 120100    1160            lcall   ___fsmul
035B 8582D8    1161            mov     _linetrack_sloc0_1_0,dpl
035E 8583D9    1162            mov     (_linetrack_sloc0_1_0 + 1),dph
0361 85F0DA    1163            mov     (_linetrack_sloc0_1_0 + 2),b
0364 F5DB      1164            mov     (_linetrack_sloc0_1_0 + 3),a
0366 E581      1165            mov     a,sp
0368 24FC      1166            add     a,#0xfc
036A F581      1167            mov     sp,a
036C C038      1168            push    _linetrack_vleft_1_84
036E C039      1169            push    (_linetrack_vleft_1_84 + 1)
0370 C03A      1170            push    (_linetrack_vleft_1_84 + 2)
0372 C03B      1171            push    (_linetrack_vleft_1_84 + 3)
0374 853882    1172            mov     dpl,_linetrack_vleft_1_84
0377 853983    1173            mov     dph,(_linetrack_vleft_1_84 + 1)
037A 853AF0    1174            mov     b,(_linetrack_vleft_1_84 + 2)
037D E53B      1175            mov     a,(_linetrack_vleft_1_84 + 3)
037F 120100    1176            lcall   ___fsmul
0382 AA82      1177            mov     r2,dpl
0384 AB83      1178            mov     r3,dph
0386 A8F0      1179            mov     r0,b
0388 F9        1180            mov     r1,a
0389 E581      1181            mov     a,sp
038B 24FC      1182            add     a,#0xfc
038D F581      1183            mov     sp,a
038F C002      1184            push    ar2
0391 C003      1185            push    ar3
0393 C000      1186            push    ar0
0395 C001      1187            push    ar1
0397 85D882    1188            mov     dpl,_linetrack_sloc0_1_0
039A 85D983    1189            mov     dph,(_linetrack_sloc0_1_0 + 1)
039D 85DAF0    1190            mov     b,(_linetrack_sloc0_1_0 + 2)
03A0 E5DB      1191            mov     a,(_linetrack_sloc0_1_0 + 3)
03A2 120100    1192            lcall   ___fsadd
03A5 AA82      1193            mov     r2,dpl
03A7 AB83      1194            mov     r3,dph
03A9 A8F0      1195            mov     r0,b
03AB F9        1196            mov     r1,a
03AC E581      1197            mov     a,sp
03AE 24FC      1198            add     a,#0xfc
03B0 F581      1199            mov     sp,a
03B2 D007      1200            pop     ar7
03B4 D006      1201            pop     ar6
03B6 D005      1202            pop     ar5
03B8 D004      1203            pop     ar4
03BA C002      1204            push    ar2
03BC C003      1205            push    ar3
03BE C000      1206            push    ar0
03C0 C001      1207            push    ar1
03C2 8C82      1208            mov     dpl,r4
03C4 8D83      1209            mov     dph,r5
03C6 8EF0      1210            mov     b,r6
03C8 EF        1211            mov     a,r7
03C9 120100    1212            lcall   ___fsdiv
03CC AA82      1213            mov     r2,dpl
03CE AB83      1214            mov     r3,dph
03D0 ACF0      1215            mov     r4,b
03D2 FD        1216            mov     r5,a
03D3 E581      1217            mov     a,sp
03D5 24FC      1218            add     a,#0xfc
03D7 F581      1219            mov     sp,a
03D9 8A82      1220            mov     dpl,r2
03DB 8B83      1221            mov     dph,r3
03DD 8CF0      1222            mov     b,r4
03DF ED        1223            mov     a,r5
03E0 120100    1224            lcall   ___fs2schar
03E3 8582B0    1225            mov     _pwm_Left1,dpl
03E6           1226   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:289: pwm_Right1 = -1;
03E6 7530FF    1227            mov     _pwm_Right1,#0xFF
03E9           1228   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:291: pwm_Right0 = vleft*vleft*75/(vright*vright+vleft*vleft);
03E9 C038      1229            push    _linetrack_vleft_1_84
03EB C039      1230            push    (_linetrack_vleft_1_84 + 1)
03ED C03A      1231            push    (_linetrack_vleft_1_84 + 2)
03EF C03B      1232            push    (_linetrack_vleft_1_84 + 3)
03F1 853882    1233            mov     dpl,_linetrack_vleft_1_84
03F4 853983    1234            mov     dph,(_linetrack_vleft_1_84 + 1)
03F7 853AF0    1235            mov     b,(_linetrack_vleft_1_84 + 2)
03FA E53B      1236            mov     a,(_linetrack_vleft_1_84 + 3)
03FC 120100    1237            lcall   ___fsmul
03FF AA82      1238            mov     r2,dpl
0401 AB83      1239            mov     r3,dph
0403 ACF0      1240            mov     r4,b
0405 FD        1241            mov     r5,a
0406 E581      1242            mov     a,sp
0408 24FC      1243            add     a,#0xfc
040A F581      1244            mov     sp,a
040C C002      1245            push    ar2
040E C003      1246            push    ar3
0410 C004      1247            push    ar4
0412 C005      1248            push    ar5
0414 900000    1249            mov     dptr,#0x0000
0417 75F096    1250            mov     b,#0x96
041A 7442      1251            mov     a,#0x42
041C 120100    1252            lcall   ___fsmul
041F AA82      1253            mov     r2,dpl
0421 AB83      1254            mov     r3,dph
0423 ACF0      1255            mov     r4,b
0425 FD        1256            mov     r5,a
0426 E581      1257            mov     a,sp
0428 24FC      1258            add     a,#0xfc
042A F581      1259            mov     sp,a
042C C002      1260            push    ar2
042E C003      1261            push    ar3
0430 C004      1262            push    ar4
0432 C005      1263            push    ar5
0434 C088      1264            push    _linetrack_vright_1_84
0436 C089      1265            push    (_linetrack_vright_1_84 + 1)
0438 C08A      1266            push    (_linetrack_vright_1_84 + 2)
043A C08B      1267            push    (_linetrack_vright_1_84 + 3)
043C 858882    1268            mov     dpl,_linetrack_vright_1_84
043F 858983    1269            mov     dph,(_linetrack_vright_1_84 + 1)
0442 858AF0    1270            mov     b,(_linetrack_vright_1_84 + 2)
0445 E58B      1271            mov     a,(_linetrack_vright_1_84 + 3)
0447 120100    1272            lcall   ___fsmul
044A 8582D8    1273            mov     _linetrack_sloc0_1_0,dpl
044D 8583D9    1274            mov     (_linetrack_sloc0_1_0 + 1),dph
0450 85F0DA    1275            mov     (_linetrack_sloc0_1_0 + 2),b
0453 F5DB      1276            mov     (_linetrack_sloc0_1_0 + 3),a
0455 E581      1277            mov     a,sp
0457 24FC      1278            add     a,#0xfc
0459 F581      1279            mov     sp,a
045B C038      1280            push    _linetrack_vleft_1_84
045D C039      1281            push    (_linetrack_vleft_1_84 + 1)
045F C03A      1282            push    (_linetrack_vleft_1_84 + 2)
0461 C03B      1283            push    (_linetrack_vleft_1_84 + 3)
0463 853882    1284            mov     dpl,_linetrack_vleft_1_84
0466 853983    1285            mov     dph,(_linetrack_vleft_1_84 + 1)
0469 853AF0    1286            mov     b,(_linetrack_vleft_1_84 + 2)
046C E53B      1287            mov     a,(_linetrack_vleft_1_84 + 3)
046E 120100    1288            lcall   ___fsmul
0471 AE82      1289            mov     r6,dpl
0473 AF83      1290            mov     r7,dph
0475 A8F0      1291            mov     r0,b
0477 F9        1292            mov     r1,a
0478 E581      1293            mov     a,sp
047A 24FC      1294            add     a,#0xfc
047C F581      1295            mov     sp,a
047E C006      1296            push    ar6
0480 C007      1297            push    ar7
0482 C000      1298            push    ar0
0484 C001      1299            push    ar1
0486 85D882    1300            mov     dpl,_linetrack_sloc0_1_0
0489 85D983    1301            mov     dph,(_linetrack_sloc0_1_0 + 1)
048C 85DAF0    1302            mov     b,(_linetrack_sloc0_1_0 + 2)
048F E5DB      1303            mov     a,(_linetrack_sloc0_1_0 + 3)
0491 120100    1304            lcall   ___fsadd
0494 AE82      1305            mov     r6,dpl
0496 AF83      1306            mov     r7,dph
0498 A8F0      1307            mov     r0,b
049A F9        1308            mov     r1,a
049B E581      1309            mov     a,sp
049D 24FC      1310            add     a,#0xfc
049F F581      1311            mov     sp,a
04A1 D005      1312            pop     ar5
04A3 D004      1313            pop     ar4
04A5 D003      1314            pop     ar3
04A7 D002      1315            pop     ar2
04A9 C006      1316            push    ar6
04AB C007      1317            push    ar7
04AD C000      1318            push    ar0
04AF C001      1319            push    ar1
04B1 8A82      1320            mov     dpl,r2
04B3 8B83      1321            mov     dph,r3
04B5 8CF0      1322            mov     b,r4
04B7 ED        1323            mov     a,r5
04B8 120100    1324            lcall   ___fsdiv
04BB AA82      1325            mov     r2,dpl
04BD AB83      1326            mov     r3,dph
04BF ACF0      1327            mov     r4,b
04C1 FD        1328            mov     r5,a
04C2 E581      1329            mov     a,sp
04C4 24FC      1330            add     a,#0xfc
04C6 F581      1331            mov     sp,a
04C8 8A82      1332            mov     dpl,r2
04CA 8B83      1333            mov     dph,r3
04CC 8CF0      1334            mov     b,r4
04CE ED        1335            mov     a,r5
04CF 120100    1336            lcall   ___fs2schar
04D2 858270    1337            mov     _pwm_Right0,dpl
04D5           1338   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:293: if (forwardbackward) {
04D5 E5E8      1339            mov     a,_linetrack_forwardbackward_1_83
04D7 45E9      1340            orl     a,(_linetrack_forwardbackward_1_83 + 1)
04D9 7001      1341            jnz     L012006?
04DB 020100    1342            ljmp    L012002?
04DE           1343   L012006?:
04DE           1344   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:294: pwm_Left0 = vright*vright*75/(vright*vright+vleft*vleft);
04DE C088      1345            push    _linetrack_vright_1_84
04E0 C089      1346            push    (_linetrack_vright_1_84 + 1)
04E2 C08A      1347            push    (_linetrack_vright_1_84 + 2)
04E4 C08B      1348            push    (_linetrack_vright_1_84 + 3)
04E6 858882    1349            mov     dpl,_linetrack_vright_1_84
04E9 858983    1350            mov     dph,(_linetrack_vright_1_84 + 1)
04EC 858AF0    1351            mov     b,(_linetrack_vright_1_84 + 2)
04EF E58B      1352            mov     a,(_linetrack_vright_1_84 + 3)
04F1 120100    1353            lcall   ___fsmul
04F4 AA82      1354            mov     r2,dpl
04F6 AB83      1355            mov     r3,dph
04F8 ACF0      1356            mov     r4,b
04FA FD        1357            mov     r5,a
04FB E581      1358            mov     a,sp
04FD 24FC      1359            add     a,#0xfc
04FF F581      1360            mov     sp,a
0501 C002      1361            push    ar2
0503 C003      1362            push    ar3
0505 C004      1363            push    ar4
0507 C005      1364            push    ar5
0509 900000    1365            mov     dptr,#0x0000
050C 75F096    1366            mov     b,#0x96
050F 7442      1367            mov     a,#0x42
0511 120100    1368            lcall   ___fsmul
0514 AA82      1369            mov     r2,dpl
0516 AB83      1370            mov     r3,dph
0518 ACF0      1371            mov     r4,b
051A FD        1372            mov     r5,a
051B E581      1373            mov     a,sp
051D 24FC      1374            add     a,#0xfc
051F F581      1375            mov     sp,a
0521 C002      1376            push    ar2
0523 C003      1377            push    ar3
0525 C004      1378            push    ar4
0527 C005      1379            push    ar5
0529 C088      1380            push    _linetrack_vright_1_84
052B C089      1381            push    (_linetrack_vright_1_84 + 1)
052D C08A      1382            push    (_linetrack_vright_1_84 + 2)
052F C08B      1383            push    (_linetrack_vright_1_84 + 3)
0531 858882    1384            mov     dpl,_linetrack_vright_1_84
0534 858983    1385            mov     dph,(_linetrack_vright_1_84 + 1)
0537 858AF0    1386            mov     b,(_linetrack_vright_1_84 + 2)
053A E58B      1387            mov     a,(_linetrack_vright_1_84 + 3)
053C 120100    1388            lcall   ___fsmul
053F 8582D8    1389            mov     _linetrack_sloc0_1_0,dpl
0542 8583D9    1390            mov     (_linetrack_sloc0_1_0 + 1),dph
0545 85F0DA    1391            mov     (_linetrack_sloc0_1_0 + 2),b
0548 F5DB      1392            mov     (_linetrack_sloc0_1_0 + 3),a
054A E581      1393            mov     a,sp
054C 24FC      1394            add     a,#0xfc
054E F581      1395            mov     sp,a
0550 C038      1396            push    _linetrack_vleft_1_84
0552 C039      1397            push    (_linetrack_vleft_1_84 + 1)
0554 C03A      1398            push    (_linetrack_vleft_1_84 + 2)
0556 C03B      1399            push    (_linetrack_vleft_1_84 + 3)
0558 853882    1400            mov     dpl,_linetrack_vleft_1_84
055B 853983    1401            mov     dph,(_linetrack_vleft_1_84 + 1)
055E 853AF0    1402            mov     b,(_linetrack_vleft_1_84 + 2)
0561 E53B      1403            mov     a,(_linetrack_vleft_1_84 + 3)
0563 120100    1404            lcall   ___fsmul
0566 AE82      1405            mov     r6,dpl
0568 AF83      1406            mov     r7,dph
056A A8F0      1407            mov     r0,b
056C F9        1408            mov     r1,a
056D E581      1409            mov     a,sp
056F 24FC      1410            add     a,#0xfc
0571 F581      1411            mov     sp,a
0573 C006      1412            push    ar6
0575 C007      1413            push    ar7
0577 C000      1414            push    ar0
0579 C001      1415            push    ar1
057B 85D882    1416            mov     dpl,_linetrack_sloc0_1_0
057E 85D983    1417            mov     dph,(_linetrack_sloc0_1_0 + 1)
0581 85DAF0    1418            mov     b,(_linetrack_sloc0_1_0 + 2)
0584 E5DB      1419            mov     a,(_linetrack_sloc0_1_0 + 3)
0586 120100    1420            lcall   ___fsadd
0589 AE82      1421            mov     r6,dpl
058B AF83      1422            mov     r7,dph
058D A8F0      1423            mov     r0,b
058F F9        1424            mov     r1,a
0590 E581      1425            mov     a,sp
0592 24FC      1426            add     a,#0xfc
0594 F581      1427            mov     sp,a
0596 D005      1428            pop     ar5
0598 D004      1429            pop     ar4
059A D003      1430            pop     ar3
059C D002      1431            pop     ar2
059E C006      1432            push    ar6
05A0 C007      1433            push    ar7
05A2 C000      1434            push    ar0
05A4 C001      1435            push    ar1
05A6 8A82      1436            mov     dpl,r2
05A8 8B83      1437            mov     dph,r3
05AA 8CF0      1438            mov     b,r4
05AC ED        1439            mov     a,r5
05AD 120100    1440            lcall   ___fsdiv
05B0 AA82      1441            mov     r2,dpl
05B2 AB83      1442            mov     r3,dph
05B4 ACF0      1443            mov     r4,b
05B6 FD        1444            mov     r5,a
05B7 E581      1445            mov     a,sp
05B9 24FC      1446            add     a,#0xfc
05BB F581      1447            mov     sp,a
05BD 8A82      1448            mov     dpl,r2
05BF 8B83      1449            mov     dph,r3
05C1 8CF0      1450            mov     b,r4
05C3 ED        1451            mov     a,r5
05C4 120100    1452            lcall   ___fs2schar
05C7 8582F0    1453            mov     _pwm_Left0,dpl
05CA           1454   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:295: pwm_Left1 = -1;
05CA 75B0FF    1455            mov     _pwm_Left1,#0xFF
05CD           1456   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:296: pwm_Right1 = vleft*vleft*75/(vright*vright+vleft*vleft);
05CD C038      1457            push    _linetrack_vleft_1_84
05CF C039      1458            push    (_linetrack_vleft_1_84 + 1)
05D1 C03A      1459            push    (_linetrack_vleft_1_84 + 2)
05D3 C03B      1460            push    (_linetrack_vleft_1_84 + 3)
05D5 853882    1461            mov     dpl,_linetrack_vleft_1_84
05D8 853983    1462            mov     dph,(_linetrack_vleft_1_84 + 1)
05DB 853AF0    1463            mov     b,(_linetrack_vleft_1_84 + 2)
05DE E53B      1464            mov     a,(_linetrack_vleft_1_84 + 3)
05E0 120100    1465            lcall   ___fsmul
05E3 AA82      1466            mov     r2,dpl
05E5 AB83      1467            mov     r3,dph
05E7 ACF0      1468            mov     r4,b
05E9 FD        1469            mov     r5,a
05EA E581      1470            mov     a,sp
05EC 24FC      1471            add     a,#0xfc
05EE F581      1472            mov     sp,a
05F0 C002      1473            push    ar2
05F2 C003      1474            push    ar3
05F4 C004      1475            push    ar4
05F6 C005      1476            push    ar5
05F8 900000    1477            mov     dptr,#0x0000
05FB 75F096    1478            mov     b,#0x96
05FE 7442      1479            mov     a,#0x42
0600 120100    1480            lcall   ___fsmul
0603 AA82      1481            mov     r2,dpl
0605 AB83      1482            mov     r3,dph
0607 ACF0      1483            mov     r4,b
0609 FD        1484            mov     r5,a
060A E581      1485            mov     a,sp
060C 24FC      1486            add     a,#0xfc
060E F581      1487            mov     sp,a
0610 C002      1488            push    ar2
0612 C003      1489            push    ar3
0614 C004      1490            push    ar4
0616 C005      1491            push    ar5
0618 C088      1492            push    _linetrack_vright_1_84
061A C089      1493            push    (_linetrack_vright_1_84 + 1)
061C C08A      1494            push    (_linetrack_vright_1_84 + 2)
061E C08B      1495            push    (_linetrack_vright_1_84 + 3)
0620 858882    1496            mov     dpl,_linetrack_vright_1_84
0623 858983    1497            mov     dph,(_linetrack_vright_1_84 + 1)
0626 858AF0    1498            mov     b,(_linetrack_vright_1_84 + 2)
0629 E58B      1499            mov     a,(_linetrack_vright_1_84 + 3)
062B 120100    1500            lcall   ___fsmul
062E 8582D8    1501            mov     _linetrack_sloc0_1_0,dpl
0631 8583D9    1502            mov     (_linetrack_sloc0_1_0 + 1),dph
0634 85F0DA    1503            mov     (_linetrack_sloc0_1_0 + 2),b
0637 F5DB      1504            mov     (_linetrack_sloc0_1_0 + 3),a
0639 E581      1505            mov     a,sp
063B 24FC      1506            add     a,#0xfc
063D F581      1507            mov     sp,a
063F C038      1508            push    _linetrack_vleft_1_84
0641 C039      1509            push    (_linetrack_vleft_1_84 + 1)
0643 C03A      1510            push    (_linetrack_vleft_1_84 + 2)
0645 C03B      1511            push    (_linetrack_vleft_1_84 + 3)
0647 853882    1512            mov     dpl,_linetrack_vleft_1_84
064A 853983    1513            mov     dph,(_linetrack_vleft_1_84 + 1)
064D 853AF0    1514            mov     b,(_linetrack_vleft_1_84 + 2)
0650 E53B      1515            mov     a,(_linetrack_vleft_1_84 + 3)
0652 120100    1516            lcall   ___fsmul
0655 AE82      1517            mov     r6,dpl
0657 AF83      1518            mov     r7,dph
0659 A8F0      1519            mov     r0,b
065B F9        1520            mov     r1,a
065C E581      1521            mov     a,sp
065E 24FC      1522            add     a,#0xfc
0660 F581      1523            mov     sp,a
0662 C006      1524            push    ar6
0664 C007      1525            push    ar7
0666 C000      1526            push    ar0
0668 C001      1527            push    ar1
066A 85D882    1528            mov     dpl,_linetrack_sloc0_1_0
066D 85D983    1529            mov     dph,(_linetrack_sloc0_1_0 + 1)
0670 85DAF0    1530            mov     b,(_linetrack_sloc0_1_0 + 2)
0673 E5DB      1531            mov     a,(_linetrack_sloc0_1_0 + 3)
0675 120100    1532            lcall   ___fsadd
0678 AE82      1533            mov     r6,dpl
067A AF83      1534            mov     r7,dph
067C A8F0      1535            mov     r0,b
067E F9        1536            mov     r1,a
067F E581      1537            mov     a,sp
0681 24FC      1538            add     a,#0xfc
0683 F581      1539            mov     sp,a
0685 D005      1540            pop     ar5
0687 D004      1541            pop     ar4
0689 D003      1542            pop     ar3
068B D002      1543            pop     ar2
068D C006      1544            push    ar6
068F C007      1545            push    ar7
0691 C000      1546            push    ar0
0693 C001      1547            push    ar1
0695 8A82      1548            mov     dpl,r2
0697 8B83      1549            mov     dph,r3
0699 8CF0      1550            mov     b,r4
069B ED        1551            mov     a,r5
069C 120100    1552            lcall   ___fsdiv
069F AA82      1553            mov     r2,dpl
06A1 AB83      1554            mov     r3,dph
06A3 ACF0      1555            mov     r4,b
06A5 FD        1556            mov     r5,a
06A6 E581      1557            mov     a,sp
06A8 24FC      1558            add     a,#0xfc
06AA F581      1559            mov     sp,a
06AC 8A82      1560            mov     dpl,r2
06AE 8B83      1561            mov     dph,r3
06B0 8CF0      1562            mov     b,r4
06B2 ED        1563            mov     a,r5
06B3 120100    1564            lcall   ___fs2schar
06B6 858230    1565            mov     _pwm_Right1,dpl
06B9           1566   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:297: pwm_Right0 = -1;
06B9 7570FF    1567            mov     _pwm_Right0,#0xFF
06BC           1568   L012002?:
06BC           1569   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:300: printf("2.3 = %f, 2.4 = %f, LeftMotor = %4d, RightMotor = %4d, command: %d\r", vleft, vright, pwm_Left1, pwm_Right0, currentcmd);
06BC AAB0      1570            mov     r2,_currentcmd
06BE E5B0      1571            mov     a,_currentcmd
06C0 33        1572            rlc     a
06C1 95E0      1573            subb    a,acc
06C3 FB        1574            mov     r3,a
06C4 AC70      1575            mov     r4,_pwm_Right0
06C6 E570      1576            mov     a,_pwm_Right0
06C8 33        1577            rlc     a
06C9 95E0      1578            subb    a,acc
06CB FD        1579            mov     r5,a
06CC AEB0      1580            mov     r6,_pwm_Left1
06CE E5B0      1581            mov     a,_pwm_Left1
06D0 33        1582            rlc     a
06D1 95E0      1583            subb    a,acc
06D3 FF        1584            mov     r7,a
06D4 C002      1585            push    ar2
06D6 C003      1586            push    ar3
06D8 C004      1587            push    ar4
06DA C005      1588            push    ar5
06DC C006      1589            push    ar6
06DE C007      1590            push    ar7
06E0 C088      1591            push    _linetrack_vright_1_84
06E2 C089      1592            push    (_linetrack_vright_1_84 + 1)
06E4 C08A      1593            push    (_linetrack_vright_1_84 + 2)
06E6 C08B      1594            push    (_linetrack_vright_1_84 + 3)
06E8 C038      1595            push    _linetrack_vleft_1_84
06EA C039      1596            push    (_linetrack_vleft_1_84 + 1)
06EC C03A      1597            push    (_linetrack_vleft_1_84 + 2)
06EE C03B      1598            push    (_linetrack_vleft_1_84 + 3)
06F0 74E8      1599            mov     a,#__str_1
06F2 C0E0      1600            push    acc
06F4 74A9      1601            mov     a,#(__str_1 >> 8)
06F6 C0E0      1602            push    acc
06F8 7480      1603            mov     a,#0x80
06FA C0E0      1604            push    acc
06FC 120100    1605            lcall   _printf
06FF E581      1606            mov     a,sp
0701 24EF      1607            add     a,#0xef
0703 F581      1608            mov     sp,a
0705 22        1609            ret
0706           1610   ;------------------------------------------------------------
0706           1611   ;Allocation info for local variables in function 'stopcar'
0706           1612   ;------------------------------------------------------------
0706           1613   ;------------------------------------------------------------
0706           1614   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:304: void stopcar () {
0706           1615   ;        -----------------------------------------
0706           1616   ;         function stopcar
0706           1617   ;        -----------------------------------------
0706           1618   _stopcar:
0706           1619   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:305: pwm_Left1 = -1;
0706 75B0FF    1620            mov     _pwm_Left1,#0xFF
0709           1621   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:306: pwm_Right1 = -1;
0709 7530FF    1622            mov     _pwm_Right1,#0xFF
070C           1623   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:307: pwm_Left0 = -1;
070C 75F0FF    1624            mov     _pwm_Left0,#0xFF
070F           1625   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:308: pwm_Right0 = -1;
070F 7570FF    1626            mov     _pwm_Right0,#0xFF
0712 22        1627            ret
0713           1628   ;------------------------------------------------------------
0713           1629   ;Allocation info for local variables in function 'turncar'
0713           1630   ;------------------------------------------------------------
0713           1631   ;leftright                 Allocated to registers r2 r3 
0713           1632   ;vleft                     Allocated with name '_turncar_vleft_1_88'
0713           1633   ;vright                    Allocated with name '_turncar_vright_1_88'
0713           1634   ;------------------------------------------------------------
0713           1635   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:311: void turncar (int leftright) {
0713           1636   ;        -----------------------------------------
0713           1637   ;         function turncar
0713           1638   ;        -----------------------------------------
0713           1639   _turncar:
0713 AA82      1640            mov     r2,dpl
0715 AB83      1641            mov     r3,dph
0717           1642   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:315: pwm_Left0 = -1;
0717 75F0FF    1643            mov     _pwm_Left0,#0xFF
071A           1644   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:316: pwm_Left1 = -1;
071A 75B0FF    1645            mov     _pwm_Left1,#0xFF
071D           1646   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:317: pwm_Right0 = -1;
071D 7570FF    1647            mov     _pwm_Right0,#0xFF
0720           1648   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:318: pwm_Right1 = -1;
0720 7530FF    1649            mov     _pwm_Right1,#0xFF
0723           1650   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:321: if (leftright == 0) {
0723 EA        1651            mov     a,r2
0724 4B        1652            orl     a,r3
0725 6001      1653            jz      L014022?
0727 020100    1654            ljmp    L014012?
072A           1655   L014022?:
072A           1656   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:323: pwm_Right0 = 50;
072A 757032    1657            mov     _pwm_Right0,#0x32
072D           1658   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:325: waitms(1000);
072D 9003E8    1659            mov     dptr,#0x03E8
0730 120100    1660            lcall   _waitms
0733           1661   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:327: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0733 75820B    1662            mov     dpl,#0x0B
0736 120100    1663            lcall   _Volts_at_Pin
0739 858228    1664            mov     _turncar_vleft_1_88,dpl
073C 858329    1665            mov     (_turncar_vleft_1_88 + 1),dph
073F 85F02A    1666            mov     (_turncar_vleft_1_88 + 2),b
0742 F52B      1667            mov     (_turncar_vleft_1_88 + 3),a
0744           1668   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:328: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0744 75820C    1669            mov     dpl,#0x0C
0747 120100    1670            lcall   _Volts_at_Pin
074A 858278    1671            mov     _turncar_vright_1_88,dpl
074D 858379    1672            mov     (_turncar_vright_1_88 + 1),dph
0750 85F07A    1673            mov     (_turncar_vright_1_88 + 2),b
0753 F57B      1674            mov     (_turncar_vright_1_88 + 3),a
0755           1675   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:330: while (((vleft - vright) > 0.2) || ((vleft - vright) < (-0.2))) {
0755           1676   L014002?:
0755 C078      1677            push    _turncar_vright_1_88
0757 C079      1678            push    (_turncar_vright_1_88 + 1)
0759 C07A      1679            push    (_turncar_vright_1_88 + 2)
075B C07B      1680            push    (_turncar_vright_1_88 + 3)
075D 852882    1681            mov     dpl,_turncar_vleft_1_88
0760 852983    1682            mov     dph,(_turncar_vleft_1_88 + 1)
0763 852AF0    1683            mov     b,(_turncar_vleft_1_88 + 2)
0766 E52B      1684            mov     a,(_turncar_vleft_1_88 + 3)
0768 120100    1685            lcall   ___fssub
076B AC82      1686            mov     r4,dpl
076D AD83      1687            mov     r5,dph
076F AEF0      1688            mov     r6,b
0771 FF        1689            mov     r7,a
0772 E581      1690            mov     a,sp
0774 24FC      1691            add     a,#0xfc
0776 F581      1692            mov     sp,a
0778 74CD      1693            mov     a,#0xCD
077A C0E0      1694            push    acc
077C 74CC      1695            mov     a,#0xCC
077E C0E0      1696            push    acc
0780 744C      1697            mov     a,#0x4C
0782 C0E0      1698            push    acc
0784 743E      1699            mov     a,#0x3E
0786 C0E0      1700            push    acc
0788 8C82      1701            mov     dpl,r4
078A 8D83      1702            mov     dph,r5
078C 8EF0      1703            mov     b,r6
078E EF        1704            mov     a,r7
078F 120100    1705            lcall   ___fsgt
0792 AC82      1706            mov     r4,dpl
0794 E581      1707            mov     a,sp
0796 24FC      1708            add     a,#0xfc
0798 F581      1709            mov     sp,a
079A EC        1710            mov     a,r4
079B 7001      1711            jnz     L014003?
079D C078      1712            push    _turncar_vright_1_88
079F C079      1713            push    (_turncar_vright_1_88 + 1)
07A1 C07A      1714            push    (_turncar_vright_1_88 + 2)
07A3 C07B      1715            push    (_turncar_vright_1_88 + 3)
07A5 852882    1716            mov     dpl,_turncar_vleft_1_88
07A8 852983    1717            mov     dph,(_turncar_vleft_1_88 + 1)
07AB 852AF0    1718            mov     b,(_turncar_vleft_1_88 + 2)
07AE E52B      1719            mov     a,(_turncar_vleft_1_88 + 3)
07B0 120100    1720            lcall   ___fssub
07B3 AC82      1721            mov     r4,dpl
07B5 AD83      1722            mov     r5,dph
07B7 AEF0      1723            mov     r6,b
07B9 FF        1724            mov     r7,a
07BA E581      1725            mov     a,sp
07BC 24FC      1726            add     a,#0xfc
07BE F581      1727            mov     sp,a
07C0 74CD      1728            mov     a,#0xCD
07C2 C0E0      1729            push    acc
07C4 74CC      1730            mov     a,#0xCC
07C6 C0E0      1731            push    acc
07C8 744C      1732            mov     a,#0x4C
07CA C0E0      1733            push    acc
07CC 74BE      1734            mov     a,#0xBE
07CE C0E0      1735            push    acc
07D0 8C82      1736            mov     dpl,r4
07D2 8D83      1737            mov     dph,r5
07D4 8EF0      1738            mov     b,r6
07D6 EF        1739            mov     a,r7
07D7 120100    1740            lcall   ___fslt
07DA AC82      1741            mov     r4,dpl
07DC E581      1742            mov     a,sp
07DE 24FC      1743            add     a,#0xfc
07E0 F581      1744            mov     sp,a
07E2 EC        1745            mov     a,r4
07E3 6001      1746            jz      L014004?
07E5           1747   L014003?:
07E5           1748   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:332: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
07E5 75820B    1749            mov     dpl,#0x0B
07E8 120100    1750            lcall   _Volts_at_Pin
07EB 858228    1751            mov     _turncar_vleft_1_88,dpl
07EE 858329    1752            mov     (_turncar_vleft_1_88 + 1),dph
07F1 85F02A    1753            mov     (_turncar_vleft_1_88 + 2),b
07F4 F52B      1754            mov     (_turncar_vleft_1_88 + 3),a
07F6           1755   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:333: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
07F6 75820C    1756            mov     dpl,#0x0C
07F9 120100    1757            lcall   _Volts_at_Pin
07FC 858278    1758            mov     _turncar_vright_1_88,dpl
07FF 858379    1759            mov     (_turncar_vright_1_88 + 1),dph
0802 85F07A    1760            mov     (_turncar_vright_1_88 + 2),b
0805 F57B      1761            mov     (_turncar_vright_1_88 + 3),a
0807 020100    1762            ljmp    L014002?
080A           1763   L014004?:
080A           1764   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:337: pwm_Right0 = -1;            
080A 7570FF    1765            mov     _pwm_Right0,#0xFF
080D 22        1766            ret
080E           1767   L014012?:
080E           1768   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:340: else if (leftright == 1) {
080E BA0128    1769            cjne    r2,#0x01,L014025?
0811 BB0028    1770            cjne    r3,#0x00,L014025?
0814 8001      1771            sjmp    L014026?
0816           1772   L014025?:
0816 22        1773            ret
0817           1774   L014026?:
0817           1775   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:342: pwm_Left1 = 50;
0817 75B032    1776            mov     _pwm_Left1,#0x32
081A           1777   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:344: waitms(1000);
081A 9003E8    1778            mov     dptr,#0x03E8
081D 120100    1779            lcall   _waitms
0820           1780   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:346: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0820 75820B    1781            mov     dpl,#0x0B
0823 120100    1782            lcall   _Volts_at_Pin
0826 858228    1783            mov     _turncar_vleft_1_88,dpl
0829 858329    1784            mov     (_turncar_vleft_1_88 + 1),dph
082C 85F02A    1785            mov     (_turncar_vleft_1_88 + 2),b
082F F52B      1786            mov     (_turncar_vleft_1_88 + 3),a
0831           1787   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:347: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0831 75820C    1788            mov     dpl,#0x0C
0834 120100    1789            lcall   _Volts_at_Pin
0837 858278    1790            mov     _turncar_vright_1_88,dpl
083A 858379    1791            mov     (_turncar_vright_1_88 + 1),dph
083D 85F07A    1792            mov     (_turncar_vright_1_88 + 2),b
0840 F57B      1793            mov     (_turncar_vright_1_88 + 3),a
0842           1794   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:349: while (((vleft - vright) > 0.2) || ((vleft - vright) < (-0.2))) {
0842           1795   L014006?:
0842 C078      1796            push    _turncar_vright_1_88
0844 C079      1797            push    (_turncar_vright_1_88 + 1)
0846 C07A      1798            push    (_turncar_vright_1_88 + 2)
0848 C07B      1799            push    (_turncar_vright_1_88 + 3)
084A 852882    1800            mov     dpl,_turncar_vleft_1_88
084D 852983    1801            mov     dph,(_turncar_vleft_1_88 + 1)
0850 852AF0    1802            mov     b,(_turncar_vleft_1_88 + 2)
0853 E52B      1803            mov     a,(_turncar_vleft_1_88 + 3)
0855 120100    1804            lcall   ___fssub
0858 AA82      1805            mov     r2,dpl
085A AB83      1806            mov     r3,dph
085C ACF0      1807            mov     r4,b
085E FD        1808            mov     r5,a
085F E581      1809            mov     a,sp
0861 24FC      1810            add     a,#0xfc
0863 F581      1811            mov     sp,a
0865 74CD      1812            mov     a,#0xCD
0867 C0E0      1813            push    acc
0869 74CC      1814            mov     a,#0xCC
086B C0E0      1815            push    acc
086D 744C      1816            mov     a,#0x4C
086F C0E0      1817            push    acc
0871 743E      1818            mov     a,#0x3E
0873 C0E0      1819            push    acc
0875 8A82      1820            mov     dpl,r2
0877 8B83      1821            mov     dph,r3
0879 8CF0      1822            mov     b,r4
087B ED        1823            mov     a,r5
087C 120100    1824            lcall   ___fsgt
087F AA82      1825            mov     r2,dpl
0881 E581      1826            mov     a,sp
0883 24FC      1827            add     a,#0xfc
0885 F581      1828            mov     sp,a
0887 EA        1829            mov     a,r2
0888 7001      1830            jnz     L014007?
088A C078      1831            push    _turncar_vright_1_88
088C C079      1832            push    (_turncar_vright_1_88 + 1)
088E C07A      1833            push    (_turncar_vright_1_88 + 2)
0890 C07B      1834            push    (_turncar_vright_1_88 + 3)
0892 852882    1835            mov     dpl,_turncar_vleft_1_88
0895 852983    1836            mov     dph,(_turncar_vleft_1_88 + 1)
0898 852AF0    1837            mov     b,(_turncar_vleft_1_88 + 2)
089B E52B      1838            mov     a,(_turncar_vleft_1_88 + 3)
089D 120100    1839            lcall   ___fssub
08A0 AA82      1840            mov     r2,dpl
08A2 AB83      1841            mov     r3,dph
08A4 ACF0      1842            mov     r4,b
08A6 FD        1843            mov     r5,a
08A7 E581      1844            mov     a,sp
08A9 24FC      1845            add     a,#0xfc
08AB F581      1846            mov     sp,a
08AD 74CD      1847            mov     a,#0xCD
08AF C0E0      1848            push    acc
08B1 74CC      1849            mov     a,#0xCC
08B3 C0E0      1850            push    acc
08B5 744C      1851            mov     a,#0x4C
08B7 C0E0      1852            push    acc
08B9 74BE      1853            mov     a,#0xBE
08BB C0E0      1854            push    acc
08BD 8A82      1855            mov     dpl,r2
08BF 8B83      1856            mov     dph,r3
08C1 8CF0      1857            mov     b,r4
08C3 ED        1858            mov     a,r5
08C4 120100    1859            lcall   ___fslt
08C7 AA82      1860            mov     r2,dpl
08C9 E581      1861            mov     a,sp
08CB 24FC      1862            add     a,#0xfc
08CD F581      1863            mov     sp,a
08CF EA        1864            mov     a,r2
08D0 6001      1865            jz      L014008?
08D2           1866   L014007?:
08D2           1867   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:351: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
08D2 75820B    1868            mov     dpl,#0x0B
08D5 120100    1869            lcall   _Volts_at_Pin
08D8 858228    1870            mov     _turncar_vleft_1_88,dpl
08DB 858329    1871            mov     (_turncar_vleft_1_88 + 1),dph
08DE 85F02A    1872            mov     (_turncar_vleft_1_88 + 2),b
08E1 F52B      1873            mov     (_turncar_vleft_1_88 + 3),a
08E3           1874   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:352: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
08E3 75820C    1875            mov     dpl,#0x0C
08E6 120100    1876            lcall   _Volts_at_Pin
08E9 858278    1877            mov     _turncar_vright_1_88,dpl
08EC 858379    1878            mov     (_turncar_vright_1_88 + 1),dph
08EF 85F07A    1879            mov     (_turncar_vright_1_88 + 2),b
08F2 F57B      1880            mov     (_turncar_vright_1_88 + 3),a
08F4 020100    1881            ljmp    L014006?
08F7           1882   L014008?:
08F7           1883   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:356: pwm_Left1 = -1; 
08F7 75B0FF    1884            mov     _pwm_Left1,#0xFF
08FA 22        1885            ret
08FB           1886   ;------------------------------------------------------------
08FB           1887   ;Allocation info for local variables in function 'uturn'
08FB           1888   ;------------------------------------------------------------
08FB           1889   ;vleft                     Allocated with name '_uturn_vleft_1_93'
08FB           1890   ;vright                    Allocated with name '_uturn_vright_1_93'
08FB           1891   ;------------------------------------------------------------
08FB           1892   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:360: void uturn () {
08FB           1893   ;        -----------------------------------------
08FB           1894   ;         function uturn
08FB           1895   ;        -----------------------------------------
08FB           1896   _uturn:
08FB           1897   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:364: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
08FB 75820B    1898            mov     dpl,#0x0B
08FE 120100    1899            lcall   _Volts_at_Pin
0901 8582C8    1900            mov     _uturn_vleft_1_93,dpl
0904 8583C9    1901            mov     (_uturn_vleft_1_93 + 1),dph
0907 85F0CA    1902            mov     (_uturn_vleft_1_93 + 2),b
090A F5CB      1903            mov     (_uturn_vleft_1_93 + 3),a
090C           1904   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:365: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
090C 75820C    1905            mov     dpl,#0x0C
090F 120100    1906            lcall   _Volts_at_Pin
0912 858218    1907            mov     _uturn_vright_1_93,dpl
0915 858319    1908            mov     (_uturn_vright_1_93 + 1),dph
0918 85F01A    1909            mov     (_uturn_vright_1_93 + 2),b
091B F51B      1910            mov     (_uturn_vright_1_93 + 3),a
091D           1911   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:367: pwm_Left0 = -1;
091D 75F0FF    1912            mov     _pwm_Left0,#0xFF
0920           1913   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:368: pwm_Left1 = 50;
0920 75B032    1914            mov     _pwm_Left1,#0x32
0923           1915   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:369: pwm_Right0 = -1;
0923 7570FF    1916            mov     _pwm_Right0,#0xFF
0926           1917   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:370: pwm_Right1 = 50;
0926 753032    1918            mov     _pwm_Right1,#0x32
0929           1919   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:372: waitms(4000);
0929 900FA0    1920            mov     dptr,#0x0FA0
092C 120100    1921            lcall   _waitms
092F           1922   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:374: while (((vleft - vright) > 0.2) || ((vleft - vright) < (-0.2))) {
092F           1923   L015002?:
092F C018      1924            push    _uturn_vright_1_93
0931 C019      1925            push    (_uturn_vright_1_93 + 1)
0933 C01A      1926            push    (_uturn_vright_1_93 + 2)
0935 C01B      1927            push    (_uturn_vright_1_93 + 3)
0937 85C882    1928            mov     dpl,_uturn_vleft_1_93
093A 85C983    1929            mov     dph,(_uturn_vleft_1_93 + 1)
093D 85CAF0    1930            mov     b,(_uturn_vleft_1_93 + 2)
0940 E5CB      1931            mov     a,(_uturn_vleft_1_93 + 3)
0942 120100    1932            lcall   ___fssub
0945 AA82      1933            mov     r2,dpl
0947 AB83      1934            mov     r3,dph
0949 ACF0      1935            mov     r4,b
094B FD        1936            mov     r5,a
094C E581      1937            mov     a,sp
094E 24FC      1938            add     a,#0xfc
0950 F581      1939            mov     sp,a
0952 74CD      1940            mov     a,#0xCD
0954 C0E0      1941            push    acc
0956 74CC      1942            mov     a,#0xCC
0958 C0E0      1943            push    acc
095A 744C      1944            mov     a,#0x4C
095C C0E0      1945            push    acc
095E 743E      1946            mov     a,#0x3E
0960 C0E0      1947            push    acc
0962 8A82      1948            mov     dpl,r2
0964 8B83      1949            mov     dph,r3
0966 8CF0      1950            mov     b,r4
0968 ED        1951            mov     a,r5
0969 120100    1952            lcall   ___fsgt
096C AA82      1953            mov     r2,dpl
096E E581      1954            mov     a,sp
0970 24FC      1955            add     a,#0xfc
0972 F581      1956            mov     sp,a
0974 EA        1957            mov     a,r2
0975 7001      1958            jnz     L015003?
0977 C018      1959            push    _uturn_vright_1_93
0979 C019      1960            push    (_uturn_vright_1_93 + 1)
097B C01A      1961            push    (_uturn_vright_1_93 + 2)
097D C01B      1962            push    (_uturn_vright_1_93 + 3)
097F 85C882    1963            mov     dpl,_uturn_vleft_1_93
0982 85C983    1964            mov     dph,(_uturn_vleft_1_93 + 1)
0985 85CAF0    1965            mov     b,(_uturn_vleft_1_93 + 2)
0988 E5CB      1966            mov     a,(_uturn_vleft_1_93 + 3)
098A 120100    1967            lcall   ___fssub
098D AA82      1968            mov     r2,dpl
098F AB83      1969            mov     r3,dph
0991 ACF0      1970            mov     r4,b
0993 FD        1971            mov     r5,a
0994 E581      1972            mov     a,sp
0996 24FC      1973            add     a,#0xfc
0998 F581      1974            mov     sp,a
099A 74CD      1975            mov     a,#0xCD
099C C0E0      1976            push    acc
099E 74CC      1977            mov     a,#0xCC
09A0 C0E0      1978            push    acc
09A2 744C      1979            mov     a,#0x4C
09A4 C0E0      1980            push    acc
09A6 74BE      1981            mov     a,#0xBE
09A8 C0E0      1982            push    acc
09AA 8A82      1983            mov     dpl,r2
09AC 8B83      1984            mov     dph,r3
09AE 8CF0      1985            mov     b,r4
09B0 ED        1986            mov     a,r5
09B1 120100    1987            lcall   ___fslt
09B4 AA82      1988            mov     r2,dpl
09B6 E581      1989            mov     a,sp
09B8 24FC      1990            add     a,#0xfc
09BA F581      1991            mov     sp,a
09BC EA        1992            mov     a,r2
09BD 6001      1993            jz      L015005?
09BF           1994   L015003?:
09BF           1995   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:376: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
09BF 75820B    1996            mov     dpl,#0x0B
09C2 120100    1997            lcall   _Volts_at_Pin
09C5 8582C8    1998            mov     _uturn_vleft_1_93,dpl
09C8 8583C9    1999            mov     (_uturn_vleft_1_93 + 1),dph
09CB 85F0CA    2000            mov     (_uturn_vleft_1_93 + 2),b
09CE F5CB      2001            mov     (_uturn_vleft_1_93 + 3),a
09D0           2002   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:377: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
09D0 75820C    2003            mov     dpl,#0x0C
09D3 120100    2004            lcall   _Volts_at_Pin
09D6 858218    2005            mov     _uturn_vright_1_93,dpl
09D9 858319    2006            mov     (_uturn_vright_1_93 + 1),dph
09DC 85F01A    2007            mov     (_uturn_vright_1_93 + 2),b
09DF F51B      2008            mov     (_uturn_vright_1_93 + 3),a
09E1 020100    2009            ljmp    L015002?
09E4           2010   L015005?:
09E4 22        2011            ret
09E5           2012   ;------------------------------------------------------------
09E5           2013   ;Allocation info for local variables in function 'main'
09E5           2014   ;------------------------------------------------------------
09E5           2015   ;------------------------------------------------------------
09E5           2016   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:381: void main (void)
09E5           2017   ;        -----------------------------------------
09E5           2018   ;         function main
09E5           2019   ;        -----------------------------------------
09E5           2020   _main:
09E5           2021   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:384: MOTOR_LEFT0 =0;
09E5 C295      2022            clr     _P1_5
09E7           2023   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:385: MOTOR_LEFT1 =0;
09E7 C296      2024            clr     _P1_6
09E9           2025   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:386: MOTOR_RIGHT0 =0;
09E9 C2A0      2026            clr     _P2_0
09EB           2027   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:387: MOTOR_RIGHT1 =0;
09EB C2A1      2028            clr     _P2_1
09ED           2029   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:389: currentstate = 1;           //initialize the car to be stopped
09ED 757001    2030            mov     _currentstate,#0x01
09F0           2031   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:390: currentcmd = 0;             //initialize the command to be null
09F0 75B000    2032            mov     _currentcmd,#0x00
09F3           2033   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:393: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
09F3 7428      2034            mov     a,#__str_2
09F5 C0E0      2035            push    acc
09F7 74AE      2036            mov     a,#(__str_2 >> 8)
09F9 C0E0      2037            push    acc
09FB 7480      2038            mov     a,#0x80
09FD C0E0      2039            push    acc
09FF 120100    2040            lcall   _printf
0A02 1581      2041            dec     sp
0A04 1581      2042            dec     sp
0A06 1581      2043            dec     sp
0A08           2044   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:402: InitPinADC(2, 3); // Configure P2.3 as analog input
0A08 755003    2045            mov     _InitPinADC_PARM_2,#0x03
0A0B 758202    2046            mov     dpl,#0x02
0A0E 120100    2047            lcall   _InitPinADC
0A11           2048   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:403: InitPinADC(2, 4); // Configure P2.4 as analog input
0A11 755004    2049            mov     _InitPinADC_PARM_2,#0x04
0A14 758202    2050            mov     dpl,#0x02
0A17 120100    2051            lcall   _InitPinADC
0A1A           2052   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:404: InitPinADC(1, 0);
0A1A 755000    2053            mov     _InitPinADC_PARM_2,#0x00
0A1D 758201    2054            mov     dpl,#0x01
0A20 120100    2055            lcall   _InitPinADC
0A23           2056   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:405: InitADC();
0A23 120100    2057            lcall   _InitADC
0A26           2058   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:407: while(1)
0A26           2059   L016026?:
0A26           2060   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:421: switch (currentstate) {
0A26 AA70      2061            mov     r2,_currentstate
0A28 BA01A8    2062            cjne    r2,#0x01,L016042?
0A2B 8001      2063            sjmp    L016001?
0A2D           2064   L016042?:
0A2D BA0228    2065            cjne    r2,#0x02,L016043?
0A30 8001      2066            sjmp    L016002?
0A32           2067   L016043?:
0A32           2068   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:422: case 1:
0A32 BA03A8    2069            cjne    r2,#0x03,L016004?
0A35 8001      2070            sjmp    L016003?
0A37           2071   L016001?:
0A37           2072   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:423: linetrack(0);       //forwards
0A37 900000    2073            mov     dptr,#0x0000
0A3A 120100    2074            lcall   _linetrack
0A3D           2075   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:424: break;
0A3D           2076   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:425: case 2:
0A3D 8001      2077            sjmp    L016004?
0A3F           2078   L016002?:
0A3F           2079   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:426: linetrack(1);       //backwards
0A3F 900001    2080            mov     dptr,#0x0001
0A42 120100    2081            lcall   _linetrack
0A45           2082   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:427: break;
0A45           2083   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:428: case 3:
0A45 8001      2084            sjmp    L016004?
0A47           2085   L016003?:
0A47           2086   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:429: stopcar();          //stop car
0A47 120100    2087            lcall   _stopcar
0A4A           2088   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:431: }
0A4A           2089   L016004?:
0A4A           2090   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:433: switch (currentcmd) {
0A4A E5B0      2091            mov     a,_currentcmd
0A4C FA        2092            mov     r2,a
0A4D 30E728    2093            jnb     acc.7,L016045?
0A50 020100    2094            ljmp    L016023?
0A53           2095   L016045?:
0A53 C3        2096            clr     c
0A54 7486      2097            mov     a,#(0x06 ^ 0x80)
0A56 8AF0      2098            mov     b,r2
0A58 63F080    2099            xrl     b,#0x80
0A5B 95F0      2100            subb    a,b
0A5D 5001      2101            jnc     L016046?
0A5F 020100    2102            ljmp    L016023?
0A62           2103   L016046?:
0A62 EA        2104            mov     a,r2
0A63 2A        2105            add     a,r2
0A64 2A        2106            add     a,r2
0A65 90B0E8    2107            mov     dptr,#L016047?
0A68 73        2108            jmp     @a+dptr
0A69           2109   L016047?:
0A69 020100    2110            ljmp    L016005?
0A6C 020100    2111            ljmp    L016011?
0A6F 020100    2112            ljmp    L016015?
0A72 020100    2113            ljmp    L016019?
0A75 020100    2114            ljmp    L016020?
0A78 020100    2115            ljmp    L016021?
0A7B 020100    2116            ljmp    L016022?
0A7E           2117   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:435: case 0 :
0A7E           2118   L016005?:
0A7E           2119   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:437: if (currentstate == 1) {
0A7E 7401      2120            mov     a,#0x01
0A80 B57068    2121            cjne    a,_currentstate,L016026?
0A83           2122   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:438: if (Volts_at_Pin(LQFP32_MUX_P2_3) > 1 && Volts_at_Pin(LQFP32_MUX_P2_4) > 1) {
0A83 75820B    2123            mov     dpl,#0x0B
0A86 120100    2124            lcall   _Volts_at_Pin
0A89 AA82      2125            mov     r2,dpl
0A8B AB83      2126            mov     r3,dph
0A8D ACF0      2127            mov     r4,b
0A8F FD        2128            mov     r5,a
0A90 E4        2129            clr     a
0A91 C0E0      2130            push    acc
0A93 C0E0      2131            push    acc
0A95 7480      2132            mov     a,#0x80
0A97 C0E0      2133            push    acc
0A99 743F      2134            mov     a,#0x3F
0A9B C0E0      2135            push    acc
0A9D 8A82      2136            mov     dpl,r2
0A9F 8B83      2137            mov     dph,r3
0AA1 8CF0      2138            mov     b,r4
0AA3 ED        2139            mov     a,r5
0AA4 120100    2140            lcall   ___fsgt
0AA7 AA82      2141            mov     r2,dpl
0AA9 E581      2142            mov     a,sp
0AAB 24FC      2143            add     a,#0xfc
0AAD F581      2144            mov     sp,a
0AAF EA        2145            mov     a,r2
0AB0 7001      2146            jnz     L016050?
0AB2 020100    2147            ljmp    L016026?
0AB5           2148   L016050?:
0AB5 75820C    2149            mov     dpl,#0x0C
0AB8 120100    2150            lcall   _Volts_at_Pin
0ABB AA82      2151            mov     r2,dpl
0ABD AB83      2152            mov     r3,dph
0ABF ACF0      2153            mov     r4,b
0AC1 FD        2154            mov     r5,a
0AC2 E4        2155            clr     a
0AC3 C0E0      2156            push    acc
0AC5 C0E0      2157            push    acc
0AC7 7480      2158            mov     a,#0x80
0AC9 C0E0      2159            push    acc
0ACB 743F      2160            mov     a,#0x3F
0ACD C0E0      2161            push    acc
0ACF 8A82      2162            mov     dpl,r2
0AD1 8B83      2163            mov     dph,r3
0AD3 8CF0      2164            mov     b,r4
0AD5 ED        2165            mov     a,r5
0AD6 120100    2166            lcall   ___fsgt
0AD9 AA82      2167            mov     r2,dpl
0ADB E581      2168            mov     a,sp
0ADD 24FC      2169            add     a,#0xfc
0ADF F581      2170            mov     sp,a
0AE1 EA        2171            mov     a,r2
0AE2 7001      2172            jnz     L016051?
0AE4 020100    2173            ljmp    L016026?
0AE7           2174   L016051?:
0AE7           2175   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:440: pwm_Left1 = 35;
0AE7 75B023    2176            mov     _pwm_Left1,#0x23
0AEA           2177   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:441: pwm_Left0 = -1;
0AEA 75F0FF    2178            mov     _pwm_Left0,#0xFF
0AED           2179   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:442: pwm_Right0 = 35;
0AED 757023    2180            mov     _pwm_Right0,#0x23
0AF0           2181   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:443: pwm_Right1 = -1;                                            
0AF0 7530FF    2182            mov     _pwm_Right1,#0xFF
0AF3           2183   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:444: waitms(1500);
0AF3 9005DC    2184            mov     dptr,#0x05DC
0AF6 120100    2185            lcall   _waitms
0AF9           2186   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:447: break;
0AF9 020100    2187            ljmp    L016026?
0AFC           2188   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:448: case 1 :
0AFC           2189   L016011?:
0AFC           2190   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:450: if (Volts_at_Pin(LQFP32_MUX_P2_3) > 1 && Volts_at_Pin(LQFP32_MUX_P2_4) > 1) {
0AFC 75820B    2191            mov     dpl,#0x0B
0AFF 120100    2192            lcall   _Volts_at_Pin
0B02 AA82      2193            mov     r2,dpl
0B04 AB83      2194            mov     r3,dph
0B06 ACF0      2195            mov     r4,b
0B08 FD        2196            mov     r5,a
0B09 E4        2197            clr     a
0B0A C0E0      2198            push    acc
0B0C C0E0      2199            push    acc
0B0E 7480      2200            mov     a,#0x80
0B10 C0E0      2201            push    acc
0B12 743F      2202            mov     a,#0x3F
0B14 C0E0      2203            push    acc
0B16 8A82      2204            mov     dpl,r2
0B18 8B83      2205            mov     dph,r3
0B1A 8CF0      2206            mov     b,r4
0B1C ED        2207            mov     a,r5
0B1D 120100    2208            lcall   ___fsgt
0B20 AA82      2209            mov     r2,dpl
0B22 E581      2210            mov     a,sp
0B24 24FC      2211            add     a,#0xfc
0B26 F581      2212            mov     sp,a
0B28 EA        2213            mov     a,r2
0B29 7001      2214            jnz     L016052?
0B2B 020100    2215            ljmp    L016026?
0B2E           2216   L016052?:
0B2E 75820C    2217            mov     dpl,#0x0C
0B31 120100    2218            lcall   _Volts_at_Pin
0B34 AA82      2219            mov     r2,dpl
0B36 AB83      2220            mov     r3,dph
0B38 ACF0      2221            mov     r4,b
0B3A FD        2222            mov     r5,a
0B3B E4        2223            clr     a
0B3C C0E0      2224            push    acc
0B3E C0E0      2225            push    acc
0B40 7480      2226            mov     a,#0x80
0B42 C0E0      2227            push    acc
0B44 743F      2228            mov     a,#0x3F
0B46 C0E0      2229            push    acc
0B48 8A82      2230            mov     dpl,r2
0B4A 8B83      2231            mov     dph,r3
0B4C 8CF0      2232            mov     b,r4
0B4E ED        2233            mov     a,r5
0B4F 120100    2234            lcall   ___fsgt
0B52 AA82      2235            mov     r2,dpl
0B54 E581      2236            mov     a,sp
0B56 24FC      2237            add     a,#0xfc
0B58 F581      2238            mov     sp,a
0B5A EA        2239            mov     a,r2
0B5B 7001      2240            jnz     L016053?
0B5D 020100    2241            ljmp    L016026?
0B60           2242   L016053?:
0B60           2243   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:452: pwm_Left1 = 35;
0B60 75B023    2244            mov     _pwm_Left1,#0x23
0B63           2245   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:453: pwm_Left0 = -1;
0B63 75F0FF    2246            mov     _pwm_Left0,#0xFF
0B66           2247   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:454: pwm_Right0 = 35;
0B66 757023    2248            mov     _pwm_Right0,#0x23
0B69           2249   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:455: pwm_Right1 = -1;                                            
0B69 7530FF    2250            mov     _pwm_Right1,#0xFF
0B6C           2251   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:456: waitms(1500);
0B6C 9005DC    2252            mov     dptr,#0x05DC
0B6F 120100    2253            lcall   _waitms
0B72           2254   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:458: turncar(0); //0 = left
0B72 900000    2255            mov     dptr,#0x0000
0B75 120100    2256            lcall   _turncar
0B78           2257   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:459: currentcmd = 0;
0B78 75B000    2258            mov     _currentcmd,#0x00
0B7B           2259   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:462: break;
0B7B 020100    2260            ljmp    L016026?
0B7E           2261   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:465: case 2 :
0B7E           2262   L016015?:
0B7E           2263   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:467: if (Volts_at_Pin(LQFP32_MUX_P2_4) > 1 || Volts_at_Pin(LQFP32_MUX_P2_3) > 1) {
0B7E 75820C    2264            mov     dpl,#0x0C
0B81 120100    2265            lcall   _Volts_at_Pin
0B84 AA82      2266            mov     r2,dpl
0B86 AB83      2267            mov     r3,dph
0B88 ACF0      2268            mov     r4,b
0B8A FD        2269            mov     r5,a
0B8B E4        2270            clr     a
0B8C C0E0      2271            push    acc
0B8E C0E0      2272            push    acc
0B90 7480      2273            mov     a,#0x80
0B92 C0E0      2274            push    acc
0B94 743F      2275            mov     a,#0x3F
0B96 C0E0      2276            push    acc
0B98 8A82      2277            mov     dpl,r2
0B9A 8B83      2278            mov     dph,r3
0B9C 8CF0      2279            mov     b,r4
0B9E ED        2280            mov     a,r5
0B9F 120100    2281            lcall   ___fsgt
0BA2 AA82      2282            mov     r2,dpl
0BA4 E581      2283            mov     a,sp
0BA6 24FC      2284            add     a,#0xfc
0BA8 F581      2285            mov     sp,a
0BAA EA        2286            mov     a,r2
0BAB 7001      2287            jnz     L016016?
0BAD 75820B    2288            mov     dpl,#0x0B
0BB0 120100    2289            lcall   _Volts_at_Pin
0BB3 AA82      2290            mov     r2,dpl
0BB5 AB83      2291            mov     r3,dph
0BB7 ACF0      2292            mov     r4,b
0BB9 FD        2293            mov     r5,a
0BBA E4        2294            clr     a
0BBB C0E0      2295            push    acc
0BBD C0E0      2296            push    acc
0BBF 7480      2297            mov     a,#0x80
0BC1 C0E0      2298            push    acc
0BC3 743F      2299            mov     a,#0x3F
0BC5 C0E0      2300            push    acc
0BC7 8A82      2301            mov     dpl,r2
0BC9 8B83      2302            mov     dph,r3
0BCB 8CF0      2303            mov     b,r4
0BCD ED        2304            mov     a,r5
0BCE 120100    2305            lcall   ___fsgt
0BD1 AA82      2306            mov     r2,dpl
0BD3 E581      2307            mov     a,sp
0BD5 24FC      2308            add     a,#0xfc
0BD7 F581      2309            mov     sp,a
0BD9 EA        2310            mov     a,r2
0BDA 7001      2311            jnz     L016055?
0BDC 020100    2312            ljmp    L016026?
0BDF           2313   L016055?:
0BDF           2314   L016016?:
0BDF           2315   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:468: printf("\n\r reached intersection :D");
0BDF 7468      2316            mov     a,#__str_3
0BE1 C0E0      2317            push    acc
0BE3 74B4      2318            mov     a,#(__str_3 >> 8)
0BE5 C0E0      2319            push    acc
0BE7 7480      2320            mov     a,#0x80
0BE9 C0E0      2321            push    acc
0BEB 120100    2322            lcall   _printf
0BEE 1581      2323            dec     sp
0BF0 1581      2324            dec     sp
0BF2 1581      2325            dec     sp
0BF4           2326   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:469: pwm_Left1 = 35;
0BF4 75B023    2327            mov     _pwm_Left1,#0x23
0BF7           2328   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:470: pwm_Left0 = -1;
0BF7 75F0FF    2329            mov     _pwm_Left0,#0xFF
0BFA           2330   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:471: pwm_Right0 = 35;
0BFA 757023    2331            mov     _pwm_Right0,#0x23
0BFD           2332   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:472: pwm_Right1 = -1;
0BFD 7530FF    2333            mov     _pwm_Right1,#0xFF
0C00           2334   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:473: waitms(1500);
0C00 9005DC    2335            mov     dptr,#0x05DC
0C03 120100    2336            lcall   _waitms
0C06           2337   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:475: turncar(1); //1 = right
0C06 900001    2338            mov     dptr,#0x0001
0C09 120100    2339            lcall   _turncar
0C0C           2340   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:476: currentcmd = 0;
0C0C 75B000    2341            mov     _currentcmd,#0x00
0C0F           2342   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:478: break;
0C0F 020100    2343            ljmp    L016026?
0C12           2344   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:481: case 3 :
0C12           2345   L016019?:
0C12           2346   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:482: currentstate = 1;
0C12 757001    2347            mov     _currentstate,#0x01
0C15           2348   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:483: currentcmd = 0;
0C15 75B000    2349            mov     _currentcmd,#0x00
0C18           2350   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:484: break;
0C18 020100    2351            ljmp    L016026?
0C1B           2352   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:487: case 4 :
0C1B           2353   L016020?:
0C1B           2354   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:488: currentstate = 2;
0C1B 757002    2355            mov     _currentstate,#0x02
0C1E           2356   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:489: currentcmd = 0;
0C1E 75B000    2357            mov     _currentcmd,#0x00
0C21           2358   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:490: break;
0C21 020100    2359            ljmp    L016026?
0C24           2360   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:493: case 5 :
0C24           2361   L016021?:
0C24           2362   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:494: currentstate = 3;
0C24 757003    2363            mov     _currentstate,#0x03
0C27           2364   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:495: currentcmd = 0;
0C27 75B000    2365            mov     _currentcmd,#0x00
0C2A           2366   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:496: break;
0C2A 020100    2367            ljmp    L016026?
0C2D           2368   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:499: case 6 :
0C2D           2369   L016022?:
0C2D           2370   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:500: uturn();  //uturn
0C2D 120100    2371            lcall   _uturn
0C30           2372   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:501: currentcmd = 0;
0C30 75B000    2373            mov     _currentcmd,#0x00
0C33           2374   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:502: break;
0C33 020100    2375            ljmp    L016026?
0C36           2376   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:503: default: 
0C36           2377   L016023?:
0C36           2378   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:504: currentstate = 1;
0C36 757001    2379            mov     _currentstate,#0x01
0C39           2380   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:505: }
0C39 020100    2381            ljmp    L016026?
0C3C           2382            rseg R_CSEG
0C3C           2383   
0000           2384            rseg R_XINIT
0000           2385   
0000           2386            rseg R_CONST
0000           2387   __str_0:
0000 63757272  2388            db 'current command is %d, commandflag = %d'
     656E7420
     636F6D6D
     616E6420
     69732025
     642C2063
     6F6D6D61
     6E64666C
     6167203D
     202564
0027 0D        2389            db 0x0D
0028 0A        2390            db 0x0A
0029 00        2391            db 0x00
002A           2392   __str_1:
002A 322E3320  2393            db '2.3 = %f, 2.4 = %f, LeftMotor = %4d, RightMotor = %4d, comma'
     3D202566
     2C20322E
     34203D20
     25662C20
     4C656674
     4D6F746F
     72203D20
     2534642C
     20526967
     68744D6F
     746F7220
     3D202534
     642C2063
     6F6D6D61
0066 6E643A20  2394            db 'nd: %d'
     2564
006C 0D        2395            db 0x0D
006D 00        2396            db 0x00
006E           2397   __str_2:
006E 1B        2398            db 0x1B
006F 5B324A    2399            db '[2J'
0072 00        2400            db 0x00
0073           2401   __str_3:
0073 0A        2402            db 0x0A
0074 0D        2403            db 0x0D
0075 20726561  2404            db ' reached intersection :D'
     63686564
     20696E74
     65727365
     6374696F
     6E203A44
008D 00        2405            db 0x00
008E           2406   
002E           2407            CSEG
002E           2408   
002E           2409   end
