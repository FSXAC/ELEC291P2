0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Thu Mar 23 12:08:49 2017
0000              5   ;--------------------------------------------------------
                  5   $name motors
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _main
0000             27            public _forward_backward
0000             28            public _Timer2_ISR
0000             29            public __c51_external_startup
0000             30            public _direction
0000             31            public _pwm_both
0000             32            public _pwm_right
0000             33            public _pwm_Left
0000             34            public _mode
0000             35            public _pwm_count
0000             36   ;--------------------------------------------------------
0000             37   ; Special Function Registers
0000             38   ;--------------------------------------------------------
0000             39   _P0             DATA 0x80
0000             40   _SP             DATA 0x81
0000             41   _DPL            DATA 0x82
0000             42   _DPH            DATA 0x83
0000             43   _EMI0TC         DATA 0x84
0000             44   _EMI0CF         DATA 0x85
0000             45   _OSCLCN         DATA 0x86
0000             46   _PCON           DATA 0x87
0000             47   _TCON           DATA 0x88
0000             48   _TMOD           DATA 0x89
0000             49   _TL0            DATA 0x8a
0000             50   _TL1            DATA 0x8b
0000             51   _TH0            DATA 0x8c
0000             52   _TH1            DATA 0x8d
0000             53   _CKCON          DATA 0x8e
0000             54   _PSCTL          DATA 0x8f
0000             55   _P1             DATA 0x90
0000             56   _TMR3CN         DATA 0x91
0000             57   _TMR4CN         DATA 0x91
0000             58   _TMR3RLL        DATA 0x92
0000             59   _TMR4RLL        DATA 0x92
0000             60   _TMR3RLH        DATA 0x93
0000             61   _TMR4RLH        DATA 0x93
0000             62   _TMR3L          DATA 0x94
0000             63   _TMR4L          DATA 0x94
0000             64   _TMR3H          DATA 0x95
0000             65   _TMR4H          DATA 0x95
0000             66   _USB0ADR        DATA 0x96
0000             67   _USB0DAT        DATA 0x97
0000             68   _SCON           DATA 0x98
0000             69   _SCON0          DATA 0x98
0000             70   _SBUF           DATA 0x99
0000             71   _SBUF0          DATA 0x99
0000             72   _CPT1CN         DATA 0x9a
0000             73   _CPT0CN         DATA 0x9b
0000             74   _CPT1MD         DATA 0x9c
0000             75   _CPT0MD         DATA 0x9d
0000             76   _CPT1MX         DATA 0x9e
0000             77   _CPT0MX         DATA 0x9f
0000             78   _P2             DATA 0xa0
0000             79   _SPI0CFG        DATA 0xa1
0000             80   _SPI0CKR        DATA 0xa2
0000             81   _SPI0DAT        DATA 0xa3
0000             82   _P0MDOUT        DATA 0xa4
0000             83   _P1MDOUT        DATA 0xa5
0000             84   _P2MDOUT        DATA 0xa6
0000             85   _P3MDOUT        DATA 0xa7
0000             86   _IE             DATA 0xa8
0000             87   _CLKSEL         DATA 0xa9
0000             88   _EMI0CN         DATA 0xaa
0000             89   __XPAGE         DATA 0xaa
0000             90   _SBCON1         DATA 0xac
0000             91   _P4MDOUT        DATA 0xae
0000             92   _PFE0CN         DATA 0xaf
0000             93   _P3             DATA 0xb0
0000             94   _OSCXCN         DATA 0xb1
0000             95   _OSCICN         DATA 0xb2
0000             96   _OSCICL         DATA 0xb3
0000             97   _SBRLL1         DATA 0xb4
0000             98   _SBRLH1         DATA 0xb5
0000             99   _FLSCL          DATA 0xb6
0000            100   _FLKEY          DATA 0xb7
0000            101   _IP             DATA 0xb8
0000            102   _CLKMUL         DATA 0xb9
0000            103   _SMBTC          DATA 0xb9
0000            104   _AMX0N          DATA 0xba
0000            105   _AMX0P          DATA 0xbb
0000            106   _ADC0CF         DATA 0xbc
0000            107   _ADC0L          DATA 0xbd
0000            108   _ADC0H          DATA 0xbe
0000            109   _SFRPAGE        DATA 0xbf
0000            110   _SMB0CN         DATA 0xc0
0000            111   _SMB1CN         DATA 0xc0
0000            112   _SMB0CF         DATA 0xc1
0000            113   _SMB1CF         DATA 0xc1
0000            114   _SMB0DAT        DATA 0xc2
0000            115   _SMB1DAT        DATA 0xc2
0000            116   _ADC0GTL        DATA 0xc3
0000            117   _ADC0GTH        DATA 0xc4
0000            118   _ADC0LTL        DATA 0xc5
0000            119   _ADC0LTH        DATA 0xc6
0000            120   _P4             DATA 0xc7
0000            121   _TMR2CN         DATA 0xc8
0000            122   _TMR5CN         DATA 0xc8
0000            123   _REG01CN        DATA 0xc9
0000            124   _TMR2RLL        DATA 0xca
0000            125   _TMR5RLL        DATA 0xca
0000            126   _TMR2RLH        DATA 0xcb
0000            127   _TMR5RLH        DATA 0xcb
0000            128   _TMR2L          DATA 0xcc
0000            129   _TMR5L          DATA 0xcc
0000            130   _TMR2H          DATA 0xcd
0000            131   _TMR5H          DATA 0xcd
0000            132   _SMB0ADM        DATA 0xce
0000            133   _SMB1ADM        DATA 0xce
0000            134   _SMB0ADR        DATA 0xcf
0000            135   _SMB1ADR        DATA 0xcf
0000            136   _PSW            DATA 0xd0
0000            137   _REF0CN         DATA 0xd1
0000            138   _SCON1          DATA 0xd2
0000            139   _SBUF1          DATA 0xd3
0000            140   _P0SKIP         DATA 0xd4
0000            141   _P1SKIP         DATA 0xd5
0000            142   _P2SKIP         DATA 0xd6
0000            143   _USB0XCN        DATA 0xd7
0000            144   _PCA0CN         DATA 0xd8
0000            145   _PCA0MD         DATA 0xd9
0000            146   _PCA0CPM0       DATA 0xda
0000            147   _PCA0CPM1       DATA 0xdb
0000            148   _PCA0CPM2       DATA 0xdc
0000            149   _PCA0CPM3       DATA 0xdd
0000            150   _PCA0CPM4       DATA 0xde
0000            151   _P3SKIP         DATA 0xdf
0000            152   _ACC            DATA 0xe0
0000            153   _XBR0           DATA 0xe1
0000            154   _XBR1           DATA 0xe2
0000            155   _XBR2           DATA 0xe3
0000            156   _IT01CF         DATA 0xe4
0000            157   _CKCON1         DATA 0xe4
0000            158   _SMOD1          DATA 0xe5
0000            159   _EIE1           DATA 0xe6
0000            160   _EIE2           DATA 0xe7
0000            161   _ADC0CN         DATA 0xe8
0000            162   _PCA0CPL1       DATA 0xe9
0000            163   _PCA0CPH1       DATA 0xea
0000            164   _PCA0CPL2       DATA 0xeb
0000            165   _PCA0CPH2       DATA 0xec
0000            166   _PCA0CPL3       DATA 0xed
0000            167   _PCA0CPH3       DATA 0xee
0000            168   _RSTSRC         DATA 0xef
0000            169   _B              DATA 0xf0
0000            170   _P0MDIN         DATA 0xf1
0000            171   _P1MDIN         DATA 0xf2
0000            172   _P2MDIN         DATA 0xf3
0000            173   _P3MDIN         DATA 0xf4
0000            174   _P4MDIN         DATA 0xf5
0000            175   _EIP1           DATA 0xf6
0000            176   _EIP2           DATA 0xf7
0000            177   _SPI0CN         DATA 0xf8
0000            178   _PCA0L          DATA 0xf9
0000            179   _PCA0H          DATA 0xfa
0000            180   _PCA0CPL0       DATA 0xfb
0000            181   _PCA0CPH0       DATA 0xfc
0000            182   _PCA0CPL4       DATA 0xfd
0000            183   _PCA0CPH4       DATA 0xfe
0000            184   _VDM0CN         DATA 0xff
0000            185   _DPTR           DATA 0x8382
0000            186   _TMR2RL         DATA 0xcbca
0000            187   _TMR3RL         DATA 0x9392
0000            188   _TMR4RL         DATA 0x9392
0000            189   _TMR5RL         DATA 0xcbca
0000            190   _TMR2           DATA 0xcdcc
0000            191   _TMR3           DATA 0x9594
0000            192   _TMR4           DATA 0x9594
0000            193   _TMR5           DATA 0xcdcc
0000            194   _SBRL1          DATA 0xb5b4
0000            195   _ADC0           DATA 0xbebd
0000            196   _ADC0GT         DATA 0xc4c3
0000            197   _ADC0LT         DATA 0xc6c5
0000            198   _PCA0           DATA 0xfaf9
0000            199   _PCA0CP1        DATA 0xeae9
0000            200   _PCA0CP2        DATA 0xeceb
0000            201   _PCA0CP3        DATA 0xeeed
0000            202   _PCA0CP0        DATA 0xfcfb
0000            203   _PCA0CP4        DATA 0xfefd
0000            204   ;--------------------------------------------------------
0000            205   ; special function bits
0000            206   ;--------------------------------------------------------
0000            207   _P0_0           BIT 0x80
0000            208   _P0_1           BIT 0x81
0000            209   _P0_2           BIT 0x82
0000            210   _P0_3           BIT 0x83
0000            211   _P0_4           BIT 0x84
0000            212   _P0_5           BIT 0x85
0000            213   _P0_6           BIT 0x86
0000            214   _P0_7           BIT 0x87
0000            215   _TF1            BIT 0x8f
0000            216   _TR1            BIT 0x8e
0000            217   _TF0            BIT 0x8d
0000            218   _TR0            BIT 0x8c
0000            219   _IE1            BIT 0x8b
0000            220   _IT1            BIT 0x8a
0000            221   _IE0            BIT 0x89
0000            222   _IT0            BIT 0x88
0000            223   _P1_0           BIT 0x90
0000            224   _P1_1           BIT 0x91
0000            225   _P1_2           BIT 0x92
0000            226   _P1_3           BIT 0x93
0000            227   _P1_4           BIT 0x94
0000            228   _P1_5           BIT 0x95
0000            229   _P1_6           BIT 0x96
0000            230   _P1_7           BIT 0x97
0000            231   _S0MODE         BIT 0x9f
0000            232   _SCON0_6        BIT 0x9e
0000            233   _MCE0           BIT 0x9d
0000            234   _REN0           BIT 0x9c
0000            235   _TB80           BIT 0x9b
0000            236   _RB80           BIT 0x9a
0000            237   _TI0            BIT 0x99
0000            238   _RI0            BIT 0x98
0000            239   _SCON_6         BIT 0x9e
0000            240   _MCE            BIT 0x9d
0000            241   _REN            BIT 0x9c
0000            242   _TB8            BIT 0x9b
0000            243   _RB8            BIT 0x9a
0000            244   _TI             BIT 0x99
0000            245   _RI             BIT 0x98
0000            246   _P2_0           BIT 0xa0
0000            247   _P2_1           BIT 0xa1
0000            248   _P2_2           BIT 0xa2
0000            249   _P2_3           BIT 0xa3
0000            250   _P2_4           BIT 0xa4
0000            251   _P2_5           BIT 0xa5
0000            252   _P2_6           BIT 0xa6
0000            253   _P2_7           BIT 0xa7
0000            254   _EA             BIT 0xaf
0000            255   _ESPI0          BIT 0xae
0000            256   _ET2            BIT 0xad
0000            257   _ES0            BIT 0xac
0000            258   _ET1            BIT 0xab
0000            259   _EX1            BIT 0xaa
0000            260   _ET0            BIT 0xa9
0000            261   _EX0            BIT 0xa8
0000            262   _P3_0           BIT 0xb0
0000            263   _P3_1           BIT 0xb1
0000            264   _P3_2           BIT 0xb2
0000            265   _P3_3           BIT 0xb3
0000            266   _P3_4           BIT 0xb4
0000            267   _P3_5           BIT 0xb5
0000            268   _P3_6           BIT 0xb6
0000            269   _P3_7           BIT 0xb7
0000            270   _IP_7           BIT 0xbf
0000            271   _PSPI0          BIT 0xbe
0000            272   _PT2            BIT 0xbd
0000            273   _PS0            BIT 0xbc
0000            274   _PT1            BIT 0xbb
0000            275   _PX1            BIT 0xba
0000            276   _PT0            BIT 0xb9
0000            277   _PX0            BIT 0xb8
0000            278   _MASTER0        BIT 0xc7
0000            279   _TXMODE0        BIT 0xc6
0000            280   _STA0           BIT 0xc5
0000            281   _STO0           BIT 0xc4
0000            282   _ACKRQ0         BIT 0xc3
0000            283   _ARBLOST0       BIT 0xc2
0000            284   _ACK0           BIT 0xc1
0000            285   _SI0            BIT 0xc0
0000            286   _MASTER1        BIT 0xc7
0000            287   _TXMODE1        BIT 0xc6
0000            288   _STA1           BIT 0xc5
0000            289   _STO1           BIT 0xc4
0000            290   _ACKRQ1         BIT 0xc3
0000            291   _ARBLOST1       BIT 0xc2
0000            292   _ACK1           BIT 0xc1
0000            293   _SI1            BIT 0xc0
0000            294   _TF2            BIT 0xcf
0000            295   _TF2H           BIT 0xcf
0000            296   _TF2L           BIT 0xce
0000            297   _TF2LEN         BIT 0xcd
0000            298   _TF2CEN         BIT 0xcc
0000            299   _T2SPLIT        BIT 0xcb
0000            300   _TR2            BIT 0xca
0000            301   _T2CSS          BIT 0xc9
0000            302   _T2XCLK         BIT 0xc8
0000            303   _TF5H           BIT 0xcf
0000            304   _TF5L           BIT 0xce
0000            305   _TF5LEN         BIT 0xcd
0000            306   _TMR5CN_4       BIT 0xcc
0000            307   _T5SPLIT        BIT 0xcb
0000            308   _TR5            BIT 0xca
0000            309   _TMR5CN_1       BIT 0xc9
0000            310   _T5XCLK         BIT 0xc8
0000            311   _CY             BIT 0xd7
0000            312   _AC             BIT 0xd6
0000            313   _F0             BIT 0xd5
0000            314   _RS1            BIT 0xd4
0000            315   _RS0            BIT 0xd3
0000            316   _OV             BIT 0xd2
0000            317   _F1             BIT 0xd1
0000            318   _PARITY         BIT 0xd0
0000            319   _CF             BIT 0xdf
0000            320   _CR             BIT 0xde
0000            321   _PCA0CN_5       BIT 0xde
0000            322   _CCF4           BIT 0xdc
0000            323   _CCF3           BIT 0xdb
0000            324   _CCF2           BIT 0xda
0000            325   _CCF1           BIT 0xd9
0000            326   _CCF0           BIT 0xd8
0000            327   _ACC_7          BIT 0xe7
0000            328   _ACC_6          BIT 0xe6
0000            329   _ACC_5          BIT 0xe5
0000            330   _ACC_4          BIT 0xe4
0000            331   _ACC_3          BIT 0xe3
0000            332   _ACC_2          BIT 0xe2
0000            333   _ACC_1          BIT 0xe1
0000            334   _ACC_0          BIT 0xe0
0000            335   _AD0EN          BIT 0xef
0000            336   _AD0TM          BIT 0xee
0000            337   _AD0INT         BIT 0xed
0000            338   _AD0BUSY        BIT 0xec
0000            339   _AD0WINT        BIT 0xeb
0000            340   _AD0CM2         BIT 0xea
0000            341   _AD0CM1         BIT 0xe9
0000            342   _AD0CM0         BIT 0xe8
0000            343   _B_7            BIT 0xf7
0000            344   _B_6            BIT 0xf6
0000            345   _B_5            BIT 0xf5
0000            346   _B_4            BIT 0xf4
0000            347   _B_3            BIT 0xf3
0000            348   _B_2            BIT 0xf2
0000            349   _B_1            BIT 0xf1
0000            350   _B_0            BIT 0xf0
0000            351   _SPIF           BIT 0xff
0000            352   _WCOL           BIT 0xfe
0000            353   _MODF           BIT 0xfd
0000            354   _RXOVRN         BIT 0xfc
0000            355   _NSSMD1         BIT 0xfb
0000            356   _NSSMD0         BIT 0xfa
0000            357   _TXBMT          BIT 0xf9
0000            358   _SPIEN          BIT 0xf8
0000            359   ;--------------------------------------------------------
0000            360   ; overlayable register banks
0000            361   ;--------------------------------------------------------
0000            362            rbank0 segment data overlay
0000            363   ;--------------------------------------------------------
0000            364   ; internal ram data
0000            365   ;--------------------------------------------------------
0000            366            rseg R_DSEG
0000            367   _pwm_count:
0000            368            ds 1
0001            369   _mode:
0001            370            ds 2
0003            371   _pwm_Left:
0003            372            ds 2
0005            373   _pwm_right:
0005            374            ds 2
0007            375   _pwm_both:
0007            376            ds 2
0009            377   _direction:
0009            378            ds 2
000B            379   ;--------------------------------------------------------
000B            380   ; overlayable items in internal ram 
000B            381   ;--------------------------------------------------------
0000            382            rseg    R_OSEG
0000            383   ;--------------------------------------------------------
0000            384   ; indirectly addressable internal ram data
0000            385   ;--------------------------------------------------------
0000            386            rseg R_ISEG
0000            387   ;--------------------------------------------------------
0000            388   ; absolute internal ram data
0000            389   ;--------------------------------------------------------
0000            390            DSEG
0000            391   ;--------------------------------------------------------
0000            392   ; bit data
0000            393   ;--------------------------------------------------------
0000            394            rseg R_BSEG
0000            395   _Timer2_ISR_sloc0_1_0:
0000            396            DBIT    1
0001            397   ;--------------------------------------------------------
0001            398   ; paged external ram data
0001            399   ;--------------------------------------------------------
0000            400            rseg R_PSEG
0000            401   ;--------------------------------------------------------
0000            402   ; external ram data
0000            403   ;--------------------------------------------------------
0000            404            rseg R_XSEG
0000            405   ;--------------------------------------------------------
0000            406   ; absolute external ram data
0000            407   ;--------------------------------------------------------
0000            408            XSEG
0000            409   ;--------------------------------------------------------
0000            410   ; external initialized ram data
0000            411   ;--------------------------------------------------------
0000            412            rseg R_IXSEG
0000            413            rseg R_HOME
0000            414            rseg R_GSINIT
0000            415            rseg R_CSEG
0000            416   ;--------------------------------------------------------
0000            417   ; Reset entry point and interrupt vectors
0000            418   ;--------------------------------------------------------
0000            419            CSEG at 0x0000
0000 020100     420            ljmp    _crt0
002B            421            CSEG at 0x002b
002B 020100     422            ljmp    _Timer2_ISR
002E            423   ;--------------------------------------------------------
002E            424   ; global & static initialisations
002E            425   ;--------------------------------------------------------
0000            426            rseg R_HOME
0000            427            rseg R_GSINIT
0000            428            rseg R_GSINIT
0000            429   ;--------------------------------------------------------
0000            430   ; data variables initialization
0000            431   ;--------------------------------------------------------
0000            432            rseg R_DINIT
0000            433   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:18: volatile unsigned char pwm_count=0;
0000 75A000     434            mov     _pwm_count,#0x00
0003            435   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:19: volatile int mode = 0;
0003 E4         436            clr     a
0004 F560       437            mov     _mode,a
0006 F561       438            mov     (_mode + 1),a
0008            439   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:20: volatile int pwm_Left = 0;
0008 E4         440            clr     a
0009 F520       441            mov     _pwm_Left,a
000B F521       442            mov     (_pwm_Left + 1),a
000D            443   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:21: volatile int pwm_right = 0;
000D E4         444            clr     a
000E F5E0       445            mov     _pwm_right,a
0010 F5E1       446            mov     (_pwm_right + 1),a
0012            447   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:22: volatile int pwm_both = 0;
0012 E4         448            clr     a
0013 F5A0       449            mov     _pwm_both,a
0015 F5A1       450            mov     (_pwm_both + 1),a
0017            451   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:23: volatile int direction = 0; // 1 for back 0 for forward
0017 E4         452            clr     a
0018 F560       453            mov     _direction,a
001A F561       454            mov     (_direction + 1),a
001C            455            ; The linker places a 'ret' at the end of segment R_DINIT.
001C            456   ;--------------------------------------------------------
001C            457   ; code
001C            458   ;--------------------------------------------------------
0000            459            rseg R_CSEG
0000            460   ;------------------------------------------------------------
0000            461   ;Allocation info for local variables in function '_c51_external_startup'
0000            462   ;------------------------------------------------------------
0000            463   ;------------------------------------------------------------
0000            464   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:25: char _c51_external_startup (void)
0000            465   ;        -----------------------------------------
0000            466   ;         function _c51_external_startup
0000            467   ;        -----------------------------------------
0000            468   __c51_external_startup:
0000            469            using   0
0000            470   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:27: PCA0MD&=(~0x40) ;    // DISABLE WDT: clear Watchdog Enable bit
0000 53D9BF     471            anl     _PCA0MD,#0xBF
0003            472   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:28: VDM0CN=0x80; // enable VDD monitor
0003 75FF80     473            mov     _VDM0CN,#0x80
0006            474   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:29: RSTSRC=0x02|0x04; // Enable reset on missing clock detector and VDD
0006 75EF06     475            mov     _RSTSRC,#0x06
0009            476   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:37: CLKSEL|=0b_0000_0011; // SYSCLK derived from the Internal High-Frequency Oscillator / 1.
0009 43A903     477            orl     _CLKSEL,#0x03
000C            478   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:41: OSCICN |= 0x03; // Configure internal oscillator for its maximum frequency
000C 43B203     479            orl     _OSCICN,#0x03
000F            480   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:44: SCON0 = 0x10;
000F 759810     481            mov     _SCON0,#0x10
0012            482   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:46: TH1 = 0x10000-((SYSCLK/BAUDRATE)/2L);
0012 758D30     483            mov     _TH1,#0x30
0015            484   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:47: CKCON &= ~0x0B;                  // T1M = 1; SCA1:0 = xx
0015 538EF4     485            anl     _CKCON,#0xF4
0018            486   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:48: CKCON |=  0x08;
0018 438E08     487            orl     _CKCON,#0x08
001B            488   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:61: TL1 = TH1;      // Init Timer1
001B 858D8B     489            mov     _TL1,_TH1
001E            490   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:62: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit autoreload
001E 53890F     491            anl     _TMOD,#0x0F
0021            492   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:63: TMOD |=  0x20;
0021 438920     493            orl     _TMOD,#0x20
0024            494   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:64: TR1 = 1; // START Timer1
0024 D28E       495            setb    _TR1
0026            496   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:65: TI = 1;  // Indicate TX0 ready
0026 D299       497            setb    _TI
0028            498   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:68: P2MDOUT|=0b_0000_0011;
0028 43A603     499            orl     _P2MDOUT,#0x03
002B            500   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:69: P0MDOUT |= 0x10; // Enable UTX as push-pull output
002B 43A410     501            orl     _P0MDOUT,#0x10
002E            502   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:70: XBR0     = 0x01; // Enable UART on P0.4(TX) and P0.5(RX)
002E 75E101     503            mov     _XBR0,#0x01
0031            504   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:71: XBR1     = 0x40; // Enable crossbar and weak pull-ups
0031 75E240     505            mov     _XBR1,#0x40
0034            506   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:74: TMR2CN=0x00;   // Stop Timer2; Clear TF2;
0034 75C800     507            mov     _TMR2CN,#0x00
0037            508   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:75: CKCON|=0b_0001_0000;
0037 438E10     509            orl     _CKCON,#0x10
003A            510   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:76: TMR2RL=(-(SYSCLK/(2*48))/(100L)); // Initialize reload value
003A 75CA78     511            mov     _TMR2RL,#0x78
003D 75CBEC     512            mov     (_TMR2RL >> 8),#0xEC
0040            513   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:77: TMR2=0xffff;   // Set to reload immediately
0040 75CCFF     514            mov     _TMR2,#0xFF
0043 75CDFF     515            mov     (_TMR2 >> 8),#0xFF
0046            516   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:78: ET2=1;         // Enable Timer2 interrupts
0046 D2AD       517            setb    _ET2
0048            518   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:79: TR2=1;         // Start Timer2
0048 D2CA       519            setb    _TR2
004A            520   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:81: EA=1; // Enable interrupts
004A D2AF       521            setb    _EA
004C            522   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:83: return 0;
004C 758200     523            mov     dpl,#0x00
004F 22         524            ret
0050            525   ;------------------------------------------------------------
0050            526   ;Allocation info for local variables in function 'Timer2_ISR'
0050            527   ;------------------------------------------------------------
0050            528   ;------------------------------------------------------------
0050            529   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:87: void Timer2_ISR (void) interrupt 5
0050            530   ;        -----------------------------------------
0050            531   ;         function Timer2_ISR
0050            532   ;        -----------------------------------------
0050            533   _Timer2_ISR:
0050 C0E0       534            push    acc
0052 C0F0       535            push    b
0054 C002       536            push    ar2
0056 C003       537            push    ar3
0058 C0D0       538            push    psw
005A 75D000     539            mov     psw,#0x00
005D            540   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:89: TF2H = 0; // Clear Timer2 interrupt flag
005D C2CF       541            clr     _TF2H
005F            542   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:91: pwm_count++;
005F 05A0       543            inc     _pwm_count
0061            544   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:92: if(pwm_count>100) pwm_count=0;
0061 E5A0       545            mov     a,_pwm_count
0063 249B       546            add     a,#0xff - 0x64
0065 5001       547            jnc     L003002?
0067 75A000     548            mov     _pwm_count,#0x00
006A            549   L003002?:
006A            550   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:93: (direction == 0) ? (MOTOR_LEFT1 = MOTOR_RIGHT1 = pwm_count >pwm_both? 0 : 1) :
006A E560       551            mov     a,_direction
006C 4561       552            orl     a,(_direction + 1)
006E B40168     553            cjne    a,#0x01,L003010?
0071            554   L003010?:
0071 E4         555            clr     a
0072 33         556            rlc     a
0073 FA         557            mov     r2,a
0074 6001       558            jz      L003005?
0076 AAA0       559            mov     r2,_pwm_count
0078 7B00       560            mov     r3,#0x00
007A C3         561            clr     c
007B E5A0       562            mov     a,_pwm_both
007D 9A         563            subb    a,r2
007E E5A1       564            mov     a,(_pwm_both + 1)
0080 6480       565            xrl     a,#0x80
0082 8BF0       566            mov     b,r3
0084 63F080     567            xrl     b,#0x80
0087 95F0       568            subb    a,b
0089 92A8       569            mov  _Timer2_ISR_sloc0_1_0,c
008B B3         570            cpl     c
008C 9296       571            mov     _P1_6,c
008E A296       572            mov     c,_P1_6
0090 92A1       573            mov     _P2_1,c
0092 A2A1       574            mov     c,_P2_1
0094 8001       575            sjmp    L003003?
0096            576   L003005?:
0096            577   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:94: (MOTOR_LEFT0 = MOTOR_RIGHT0 = pwm_count >pwm_both? 0 : 1);
0096 AAA0       578            mov     r2,_pwm_count
0098 7B00       579            mov     r3,#0x00
009A C3         580            clr     c
009B E5A0       581            mov     a,_pwm_both
009D 9A         582            subb    a,r2
009E E5A1       583            mov     a,(_pwm_both + 1)
00A0 6480       584            xrl     a,#0x80
00A2 8BF0       585            mov     b,r3
00A4 63F080     586            xrl     b,#0x80
00A7 95F0       587            subb    a,b
00A9 92A8       588            mov  _Timer2_ISR_sloc0_1_0,c
00AB B3         589            cpl     c
00AC 9295       590            mov     _P1_5,c
00AE A295       591            mov     c,_P1_5
00B0 92A0       592            mov     _P2_0,c
00B2 A2A0       593            mov     c,_P2_0
00B4            594   L003003?:
00B4 D0D0       595            pop     psw
00B6 D003       596            pop     ar3
00B8 D002       597            pop     ar2
00BA D0F0       598            pop     b
00BC D0E0       599            pop     acc
00BE 32         600            reti
00BF            601   ;        eliminated unneeded push/pop dpl
00BF            602   ;        eliminated unneeded push/pop dph
00BF            603   ;------------------------------------------------------------
00BF            604   ;Allocation info for local variables in function 'forward_backward'
00BF            605   ;------------------------------------------------------------
00BF            606   ;direction                 Allocated to registers r2 r3 
00BF            607   ;------------------------------------------------------------
00BF            608   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:105: void forward_backward(int direction)
00BF            609   ;        -----------------------------------------
00BF            610   ;         function forward_backward
00BF            611   ;        -----------------------------------------
00BF            612   _forward_backward:
00BF AA82       613            mov     r2,dpl
00C1 AB83       614            mov     r3,dph
00C3            615   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:108: if (direction == 0) {
00C3 EA         616            mov     a,r2
00C4 4B         617            orl     a,r3
00C5 7001       618            jnz     L004004?
00C7            619   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:109: MOTOR_LEFT0 = MOTOR_RIGHT0 = 0;
00C7 C295       620            clr     _P1_5
00C9 A295       621            mov     c,_P1_5
00CB 92A0       622            mov     _P2_0,c
00CD 22         623            ret
00CE            624   L004004?:
00CE            625   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:113: else if (direction == 1) {
00CE BA01A8     626            cjne    r2,#0x01,L004006?
00D1 BB00A8     627            cjne    r3,#0x00,L004006?
00D4            628   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:115: MOTOR_LEFT1 = MOTOR_RIGHT1 = 0;
00D4 C296       629            clr     _P1_6
00D6 A296       630            mov     c,_P1_6
00D8 92A1       631            mov     _P2_1,c
00DA            632   L004006?:
00DA 22         633            ret
00DB            634   ;------------------------------------------------------------
00DB            635   ;Allocation info for local variables in function 'main'
00DB            636   ;------------------------------------------------------------
00DB            637   ;------------------------------------------------------------
00DB            638   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:121: void main (void)
00DB            639   ;        -----------------------------------------
00DB            640   ;         function main
00DB            641   ;        -----------------------------------------
00DB            642   _main:
00DB            643   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:123: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
00DB 74E8       644            mov     a,#__str_0
00DD C0E0       645            push    acc
00DF 7499       646            mov     a,#(__str_0 >> 8)
00E1 C0E0       647            push    acc
00E3 7480       648            mov     a,#0x80
00E5 C0E0       649            push    acc
00E7 120100     650            lcall   _printf
00EA 1581       651            dec     sp
00EC 1581       652            dec     sp
00EE 1581       653            dec     sp
00F0            654   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:125: "Check pins P2.1 and P2.2 with the oscilloscope.\r\n");
00F0 74A8       655            mov     a,#__str_1
00F2 C0E0       656            push    acc
00F4 749A       657            mov     a,#(__str_1 >> 8)
00F6 C0E0       658            push    acc
00F8 7480       659            mov     a,#0x80
00FA C0E0       660            push    acc
00FC 120100     661            lcall   _printf
00FF 1581       662            dec     sp
0101 1581       663            dec     sp
0103 1581       664            dec     sp
0105            665   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:126: printf("Please enter motors mode 1-6");
0105 74E8       666            mov     a,#__str_2
0107 C0E0       667            push    acc
0109 749A       668            mov     a,#(__str_2 >> 8)
010B C0E0       669            push    acc
010D 7480       670            mov     a,#0x80
010F C0E0       671            push    acc
0111 120100     672            lcall   _printf
0114 1581       673            dec     sp
0116 1581       674            dec     sp
0118 1581       675            dec     sp
011A            676   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:127: scanf("%d \n",&mode);
011A 7460       677            mov     a,#_mode
011C C0E0       678            push    acc
011E 7413       679            mov     a,#(_mode >> 8)
0120 C0E0       680            push    acc
0122 7440       681            mov     a,#0x40
0124 C0E0       682            push    acc
0126 7428       683            mov     a,#__str_3
0128 C0E0       684            push    acc
012A 749B       685            mov     a,#(__str_3 >> 8)
012C C0E0       686            push    acc
012E 7480       687            mov     a,#0x80
0130 C0E0       688            push    acc
0132 120100     689            lcall   _scanf
0135 E581       690            mov     a,sp
0137 24FA       691            add     a,#0xfa
0139 F581       692            mov     sp,a
013B            693   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:128: if(mode == 1) {printf("Enter pwm and direction"); scanf("%d %d",pwm_both, direction); }
013B 7401       694            mov     a,#0x01
013D B560A8     695            cjne    a,_mode,L005013?
0140 E4         696            clr     a
0141 B561A8     697            cjne    a,(_mode + 1),L005013?
0144 8001       698            sjmp    L005014?
0146            699   L005013?:
0146 8001       700            sjmp    L005006?
0148            701   L005014?:
0148 7468       702            mov     a,#__str_4
014A C0E0       703            push    acc
014C 749C       704            mov     a,#(__str_4 >> 8)
014E C0E0       705            push    acc
0150 7480       706            mov     a,#0x80
0152 C0E0       707            push    acc
0154 120100     708            lcall   _printf
0157 1581       709            dec     sp
0159 1581       710            dec     sp
015B 1581       711            dec     sp
015D C060       712            push    _direction
015F C061       713            push    (_direction + 1)
0161 C0A0       714            push    _pwm_both
0163 C0A1       715            push    (_pwm_both + 1)
0165 74A8       716            mov     a,#__str_5
0167 C0E0       717            push    acc
0169 749C       718            mov     a,#(__str_5 >> 8)
016B C0E0       719            push    acc
016D 7480       720            mov     a,#0x80
016F C0E0       721            push    acc
0171 120100     722            lcall   _scanf
0174 E581       723            mov     a,sp
0176 24F9       724            add     a,#0xf9
0178 F581       725            mov     sp,a
017A            726   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:131: while(1)
017A            727   L005006?:
017A            728   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:133: switch(mode)
017A AA60       729            mov     r2,_mode
017C AB61       730            mov     r3,(_mode + 1)
017E BA0128     731            cjne    r2,#0x01,L005006?
0181 BB0028     732            cjne    r3,#0x00,L005006?
0184            733   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:136: case 1 : forward_backward(direction);
0184 856082     734            mov     dpl,_direction
0187 856183     735            mov     dph,(_direction + 1)
018A 120100     736            lcall   _forward_backward
018D            737   ;        C:\Users\Larry\Documents\GitHub\ELEC291P2\src\motors.c:137: }
018D 8001       738            sjmp    L005006?
018F            739            rseg R_CSEG
018F            740   
0000            741            rseg R_XINIT
0000            742   
0000            743            rseg R_CONST
0000            744   __str_0:
0000 1B         745            db 0x1B
0001 5B324A     746            db '[2J'
0004 00         747            db 0x00
0005            748   __str_1:
0005 53717561   749            db 'Square wave generator for the F38x.'
     72652077
     61766520
     67656E65
     7261746F
     7220666F
     72207468
     65204633
     38782E
0028 0D         750            db 0x0D
0029 0A         751            db 0x0A
002A 43686563   752            db 'Check pins P2.1 and P2.'
     6B207069
     6E732050
     322E3120
     616E6420
     50322E
0041 32207769   753            db '2 with the oscilloscope.'
     74682074
     6865206F
     7363696C
     6C6F7363
     6F70652E
0059 0D         754            db 0x0D
005A 0A         755            db 0x0A
005B 00         756            db 0x00
005C            757   __str_2:
005C 506C6561   758            db 'Please enter motors mode 1-6'
     73652065
     6E746572
     206D6F74
     6F727320
     6D6F6465
     20312D36
0078 00         759            db 0x00
0079            760   __str_3:
0079 256420     761            db '%d '
007C 0A         762            db 0x0A
007D 00         763            db 0x00
007E            764   __str_4:
007E 456E7465   765            db 'Enter pwm and direction'
     72207077
     6D20616E
     64206469
     72656374
     696F6E
0095 00         766            db 0x00
0096            767   __str_5:
0096 25642025   768            db '%d %d'
     64
009B 00         769            db 0x00
009C            770   
002E            771            CSEG
002E            772   
002E            773   end
