0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Mon Apr 03 19:29:45 2017
0000              5   ;--------------------------------------------------------
                  5   $name robot
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _Timer2_ISR
0000             28            public _main
0000             29            public _currentstate
0000             30            public _currentcmd
0000             31            public _direction
0000             32            public _pwm_Right1
0000             33            public _pwm_Right0
0000             34            public _pwm_Left1
0000             35            public _pwm_Left0
0000             36            public _pwm_both
0000             37            public _mode
0000             38            public _pwm_count
0000             39            public _readData
0000             40            public _linetrack
0000             41            public _stopcar
0000             42            public _turncar
0000             43            public _uturn
0000             44   ;--------------------------------------------------------
0000             45   ; Special Function Registers
0000             46   ;--------------------------------------------------------
0000             47   _P0             DATA 0x80
0000             48   _SP             DATA 0x81
0000             49   _DPL            DATA 0x82
0000             50   _DPH            DATA 0x83
0000             51   _EMI0TC         DATA 0x84
0000             52   _EMI0CF         DATA 0x85
0000             53   _OSCLCN         DATA 0x86
0000             54   _PCON           DATA 0x87
0000             55   _TCON           DATA 0x88
0000             56   _TMOD           DATA 0x89
0000             57   _TL0            DATA 0x8a
0000             58   _TL1            DATA 0x8b
0000             59   _TH0            DATA 0x8c
0000             60   _TH1            DATA 0x8d
0000             61   _CKCON          DATA 0x8e
0000             62   _PSCTL          DATA 0x8f
0000             63   _P1             DATA 0x90
0000             64   _TMR3CN         DATA 0x91
0000             65   _TMR4CN         DATA 0x91
0000             66   _TMR3RLL        DATA 0x92
0000             67   _TMR4RLL        DATA 0x92
0000             68   _TMR3RLH        DATA 0x93
0000             69   _TMR4RLH        DATA 0x93
0000             70   _TMR3L          DATA 0x94
0000             71   _TMR4L          DATA 0x94
0000             72   _TMR3H          DATA 0x95
0000             73   _TMR4H          DATA 0x95
0000             74   _USB0ADR        DATA 0x96
0000             75   _USB0DAT        DATA 0x97
0000             76   _SCON           DATA 0x98
0000             77   _SCON0          DATA 0x98
0000             78   _SBUF           DATA 0x99
0000             79   _SBUF0          DATA 0x99
0000             80   _CPT1CN         DATA 0x9a
0000             81   _CPT0CN         DATA 0x9b
0000             82   _CPT1MD         DATA 0x9c
0000             83   _CPT0MD         DATA 0x9d
0000             84   _CPT1MX         DATA 0x9e
0000             85   _CPT0MX         DATA 0x9f
0000             86   _P2             DATA 0xa0
0000             87   _SPI0CFG        DATA 0xa1
0000             88   _SPI0CKR        DATA 0xa2
0000             89   _SPI0DAT        DATA 0xa3
0000             90   _P0MDOUT        DATA 0xa4
0000             91   _P1MDOUT        DATA 0xa5
0000             92   _P2MDOUT        DATA 0xa6
0000             93   _P3MDOUT        DATA 0xa7
0000             94   _IE             DATA 0xa8
0000             95   _CLKSEL         DATA 0xa9
0000             96   _EMI0CN         DATA 0xaa
0000             97   __XPAGE         DATA 0xaa
0000             98   _SBCON1         DATA 0xac
0000             99   _P4MDOUT        DATA 0xae
0000            100   _PFE0CN         DATA 0xaf
0000            101   _P3             DATA 0xb0
0000            102   _OSCXCN         DATA 0xb1
0000            103   _OSCICN         DATA 0xb2
0000            104   _OSCICL         DATA 0xb3
0000            105   _SBRLL1         DATA 0xb4
0000            106   _SBRLH1         DATA 0xb5
0000            107   _FLSCL          DATA 0xb6
0000            108   _FLKEY          DATA 0xb7
0000            109   _IP             DATA 0xb8
0000            110   _CLKMUL         DATA 0xb9
0000            111   _SMBTC          DATA 0xb9
0000            112   _AMX0N          DATA 0xba
0000            113   _AMX0P          DATA 0xbb
0000            114   _ADC0CF         DATA 0xbc
0000            115   _ADC0L          DATA 0xbd
0000            116   _ADC0H          DATA 0xbe
0000            117   _SFRPAGE        DATA 0xbf
0000            118   _SMB0CN         DATA 0xc0
0000            119   _SMB1CN         DATA 0xc0
0000            120   _SMB0CF         DATA 0xc1
0000            121   _SMB1CF         DATA 0xc1
0000            122   _SMB0DAT        DATA 0xc2
0000            123   _SMB1DAT        DATA 0xc2
0000            124   _ADC0GTL        DATA 0xc3
0000            125   _ADC0GTH        DATA 0xc4
0000            126   _ADC0LTL        DATA 0xc5
0000            127   _ADC0LTH        DATA 0xc6
0000            128   _P4             DATA 0xc7
0000            129   _TMR2CN         DATA 0xc8
0000            130   _TMR5CN         DATA 0xc8
0000            131   _REG01CN        DATA 0xc9
0000            132   _TMR2RLL        DATA 0xca
0000            133   _TMR5RLL        DATA 0xca
0000            134   _TMR2RLH        DATA 0xcb
0000            135   _TMR5RLH        DATA 0xcb
0000            136   _TMR2L          DATA 0xcc
0000            137   _TMR5L          DATA 0xcc
0000            138   _TMR2H          DATA 0xcd
0000            139   _TMR5H          DATA 0xcd
0000            140   _SMB0ADM        DATA 0xce
0000            141   _SMB1ADM        DATA 0xce
0000            142   _SMB0ADR        DATA 0xcf
0000            143   _SMB1ADR        DATA 0xcf
0000            144   _PSW            DATA 0xd0
0000            145   _REF0CN         DATA 0xd1
0000            146   _SCON1          DATA 0xd2
0000            147   _SBUF1          DATA 0xd3
0000            148   _P0SKIP         DATA 0xd4
0000            149   _P1SKIP         DATA 0xd5
0000            150   _P2SKIP         DATA 0xd6
0000            151   _USB0XCN        DATA 0xd7
0000            152   _PCA0CN         DATA 0xd8
0000            153   _PCA0MD         DATA 0xd9
0000            154   _PCA0CPM0       DATA 0xda
0000            155   _PCA0CPM1       DATA 0xdb
0000            156   _PCA0CPM2       DATA 0xdc
0000            157   _PCA0CPM3       DATA 0xdd
0000            158   _PCA0CPM4       DATA 0xde
0000            159   _P3SKIP         DATA 0xdf
0000            160   _ACC            DATA 0xe0
0000            161   _XBR0           DATA 0xe1
0000            162   _XBR1           DATA 0xe2
0000            163   _XBR2           DATA 0xe3
0000            164   _IT01CF         DATA 0xe4
0000            165   _CKCON1         DATA 0xe4
0000            166   _SMOD1          DATA 0xe5
0000            167   _EIE1           DATA 0xe6
0000            168   _EIE2           DATA 0xe7
0000            169   _ADC0CN         DATA 0xe8
0000            170   _PCA0CPL1       DATA 0xe9
0000            171   _PCA0CPH1       DATA 0xea
0000            172   _PCA0CPL2       DATA 0xeb
0000            173   _PCA0CPH2       DATA 0xec
0000            174   _PCA0CPL3       DATA 0xed
0000            175   _PCA0CPH3       DATA 0xee
0000            176   _RSTSRC         DATA 0xef
0000            177   _B              DATA 0xf0
0000            178   _P0MDIN         DATA 0xf1
0000            179   _P1MDIN         DATA 0xf2
0000            180   _P2MDIN         DATA 0xf3
0000            181   _P3MDIN         DATA 0xf4
0000            182   _P4MDIN         DATA 0xf5
0000            183   _EIP1           DATA 0xf6
0000            184   _EIP2           DATA 0xf7
0000            185   _SPI0CN         DATA 0xf8
0000            186   _PCA0L          DATA 0xf9
0000            187   _PCA0H          DATA 0xfa
0000            188   _PCA0CPL0       DATA 0xfb
0000            189   _PCA0CPH0       DATA 0xfc
0000            190   _PCA0CPL4       DATA 0xfd
0000            191   _PCA0CPH4       DATA 0xfe
0000            192   _VDM0CN         DATA 0xff
0000            193   _DPTR           DATA 0x8382
0000            194   _TMR2RL         DATA 0xcbca
0000            195   _TMR3RL         DATA 0x9392
0000            196   _TMR4RL         DATA 0x9392
0000            197   _TMR5RL         DATA 0xcbca
0000            198   _TMR2           DATA 0xcdcc
0000            199   _TMR3           DATA 0x9594
0000            200   _TMR4           DATA 0x9594
0000            201   _TMR5           DATA 0xcdcc
0000            202   _SBRL1          DATA 0xb5b4
0000            203   _ADC0           DATA 0xbebd
0000            204   _ADC0GT         DATA 0xc4c3
0000            205   _ADC0LT         DATA 0xc6c5
0000            206   _PCA0           DATA 0xfaf9
0000            207   _PCA0CP1        DATA 0xeae9
0000            208   _PCA0CP2        DATA 0xeceb
0000            209   _PCA0CP3        DATA 0xeeed
0000            210   _PCA0CP0        DATA 0xfcfb
0000            211   _PCA0CP4        DATA 0xfefd
0000            212   ;--------------------------------------------------------
0000            213   ; special function bits
0000            214   ;--------------------------------------------------------
0000            215   _P0_0           BIT 0x80
0000            216   _P0_1           BIT 0x81
0000            217   _P0_2           BIT 0x82
0000            218   _P0_3           BIT 0x83
0000            219   _P0_4           BIT 0x84
0000            220   _P0_5           BIT 0x85
0000            221   _P0_6           BIT 0x86
0000            222   _P0_7           BIT 0x87
0000            223   _TF1            BIT 0x8f
0000            224   _TR1            BIT 0x8e
0000            225   _TF0            BIT 0x8d
0000            226   _TR0            BIT 0x8c
0000            227   _IE1            BIT 0x8b
0000            228   _IT1            BIT 0x8a
0000            229   _IE0            BIT 0x89
0000            230   _IT0            BIT 0x88
0000            231   _P1_0           BIT 0x90
0000            232   _P1_1           BIT 0x91
0000            233   _P1_2           BIT 0x92
0000            234   _P1_3           BIT 0x93
0000            235   _P1_4           BIT 0x94
0000            236   _P1_5           BIT 0x95
0000            237   _P1_6           BIT 0x96
0000            238   _P1_7           BIT 0x97
0000            239   _S0MODE         BIT 0x9f
0000            240   _SCON0_6        BIT 0x9e
0000            241   _MCE0           BIT 0x9d
0000            242   _REN0           BIT 0x9c
0000            243   _TB80           BIT 0x9b
0000            244   _RB80           BIT 0x9a
0000            245   _TI0            BIT 0x99
0000            246   _RI0            BIT 0x98
0000            247   _SCON_6         BIT 0x9e
0000            248   _MCE            BIT 0x9d
0000            249   _REN            BIT 0x9c
0000            250   _TB8            BIT 0x9b
0000            251   _RB8            BIT 0x9a
0000            252   _TI             BIT 0x99
0000            253   _RI             BIT 0x98
0000            254   _P2_0           BIT 0xa0
0000            255   _P2_1           BIT 0xa1
0000            256   _P2_2           BIT 0xa2
0000            257   _P2_3           BIT 0xa3
0000            258   _P2_4           BIT 0xa4
0000            259   _P2_5           BIT 0xa5
0000            260   _P2_6           BIT 0xa6
0000            261   _P2_7           BIT 0xa7
0000            262   _EA             BIT 0xaf
0000            263   _ESPI0          BIT 0xae
0000            264   _ET2            BIT 0xad
0000            265   _ES0            BIT 0xac
0000            266   _ET1            BIT 0xab
0000            267   _EX1            BIT 0xaa
0000            268   _ET0            BIT 0xa9
0000            269   _EX0            BIT 0xa8
0000            270   _P3_0           BIT 0xb0
0000            271   _P3_1           BIT 0xb1
0000            272   _P3_2           BIT 0xb2
0000            273   _P3_3           BIT 0xb3
0000            274   _P3_4           BIT 0xb4
0000            275   _P3_5           BIT 0xb5
0000            276   _P3_6           BIT 0xb6
0000            277   _P3_7           BIT 0xb7
0000            278   _IP_7           BIT 0xbf
0000            279   _PSPI0          BIT 0xbe
0000            280   _PT2            BIT 0xbd
0000            281   _PS0            BIT 0xbc
0000            282   _PT1            BIT 0xbb
0000            283   _PX1            BIT 0xba
0000            284   _PT0            BIT 0xb9
0000            285   _PX0            BIT 0xb8
0000            286   _MASTER0        BIT 0xc7
0000            287   _TXMODE0        BIT 0xc6
0000            288   _STA0           BIT 0xc5
0000            289   _STO0           BIT 0xc4
0000            290   _ACKRQ0         BIT 0xc3
0000            291   _ARBLOST0       BIT 0xc2
0000            292   _ACK0           BIT 0xc1
0000            293   _SI0            BIT 0xc0
0000            294   _MASTER1        BIT 0xc7
0000            295   _TXMODE1        BIT 0xc6
0000            296   _STA1           BIT 0xc5
0000            297   _STO1           BIT 0xc4
0000            298   _ACKRQ1         BIT 0xc3
0000            299   _ARBLOST1       BIT 0xc2
0000            300   _ACK1           BIT 0xc1
0000            301   _SI1            BIT 0xc0
0000            302   _TF2            BIT 0xcf
0000            303   _TF2H           BIT 0xcf
0000            304   _TF2L           BIT 0xce
0000            305   _TF2LEN         BIT 0xcd
0000            306   _TF2CEN         BIT 0xcc
0000            307   _T2SPLIT        BIT 0xcb
0000            308   _TR2            BIT 0xca
0000            309   _T2CSS          BIT 0xc9
0000            310   _T2XCLK         BIT 0xc8
0000            311   _TF5H           BIT 0xcf
0000            312   _TF5L           BIT 0xce
0000            313   _TF5LEN         BIT 0xcd
0000            314   _TMR5CN_4       BIT 0xcc
0000            315   _T5SPLIT        BIT 0xcb
0000            316   _TR5            BIT 0xca
0000            317   _TMR5CN_1       BIT 0xc9
0000            318   _T5XCLK         BIT 0xc8
0000            319   _CY             BIT 0xd7
0000            320   _AC             BIT 0xd6
0000            321   _F0             BIT 0xd5
0000            322   _RS1            BIT 0xd4
0000            323   _RS0            BIT 0xd3
0000            324   _OV             BIT 0xd2
0000            325   _F1             BIT 0xd1
0000            326   _PARITY         BIT 0xd0
0000            327   _CF             BIT 0xdf
0000            328   _CR             BIT 0xde
0000            329   _PCA0CN_5       BIT 0xde
0000            330   _CCF4           BIT 0xdc
0000            331   _CCF3           BIT 0xdb
0000            332   _CCF2           BIT 0xda
0000            333   _CCF1           BIT 0xd9
0000            334   _CCF0           BIT 0xd8
0000            335   _ACC_7          BIT 0xe7
0000            336   _ACC_6          BIT 0xe6
0000            337   _ACC_5          BIT 0xe5
0000            338   _ACC_4          BIT 0xe4
0000            339   _ACC_3          BIT 0xe3
0000            340   _ACC_2          BIT 0xe2
0000            341   _ACC_1          BIT 0xe1
0000            342   _ACC_0          BIT 0xe0
0000            343   _AD0EN          BIT 0xef
0000            344   _AD0TM          BIT 0xee
0000            345   _AD0INT         BIT 0xed
0000            346   _AD0BUSY        BIT 0xec
0000            347   _AD0WINT        BIT 0xeb
0000            348   _AD0CM2         BIT 0xea
0000            349   _AD0CM1         BIT 0xe9
0000            350   _AD0CM0         BIT 0xe8
0000            351   _B_7            BIT 0xf7
0000            352   _B_6            BIT 0xf6
0000            353   _B_5            BIT 0xf5
0000            354   _B_4            BIT 0xf4
0000            355   _B_3            BIT 0xf3
0000            356   _B_2            BIT 0xf2
0000            357   _B_1            BIT 0xf1
0000            358   _B_0            BIT 0xf0
0000            359   _SPIF           BIT 0xff
0000            360   _WCOL           BIT 0xfe
0000            361   _MODF           BIT 0xfd
0000            362   _RXOVRN         BIT 0xfc
0000            363   _NSSMD1         BIT 0xfb
0000            364   _NSSMD0         BIT 0xfa
0000            365   _TXBMT          BIT 0xf9
0000            366   _SPIEN          BIT 0xf8
0000            367   ;--------------------------------------------------------
0000            368   ; overlayable register banks
0000            369   ;--------------------------------------------------------
0000            370            rbank0 segment data overlay
0000            371   ;--------------------------------------------------------
0000            372   ; internal ram data
0000            373   ;--------------------------------------------------------
0000            374            rseg R_DSEG
0000            375   _pwm_count:
0000            376            ds 1
0001            377   _mode:
0001            378            ds 1
0002            379   _pwm_both:
0002            380            ds 1
0003            381   _pwm_Left0:
0003            382            ds 1
0004            383   _pwm_Left1:
0004            384            ds 1
0005            385   _pwm_Right0:
0005            386            ds 1
0006            387   _pwm_Right1:
0006            388            ds 1
0007            389   _direction:
0007            390            ds 1
0008            391   _currentcmd:
0008            392            ds 1
0009            393   _currentstate:
0009            394            ds 1
000A            395   _main_v1_1_68:
000A            396            ds 4
000E            397   _main_v2_1_68:
000E            398            ds 4
0012            399   _main_sloc0_1_0:
0012            400            ds 2
0014            401   _main_sloc1_1_0:
0014            402            ds 2
0016            403   _main_sloc2_1_0:
0016            404            ds 2
0018            405   _main_sloc3_1_0:
0018            406            ds 2
001A            407   _main_sloc4_1_0:
001A            408            ds 2
001C            409   _main_sloc5_1_0:
001C            410            ds 2
001E            411   _main_sloc6_1_0:
001E            412            ds 4
0022            413   _main_sloc7_1_0:
0022            414            ds 4
0026            415   _linetrack_vleft_1_87:
0026            416            ds 4
002A            417   _linetrack_vright_1_87:
002A            418            ds 4
002E            419   _linetrack_sloc0_1_0:
002E            420            ds 4
0032            421   _linetrack_sloc1_1_0:
0032            422            ds 4
0036            423   _turncar_v_1_93:
0036            424            ds 4
003A            425   _turncar_direction_1_93:
003A            426            ds 1
003B            427   _uturn_vleft_1_103:
003B            428            ds 4
003F            429   _uturn_vright_1_103:
003F            430            ds 4
0043            431   ;--------------------------------------------------------
0043            432   ; overlayable items in internal ram 
0043            433   ;--------------------------------------------------------
0000            434            rseg R_OSEG
0000            435   ;--------------------------------------------------------
0000            436   ; indirectly addressable internal ram data
0000            437   ;--------------------------------------------------------
0000            438            rseg R_ISEG
0000            439   ;--------------------------------------------------------
0000            440   ; absolute internal ram data
0000            441   ;--------------------------------------------------------
0000            442            DSEG
0000            443   ;--------------------------------------------------------
0000            444   ; bit data
0000            445   ;--------------------------------------------------------
0000            446            rseg R_BSEG
0000            447   _main_sloc8_1_0:
0000            448            DBIT    1
0001            449   _Timer2_ISR_sloc0_1_0:
0001            450            DBIT    1
0002            451   ;--------------------------------------------------------
0002            452   ; paged external ram data
0002            453   ;--------------------------------------------------------
0000            454            rseg R_PSEG
0000            455   ;--------------------------------------------------------
0000            456   ; external ram data
0000            457   ;--------------------------------------------------------
0000            458            rseg R_XSEG
0000            459   ;--------------------------------------------------------
0000            460   ; absolute external ram data
0000            461   ;--------------------------------------------------------
0000            462            XSEG
0000            463   ;--------------------------------------------------------
0000            464   ; external initialized ram data
0000            465   ;--------------------------------------------------------
0000            466            rseg R_IXSEG
0000            467            rseg R_HOME
0000            468            rseg R_GSINIT
0000            469            rseg R_CSEG
0000            470   ;--------------------------------------------------------
0000            471   ; Reset entry point and interrupt vectors
0000            472   ;--------------------------------------------------------
0000            473            CSEG at 0x0000
0000 020100     474            ljmp    _crt0
002B            475            CSEG at 0x002b
002B 020100     476            ljmp    _Timer2_ISR
002E            477   ;--------------------------------------------------------
002E            478   ; global & static initialisations
002E            479   ;--------------------------------------------------------
0000            480            rseg R_HOME
0000            481            rseg R_GSINIT
0000            482            rseg R_GSINIT
0000            483   ;--------------------------------------------------------
0000            484   ; data variables initialization
0000            485   ;--------------------------------------------------------
0000            486            rseg R_DINIT
0000            487   ;        robot.c:8: volatile  char pwm_count=0;
0000 752000     488            mov     _pwm_count,#0x00
0003            489   ;        robot.c:9: volatile  char mode = 0;
0003 75F000     490            mov     _mode,#0x00
0006            491   ;        robot.c:10: volatile  char pwm_both =0;
0006 75B000     492            mov     _pwm_both,#0x00
0009            493   ;        robot.c:11: volatile  char pwm_Left0 = 0; //p1.5
0009 757000     494            mov     _pwm_Left0,#0x00
000C            495   ;        robot.c:12: volatile  char pwm_Left1 = 0; //p1.6
000C 753000     496            mov     _pwm_Left1,#0x00
000F            497   ;        robot.c:13: volatile  char pwm_Right0 = 0; //p2.0
000F 75F000     498            mov     _pwm_Right0,#0x00
0012            499   ;        robot.c:14: volatile  char pwm_Right1 = 0; //p2.1
0012 75B000     500            mov     _pwm_Right1,#0x00
0015            501   ;        robot.c:15: volatile  char direction = 0; // 1 for back 0 for forward
0015 757000     502            mov     _direction,#0x00
0018            503   ;        robot.c:17: volatile  char currentcmd = 0;
0018 753000     504            mov     _currentcmd,#0x00
001B            505   ;        robot.c:18: volatile  char currentstate = 1;
001B 75F001     506            mov     _currentstate,#0x01
001E            507            ; The linker places a 'ret' at the end of segment R_DINIT.
001E            508   ;--------------------------------------------------------
001E            509   ; code
001E            510   ;--------------------------------------------------------
0000            511            rseg R_CSEG
0000            512   ;------------------------------------------------------------
0000            513   ;Allocation info for local variables in function 'main'
0000            514   ;------------------------------------------------------------
0000            515   ;v1                        Allocated with name '_main_v1_1_68'
0000            516   ;v2                        Allocated with name '_main_v2_1_68'
0000            517   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0000            518   ;sloc1                     Allocated with name '_main_sloc1_1_0'
0000            519   ;sloc2                     Allocated with name '_main_sloc2_1_0'
0000            520   ;sloc3                     Allocated with name '_main_sloc3_1_0'
0000            521   ;sloc4                     Allocated with name '_main_sloc4_1_0'
0000            522   ;sloc5                     Allocated with name '_main_sloc5_1_0'
0000            523   ;sloc6                     Allocated with name '_main_sloc6_1_0'
0000            524   ;sloc7                     Allocated with name '_main_sloc7_1_0'
0000            525   ;------------------------------------------------------------
0000            526   ;        robot.c:20: void main(void) {
0000            527   ;        -----------------------------------------
0000            528   ;         function main
0000            529   ;        -----------------------------------------
0000            530   _main:
0000            531            using   0
0000            532   ;        robot.c:22: volatile float v1 = 0;
0000 752800     533            mov     _main_v1_1_68,#0x00
0003 752900     534            mov     (_main_v1_1_68 + 1),#0x00
0006 752A00     535            mov     (_main_v1_1_68 + 2),#0x00
0009 752B00     536            mov     (_main_v1_1_68 + 3),#0x00
000C            537   ;        robot.c:23: volatile float v2 = 0;
000C 756800     538            mov     _main_v2_1_68,#0x00
000F 756900     539            mov     (_main_v2_1_68 + 1),#0x00
0012 756A00     540            mov     (_main_v2_1_68 + 2),#0x00
0015 756B00     541            mov     (_main_v2_1_68 + 3),#0x00
0018            542   ;        robot.c:25: MOTOR_LEFT0 = 0;
0018 C295       543            clr     _P1_5
001A            544   ;        robot.c:26: MOTOR_LEFT1 = 0;
001A C296       545            clr     _P1_6
001C            546   ;        robot.c:27: MOTOR_RIGHT0 = 0;
001C C2A0       547            clr     _P2_0
001E            548   ;        robot.c:28: MOTOR_RIGHT1 = 0;
001E C2A1       549            clr     _P2_1
0020            550   ;        robot.c:31: currentstate = 1;           //1-FORWARD, 2-BACKWARDS, 3-STOPPED, 4-DEBUGGER
0020 75F001     551            mov     _currentstate,#0x01
0023            552   ;        robot.c:32: currentcmd = 0;             //0-NO COMMAND, 1-TURN LEFT, 2-TURN RIGHT, 3-FORWARDS, 4-BACKWARDS, 5-STOP, 6-UTURN
0023 753000     553            mov     _currentcmd,#0x00
0026            554   ;        robot.c:35: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0026 74E8       555            mov     a,#__str_0
0028 C0E0       556            push    acc
002A 7496       557            mov     a,#(__str_0 >> 8)
002C C0E0       558            push    acc
002E 7480       559            mov     a,#0x80
0030 C0E0       560            push    acc
0032 120100     561            lcall   _printf
0035 1581       562            dec     sp
0037 1581       563            dec     sp
0039 1581       564            dec     sp
003B            565   ;        robot.c:38: InitPinADC(2, 3); // Configure P2.3 as analog input (tank1)
003B 750003     566            mov     _InitPinADC_PARM_2,#0x03
003E 758202     567            mov     dpl,#0x02
0041 120100     568            lcall   _InitPinADC
0044            569   ;        robot.c:39: InitPinADC(2, 4); // Configure P2.4 as analog input         (tank1)
0044 750004     570            mov     _InitPinADC_PARM_2,#0x04
0047 758202     571            mov     dpl,#0x02
004A 120100     572            lcall   _InitPinADC
004D            573   ;        robot.c:40: InitPinADC(2, 5); // Configure P2.5 as analog input (tank2)
004D 750005     574            mov     _InitPinADC_PARM_2,#0x05
0050 758202     575            mov     dpl,#0x02
0053 120100     576            lcall   _InitPinADC
0056            577   ;        robot.c:41: InitPinADC(2, 6); // Configure P2.6 as analog input (tank2)
0056 750006     578            mov     _InitPinADC_PARM_2,#0x06
0059 758202     579            mov     dpl,#0x02
005C 120100     580            lcall   _InitPinADC
005F            581   ;        robot.c:44: InitADC();
005F 120100     582            lcall   _InitADC
0062            583   ;        robot.c:47: mxInit();
0062 120100     584            lcall   _mxInit
0065            585   ;        robot.c:50: while (1) {         
0065            586   L002045?:
0065            587   ;        robot.c:53: currentcmd = readData(); 
0065 120100     588            lcall   _readData
0068 858230     589            mov     _currentcmd,dpl
006B            590   ;        robot.c:56: printf("frontL %f frontR %f backL %f backR %f command %1d, state %1d left0 %3d left1 %3d right0 %3d right1 %3d\r", Volts_at_Pin(TANK_FL),Volts_at_Pin(TANK_FR),Volts_at_Pin(TANK_RL),Volts_at_Pin(TANK_RR), currentcmd, currentstate, pwm_Left0, pwm_Left1, pwm_Right0, pwm_Right1);
006B 85B0E8     591            mov     _main_sloc5_1_0,_pwm_Right1
006E E5B0       592            mov     a,_pwm_Right1
0070 33         593            rlc     a
0071 95E0       594            subb    a,acc
0073 F5E9       595            mov     (_main_sloc5_1_0 + 1),a
0075 85F0A8     596            mov     _main_sloc4_1_0,_pwm_Right0
0078 E5F0       597            mov     a,_pwm_Right0
007A 33         598            rlc     a
007B 95E0       599            subb    a,acc
007D F5A9       600            mov     (_main_sloc4_1_0 + 1),a
007F 853068     601            mov     _main_sloc3_1_0,_pwm_Left1
0082 E530       602            mov     a,_pwm_Left1
0084 33         603            rlc     a
0085 95E0       604            subb    a,acc
0087 F569       605            mov     (_main_sloc3_1_0 + 1),a
0089 8570A8     606            mov     _main_sloc0_1_0,_pwm_Left0
008C E570       607            mov     a,_pwm_Left0
008E 33         608            rlc     a
008F 95E0       609            subb    a,acc
0091 F5A9       610            mov     (_main_sloc0_1_0 + 1),a
0093 85F0E8     611            mov     _main_sloc1_1_0,_currentstate
0096 E5F0       612            mov     a,_currentstate
0098 33         613            rlc     a
0099 95E0       614            subb    a,acc
009B F5E9       615            mov     (_main_sloc1_1_0 + 1),a
009D 853028     616            mov     _main_sloc2_1_0,_currentcmd
00A0 E530       617            mov     a,_currentcmd
00A2 33         618            rlc     a
00A3 95E0       619            subb    a,acc
00A5 F529       620            mov     (_main_sloc2_1_0 + 1),a
00A7 75820E     621            mov     dpl,#0x0E
00AA 120100     622            lcall   _Volts_at_Pin
00AD A882       623            mov     r0,dpl
00AF A983       624            mov     r1,dph
00B1 AEF0       625            mov     r6,b
00B3 FF         626            mov     r7,a
00B4 75820D     627            mov     dpl,#0x0D
00B7 C006       628            push    ar6
00B9 C007       629            push    ar7
00BB C000       630            push    ar0
00BD C001       631            push    ar1
00BF 120100     632            lcall   _Volts_at_Pin
00C2 858228     633            mov     _main_sloc6_1_0,dpl
00C5 858329     634            mov     (_main_sloc6_1_0 + 1),dph
00C8 85F02A     635            mov     (_main_sloc6_1_0 + 2),b
00CB F52B       636            mov     (_main_sloc6_1_0 + 3),a
00CD 75820C     637            mov     dpl,#0x0C
00D0 120100     638            lcall   _Volts_at_Pin
00D3 858268     639            mov     _main_sloc7_1_0,dpl
00D6 858369     640            mov     (_main_sloc7_1_0 + 1),dph
00D9 85F06A     641            mov     (_main_sloc7_1_0 + 2),b
00DC F56B       642            mov     (_main_sloc7_1_0 + 3),a
00DE 75820B     643            mov     dpl,#0x0B
00E1 120100     644            lcall   _Volts_at_Pin
00E4 AA82       645            mov     r2,dpl
00E6 AB83       646            mov     r3,dph
00E8 ACF0       647            mov     r4,b
00EA FD         648            mov     r5,a
00EB D001       649            pop     ar1
00ED D000       650            pop     ar0
00EF D007       651            pop     ar7
00F1 D006       652            pop     ar6
00F3 C0E8       653            push    _main_sloc5_1_0
00F5 C0E9       654            push    (_main_sloc5_1_0 + 1)
00F7 C0A8       655            push    _main_sloc4_1_0
00F9 C0A9       656            push    (_main_sloc4_1_0 + 1)
00FB C068       657            push    _main_sloc3_1_0
00FD C069       658            push    (_main_sloc3_1_0 + 1)
00FF C0A8       659            push    _main_sloc0_1_0
0101 C0A9       660            push    (_main_sloc0_1_0 + 1)
0103 C0E8       661            push    _main_sloc1_1_0
0105 C0E9       662            push    (_main_sloc1_1_0 + 1)
0107 C028       663            push    _main_sloc2_1_0
0109 C029       664            push    (_main_sloc2_1_0 + 1)
010B C000       665            push    ar0
010D C001       666            push    ar1
010F C006       667            push    ar6
0111 C007       668            push    ar7
0113 C028       669            push    _main_sloc6_1_0
0115 C029       670            push    (_main_sloc6_1_0 + 1)
0117 C02A       671            push    (_main_sloc6_1_0 + 2)
0119 C02B       672            push    (_main_sloc6_1_0 + 3)
011B C068       673            push    _main_sloc7_1_0
011D C069       674            push    (_main_sloc7_1_0 + 1)
011F C06A       675            push    (_main_sloc7_1_0 + 2)
0121 C06B       676            push    (_main_sloc7_1_0 + 3)
0123 C002       677            push    ar2
0125 C003       678            push    ar3
0127 C004       679            push    ar4
0129 C005       680            push    ar5
012B 7438       681            mov     a,#__str_1
012D C0E0       682            push    acc
012F 749A       683            mov     a,#(__str_1 >> 8)
0131 C0E0       684            push    acc
0133 7480       685            mov     a,#0x80
0135 C0E0       686            push    acc
0137 120100     687            lcall   _printf
013A E581       688            mov     a,sp
013C 24E1       689            add     a,#0xe1
013E F581       690            mov     sp,a
0140            691   ;        robot.c:59: if (currentcmd == CMD_LEFT) mxDirection(0);
0140 7401       692            mov     a,#0x01
0142 B53078     693            cjne    a,_currentcmd,L002010?
0145 758200     694            mov     dpl,#0x00
0148 120100     695            lcall   _mxDirection
014B 8001       696            sjmp    L002011?
014D            697   L002010?:
014D            698   ;        robot.c:60: else if (currentcmd == CMD_RIGHT) mxDirection(1);
014D 7402       699            mov     a,#0x02
014F B53038     700            cjne    a,_currentcmd,L002007?
0152 758201     701            mov     dpl,#0x01
0155 120100     702            lcall   _mxDirection
0158 8001       703            sjmp    L002011?
015A            704   L002007?:
015A            705   ;        robot.c:61: else if (currentcmd == CMD_FORWARD) mxGo(0);
015A 7403       706            mov     a,#0x03
015C B53078     707            cjne    a,_currentcmd,L002004?
015F 758200     708            mov     dpl,#0x00
0162 120100     709            lcall   _mxGo
0165 8001       710            sjmp    L002011?
0167            711   L002004?:
0167            712   ;        robot.c:62: else if (currentcmd == CMD_REVERSE) mxGo(1);
0167 7404       713            mov     a,#0x04
0169 B530F8     714            cjne    a,_currentcmd,L002011?
016C 758201     715            mov     dpl,#0x01
016F 120100     716            lcall   _mxGo
0172            717   L002011?:
0172            718   ;        robot.c:65: switch (currentstate) {
0172 AAF0       719            mov     r2,_currentstate
0174 BA01F8     720            cjne    r2,#0x01,L002087?
0177 8001       721            sjmp    L002012?
0179            722   L002087?:
0179 BA0278     723            cjne    r2,#0x02,L002088?
017C 8001       724            sjmp    L002013?
017E            725   L002088?:
017E            726   ;        robot.c:66: case FORWARD_STATE:
017E BA03F8     727            cjne    r2,#0x03,L002015?
0181 8001       728            sjmp    L002014?
0183            729   L002012?:
0183            730   ;        robot.c:67: linetrack(0);       // forwards
0183 900000     731            mov     dptr,#0x0000
0186 120100     732            lcall   _linetrack
0189            733   ;        robot.c:69: v1 = Volts_at_Pin(TANK_FL);
0189 75820B     734            mov     dpl,#0x0B
018C 120100     735            lcall   _Volts_at_Pin
018F 858228     736            mov     _main_v1_1_68,dpl
0192 858329     737            mov     (_main_v1_1_68 + 1),dph
0195 85F02A     738            mov     (_main_v1_1_68 + 2),b
0198 F52B       739            mov     (_main_v1_1_68 + 3),a
019A            740   ;        robot.c:70: v2 = Volts_at_Pin(TANK_FR);
019A 75820C     741            mov     dpl,#0x0C
019D 120100     742            lcall   _Volts_at_Pin
01A0 858268     743            mov     _main_v2_1_68,dpl
01A3 858369     744            mov     (_main_v2_1_68 + 1),dph
01A6 85F06A     745            mov     (_main_v2_1_68 + 2),b
01A9 F56B       746            mov     (_main_v2_1_68 + 3),a
01AB            747   ;        robot.c:71: break;
01AB            748   ;        robot.c:72: case REVERSE_STATE:
01AB 8001       749            sjmp    L002015?
01AD            750   L002013?:
01AD            751   ;        robot.c:73: linetrack(1);       // backwards
01AD 900001     752            mov     dptr,#0x0001
01B0 120100     753            lcall   _linetrack
01B3            754   ;        robot.c:75: v2 = Volts_at_Pin(TANK_RL);
01B3 75820D     755            mov     dpl,#0x0D
01B6 120100     756            lcall   _Volts_at_Pin
01B9 858268     757            mov     _main_v2_1_68,dpl
01BC 858369     758            mov     (_main_v2_1_68 + 1),dph
01BF 85F06A     759            mov     (_main_v2_1_68 + 2),b
01C2 F56B       760            mov     (_main_v2_1_68 + 3),a
01C4            761   ;        robot.c:76: v1 = Volts_at_Pin(TANK_RR);
01C4 75820E     762            mov     dpl,#0x0E
01C7 120100     763            lcall   _Volts_at_Pin
01CA 858228     764            mov     _main_v1_1_68,dpl
01CD 858329     765            mov     (_main_v1_1_68 + 1),dph
01D0 85F02A     766            mov     (_main_v1_1_68 + 2),b
01D3 F52B       767            mov     (_main_v1_1_68 + 3),a
01D5            768   ;        robot.c:77: break;
01D5            769   ;        robot.c:78: case STOP_STATE:
01D5 8001       770            sjmp    L002015?
01D7            771   L002014?:
01D7            772   ;        robot.c:79: stopcar();          // stop car
01D7 120100     773            lcall   _stopcar
01DA            774   ;        robot.c:81: }
01DA            775   L002015?:
01DA            776   ;        robot.c:84: switch (currentcmd) {
01DA E530       777            mov     a,_currentcmd
01DC FA         778            mov     r2,a
01DD 30E778     779            jnb     acc.7,L002090?
01E0 020100     780            ljmp    L002042?
01E3            781   L002090?:
01E3 C3         782            clr     c
01E4 7486       783            mov     a,#(0x06 ^ 0x80)
01E6 8AF0       784            mov     b,r2
01E8 63F080     785            xrl     b,#0x80
01EB 95F0       786            subb    a,b
01ED 5001       787            jnc     L002091?
01EF 020100     788            ljmp    L002042?
01F2            789   L002091?:
01F2 EA         790            mov     a,r2
01F3 2A         791            add     a,r2
01F4 2A         792            add     a,r2
01F5 909E38     793            mov     dptr,#L002092?
01F8 73         794            jmp     @a+dptr
01F9            795   L002092?:
01F9 020100     796            ljmp    L002016?
01FC 020100     797            ljmp    L002030?
01FF 020100     798            ljmp    L002034?
0202 020100     799            ljmp    L002038?
0205 020100     800            ljmp    L002039?
0208 020100     801            ljmp    L002040?
020B 020100     802            ljmp    L002041?
020E            803   ;        robot.c:86: case CMD_NONE:
020E            804   L002016?:
020E            805   ;        robot.c:88: if ((currentstate-1) ? 
020E AAF0       806            mov     r2,_currentstate
0210 E5F0       807            mov     a,_currentstate
0212 33         808            rlc     a
0213 95E0       809            subb    a,acc
0215 FB         810            mov     r3,a
0216 1A         811            dec     r2
0217 BAFF40     812            cjne    r2,#0xff,L002093?
021A 1B         813            dec     r3
021B            814   L002093?:
021B EA         815            mov     a,r2
021C 4B         816            orl     a,r3
021D 6001       817            jz      L002049?
021F            818   ;        robot.c:89: (v1 > 1.2 && v2 > 1.2) :
021F 749A       819            mov     a,#0x9A
0221 C0E0       820            push    acc
0223 7499       821            mov     a,#0x99
0225 C0E0       822            push    acc
0227 C0E0       823            push    acc
0229 743F       824            mov     a,#0x3F
022B C0E0       825            push    acc
022D 852882     826            mov     dpl,_main_v1_1_68
0230 852983     827            mov     dph,(_main_v1_1_68 + 1)
0233 852AF0     828            mov     b,(_main_v1_1_68 + 2)
0236 E52B       829            mov     a,(_main_v1_1_68 + 3)
0238 120100     830            lcall   ___fsgt
023B AA82       831            mov     r2,dpl
023D E581       832            mov     a,sp
023F 24FC       833            add     a,#0xfc
0241 F581       834            mov     sp,a
0243 EA         835            mov     a,r2
0244 6001       836            jz      L002051?
0246 749A       837            mov     a,#0x9A
0248 C0E0       838            push    acc
024A 7499       839            mov     a,#0x99
024C C0E0       840            push    acc
024E C0E0       841            push    acc
0250 743F       842            mov     a,#0x3F
0252 C0E0       843            push    acc
0254 856882     844            mov     dpl,_main_v2_1_68
0257 856983     845            mov     dph,(_main_v2_1_68 + 1)
025A 856AF0     846            mov     b,(_main_v2_1_68 + 2)
025D E56B       847            mov     a,(_main_v2_1_68 + 3)
025F 120100     848            lcall   ___fsgt
0262 AA82       849            mov     r2,dpl
0264 E581       850            mov     a,sp
0266 24FC       851            add     a,#0xfc
0268 F581       852            mov     sp,a
026A EA         853            mov     a,r2
026B 7001       854            jnz     L002052?
026D            855   L002051?:
026D 7A00       856            mov     r2,#0x00
026F 8001       857            sjmp    L002053?
0271            858   L002052?:
0271 7A01       859            mov     r2,#0x01
0273            860   L002053?:
0273 EA         861            mov     a,r2
0274 24FF       862            add     a,#0xff
0276 9218       863            mov     _main_sloc8_1_0,c
0278 8001       864            sjmp    L002050?
027A            865   L002049?:
027A            866   ;        robot.c:90: (v1 > 0.7 && v2 > 1)) {
027A 7433       867            mov     a,#0x33
027C C0E0       868            push    acc
027E C0E0       869            push    acc
0280 C0E0       870            push    acc
0282 743F       871            mov     a,#0x3F
0284 C0E0       872            push    acc
0286 852882     873            mov     dpl,_main_v1_1_68
0289 852983     874            mov     dph,(_main_v1_1_68 + 1)
028C 852AF0     875            mov     b,(_main_v1_1_68 + 2)
028F E52B       876            mov     a,(_main_v1_1_68 + 3)
0291 120100     877            lcall   ___fsgt
0294 AA82       878            mov     r2,dpl
0296 E581       879            mov     a,sp
0298 24FC       880            add     a,#0xfc
029A F581       881            mov     sp,a
029C EA         882            mov     a,r2
029D 6001       883            jz      L002054?
029F E4         884            clr     a
02A0 C0E0       885            push    acc
02A2 C0E0       886            push    acc
02A4 7480       887            mov     a,#0x80
02A6 C0E0       888            push    acc
02A8 743F       889            mov     a,#0x3F
02AA C0E0       890            push    acc
02AC 856882     891            mov     dpl,_main_v2_1_68
02AF 856983     892            mov     dph,(_main_v2_1_68 + 1)
02B2 856AF0     893            mov     b,(_main_v2_1_68 + 2)
02B5 E56B       894            mov     a,(_main_v2_1_68 + 3)
02B7 120100     895            lcall   ___fsgt
02BA AA82       896            mov     r2,dpl
02BC E581       897            mov     a,sp
02BE 24FC       898            add     a,#0xfc
02C0 F581       899            mov     sp,a
02C2 EA         900            mov     a,r2
02C3 7001       901            jnz     L002055?
02C5            902   L002054?:
02C5 7A00       903            mov     r2,#0x00
02C7 8001       904            sjmp    L002056?
02C9            905   L002055?:
02C9 7A01       906            mov     r2,#0x01
02CB            907   L002056?:
02CB EA         908            mov     a,r2
02CC 24FF       909            add     a,#0xff
02CE 9218       910            mov     _main_sloc8_1_0,c
02D0            911   L002050?:
02D0 2018C0     912            jb      _main_sloc8_1_0,L002099?
02D3 020100     913            ljmp    L002045?
02D6            914   L002099?:
02D6            915   ;        robot.c:91: printf("\nINTERSECTION\n");
02D6 7400       916            mov     a,#__str_2
02D8 C0E0       917            push    acc
02DA 74A3       918            mov     a,#(__str_2 >> 8)
02DC C0E0       919            push    acc
02DE 7480       920            mov     a,#0x80
02E0 C0E0       921            push    acc
02E2 120100     922            lcall   _printf
02E5 1581       923            dec     sp
02E7 1581       924            dec     sp
02E9 1581       925            dec     sp
02EB            926   ;        robot.c:93: if (currentstate == 1) {
02EB 7401       927            mov     a,#0x01
02ED B5F040     928            cjne    a,_currentstate,L002026?
02F0            929   ;        robot.c:94: if (Volts_at_Pin(TANK_RL)>Volts_at_Pin(TANK_RR)) {
02F0 75820D     930            mov     dpl,#0x0D
02F3 120100     931            lcall   _Volts_at_Pin
02F6 AA82       932            mov     r2,dpl
02F8 AB83       933            mov     r3,dph
02FA ACF0       934            mov     r4,b
02FC FD         935            mov     r5,a
02FD 75820E     936            mov     dpl,#0x0E
0300 C002       937            push    ar2
0302 C003       938            push    ar3
0304 C004       939            push    ar4
0306 C005       940            push    ar5
0308 120100     941            lcall   _Volts_at_Pin
030B AE82       942            mov     r6,dpl
030D AF83       943            mov     r7,dph
030F A8F0       944            mov     r0,b
0311 F9         945            mov     r1,a
0312 D005       946            pop     ar5
0314 D004       947            pop     ar4
0316 D003       948            pop     ar3
0318 D002       949            pop     ar2
031A C006       950            push    ar6
031C C007       951            push    ar7
031E C000       952            push    ar0
0320 C001       953            push    ar1
0322 8A82       954            mov     dpl,r2
0324 8B83       955            mov     dph,r3
0326 8CF0       956            mov     b,r4
0328 ED         957            mov     a,r5
0329 120100     958            lcall   ___fsgt
032C AA82       959            mov     r2,dpl
032E E581       960            mov     a,sp
0330 24FC       961            add     a,#0xfc
0332 F581       962            mov     sp,a
0334 EA         963            mov     a,r2
0335 6001       964            jz      L002018?
0337            965   ;        robot.c:95: pwm_Left1 = 50;
0337 753032     966            mov     _pwm_Left1,#0x32
033A            967   ;        robot.c:96: pwm_Left0 = -1;
033A 7570FF     968            mov     _pwm_Left0,#0xFF
033D            969   ;        robot.c:97: pwm_Right0 = 30;
033D 75F01E     970            mov     _pwm_Right0,#0x1E
0340            971   ;        robot.c:98: pwm_Right1 = -1;
0340 75B0FF     972            mov     _pwm_Right1,#0xFF
0343 8001       973            sjmp    L002027?
0345            974   L002018?:
0345            975   ;        robot.c:101: pwm_Left1 = 30;
0345 75301E     976            mov     _pwm_Left1,#0x1E
0348            977   ;        robot.c:102: pwm_Left0 = -1;
0348 7570FF     978            mov     _pwm_Left0,#0xFF
034B            979   ;        robot.c:103: pwm_Right0 = 50;
034B 75F032     980            mov     _pwm_Right0,#0x32
034E            981   ;        robot.c:104: pwm_Right1 = -1;
034E 75B0FF     982            mov     _pwm_Right1,#0xFF
0351 8001       983            sjmp    L002027?
0353            984   L002026?:
0353            985   ;        robot.c:106: } else if (currentstate == 2) {
0353 7402       986            mov     a,#0x02
0355 B5F0C0     987            cjne    a,_currentstate,L002027?
0358            988   ;        robot.c:107: if (Volts_at_Pin(TANK_FL)>Volts_at_Pin(TANK_FR)) {
0358 75820B     989            mov     dpl,#0x0B
035B 120100     990            lcall   _Volts_at_Pin
035E AA82       991            mov     r2,dpl
0360 AB83       992            mov     r3,dph
0362 ACF0       993            mov     r4,b
0364 FD         994            mov     r5,a
0365 75820C     995            mov     dpl,#0x0C
0368 C002       996            push    ar2
036A C003       997            push    ar3
036C C004       998            push    ar4
036E C005       999            push    ar5
0370 120100    1000            lcall   _Volts_at_Pin
0373 AE82      1001            mov     r6,dpl
0375 AF83      1002            mov     r7,dph
0377 A8F0      1003            mov     r0,b
0379 F9        1004            mov     r1,a
037A D005      1005            pop     ar5
037C D004      1006            pop     ar4
037E D003      1007            pop     ar3
0380 D002      1008            pop     ar2
0382 C006      1009            push    ar6
0384 C007      1010            push    ar7
0386 C000      1011            push    ar0
0388 C001      1012            push    ar1
038A 8A82      1013            mov     dpl,r2
038C 8B83      1014            mov     dph,r3
038E 8CF0      1015            mov     b,r4
0390 ED        1016            mov     a,r5
0391 120100    1017            lcall   ___fsgt
0394 AA82      1018            mov     r2,dpl
0396 E581      1019            mov     a,sp
0398 24FC      1020            add     a,#0xfc
039A F581      1021            mov     sp,a
039C EA        1022            mov     a,r2
039D 6001      1023            jz      L002021?
039F           1024   ;        robot.c:108: pwm_Left0 = 50;
039F 757032    1025            mov     _pwm_Left0,#0x32
03A2           1026   ;        robot.c:109: pwm_Left1 = -1;
03A2 7530FF    1027            mov     _pwm_Left1,#0xFF
03A5           1028   ;        robot.c:110: pwm_Right0 = -1;
03A5 75F0FF    1029            mov     _pwm_Right0,#0xFF
03A8           1030   ;        robot.c:111: pwm_Right1 = 30;
03A8 75B01E    1031            mov     _pwm_Right1,#0x1E
03AB 8001      1032            sjmp    L002027?
03AD           1033   L002021?:
03AD           1034   ;        robot.c:114: pwm_Left0 = 30;
03AD 75701E    1035            mov     _pwm_Left0,#0x1E
03B0           1036   ;        robot.c:115: pwm_Left1 = -1;
03B0 7530FF    1037            mov     _pwm_Left1,#0xFF
03B3           1038   ;        robot.c:116: pwm_Right0 = -1;
03B3 75F0FF    1039            mov     _pwm_Right0,#0xFF
03B6           1040   ;        robot.c:117: pwm_Right1 = 50;
03B6 75B032    1041            mov     _pwm_Right1,#0x32
03B9           1042   L002027?:
03B9           1043   ;        robot.c:121: waitms(1500);
03B9 9005DC    1044            mov     dptr,#0x05DC
03BC 120100    1045            lcall   _waitms
03BF           1046   ;        robot.c:123: break;
03BF 020100    1047            ljmp    L002045?
03C2           1048   ;        robot.c:125: case CMD_LEFT:
03C2           1049   L002030?:
03C2           1050   ;        robot.c:127: printf("Turn left at the next intersection\n");
03C2 7480      1051            mov     a,#__str_3
03C4 C0E0      1052            push    acc
03C6 74A4      1053            mov     a,#(__str_3 >> 8)
03C8 C0E0      1054            push    acc
03CA 7480      1055            mov     a,#0x80
03CC C0E0      1056            push    acc
03CE 120100    1057            lcall   _printf
03D1 1581      1058            dec     sp
03D3 1581      1059            dec     sp
03D5 1581      1060            dec     sp
03D7           1061   ;        robot.c:128: if (v1 > 0.7 && v2 >1)  {
03D7 7433      1062            mov     a,#0x33
03D9 C0E0      1063            push    acc
03DB C0E0      1064            push    acc
03DD C0E0      1065            push    acc
03DF 743F      1066            mov     a,#0x3F
03E1 C0E0      1067            push    acc
03E3 852882    1068            mov     dpl,_main_v1_1_68
03E6 852983    1069            mov     dph,(_main_v1_1_68 + 1)
03E9 852AF0    1070            mov     b,(_main_v1_1_68 + 2)
03EC E52B      1071            mov     a,(_main_v1_1_68 + 3)
03EE 120100    1072            lcall   ___fsgt
03F1 AA82      1073            mov     r2,dpl
03F3 E581      1074            mov     a,sp
03F5 24FC      1075            add     a,#0xfc
03F7 F581      1076            mov     sp,a
03F9 EA        1077            mov     a,r2
03FA 7001      1078            jnz     L002106?
03FC 020100    1079            ljmp    L002045?
03FF           1080   L002106?:
03FF E4        1081            clr     a
0400 C0E0      1082            push    acc
0402 C0E0      1083            push    acc
0404 7480      1084            mov     a,#0x80
0406 C0E0      1085            push    acc
0408 743F      1086            mov     a,#0x3F
040A C0E0      1087            push    acc
040C 856882    1088            mov     dpl,_main_v2_1_68
040F 856983    1089            mov     dph,(_main_v2_1_68 + 1)
0412 856AF0    1090            mov     b,(_main_v2_1_68 + 2)
0415 E56B      1091            mov     a,(_main_v2_1_68 + 3)
0417 120100    1092            lcall   ___fsgt
041A AA82      1093            mov     r2,dpl
041C E581      1094            mov     a,sp
041E 24FC      1095            add     a,#0xfc
0420 F581      1096            mov     sp,a
0422 EA        1097            mov     a,r2
0423 7001      1098            jnz     L002107?
0425 020100    1099            ljmp    L002045?
0428           1100   L002107?:
0428           1101   ;        robot.c:129: printf("\n\r INTERSECTION\n");
0428 7440      1102            mov     a,#__str_4
042A C0E0      1103            push    acc
042C 74A5      1104            mov     a,#(__str_4 >> 8)
042E C0E0      1105            push    acc
0430 7480      1106            mov     a,#0x80
0432 C0E0      1107            push    acc
0434 120100    1108            lcall   _printf
0437 1581      1109            dec     sp
0439 1581      1110            dec     sp
043B 1581      1111            dec     sp
043D           1112   ;        robot.c:134: turncar(currentstate);
043D AAF0      1113            mov     r2,_currentstate
043F E5F0      1114            mov     a,_currentstate
0441 33        1115            rlc     a
0442 95E0      1116            subb    a,acc
0444 FB        1117            mov     r3,a
0445 8A82      1118            mov     dpl,r2
0447 8B83      1119            mov     dph,r3
0449 120100    1120            lcall   _turncar
044C           1121   ;        robot.c:135: currentcmd = 0;
044C 753000    1122            mov     _currentcmd,#0x00
044F           1123   ;        robot.c:137: break;
044F 020100    1124            ljmp    L002045?
0452           1125   ;        robot.c:140: case CMD_RIGHT:
0452           1126   L002034?:
0452           1127   ;        robot.c:142: printf("Turn right at the next intersection\n");
0452 7480      1128            mov     a,#__str_5
0454 C0E0      1129            push    acc
0456 74A5      1130            mov     a,#(__str_5 >> 8)
0458 C0E0      1131            push    acc
045A 7480      1132            mov     a,#0x80
045C C0E0      1133            push    acc
045E 120100    1134            lcall   _printf
0461 1581      1135            dec     sp
0463 1581      1136            dec     sp
0465 1581      1137            dec     sp
0467           1138   ;        robot.c:143: if (v1 > 0.7 && v2 >1) {
0467 7433      1139            mov     a,#0x33
0469 C0E0      1140            push    acc
046B C0E0      1141            push    acc
046D C0E0      1142            push    acc
046F 743F      1143            mov     a,#0x3F
0471 C0E0      1144            push    acc
0473 852882    1145            mov     dpl,_main_v1_1_68
0476 852983    1146            mov     dph,(_main_v1_1_68 + 1)
0479 852AF0    1147            mov     b,(_main_v1_1_68 + 2)
047C E52B      1148            mov     a,(_main_v1_1_68 + 3)
047E 120100    1149            lcall   ___fsgt
0481 AA82      1150            mov     r2,dpl
0483 E581      1151            mov     a,sp
0485 24FC      1152            add     a,#0xfc
0487 F581      1153            mov     sp,a
0489 EA        1154            mov     a,r2
048A 7001      1155            jnz     L002108?
048C 020100    1156            ljmp    L002045?
048F           1157   L002108?:
048F E4        1158            clr     a
0490 C0E0      1159            push    acc
0492 C0E0      1160            push    acc
0494 7480      1161            mov     a,#0x80
0496 C0E0      1162            push    acc
0498 743F      1163            mov     a,#0x3F
049A C0E0      1164            push    acc
049C 856882    1165            mov     dpl,_main_v2_1_68
049F 856983    1166            mov     dph,(_main_v2_1_68 + 1)
04A2 856AF0    1167            mov     b,(_main_v2_1_68 + 2)
04A5 E56B      1168            mov     a,(_main_v2_1_68 + 3)
04A7 120100    1169            lcall   ___fsgt
04AA AA82      1170            mov     r2,dpl
04AC E581      1171            mov     a,sp
04AE 24FC      1172            add     a,#0xfc
04B0 F581      1173            mov     sp,a
04B2 EA        1174            mov     a,r2
04B3 7001      1175            jnz     L002109?
04B5 020100    1176            ljmp    L002045?
04B8           1177   L002109?:
04B8           1178   ;        robot.c:144: printf("\n\r INTERSECTION\n");
04B8 7440      1179            mov     a,#__str_4
04BA C0E0      1180            push    acc
04BC 74A5      1181            mov     a,#(__str_4 >> 8)
04BE C0E0      1182            push    acc
04C0 7480      1183            mov     a,#0x80
04C2 C0E0      1184            push    acc
04C4 120100    1185            lcall   _printf
04C7 1581      1186            dec     sp
04C9 1581      1187            dec     sp
04CB 1581      1188            dec     sp
04CD           1189   ;        robot.c:146: turncar(currentstate + 2); //1 = right
04CD AAF0      1190            mov     r2,_currentstate
04CF E5F0      1191            mov     a,_currentstate
04D1 33        1192            rlc     a
04D2 95E0      1193            subb    a,acc
04D4 FB        1194            mov     r3,a
04D5 8A82      1195            mov     dpl,r2
04D7 8B83      1196            mov     dph,r3
04D9 A3        1197            inc     dptr
04DA A3        1198            inc     dptr
04DB 120100    1199            lcall   _turncar
04DE           1200   ;        robot.c:147: currentcmd = 0;
04DE 753000    1201            mov     _currentcmd,#0x00
04E1           1202   ;        robot.c:149: break;
04E1 020100    1203            ljmp    L002045?
04E4           1204   ;        robot.c:152: case CMD_FORWARD:
04E4           1205   L002038?:
04E4           1206   ;        robot.c:154: printf("GO!\n");
04E4 7440      1207            mov     a,#__str_6
04E6 C0E0      1208            push    acc
04E8 74A6      1209            mov     a,#(__str_6 >> 8)
04EA C0E0      1210            push    acc
04EC 7480      1211            mov     a,#0x80
04EE C0E0      1212            push    acc
04F0 120100    1213            lcall   _printf
04F3 1581      1214            dec     sp
04F5 1581      1215            dec     sp
04F7 1581      1216            dec     sp
04F9           1217   ;        robot.c:155: currentstate = 1;
04F9 75F001    1218            mov     _currentstate,#0x01
04FC           1219   ;        robot.c:156: currentcmd = 0;
04FC 753000    1220            mov     _currentcmd,#0x00
04FF           1221   ;        robot.c:157: break;
04FF 020100    1222            ljmp    L002045?
0502           1223   ;        robot.c:160: case CMD_REVERSE:
0502           1224   L002039?:
0502           1225   ;        robot.c:162: printf("Reverse Reverse!\n");
0502 7480      1226            mov     a,#__str_7
0504 C0E0      1227            push    acc
0506 74A6      1228            mov     a,#(__str_7 >> 8)
0508 C0E0      1229            push    acc
050A 7480      1230            mov     a,#0x80
050C C0E0      1231            push    acc
050E 120100    1232            lcall   _printf
0511 1581      1233            dec     sp
0513 1581      1234            dec     sp
0515 1581      1235            dec     sp
0517           1236   ;        robot.c:163: currentstate = 2;
0517 75F002    1237            mov     _currentstate,#0x02
051A           1238   ;        robot.c:164: currentcmd = 0;
051A 753000    1239            mov     _currentcmd,#0x00
051D           1240   ;        robot.c:165: break;
051D 020100    1241            ljmp    L002045?
0520           1242   ;        robot.c:168: case CMD_STOP:
0520           1243   L002040?:
0520           1244   ;        robot.c:170: printf("HALT peasants!\n");
0520 74C0      1245            mov     a,#__str_8
0522 C0E0      1246            push    acc
0524 74A6      1247            mov     a,#(__str_8 >> 8)
0526 C0E0      1248            push    acc
0528 7480      1249            mov     a,#0x80
052A C0E0      1250            push    acc
052C 120100    1251            lcall   _printf
052F 1581      1252            dec     sp
0531 1581      1253            dec     sp
0533 1581      1254            dec     sp
0535           1255   ;        robot.c:171: currentstate = 3;
0535 75F003    1256            mov     _currentstate,#0x03
0538           1257   ;        robot.c:172: currentcmd = 0;
0538 753000    1258            mov     _currentcmd,#0x00
053B           1259   ;        robot.c:173: break;
053B 020100    1260            ljmp    L002045?
053E           1261   ;        robot.c:176: case CMD_UTURN:
053E           1262   L002041?:
053E           1263   ;        robot.c:177: uturn();
053E 120100    1264            lcall   _uturn
0541           1265   ;        robot.c:178: printf("UTURN\n");
0541 7400      1266            mov     a,#__str_9
0543 C0E0      1267            push    acc
0545 74A7      1268            mov     a,#(__str_9 >> 8)
0547 C0E0      1269            push    acc
0549 7480      1270            mov     a,#0x80
054B C0E0      1271            push    acc
054D 120100    1272            lcall   _printf
0550 1581      1273            dec     sp
0552 1581      1274            dec     sp
0554 1581      1275            dec     sp
0556           1276   ;        robot.c:179: currentcmd = 0;
0556 753000    1277            mov     _currentcmd,#0x00
0559           1278   ;        robot.c:180: break;
0559 020100    1279            ljmp    L002045?
055C           1280   ;        robot.c:183: default: 
055C           1281   L002042?:
055C           1282   ;        robot.c:184: currentstate = 1;
055C 75F001    1283            mov     _currentstate,#0x01
055F           1284   ;        robot.c:185: }
055F 020100    1285            ljmp    L002045?
0562           1286   ;------------------------------------------------------------
0562           1287   ;Allocation info for local variables in function 'Timer2_ISR'
0562           1288   ;------------------------------------------------------------
0562           1289   ;------------------------------------------------------------
0562           1290   ;        robot.c:189: void Timer2_ISR (void) interrupt 5 {
0562           1291   ;        -----------------------------------------
0562           1292   ;         function Timer2_ISR
0562           1293   ;        -----------------------------------------
0562           1294   _Timer2_ISR:
0562 C0E0      1295            push    acc
0564 C0F0      1296            push    b
0566 C0D0      1297            push    psw
0568 75D000    1298            mov     psw,#0x00
056B           1299   ;        robot.c:190: TF2H = 0; // Clear Timer2 interrupt flag
056B C2CF      1300            clr     _TF2H
056D           1301   ;        robot.c:192: pwm_count++;
056D 0520      1302            inc     _pwm_count
056F           1303   ;        robot.c:193: if(pwm_count>100) pwm_count=0;
056F C3        1304            clr     c
0570 74E4      1305            mov     a,#(0x64 ^ 0x80)
0572 8520F0    1306            mov     b,_pwm_count
0575 63F080    1307            xrl     b,#0x80
0578 95F0      1308            subb    a,b
057A 5001      1309            jnc     L003002?
057C 752000    1310            mov     _pwm_count,#0x00
057F           1311   L003002?:
057F           1312   ;        robot.c:196: MOTOR_LEFT0 = pwm_count > pwm_Left0 ? 0 : 1; //p1.5
057F C3        1313            clr     c
0580 E570      1314            mov     a,_pwm_Left0
0582 6480      1315            xrl     a,#0x80
0584 8520F0    1316            mov     b,_pwm_count
0587 63F080    1317            xrl     b,#0x80
058A 95F0      1318            subb    a,b
058C 9268      1319            mov  _Timer2_ISR_sloc0_1_0,c
058E B3        1320            cpl     c
058F 9295      1321            mov     _P1_5,c
0591           1322   ;        robot.c:197: MOTOR_LEFT1 = pwm_count > pwm_Left1 ? 0 : 1; //p1.6
0591 C3        1323            clr     c
0592 E530      1324            mov     a,_pwm_Left1
0594 6480      1325            xrl     a,#0x80
0596 8520F0    1326            mov     b,_pwm_count
0599 63F080    1327            xrl     b,#0x80
059C 95F0      1328            subb    a,b
059E 9268      1329            mov  _Timer2_ISR_sloc0_1_0,c
05A0 B3        1330            cpl     c
05A1 9296      1331            mov     _P1_6,c
05A3           1332   ;        robot.c:198: MOTOR_RIGHT0 = pwm_count > pwm_Right0 ? 0 : 1; //p2.0
05A3 C3        1333            clr     c
05A4 E5F0      1334            mov     a,_pwm_Right0
05A6 6480      1335            xrl     a,#0x80
05A8 8520F0    1336            mov     b,_pwm_count
05AB 63F080    1337            xrl     b,#0x80
05AE 95F0      1338            subb    a,b
05B0 9268      1339            mov  _Timer2_ISR_sloc0_1_0,c
05B2 B3        1340            cpl     c
05B3 92A0      1341            mov     _P2_0,c
05B5           1342   ;        robot.c:199: MOTOR_RIGHT1 = pwm_count > pwm_Right1 ? 0 : 1; //p2.1
05B5 C3        1343            clr     c
05B6 E5B0      1344            mov     a,_pwm_Right1
05B8 6480      1345            xrl     a,#0x80
05BA 8520F0    1346            mov     b,_pwm_count
05BD 63F080    1347            xrl     b,#0x80
05C0 95F0      1348            subb    a,b
05C2 9268      1349            mov  _Timer2_ISR_sloc0_1_0,c
05C4 B3        1350            cpl     c
05C5 92A1      1351            mov     _P2_1,c
05C7 D0D0      1352            pop     psw
05C9 D0F0      1353            pop     b
05CB D0E0      1354            pop     acc
05CD 32        1355            reti
05CE           1356   ;        eliminated unneeded push/pop dpl
05CE           1357   ;        eliminated unneeded push/pop dph
05CE           1358   ;------------------------------------------------------------
05CE           1359   ;Allocation info for local variables in function 'readData'
05CE           1360   ;------------------------------------------------------------
05CE           1361   ;command                   Allocated to registers r2 
05CE           1362   ;------------------------------------------------------------
05CE           1363   ;        robot.c:292: unsigned char readData(void) {
05CE           1364   ;        -----------------------------------------
05CE           1365   ;         function readData
05CE           1366   ;        -----------------------------------------
05CE           1367   _readData:
05CE           1368   ;        robot.c:293: unsigned char command = 0;
05CE 7A00      1369            mov     r2,#0x00
05D0           1370   ;        robot.c:294: if (!COMMAND_PIN) {
05D0 3091C0    1371            jnb     _P1_1,L004024?
05D3 020100    1372            ljmp    L004008?
05D6           1373   L004024?:
05D6           1374   ;        robot.c:295: while (!COMMAND_PIN);
05D6           1375   L004001?:
05D6 309140    1376            jnb     _P1_1,L004001?
05D9           1377   ;        robot.c:296: P1_4 = 1;
05D9 D294      1378            setb    _P1_4
05DB           1379   ;        robot.c:297: waitms((int)(CMDFRQ + CMDFRQ/2));
05DB 900060    1380            mov     dptr,#0x0060
05DE 120100    1381            lcall   _waitms
05E1           1382   ;        robot.c:298: P1_4 = 0;
05E1 C294      1383            clr     _P1_4
05E3           1384   ;        robot.c:299: command |= COMMAND_PIN<<2;
05E3 A291      1385            mov     c,_P1_1
05E5 E4        1386            clr     a
05E6 33        1387            rlc     a
05E7 25E0      1388            add     a,acc
05E9 25E0      1389            add     a,acc
05EB FA        1390            mov     r2,a
05EC           1391   ;        robot.c:300: waitms(CMDFRQ);
05EC 900040    1392            mov     dptr,#0x0040
05EF C002      1393            push    ar2
05F1 120100    1394            lcall   _waitms
05F4 D002      1395            pop     ar2
05F6           1396   ;        robot.c:301: P1_4 = 1;
05F6 D294      1397            setb    _P1_4
05F8           1398   ;        robot.c:302: command |= COMMAND_PIN<<1;
05F8 A291      1399            mov     c,_P1_1
05FA E4        1400            clr     a
05FB 33        1401            rlc     a
05FC 25E0      1402            add     a,acc
05FE 4202      1403            orl     ar2,a
0600           1404   ;        robot.c:303: waitms(CMDFRQ);
0600 900040    1405            mov     dptr,#0x0040
0603 C002      1406            push    ar2
0605 120100    1407            lcall   _waitms
0608 D002      1408            pop     ar2
060A           1409   ;        robot.c:304: P1_4 = 0;
060A C294      1410            clr     _P1_4
060C           1411   ;        robot.c:305: command |= COMMAND_PIN;
060C A291      1412            mov     c,_P1_1
060E E4        1413            clr     a
060F 33        1414            rlc     a
0610 FB        1415            mov     r3,a
0611 4202      1416            orl     ar2,a
0613           1417   ;        robot.c:306: while (!COMMAND_PIN);
0613           1418   L004004?:
0613 309180    1419            jnb     _P1_1,L004004?
0616           1420   ;        robot.c:310: (command & 0x01) ? '1' : '0');
0616 EA        1421            mov     a,r2
0617 30E0C0    1422            jnb     acc.0,L004011?
061A 7B31      1423            mov     r3,#0x31
061C 8001      1424            sjmp    L004012?
061E           1425   L004011?:
061E 7B30      1426            mov     r3,#0x30
0620           1427   L004012?:
0620 EB        1428            mov     a,r3
0621 33        1429            rlc     a
0622 95E0      1430            subb    a,acc
0624 FC        1431            mov     r4,a
0625           1432   ;        robot.c:309: (command & 0x02) ? '1' : '0',
0625 EA        1433            mov     a,r2
0626 30E140    1434            jnb     acc.1,L004013?
0629 7D31      1435            mov     r5,#0x31
062B 8001      1436            sjmp    L004014?
062D           1437   L004013?:
062D 7D30      1438            mov     r5,#0x30
062F           1439   L004014?:
062F ED        1440            mov     a,r5
0630 33        1441            rlc     a
0631 95E0      1442            subb    a,acc
0633 FE        1443            mov     r6,a
0634           1444   ;        robot.c:308: (command & 0x04) ? '1' : '0',
0634 EA        1445            mov     a,r2
0635 30E2C0    1446            jnb     acc.2,L004015?
0638 7F31      1447            mov     r7,#0x31
063A 8001      1448            sjmp    L004016?
063C           1449   L004015?:
063C 7F30      1450            mov     r7,#0x30
063E           1451   L004016?:
063E EF        1452            mov     a,r7
063F 33        1453            rlc     a
0640 95E0      1454            subb    a,acc
0642 F8        1455            mov     r0,a
0643           1456   ;        robot.c:307: printf("\nCommand received: 0b_0%c%c%c\n", 
0643 C002      1457            push    ar2
0645 C003      1458            push    ar3
0647 C004      1459            push    ar4
0649 C005      1460            push    ar5
064B C006      1461            push    ar6
064D C007      1462            push    ar7
064F C000      1463            push    ar0
0651 7440      1464            mov     a,#__str_10
0653 C0E0      1465            push    acc
0655 74AA      1466            mov     a,#(__str_10 >> 8)
0657 C0E0      1467            push    acc
0659 7480      1468            mov     a,#0x80
065B C0E0      1469            push    acc
065D 120100    1470            lcall   _printf
0660 E581      1471            mov     a,sp
0662 24F7      1472            add     a,#0xf7
0664 F581      1473            mov     sp,a
0666 D002      1474            pop     ar2
0668           1475   L004008?:
0668           1476   ;        robot.c:312: return command;
0668 8A82      1477            mov     dpl,r2
066A 22        1478            ret
066B           1479   ;------------------------------------------------------------
066B           1480   ;Allocation info for local variables in function 'linetrack'
066B           1481   ;------------------------------------------------------------
066B           1482   ;forwardbackward           Allocated to registers r2 r3 
066B           1483   ;vleft                     Allocated with name '_linetrack_vleft_1_87'
066B           1484   ;vright                    Allocated with name '_linetrack_vright_1_87'
066B           1485   ;sloc0                     Allocated with name '_linetrack_sloc0_1_0'
066B           1486   ;sloc1                     Allocated with name '_linetrack_sloc1_1_0'
066B           1487   ;------------------------------------------------------------
066B           1488   ;        robot.c:319: void linetrack (int forwardbackward) {
066B           1489   ;        -----------------------------------------
066B           1490   ;         function linetrack
066B           1491   ;        -----------------------------------------
066B           1492   _linetrack:
066B AA82      1493            mov     r2,dpl
066D AB83      1494            mov     r3,dph
066F           1495   ;        robot.c:327: if (forwardbackward == 0) {
066F EA        1496            mov     a,r2
0670 4B        1497            orl     a,r3
0671 6001      1498            jz      L005010?
0673 020100    1499            ljmp    L005004?
0676           1500   L005010?:
0676           1501   ;        robot.c:328: vleft=Volts_at_Pin(TANK_FL);
0676 75820B    1502            mov     dpl,#0x0B
0679 120100    1503            lcall   _Volts_at_Pin
067C 8582B8    1504            mov     _linetrack_vleft_1_87,dpl
067F 8583B9    1505            mov     (_linetrack_vleft_1_87 + 1),dph
0682 85F0BA    1506            mov     (_linetrack_vleft_1_87 + 2),b
0685 F5BB      1507            mov     (_linetrack_vleft_1_87 + 3),a
0687           1508   ;        robot.c:329: vright=Volts_at_Pin(TANK_FR);
0687 75820C    1509            mov     dpl,#0x0C
068A 120100    1510            lcall   _Volts_at_Pin
068D 858208    1511            mov     _linetrack_vright_1_87,dpl
0690 858309    1512            mov     (_linetrack_vright_1_87 + 1),dph
0693 85F00A    1513            mov     (_linetrack_vright_1_87 + 2),b
0696 F50B      1514            mov     (_linetrack_vright_1_87 + 3),a
0698           1515   ;        robot.c:332: pwm_Left0 = -1;
0698 7570FF    1516            mov     _pwm_Left0,#0xFF
069B           1517   ;        robot.c:333: pwm_Left1 = vright*vright*75/(vright*vright+vleft*vleft);
069B C008      1518            push    _linetrack_vright_1_87
069D C009      1519            push    (_linetrack_vright_1_87 + 1)
069F C00A      1520            push    (_linetrack_vright_1_87 + 2)
06A1 C00B      1521            push    (_linetrack_vright_1_87 + 3)
06A3 850882    1522            mov     dpl,_linetrack_vright_1_87
06A6 850983    1523            mov     dph,(_linetrack_vright_1_87 + 1)
06A9 850AF0    1524            mov     b,(_linetrack_vright_1_87 + 2)
06AC E50B      1525            mov     a,(_linetrack_vright_1_87 + 3)
06AE 120100    1526            lcall   ___fsmul
06B1 AC82      1527            mov     r4,dpl
06B3 AD83      1528            mov     r5,dph
06B5 AEF0      1529            mov     r6,b
06B7 FF        1530            mov     r7,a
06B8 E581      1531            mov     a,sp
06BA 24FC      1532            add     a,#0xfc
06BC F581      1533            mov     sp,a
06BE C004      1534            push    ar4
06C0 C005      1535            push    ar5
06C2 C006      1536            push    ar6
06C4 C007      1537            push    ar7
06C6 900000    1538            mov     dptr,#0x0000
06C9 75F096    1539            mov     b,#0x96
06CC 7442      1540            mov     a,#0x42
06CE 120100    1541            lcall   ___fsmul
06D1 858258    1542            mov     _linetrack_sloc0_1_0,dpl
06D4 858359    1543            mov     (_linetrack_sloc0_1_0 + 1),dph
06D7 85F05A    1544            mov     (_linetrack_sloc0_1_0 + 2),b
06DA F55B      1545            mov     (_linetrack_sloc0_1_0 + 3),a
06DC E581      1546            mov     a,sp
06DE 24FC      1547            add     a,#0xfc
06E0 F581      1548            mov     sp,a
06E2 C008      1549            push    _linetrack_vright_1_87
06E4 C009      1550            push    (_linetrack_vright_1_87 + 1)
06E6 C00A      1551            push    (_linetrack_vright_1_87 + 2)
06E8 C00B      1552            push    (_linetrack_vright_1_87 + 3)
06EA 850882    1553            mov     dpl,_linetrack_vright_1_87
06ED 850983    1554            mov     dph,(_linetrack_vright_1_87 + 1)
06F0 850AF0    1555            mov     b,(_linetrack_vright_1_87 + 2)
06F3 E50B      1556            mov     a,(_linetrack_vright_1_87 + 3)
06F5 120100    1557            lcall   ___fsmul
06F8 8582A8    1558            mov     _linetrack_sloc1_1_0,dpl
06FB 8583A9    1559            mov     (_linetrack_sloc1_1_0 + 1),dph
06FE 85F0AA    1560            mov     (_linetrack_sloc1_1_0 + 2),b
0701 F5AB      1561            mov     (_linetrack_sloc1_1_0 + 3),a
0703 E581      1562            mov     a,sp
0705 24FC      1563            add     a,#0xfc
0707 F581      1564            mov     sp,a
0709 C0B8      1565            push    _linetrack_vleft_1_87
070B C0B9      1566            push    (_linetrack_vleft_1_87 + 1)
070D C0BA      1567            push    (_linetrack_vleft_1_87 + 2)
070F C0BB      1568            push    (_linetrack_vleft_1_87 + 3)
0711 85B882    1569            mov     dpl,_linetrack_vleft_1_87
0714 85B983    1570            mov     dph,(_linetrack_vleft_1_87 + 1)
0717 85BAF0    1571            mov     b,(_linetrack_vleft_1_87 + 2)
071A E5BB      1572            mov     a,(_linetrack_vleft_1_87 + 3)
071C 120100    1573            lcall   ___fsmul
071F AE82      1574            mov     r6,dpl
0721 AF83      1575            mov     r7,dph
0723 ACF0      1576            mov     r4,b
0725 FD        1577            mov     r5,a
0726 E581      1578            mov     a,sp
0728 24FC      1579            add     a,#0xfc
072A F581      1580            mov     sp,a
072C C006      1581            push    ar6
072E C007      1582            push    ar7
0730 C004      1583            push    ar4
0732 C005      1584            push    ar5
0734 85A882    1585            mov     dpl,_linetrack_sloc1_1_0
0737 85A983    1586            mov     dph,(_linetrack_sloc1_1_0 + 1)
073A 85AAF0    1587            mov     b,(_linetrack_sloc1_1_0 + 2)
073D E5AB      1588            mov     a,(_linetrack_sloc1_1_0 + 3)
073F 120100    1589            lcall   ___fsadd
0742 AC82      1590            mov     r4,dpl
0744 AD83      1591            mov     r5,dph
0746 AEF0      1592            mov     r6,b
0748 FF        1593            mov     r7,a
0749 E581      1594            mov     a,sp
074B 24FC      1595            add     a,#0xfc
074D F581      1596            mov     sp,a
074F C004      1597            push    ar4
0751 C005      1598            push    ar5
0753 C006      1599            push    ar6
0755 C007      1600            push    ar7
0757 855882    1601            mov     dpl,_linetrack_sloc0_1_0
075A 855983    1602            mov     dph,(_linetrack_sloc0_1_0 + 1)
075D 855AF0    1603            mov     b,(_linetrack_sloc0_1_0 + 2)
0760 E55B      1604            mov     a,(_linetrack_sloc0_1_0 + 3)
0762 120100    1605            lcall   ___fsdiv
0765 AC82      1606            mov     r4,dpl
0767 AD83      1607            mov     r5,dph
0769 AEF0      1608            mov     r6,b
076B FF        1609            mov     r7,a
076C E581      1610            mov     a,sp
076E 24FC      1611            add     a,#0xfc
0770 F581      1612            mov     sp,a
0772 8C82      1613            mov     dpl,r4
0774 8D83      1614            mov     dph,r5
0776 8EF0      1615            mov     b,r6
0778 EF        1616            mov     a,r7
0779 120100    1617            lcall   ___fs2schar
077C 858230    1618            mov     _pwm_Left1,dpl
077F           1619   ;        robot.c:334: pwm_Right1 = -1;
077F 75B0FF    1620            mov     _pwm_Right1,#0xFF
0782           1621   ;        robot.c:335: pwm_Right0 = vleft*vleft*75/(vright*vright+vleft*vleft);
0782 C0B8      1622            push    _linetrack_vleft_1_87
0784 C0B9      1623            push    (_linetrack_vleft_1_87 + 1)
0786 C0BA      1624            push    (_linetrack_vleft_1_87 + 2)
0788 C0BB      1625            push    (_linetrack_vleft_1_87 + 3)
078A 85B882    1626            mov     dpl,_linetrack_vleft_1_87
078D 85B983    1627            mov     dph,(_linetrack_vleft_1_87 + 1)
0790 85BAF0    1628            mov     b,(_linetrack_vleft_1_87 + 2)
0793 E5BB      1629            mov     a,(_linetrack_vleft_1_87 + 3)
0795 120100    1630            lcall   ___fsmul
0798 AC82      1631            mov     r4,dpl
079A AD83      1632            mov     r5,dph
079C AEF0      1633            mov     r6,b
079E FF        1634            mov     r7,a
079F E581      1635            mov     a,sp
07A1 24FC      1636            add     a,#0xfc
07A3 F581      1637            mov     sp,a
07A5 C004      1638            push    ar4
07A7 C005      1639            push    ar5
07A9 C006      1640            push    ar6
07AB C007      1641            push    ar7
07AD 900000    1642            mov     dptr,#0x0000
07B0 75F096    1643            mov     b,#0x96
07B3 7442      1644            mov     a,#0x42
07B5 120100    1645            lcall   ___fsmul
07B8 8582A8    1646            mov     _linetrack_sloc1_1_0,dpl
07BB 8583A9    1647            mov     (_linetrack_sloc1_1_0 + 1),dph
07BE 85F0AA    1648            mov     (_linetrack_sloc1_1_0 + 2),b
07C1 F5AB      1649            mov     (_linetrack_sloc1_1_0 + 3),a
07C3 E581      1650            mov     a,sp
07C5 24FC      1651            add     a,#0xfc
07C7 F581      1652            mov     sp,a
07C9 C008      1653            push    _linetrack_vright_1_87
07CB C009      1654            push    (_linetrack_vright_1_87 + 1)
07CD C00A      1655            push    (_linetrack_vright_1_87 + 2)
07CF C00B      1656            push    (_linetrack_vright_1_87 + 3)
07D1 850882    1657            mov     dpl,_linetrack_vright_1_87
07D4 850983    1658            mov     dph,(_linetrack_vright_1_87 + 1)
07D7 850AF0    1659            mov     b,(_linetrack_vright_1_87 + 2)
07DA E50B      1660            mov     a,(_linetrack_vright_1_87 + 3)
07DC 120100    1661            lcall   ___fsmul
07DF 858258    1662            mov     _linetrack_sloc0_1_0,dpl
07E2 858359    1663            mov     (_linetrack_sloc0_1_0 + 1),dph
07E5 85F05A    1664            mov     (_linetrack_sloc0_1_0 + 2),b
07E8 F55B      1665            mov     (_linetrack_sloc0_1_0 + 3),a
07EA E581      1666            mov     a,sp
07EC 24FC      1667            add     a,#0xfc
07EE F581      1668            mov     sp,a
07F0 C0B8      1669            push    _linetrack_vleft_1_87
07F2 C0B9      1670            push    (_linetrack_vleft_1_87 + 1)
07F4 C0BA      1671            push    (_linetrack_vleft_1_87 + 2)
07F6 C0BB      1672            push    (_linetrack_vleft_1_87 + 3)
07F8 85B882    1673            mov     dpl,_linetrack_vleft_1_87
07FB 85B983    1674            mov     dph,(_linetrack_vleft_1_87 + 1)
07FE 85BAF0    1675            mov     b,(_linetrack_vleft_1_87 + 2)
0801 E5BB      1676            mov     a,(_linetrack_vleft_1_87 + 3)
0803 120100    1677            lcall   ___fsmul
0806 AE82      1678            mov     r6,dpl
0808 AF83      1679            mov     r7,dph
080A ACF0      1680            mov     r4,b
080C FD        1681            mov     r5,a
080D E581      1682            mov     a,sp
080F 24FC      1683            add     a,#0xfc
0811 F581      1684            mov     sp,a
0813 C006      1685            push    ar6
0815 C007      1686            push    ar7
0817 C004      1687            push    ar4
0819 C005      1688            push    ar5
081B 855882    1689            mov     dpl,_linetrack_sloc0_1_0
081E 855983    1690            mov     dph,(_linetrack_sloc0_1_0 + 1)
0821 855AF0    1691            mov     b,(_linetrack_sloc0_1_0 + 2)
0824 E55B      1692            mov     a,(_linetrack_sloc0_1_0 + 3)
0826 120100    1693            lcall   ___fsadd
0829 AC82      1694            mov     r4,dpl
082B AD83      1695            mov     r5,dph
082D AEF0      1696            mov     r6,b
082F FF        1697            mov     r7,a
0830 E581      1698            mov     a,sp
0832 24FC      1699            add     a,#0xfc
0834 F581      1700            mov     sp,a
0836 C004      1701            push    ar4
0838 C005      1702            push    ar5
083A C006      1703            push    ar6
083C C007      1704            push    ar7
083E 85A882    1705            mov     dpl,_linetrack_sloc1_1_0
0841 85A983    1706            mov     dph,(_linetrack_sloc1_1_0 + 1)
0844 85AAF0    1707            mov     b,(_linetrack_sloc1_1_0 + 2)
0847 E5AB      1708            mov     a,(_linetrack_sloc1_1_0 + 3)
0849 120100    1709            lcall   ___fsdiv
084C AC82      1710            mov     r4,dpl
084E AD83      1711            mov     r5,dph
0850 AEF0      1712            mov     r6,b
0852 FF        1713            mov     r7,a
0853 E581      1714            mov     a,sp
0855 24FC      1715            add     a,#0xfc
0857 F581      1716            mov     sp,a
0859 8C82      1717            mov     dpl,r4
085B 8D83      1718            mov     dph,r5
085D 8EF0      1719            mov     b,r6
085F EF        1720            mov     a,r7
0860 120100    1721            lcall   ___fs2schar
0863 8582F0    1722            mov     _pwm_Right0,dpl
0866 22        1723            ret
0867           1724   L005004?:
0867           1725   ;        robot.c:336: } else if (forwardbackward == 1) {
0867 BA0100    1726            cjne    r2,#0x01,L005011?
086A BB0000    1727            cjne    r3,#0x00,L005011?
086D 8001      1728            sjmp    L005012?
086F           1729   L005011?:
086F 22        1730            ret
0870           1731   L005012?:
0870           1732   ;        robot.c:339: vleft=Volts_at_Pin(TANK_RL);
0870 75820D    1733            mov     dpl,#0x0D
0873 120100    1734            lcall   _Volts_at_Pin
0876 8582B8    1735            mov     _linetrack_vleft_1_87,dpl
0879 8583B9    1736            mov     (_linetrack_vleft_1_87 + 1),dph
087C 85F0BA    1737            mov     (_linetrack_vleft_1_87 + 2),b
087F F5BB      1738            mov     (_linetrack_vleft_1_87 + 3),a
0881           1739   ;        robot.c:340: vright=Volts_at_Pin(TANK_RR);
0881 75820E    1740            mov     dpl,#0x0E
0884 120100    1741            lcall   _Volts_at_Pin
0887 858208    1742            mov     _linetrack_vright_1_87,dpl
088A 858309    1743            mov     (_linetrack_vright_1_87 + 1),dph
088D 85F00A    1744            mov     (_linetrack_vright_1_87 + 2),b
0890 F50B      1745            mov     (_linetrack_vright_1_87 + 3),a
0892           1746   ;        robot.c:343: pwm_Left1 = -1;
0892 7530FF    1747            mov     _pwm_Left1,#0xFF
0895           1748   ;        robot.c:344: pwm_Left0 = vright*vright*75/(vright*vright+vleft*vleft);
0895 C008      1749            push    _linetrack_vright_1_87
0897 C009      1750            push    (_linetrack_vright_1_87 + 1)
0899 C00A      1751            push    (_linetrack_vright_1_87 + 2)
089B C00B      1752            push    (_linetrack_vright_1_87 + 3)
089D 850882    1753            mov     dpl,_linetrack_vright_1_87
08A0 850983    1754            mov     dph,(_linetrack_vright_1_87 + 1)
08A3 850AF0    1755            mov     b,(_linetrack_vright_1_87 + 2)
08A6 E50B      1756            mov     a,(_linetrack_vright_1_87 + 3)
08A8 120100    1757            lcall   ___fsmul
08AB AA82      1758            mov     r2,dpl
08AD AB83      1759            mov     r3,dph
08AF ACF0      1760            mov     r4,b
08B1 FD        1761            mov     r5,a
08B2 E581      1762            mov     a,sp
08B4 24FC      1763            add     a,#0xfc
08B6 F581      1764            mov     sp,a
08B8 C002      1765            push    ar2
08BA C003      1766            push    ar3
08BC C004      1767            push    ar4
08BE C005      1768            push    ar5
08C0 900000    1769            mov     dptr,#0x0000
08C3 75F096    1770            mov     b,#0x96
08C6 7442      1771            mov     a,#0x42
08C8 120100    1772            lcall   ___fsmul
08CB AA82      1773            mov     r2,dpl
08CD AB83      1774            mov     r3,dph
08CF ACF0      1775            mov     r4,b
08D1 FD        1776            mov     r5,a
08D2 E581      1777            mov     a,sp
08D4 24FC      1778            add     a,#0xfc
08D6 F581      1779            mov     sp,a
08D8 C002      1780            push    ar2
08DA C003      1781            push    ar3
08DC C004      1782            push    ar4
08DE C005      1783            push    ar5
08E0 C008      1784            push    _linetrack_vright_1_87
08E2 C009      1785            push    (_linetrack_vright_1_87 + 1)
08E4 C00A      1786            push    (_linetrack_vright_1_87 + 2)
08E6 C00B      1787            push    (_linetrack_vright_1_87 + 3)
08E8 850882    1788            mov     dpl,_linetrack_vright_1_87
08EB 850983    1789            mov     dph,(_linetrack_vright_1_87 + 1)
08EE 850AF0    1790            mov     b,(_linetrack_vright_1_87 + 2)
08F1 E50B      1791            mov     a,(_linetrack_vright_1_87 + 3)
08F3 120100    1792            lcall   ___fsmul
08F6 8582A8    1793            mov     _linetrack_sloc1_1_0,dpl
08F9 8583A9    1794            mov     (_linetrack_sloc1_1_0 + 1),dph
08FC 85F0AA    1795            mov     (_linetrack_sloc1_1_0 + 2),b
08FF F5AB      1796            mov     (_linetrack_sloc1_1_0 + 3),a
0901 E581      1797            mov     a,sp
0903 24FC      1798            add     a,#0xfc
0905 F581      1799            mov     sp,a
0907 C0B8      1800            push    _linetrack_vleft_1_87
0909 C0B9      1801            push    (_linetrack_vleft_1_87 + 1)
090B C0BA      1802            push    (_linetrack_vleft_1_87 + 2)
090D C0BB      1803            push    (_linetrack_vleft_1_87 + 3)
090F 85B882    1804            mov     dpl,_linetrack_vleft_1_87
0912 85B983    1805            mov     dph,(_linetrack_vleft_1_87 + 1)
0915 85BAF0    1806            mov     b,(_linetrack_vleft_1_87 + 2)
0918 E5BB      1807            mov     a,(_linetrack_vleft_1_87 + 3)
091A 120100    1808            lcall   ___fsmul
091D AE82      1809            mov     r6,dpl
091F AF83      1810            mov     r7,dph
0921 A8F0      1811            mov     r0,b
0923 F9        1812            mov     r1,a
0924 E581      1813            mov     a,sp
0926 24FC      1814            add     a,#0xfc
0928 F581      1815            mov     sp,a
092A C006      1816            push    ar6
092C C007      1817            push    ar7
092E C000      1818            push    ar0
0930 C001      1819            push    ar1
0932 85A882    1820            mov     dpl,_linetrack_sloc1_1_0
0935 85A983    1821            mov     dph,(_linetrack_sloc1_1_0 + 1)
0938 85AAF0    1822            mov     b,(_linetrack_sloc1_1_0 + 2)
093B E5AB      1823            mov     a,(_linetrack_sloc1_1_0 + 3)
093D 120100    1824            lcall   ___fsadd
0940 AE82      1825            mov     r6,dpl
0942 AF83      1826            mov     r7,dph
0944 A8F0      1827            mov     r0,b
0946 F9        1828            mov     r1,a
0947 E581      1829            mov     a,sp
0949 24FC      1830            add     a,#0xfc
094B F581      1831            mov     sp,a
094D D005      1832            pop     ar5
094F D004      1833            pop     ar4
0951 D003      1834            pop     ar3
0953 D002      1835            pop     ar2
0955 C006      1836            push    ar6
0957 C007      1837            push    ar7
0959 C000      1838            push    ar0
095B C001      1839            push    ar1
095D 8A82      1840            mov     dpl,r2
095F 8B83      1841            mov     dph,r3
0961 8CF0      1842            mov     b,r4
0963 ED        1843            mov     a,r5
0964 120100    1844            lcall   ___fsdiv
0967 AA82      1845            mov     r2,dpl
0969 AB83      1846            mov     r3,dph
096B ACF0      1847            mov     r4,b
096D FD        1848            mov     r5,a
096E E581      1849            mov     a,sp
0970 24FC      1850            add     a,#0xfc
0972 F581      1851            mov     sp,a
0974 8A82      1852            mov     dpl,r2
0976 8B83      1853            mov     dph,r3
0978 8CF0      1854            mov     b,r4
097A ED        1855            mov     a,r5
097B 120100    1856            lcall   ___fs2schar
097E 858270    1857            mov     _pwm_Left0,dpl
0981           1858   ;        robot.c:345: pwm_Right0 = -1;
0981 75F0FF    1859            mov     _pwm_Right0,#0xFF
0984           1860   ;        robot.c:346: pwm_Right1 = vleft*vleft*75/(vright*vright+vleft*vleft);
0984 C0B8      1861            push    _linetrack_vleft_1_87
0986 C0B9      1862            push    (_linetrack_vleft_1_87 + 1)
0988 C0BA      1863            push    (_linetrack_vleft_1_87 + 2)
098A C0BB      1864            push    (_linetrack_vleft_1_87 + 3)
098C 85B882    1865            mov     dpl,_linetrack_vleft_1_87
098F 85B983    1866            mov     dph,(_linetrack_vleft_1_87 + 1)
0992 85BAF0    1867            mov     b,(_linetrack_vleft_1_87 + 2)
0995 E5BB      1868            mov     a,(_linetrack_vleft_1_87 + 3)
0997 120100    1869            lcall   ___fsmul
099A AA82      1870            mov     r2,dpl
099C AB83      1871            mov     r3,dph
099E ACF0      1872            mov     r4,b
09A0 FD        1873            mov     r5,a
09A1 E581      1874            mov     a,sp
09A3 24FC      1875            add     a,#0xfc
09A5 F581      1876            mov     sp,a
09A7 C002      1877            push    ar2
09A9 C003      1878            push    ar3
09AB C004      1879            push    ar4
09AD C005      1880            push    ar5
09AF 900000    1881            mov     dptr,#0x0000
09B2 75F096    1882            mov     b,#0x96
09B5 7442      1883            mov     a,#0x42
09B7 120100    1884            lcall   ___fsmul
09BA AA82      1885            mov     r2,dpl
09BC AB83      1886            mov     r3,dph
09BE ACF0      1887            mov     r4,b
09C0 FD        1888            mov     r5,a
09C1 E581      1889            mov     a,sp
09C3 24FC      1890            add     a,#0xfc
09C5 F581      1891            mov     sp,a
09C7 C002      1892            push    ar2
09C9 C003      1893            push    ar3
09CB C004      1894            push    ar4
09CD C005      1895            push    ar5
09CF C008      1896            push    _linetrack_vright_1_87
09D1 C009      1897            push    (_linetrack_vright_1_87 + 1)
09D3 C00A      1898            push    (_linetrack_vright_1_87 + 2)
09D5 C00B      1899            push    (_linetrack_vright_1_87 + 3)
09D7 850882    1900            mov     dpl,_linetrack_vright_1_87
09DA 850983    1901            mov     dph,(_linetrack_vright_1_87 + 1)
09DD 850AF0    1902            mov     b,(_linetrack_vright_1_87 + 2)
09E0 E50B      1903            mov     a,(_linetrack_vright_1_87 + 3)
09E2 120100    1904            lcall   ___fsmul
09E5 8582A8    1905            mov     _linetrack_sloc1_1_0,dpl
09E8 8583A9    1906            mov     (_linetrack_sloc1_1_0 + 1),dph
09EB 85F0AA    1907            mov     (_linetrack_sloc1_1_0 + 2),b
09EE F5AB      1908            mov     (_linetrack_sloc1_1_0 + 3),a
09F0 E581      1909            mov     a,sp
09F2 24FC      1910            add     a,#0xfc
09F4 F581      1911            mov     sp,a
09F6 C0B8      1912            push    _linetrack_vleft_1_87
09F8 C0B9      1913            push    (_linetrack_vleft_1_87 + 1)
09FA C0BA      1914            push    (_linetrack_vleft_1_87 + 2)
09FC C0BB      1915            push    (_linetrack_vleft_1_87 + 3)
09FE 85B882    1916            mov     dpl,_linetrack_vleft_1_87
0A01 85B983    1917            mov     dph,(_linetrack_vleft_1_87 + 1)
0A04 85BAF0    1918            mov     b,(_linetrack_vleft_1_87 + 2)
0A07 E5BB      1919            mov     a,(_linetrack_vleft_1_87 + 3)
0A09 120100    1920            lcall   ___fsmul
0A0C AE82      1921            mov     r6,dpl
0A0E AF83      1922            mov     r7,dph
0A10 A8F0      1923            mov     r0,b
0A12 F9        1924            mov     r1,a
0A13 E581      1925            mov     a,sp
0A15 24FC      1926            add     a,#0xfc
0A17 F581      1927            mov     sp,a
0A19 C006      1928            push    ar6
0A1B C007      1929            push    ar7
0A1D C000      1930            push    ar0
0A1F C001      1931            push    ar1
0A21 85A882    1932            mov     dpl,_linetrack_sloc1_1_0
0A24 85A983    1933            mov     dph,(_linetrack_sloc1_1_0 + 1)
0A27 85AAF0    1934            mov     b,(_linetrack_sloc1_1_0 + 2)
0A2A E5AB      1935            mov     a,(_linetrack_sloc1_1_0 + 3)
0A2C 120100    1936            lcall   ___fsadd
0A2F AE82      1937            mov     r6,dpl
0A31 AF83      1938            mov     r7,dph
0A33 A8F0      1939            mov     r0,b
0A35 F9        1940            mov     r1,a
0A36 E581      1941            mov     a,sp
0A38 24FC      1942            add     a,#0xfc
0A3A F581      1943            mov     sp,a
0A3C D005      1944            pop     ar5
0A3E D004      1945            pop     ar4
0A40 D003      1946            pop     ar3
0A42 D002      1947            pop     ar2
0A44 C006      1948            push    ar6
0A46 C007      1949            push    ar7
0A48 C000      1950            push    ar0
0A4A C001      1951            push    ar1
0A4C 8A82      1952            mov     dpl,r2
0A4E 8B83      1953            mov     dph,r3
0A50 8CF0      1954            mov     b,r4
0A52 ED        1955            mov     a,r5
0A53 120100    1956            lcall   ___fsdiv
0A56 AA82      1957            mov     r2,dpl
0A58 AB83      1958            mov     r3,dph
0A5A ACF0      1959            mov     r4,b
0A5C FD        1960            mov     r5,a
0A5D E581      1961            mov     a,sp
0A5F 24FC      1962            add     a,#0xfc
0A61 F581      1963            mov     sp,a
0A63 8A82      1964            mov     dpl,r2
0A65 8B83      1965            mov     dph,r3
0A67 8CF0      1966            mov     b,r4
0A69 ED        1967            mov     a,r5
0A6A 120100    1968            lcall   ___fs2schar
0A6D 8582B0    1969            mov     _pwm_Right1,dpl
0A70 22        1970            ret
0A71           1971   ;------------------------------------------------------------
0A71           1972   ;Allocation info for local variables in function 'stopcar'
0A71           1973   ;------------------------------------------------------------
0A71           1974   ;------------------------------------------------------------
0A71           1975   ;        robot.c:354: void stopcar(void) {
0A71           1976   ;        -----------------------------------------
0A71           1977   ;         function stopcar
0A71           1978   ;        -----------------------------------------
0A71           1979   _stopcar:
0A71           1980   ;        robot.c:356: pwm_Left1 = -1;
0A71 7530FF    1981            mov     _pwm_Left1,#0xFF
0A74           1982   ;        robot.c:357: pwm_Right1 = -1;
0A74 75B0FF    1983            mov     _pwm_Right1,#0xFF
0A77           1984   ;        robot.c:358: pwm_Left0 = -1;
0A77 7570FF    1985            mov     _pwm_Left0,#0xFF
0A7A           1986   ;        robot.c:359: pwm_Right0 = -1;
0A7A 75F0FF    1987            mov     _pwm_Right0,#0xFF
0A7D 22        1988            ret
0A7E           1989   ;------------------------------------------------------------
0A7E           1990   ;Allocation info for local variables in function 'turncar'
0A7E           1991   ;------------------------------------------------------------
0A7E           1992   ;leftright                 Allocated to registers r2 r3 
0A7E           1993   ;v                         Allocated with name '_turncar_v_1_93'
0A7E           1994   ;direction                 Allocated with name '_turncar_direction_1_93'
0A7E           1995   ;------------------------------------------------------------
0A7E           1996   ;        robot.c:365: void turncar (int leftright) {
0A7E           1997   ;        -----------------------------------------
0A7E           1998   ;         function turncar
0A7E           1999   ;        -----------------------------------------
0A7E           2000   _turncar:
0A7E AA82      2001            mov     r2,dpl
0A80 AB83      2002            mov     r3,dph
0A82           2003   ;        robot.c:374: pwm_Left0 = -1;
0A82 7570FF    2004            mov     _pwm_Left0,#0xFF
0A85           2005   ;        robot.c:375: pwm_Left1 = -1;
0A85 7530FF    2006            mov     _pwm_Left1,#0xFF
0A88           2007   ;        robot.c:376: pwm_Right0 = -1;
0A88 75F0FF    2008            mov     _pwm_Right0,#0xFF
0A8B           2009   ;        robot.c:377: pwm_Right1 = -1;
0A8B 75B0FF    2010            mov     _pwm_Right1,#0xFF
0A8E           2011   ;        robot.c:379: direction = currentstate - 1;
0A8E E5F0      2012            mov     a,_currentstate
0A90 14        2013            dec     a
0A91 F538      2014            mov     _turncar_direction_1_93,a
0A93           2015   ;        robot.c:382: if (leftright == 1) {
0A93 BA0180    2016            cjne    r2,#0x01,L007062?
0A96 BB0080    2017            cjne    r3,#0x00,L007062?
0A99 8001      2018            sjmp    L007063?
0A9B           2019   L007062?:
0A9B 020100    2020            ljmp    L007022?
0A9E           2021   L007063?:
0A9E           2022   ;        robot.c:384: pwm_Right0 = 100;
0A9E 75F064    2023            mov     _pwm_Right0,#0x64
0AA1           2024   ;        robot.c:387: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0AA1 E538      2025            mov     a,_turncar_direction_1_93
0AA3 6001      2026            jz      L007026?
0AA5 75820C    2027            mov     dpl,#0x0C
0AA8 120100    2028            lcall   _Volts_at_Pin
0AAB AC82      2029            mov     r4,dpl
0AAD AD83      2030            mov     r5,dph
0AAF AEF0      2031            mov     r6,b
0AB1 FF        2032            mov     r7,a
0AB2 8001      2033            sjmp    L007027?
0AB4           2034   L007026?:
0AB4 75820E    2035            mov     dpl,#0x0E
0AB7 120100    2036            lcall   _Volts_at_Pin
0ABA AC82      2037            mov     r4,dpl
0ABC AD83      2038            mov     r5,dph
0ABE AEF0      2039            mov     r6,b
0AC0 FF        2040            mov     r7,a
0AC1           2041   L007027?:
0AC1 8CE8      2042            mov     _turncar_v_1_93,r4
0AC3 8DE9      2043            mov     (_turncar_v_1_93 + 1),r5
0AC5 8EEA      2044            mov     (_turncar_v_1_93 + 2),r6
0AC7 8FEB      2045            mov     (_turncar_v_1_93 + 3),r7
0AC9           2046   ;        robot.c:389: while (v < 1.3) {
0AC9           2047   L007001?:
0AC9 7466      2048            mov     a,#0x66
0ACB C0E0      2049            push    acc
0ACD C0E0      2050            push    acc
0ACF 74A6      2051            mov     a,#0xA6
0AD1 C0E0      2052            push    acc
0AD3 743F      2053            mov     a,#0x3F
0AD5 C0E0      2054            push    acc
0AD7 85E882    2055            mov     dpl,_turncar_v_1_93
0ADA 85E983    2056            mov     dph,(_turncar_v_1_93 + 1)
0ADD 85EAF0    2057            mov     b,(_turncar_v_1_93 + 2)
0AE0 E5EB      2058            mov     a,(_turncar_v_1_93 + 3)
0AE2 120100    2059            lcall   ___fslt
0AE5 AC82      2060            mov     r4,dpl
0AE7 E581      2061            mov     a,sp
0AE9 24FC      2062            add     a,#0xfc
0AEB F581      2063            mov     sp,a
0AED EC        2064            mov     a,r4
0AEE 6001      2065            jz      L007003?
0AF0           2066   ;        robot.c:391: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0AF0 E538      2067            mov     a,_turncar_direction_1_93
0AF2 6001      2068            jz      L007028?
0AF4 75820C    2069            mov     dpl,#0x0C
0AF7 120100    2070            lcall   _Volts_at_Pin
0AFA AC82      2071            mov     r4,dpl
0AFC AD83      2072            mov     r5,dph
0AFE AEF0      2073            mov     r6,b
0B00 FF        2074            mov     r7,a
0B01 8001      2075            sjmp    L007029?
0B03           2076   L007028?:
0B03 75820E    2077            mov     dpl,#0x0E
0B06 120100    2078            lcall   _Volts_at_Pin
0B09 AC82      2079            mov     r4,dpl
0B0B AD83      2080            mov     r5,dph
0B0D AEF0      2081            mov     r6,b
0B0F FF        2082            mov     r7,a
0B10           2083   L007029?:
0B10 8CE8      2084            mov     _turncar_v_1_93,r4
0B12 8DE9      2085            mov     (_turncar_v_1_93 + 1),r5
0B14 8EEA      2086            mov     (_turncar_v_1_93 + 2),r6
0B16 8FEB      2087            mov     (_turncar_v_1_93 + 3),r7
0B18 8001      2088            sjmp    L007001?
0B1A           2089   L007003?:
0B1A           2090   ;        robot.c:395: waitms(300);
0B1A 90012C    2091            mov     dptr,#0x012C
0B1D 120100    2092            lcall   _waitms
0B20           2093   ;        robot.c:398: pwm_Right0 = -1; 
0B20 75F0FF    2094            mov     _pwm_Right0,#0xFF
0B23 22        2095            ret
0B24           2096   L007022?:
0B24           2097   ;        robot.c:402: else if (leftright == 3) {
0B24 BA0300    2098            cjne    r2,#0x03,L007067?
0B27 BB0000    2099            cjne    r3,#0x00,L007067?
0B2A 8001      2100            sjmp    L007068?
0B2C           2101   L007067?:
0B2C 020100    2102            ljmp    L007019?
0B2F           2103   L007068?:
0B2F           2104   ;        robot.c:404: pwm_Left1 = 75;
0B2F 75304B    2105            mov     _pwm_Left1,#0x4B
0B32           2106   ;        robot.c:405: waitms(200);
0B32 9000C8    2107            mov     dptr,#0x00C8
0B35 120100    2108            lcall   _waitms
0B38           2109   ;        robot.c:408: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0B38 E538      2110            mov     a,_turncar_direction_1_93
0B3A 6001      2111            jz      L007030?
0B3C 75820B    2112            mov     dpl,#0x0B
0B3F 120100    2113            lcall   _Volts_at_Pin
0B42 AC82      2114            mov     r4,dpl
0B44 AD83      2115            mov     r5,dph
0B46 AEF0      2116            mov     r6,b
0B48 FF        2117            mov     r7,a
0B49 8001      2118            sjmp    L007031?
0B4B           2119   L007030?:
0B4B 75820D    2120            mov     dpl,#0x0D
0B4E 120100    2121            lcall   _Volts_at_Pin
0B51 AC82      2122            mov     r4,dpl
0B53 AD83      2123            mov     r5,dph
0B55 AEF0      2124            mov     r6,b
0B57 FF        2125            mov     r7,a
0B58           2126   L007031?:
0B58 8CE8      2127            mov     _turncar_v_1_93,r4
0B5A 8DE9      2128            mov     (_turncar_v_1_93 + 1),r5
0B5C 8EEA      2129            mov     (_turncar_v_1_93 + 2),r6
0B5E 8FEB      2130            mov     (_turncar_v_1_93 + 3),r7
0B60           2131   ;        robot.c:410: while (v < 1.3) {
0B60           2132   L007004?:
0B60 7466      2133            mov     a,#0x66
0B62 C0E0      2134            push    acc
0B64 C0E0      2135            push    acc
0B66 74A6      2136            mov     a,#0xA6
0B68 C0E0      2137            push    acc
0B6A 743F      2138            mov     a,#0x3F
0B6C C0E0      2139            push    acc
0B6E 85E882    2140            mov     dpl,_turncar_v_1_93
0B71 85E983    2141            mov     dph,(_turncar_v_1_93 + 1)
0B74 85EAF0    2142            mov     b,(_turncar_v_1_93 + 2)
0B77 E5EB      2143            mov     a,(_turncar_v_1_93 + 3)
0B79 120100    2144            lcall   ___fslt
0B7C AC82      2145            mov     r4,dpl
0B7E E581      2146            mov     a,sp
0B80 24FC      2147            add     a,#0xfc
0B82 F581      2148            mov     sp,a
0B84 EC        2149            mov     a,r4
0B85 6001      2150            jz      L007006?
0B87           2151   ;        robot.c:412: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0B87 E538      2152            mov     a,_turncar_direction_1_93
0B89 6001      2153            jz      L007032?
0B8B 75820B    2154            mov     dpl,#0x0B
0B8E 120100    2155            lcall   _Volts_at_Pin
0B91 AC82      2156            mov     r4,dpl
0B93 AD83      2157            mov     r5,dph
0B95 AEF0      2158            mov     r6,b
0B97 FF        2159            mov     r7,a
0B98 8001      2160            sjmp    L007033?
0B9A           2161   L007032?:
0B9A 75820D    2162            mov     dpl,#0x0D
0B9D 120100    2163            lcall   _Volts_at_Pin
0BA0 AC82      2164            mov     r4,dpl
0BA2 AD83      2165            mov     r5,dph
0BA4 AEF0      2166            mov     r6,b
0BA6 FF        2167            mov     r7,a
0BA7           2168   L007033?:
0BA7 8CE8      2169            mov     _turncar_v_1_93,r4
0BA9 8DE9      2170            mov     (_turncar_v_1_93 + 1),r5
0BAB 8EEA      2171            mov     (_turncar_v_1_93 + 2),r6
0BAD 8FEB      2172            mov     (_turncar_v_1_93 + 3),r7
0BAF 8001      2173            sjmp    L007004?
0BB1           2174   L007006?:
0BB1           2175   ;        robot.c:416: pwm_Left1 = -1; 
0BB1 7530FF    2176            mov     _pwm_Left1,#0xFF
0BB4 22        2177            ret
0BB5           2178   L007019?:
0BB5           2179   ;        robot.c:420: else if (leftright == 2) {
0BB5 BA0240    2180            cjne    r2,#0x02,L007072?
0BB8 BB0040    2181            cjne    r3,#0x00,L007072?
0BBB 8001      2182            sjmp    L007073?
0BBD           2183   L007072?:
0BBD 020100    2184            ljmp    L007016?
0BC0           2185   L007073?:
0BC0           2186   ;        robot.c:422: pwm_Right1 = 100;
0BC0 75B064    2187            mov     _pwm_Right1,#0x64
0BC3           2188   ;        robot.c:425: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0BC3 E538      2189            mov     a,_turncar_direction_1_93
0BC5 6001      2190            jz      L007034?
0BC7 75820C    2191            mov     dpl,#0x0C
0BCA 120100    2192            lcall   _Volts_at_Pin
0BCD AC82      2193            mov     r4,dpl
0BCF AD83      2194            mov     r5,dph
0BD1 AEF0      2195            mov     r6,b
0BD3 FF        2196            mov     r7,a
0BD4 8001      2197            sjmp    L007035?
0BD6           2198   L007034?:
0BD6 75820E    2199            mov     dpl,#0x0E
0BD9 120100    2200            lcall   _Volts_at_Pin
0BDC AC82      2201            mov     r4,dpl
0BDE AD83      2202            mov     r5,dph
0BE0 AEF0      2203            mov     r6,b
0BE2 FF        2204            mov     r7,a
0BE3           2205   L007035?:
0BE3 8CE8      2206            mov     _turncar_v_1_93,r4
0BE5 8DE9      2207            mov     (_turncar_v_1_93 + 1),r5
0BE7 8EEA      2208            mov     (_turncar_v_1_93 + 2),r6
0BE9 8FEB      2209            mov     (_turncar_v_1_93 + 3),r7
0BEB           2210   ;        robot.c:427: while (v < 0.9) {
0BEB           2211   L007007?:
0BEB 7466      2212            mov     a,#0x66
0BED C0E0      2213            push    acc
0BEF C0E0      2214            push    acc
0BF1 C0E0      2215            push    acc
0BF3 743F      2216            mov     a,#0x3F
0BF5 C0E0      2217            push    acc
0BF7 85E882    2218            mov     dpl,_turncar_v_1_93
0BFA 85E983    2219            mov     dph,(_turncar_v_1_93 + 1)
0BFD 85EAF0    2220            mov     b,(_turncar_v_1_93 + 2)
0C00 E5EB      2221            mov     a,(_turncar_v_1_93 + 3)
0C02 120100    2222            lcall   ___fslt
0C05 AC82      2223            mov     r4,dpl
0C07 E581      2224            mov     a,sp
0C09 24FC      2225            add     a,#0xfc
0C0B F581      2226            mov     sp,a
0C0D EC        2227            mov     a,r4
0C0E 6001      2228            jz      L007009?
0C10           2229   ;        robot.c:429: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0C10 E538      2230            mov     a,_turncar_direction_1_93
0C12 6001      2231            jz      L007036?
0C14 75820C    2232            mov     dpl,#0x0C
0C17 120100    2233            lcall   _Volts_at_Pin
0C1A AC82      2234            mov     r4,dpl
0C1C AD83      2235            mov     r5,dph
0C1E AEF0      2236            mov     r6,b
0C20 FF        2237            mov     r7,a
0C21 8001      2238            sjmp    L007037?
0C23           2239   L007036?:
0C23 75820E    2240            mov     dpl,#0x0E
0C26 120100    2241            lcall   _Volts_at_Pin
0C29 AC82      2242            mov     r4,dpl
0C2B AD83      2243            mov     r5,dph
0C2D AEF0      2244            mov     r6,b
0C2F FF        2245            mov     r7,a
0C30           2246   L007037?:
0C30 8CE8      2247            mov     _turncar_v_1_93,r4
0C32 8DE9      2248            mov     (_turncar_v_1_93 + 1),r5
0C34 8EEA      2249            mov     (_turncar_v_1_93 + 2),r6
0C36 8FEB      2250            mov     (_turncar_v_1_93 + 3),r7
0C38 8001      2251            sjmp    L007007?
0C3A           2252   L007009?:
0C3A           2253   ;        robot.c:433: waitms(300);
0C3A 90012C    2254            mov     dptr,#0x012C
0C3D 120100    2255            lcall   _waitms
0C40           2256   ;        robot.c:436: pwm_Right1 = -1; 
0C40 75B0FF    2257            mov     _pwm_Right1,#0xFF
0C43 22        2258            ret
0C44           2259   L007016?:
0C44           2260   ;        robot.c:440: else if (leftright == 4) {
0C44 BA0480    2261            cjne    r2,#0x04,L007077?
0C47 BB0080    2262            cjne    r3,#0x00,L007077?
0C4A 8001      2263            sjmp    L007078?
0C4C           2264   L007077?:
0C4C 22        2265            ret
0C4D           2266   L007078?:
0C4D           2267   ;        robot.c:442: pwm_Left0 = 75;
0C4D 75704B    2268            mov     _pwm_Left0,#0x4B
0C50           2269   ;        robot.c:443: waitms(200);
0C50 9000C8    2270            mov     dptr,#0x00C8
0C53 120100    2271            lcall   _waitms
0C56           2272   ;        robot.c:446: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0C56 E538      2273            mov     a,_turncar_direction_1_93
0C58 6001      2274            jz      L007038?
0C5A 75820B    2275            mov     dpl,#0x0B
0C5D 120100    2276            lcall   _Volts_at_Pin
0C60 AA82      2277            mov     r2,dpl
0C62 AB83      2278            mov     r3,dph
0C64 ACF0      2279            mov     r4,b
0C66 FD        2280            mov     r5,a
0C67 8001      2281            sjmp    L007039?
0C69           2282   L007038?:
0C69 75820D    2283            mov     dpl,#0x0D
0C6C 120100    2284            lcall   _Volts_at_Pin
0C6F AA82      2285            mov     r2,dpl
0C71 AB83      2286            mov     r3,dph
0C73 ACF0      2287            mov     r4,b
0C75 FD        2288            mov     r5,a
0C76           2289   L007039?:
0C76 8AE8      2290            mov     _turncar_v_1_93,r2
0C78 8BE9      2291            mov     (_turncar_v_1_93 + 1),r3
0C7A 8CEA      2292            mov     (_turncar_v_1_93 + 2),r4
0C7C 8DEB      2293            mov     (_turncar_v_1_93 + 3),r5
0C7E           2294   ;        robot.c:448: while (v < 0.9) {
0C7E           2295   L007010?:
0C7E 7466      2296            mov     a,#0x66
0C80 C0E0      2297            push    acc
0C82 C0E0      2298            push    acc
0C84 C0E0      2299            push    acc
0C86 743F      2300            mov     a,#0x3F
0C88 C0E0      2301            push    acc
0C8A 85E882    2302            mov     dpl,_turncar_v_1_93
0C8D 85E983    2303            mov     dph,(_turncar_v_1_93 + 1)
0C90 85EAF0    2304            mov     b,(_turncar_v_1_93 + 2)
0C93 E5EB      2305            mov     a,(_turncar_v_1_93 + 3)
0C95 120100    2306            lcall   ___fslt
0C98 AA82      2307            mov     r2,dpl
0C9A E581      2308            mov     a,sp
0C9C 24FC      2309            add     a,#0xfc
0C9E F581      2310            mov     sp,a
0CA0 EA        2311            mov     a,r2
0CA1 6001      2312            jz      L007012?
0CA3           2313   ;        robot.c:450: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0CA3 E538      2314            mov     a,_turncar_direction_1_93
0CA5 6001      2315            jz      L007040?
0CA7 75820B    2316            mov     dpl,#0x0B
0CAA 120100    2317            lcall   _Volts_at_Pin
0CAD AA82      2318            mov     r2,dpl
0CAF AB83      2319            mov     r3,dph
0CB1 ACF0      2320            mov     r4,b
0CB3 FD        2321            mov     r5,a
0CB4 8001      2322            sjmp    L007041?
0CB6           2323   L007040?:
0CB6 75820D    2324            mov     dpl,#0x0D
0CB9 120100    2325            lcall   _Volts_at_Pin
0CBC AA82      2326            mov     r2,dpl
0CBE AB83      2327            mov     r3,dph
0CC0 ACF0      2328            mov     r4,b
0CC2 FD        2329            mov     r5,a
0CC3           2330   L007041?:
0CC3 8AE8      2331            mov     _turncar_v_1_93,r2
0CC5 8BE9      2332            mov     (_turncar_v_1_93 + 1),r3
0CC7 8CEA      2333            mov     (_turncar_v_1_93 + 2),r4
0CC9 8DEB      2334            mov     (_turncar_v_1_93 + 3),r5
0CCB 8001      2335            sjmp    L007010?
0CCD           2336   L007012?:
0CCD           2337   ;        robot.c:454: pwm_Left0 = -1; 
0CCD 7570FF    2338            mov     _pwm_Left0,#0xFF
0CD0 22        2339            ret
0CD1           2340   ;------------------------------------------------------------
0CD1           2341   ;Allocation info for local variables in function 'uturn'
0CD1           2342   ;------------------------------------------------------------
0CD1           2343   ;vleft                     Allocated with name '_uturn_vleft_1_103'
0CD1           2344   ;vright                    Allocated with name '_uturn_vright_1_103'
0CD1           2345   ;------------------------------------------------------------
0CD1           2346   ;        robot.c:461: void uturn(void) {
0CD1           2347   ;        -----------------------------------------
0CD1           2348   ;         function uturn
0CD1           2349   ;        -----------------------------------------
0CD1           2350   _uturn:
0CD1           2351   ;        robot.c:465: vleft = Volts_at_Pin(TANK_FL);
0CD1 75820B    2352            mov     dpl,#0x0B
0CD4 120100    2353            lcall   _Volts_at_Pin
0CD7 858288    2354            mov     _uturn_vleft_1_103,dpl
0CDA 858389    2355            mov     (_uturn_vleft_1_103 + 1),dph
0CDD 85F08A    2356            mov     (_uturn_vleft_1_103 + 2),b
0CE0 F58B      2357            mov     (_uturn_vleft_1_103 + 3),a
0CE2           2358   ;        robot.c:466: vright = Volts_at_Pin(TANK_FR);
0CE2 75820C    2359            mov     dpl,#0x0C
0CE5 120100    2360            lcall   _Volts_at_Pin
0CE8 8582D8    2361            mov     _uturn_vright_1_103,dpl
0CEB 8583D9    2362            mov     (_uturn_vright_1_103 + 1),dph
0CEE 85F0DA    2363            mov     (_uturn_vright_1_103 + 2),b
0CF1 F5DB      2364            mov     (_uturn_vright_1_103 + 3),a
0CF3           2365   ;        robot.c:469: pwm_Left0 = -1;
0CF3 7570FF    2366            mov     _pwm_Left0,#0xFF
0CF6           2367   ;        robot.c:470: pwm_Left1 = 50;
0CF6 753032    2368            mov     _pwm_Left1,#0x32
0CF9           2369   ;        robot.c:471: pwm_Right0 = -1;
0CF9 75F0FF    2370            mov     _pwm_Right0,#0xFF
0CFC           2371   ;        robot.c:472: pwm_Right1 = 50;
0CFC 75B032    2372            mov     _pwm_Right1,#0x32
0CFF           2373   ;        robot.c:475: waitms(3000);
0CFF 900BB8    2374            mov     dptr,#0x0BB8
0D02 120100    2375            lcall   _waitms
0D05           2376   ;        robot.c:477: while ((Volts_at_Pin(TANK_FL)-Volts_at_Pin(TANK_FR))<-0.3 || (Volts_at_Pin(TANK_FL)-Volts_at_Pin(TANK_FR))>0.3);
0D05           2377   L008002?:
0D05 75820B    2378            mov     dpl,#0x0B
0D08 120100    2379            lcall   _Volts_at_Pin
0D0B AA82      2380            mov     r2,dpl
0D0D AB83      2381            mov     r3,dph
0D0F ACF0      2382            mov     r4,b
0D11 FD        2383            mov     r5,a
0D12 75820C    2384            mov     dpl,#0x0C
0D15 C002      2385            push    ar2
0D17 C003      2386            push    ar3
0D19 C004      2387            push    ar4
0D1B C005      2388            push    ar5
0D1D 120100    2389            lcall   _Volts_at_Pin
0D20 AE82      2390            mov     r6,dpl
0D22 AF83      2391            mov     r7,dph
0D24 A8F0      2392            mov     r0,b
0D26 F9        2393            mov     r1,a
0D27 D005      2394            pop     ar5
0D29 D004      2395            pop     ar4
0D2B D003      2396            pop     ar3
0D2D D002      2397            pop     ar2
0D2F C006      2398            push    ar6
0D31 C007      2399            push    ar7
0D33 C000      2400            push    ar0
0D35 C001      2401            push    ar1
0D37 8A82      2402            mov     dpl,r2
0D39 8B83      2403            mov     dph,r3
0D3B 8CF0      2404            mov     b,r4
0D3D ED        2405            mov     a,r5
0D3E 120100    2406            lcall   ___fssub
0D41 AA82      2407            mov     r2,dpl
0D43 AB83      2408            mov     r3,dph
0D45 ACF0      2409            mov     r4,b
0D47 FD        2410            mov     r5,a
0D48 E581      2411            mov     a,sp
0D4A 24FC      2412            add     a,#0xfc
0D4C F581      2413            mov     sp,a
0D4E 749A      2414            mov     a,#0x9A
0D50 C0E0      2415            push    acc
0D52 7499      2416            mov     a,#0x99
0D54 C0E0      2417            push    acc
0D56 C0E0      2418            push    acc
0D58 74BE      2419            mov     a,#0xBE
0D5A C0E0      2420            push    acc
0D5C 8A82      2421            mov     dpl,r2
0D5E 8B83      2422            mov     dph,r3
0D60 8CF0      2423            mov     b,r4
0D62 ED        2424            mov     a,r5
0D63 120100    2425            lcall   ___fslt
0D66 AA82      2426            mov     r2,dpl
0D68 E581      2427            mov     a,sp
0D6A 24FC      2428            add     a,#0xfc
0D6C F581      2429            mov     sp,a
0D6E EA        2430            mov     a,r2
0D6F 7001      2431            jnz     L008002?
0D71 75820B    2432            mov     dpl,#0x0B
0D74 120100    2433            lcall   _Volts_at_Pin
0D77 AA82      2434            mov     r2,dpl
0D79 AB83      2435            mov     r3,dph
0D7B ACF0      2436            mov     r4,b
0D7D FD        2437            mov     r5,a
0D7E 75820C    2438            mov     dpl,#0x0C
0D81 C002      2439            push    ar2
0D83 C003      2440            push    ar3
0D85 C004      2441            push    ar4
0D87 C005      2442            push    ar5
0D89 120100    2443            lcall   _Volts_at_Pin
0D8C AE82      2444            mov     r6,dpl
0D8E AF83      2445            mov     r7,dph
0D90 A8F0      2446            mov     r0,b
0D92 F9        2447            mov     r1,a
0D93 D005      2448            pop     ar5
0D95 D004      2449            pop     ar4
0D97 D003      2450            pop     ar3
0D99 D002      2451            pop     ar2
0D9B C006      2452            push    ar6
0D9D C007      2453            push    ar7
0D9F C000      2454            push    ar0
0DA1 C001      2455            push    ar1
0DA3 8A82      2456            mov     dpl,r2
0DA5 8B83      2457            mov     dph,r3
0DA7 8CF0      2458            mov     b,r4
0DA9 ED        2459            mov     a,r5
0DAA 120100    2460            lcall   ___fssub
0DAD AA82      2461            mov     r2,dpl
0DAF AB83      2462            mov     r3,dph
0DB1 ACF0      2463            mov     r4,b
0DB3 FD        2464            mov     r5,a
0DB4 E581      2465            mov     a,sp
0DB6 24FC      2466            add     a,#0xfc
0DB8 F581      2467            mov     sp,a
0DBA 749A      2468            mov     a,#0x9A
0DBC C0E0      2469            push    acc
0DBE 7499      2470            mov     a,#0x99
0DC0 C0E0      2471            push    acc
0DC2 C0E0      2472            push    acc
0DC4 743E      2473            mov     a,#0x3E
0DC6 C0E0      2474            push    acc
0DC8 8A82      2475            mov     dpl,r2
0DCA 8B83      2476            mov     dph,r3
0DCC 8CF0      2477            mov     b,r4
0DCE ED        2478            mov     a,r5
0DCF 120100    2479            lcall   ___fsgt
0DD2 AA82      2480            mov     r2,dpl
0DD4 E581      2481            mov     a,sp
0DD6 24FC      2482            add     a,#0xfc
0DD8 F581      2483            mov     sp,a
0DDA EA        2484            mov     a,r2
0DDB 6001      2485            jz      L008010?
0DDD 020100    2486            ljmp    L008002?
0DE0           2487   L008010?:
0DE0 22        2488            ret
0DE1           2489            rseg R_CSEG
0DE1           2490   
0000           2491            rseg R_XINIT
0000           2492   
0000           2493            rseg R_CONST
0000           2494   __str_0:
0000 1B        2495            db 0x1B
0001 5B324A    2496            db '[2J'
0004 00        2497            db 0x00
0005           2498   __str_1:
0005 66726F6E  2499            db 'frontL %f frontR %f backL %f backR %f command %1d, state %1d'
     744C2025
     66206672
     6F6E7452
     20256620
     6261636B
     4C202566
     20626163
     6B522025
     6620636F
     6D6D616E
     64202531
     642C2073
     74617465
     20253164
0041 206C6566  2500            db ' left0 %3d left1 %3d right0 %3d right1 %3d'
     74302025
     3364206C
     65667431
     20253364
     20726967
     68743020
     25336420
     72696768
     74312025
     3364
006B 0D        2501            db 0x0D
006C 00        2502            db 0x00
006D           2503   __str_2:
006D 0A        2504            db 0x0A
006E 494E5445  2505            db 'INTERSECTION'
     52534543
     54494F4E
007A 0A        2506            db 0x0A
007B 00        2507            db 0x00
007C           2508   __str_3:
007C 5475726E  2509            db 'Turn left at the next intersection'
     206C6566
     74206174
     20746865
     206E6578
     7420696E
     74657273
     65637469
     6F6E
009E 0A        2510            db 0x0A
009F 00        2511            db 0x00
00A0           2512   __str_4:
00A0 0A        2513            db 0x0A
00A1 0D        2514            db 0x0D
00A2 20494E54  2515            db ' INTERSECTION'
     45525345
     4354494F
     4E
00AF 0A        2516            db 0x0A
00B0 00        2517            db 0x00
00B1           2518   __str_5:
00B1 5475726E  2519            db 'Turn right at the next intersection'
     20726967
     68742061
     74207468
     65206E65
     78742069
     6E746572
     73656374
     696F6E
00D4 0A        2520            db 0x0A
00D5 00        2521            db 0x00
00D6           2522   __str_6:
00D6 474F21    2523            db 'GO!'
00D9 0A        2524            db 0x0A
00DA 00        2525            db 0x00
00DB           2526   __str_7:
00DB 52657665  2527            db 'Reverse Reverse!'
     72736520
     52657665
     72736521
00EB 0A        2528            db 0x0A
00EC 00        2529            db 0x00
00ED           2530   __str_8:
00ED 48414C54  2531            db 'HALT peasants!'
     20706561
     73616E74
     7321
00FB 0A        2532            db 0x0A
00FC 00        2533            db 0x00
00FD           2534   __str_9:
00FD 55545552  2535            db 'UTURN'
     4E
0102 0A        2536            db 0x0A
0103 00        2537            db 0x00
0104           2538   __str_10:
0104 0A        2539            db 0x0A
0105 436F6D6D  2540            db 'Command received: 0b_0%c%c%c'
     616E6420
     72656365
     69766564
     3A203062
     5F302563
     25632563
0121 0A        2541            db 0x0A
0122 00        2542            db 0x00
0123           2543   
002E           2544            CSEG
002E           2545   
002E           2546   end
