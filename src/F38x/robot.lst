0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Tue Apr 04 01:11:26 2017
0000              5   ;--------------------------------------------------------
                  5   $name robot
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _Timer2_ISR
0000             27            public _main
0000             28            public _distance
0000             29            public _time
0000             30            public _overflow_count
0000             31            public _currentstate
0000             32            public _currentcmd
0000             33            public _direction
0000             34            public _pwm_Right1
0000             35            public _pwm_Right0
0000             36            public _pwm_Left1
0000             37            public _pwm_Left0
0000             38            public _pwm_both
0000             39            public _mode
0000             40            public _pwm_count
0000             41            public _readData
0000             42            public _linetrack
0000             43            public _stopcar
0000             44            public _turncar
0000             45            public _uturn
0000             46            public _Sonar_Reading
0000             47   ;--------------------------------------------------------
0000             48   ; Special Function Registers
0000             49   ;--------------------------------------------------------
0000             50   _P0             DATA 0x80
0000             51   _SP             DATA 0x81
0000             52   _DPL            DATA 0x82
0000             53   _DPH            DATA 0x83
0000             54   _EMI0TC         DATA 0x84
0000             55   _EMI0CF         DATA 0x85
0000             56   _OSCLCN         DATA 0x86
0000             57   _PCON           DATA 0x87
0000             58   _TCON           DATA 0x88
0000             59   _TMOD           DATA 0x89
0000             60   _TL0            DATA 0x8a
0000             61   _TL1            DATA 0x8b
0000             62   _TH0            DATA 0x8c
0000             63   _TH1            DATA 0x8d
0000             64   _CKCON          DATA 0x8e
0000             65   _PSCTL          DATA 0x8f
0000             66   _P1             DATA 0x90
0000             67   _TMR3CN         DATA 0x91
0000             68   _TMR4CN         DATA 0x91
0000             69   _TMR3RLL        DATA 0x92
0000             70   _TMR4RLL        DATA 0x92
0000             71   _TMR3RLH        DATA 0x93
0000             72   _TMR4RLH        DATA 0x93
0000             73   _TMR3L          DATA 0x94
0000             74   _TMR4L          DATA 0x94
0000             75   _TMR3H          DATA 0x95
0000             76   _TMR4H          DATA 0x95
0000             77   _USB0ADR        DATA 0x96
0000             78   _USB0DAT        DATA 0x97
0000             79   _SCON           DATA 0x98
0000             80   _SCON0          DATA 0x98
0000             81   _SBUF           DATA 0x99
0000             82   _SBUF0          DATA 0x99
0000             83   _CPT1CN         DATA 0x9a
0000             84   _CPT0CN         DATA 0x9b
0000             85   _CPT1MD         DATA 0x9c
0000             86   _CPT0MD         DATA 0x9d
0000             87   _CPT1MX         DATA 0x9e
0000             88   _CPT0MX         DATA 0x9f
0000             89   _P2             DATA 0xa0
0000             90   _SPI0CFG        DATA 0xa1
0000             91   _SPI0CKR        DATA 0xa2
0000             92   _SPI0DAT        DATA 0xa3
0000             93   _P0MDOUT        DATA 0xa4
0000             94   _P1MDOUT        DATA 0xa5
0000             95   _P2MDOUT        DATA 0xa6
0000             96   _P3MDOUT        DATA 0xa7
0000             97   _IE             DATA 0xa8
0000             98   _CLKSEL         DATA 0xa9
0000             99   _EMI0CN         DATA 0xaa
0000            100   __XPAGE         DATA 0xaa
0000            101   _SBCON1         DATA 0xac
0000            102   _P4MDOUT        DATA 0xae
0000            103   _PFE0CN         DATA 0xaf
0000            104   _P3             DATA 0xb0
0000            105   _OSCXCN         DATA 0xb1
0000            106   _OSCICN         DATA 0xb2
0000            107   _OSCICL         DATA 0xb3
0000            108   _SBRLL1         DATA 0xb4
0000            109   _SBRLH1         DATA 0xb5
0000            110   _FLSCL          DATA 0xb6
0000            111   _FLKEY          DATA 0xb7
0000            112   _IP             DATA 0xb8
0000            113   _CLKMUL         DATA 0xb9
0000            114   _SMBTC          DATA 0xb9
0000            115   _AMX0N          DATA 0xba
0000            116   _AMX0P          DATA 0xbb
0000            117   _ADC0CF         DATA 0xbc
0000            118   _ADC0L          DATA 0xbd
0000            119   _ADC0H          DATA 0xbe
0000            120   _SFRPAGE        DATA 0xbf
0000            121   _SMB0CN         DATA 0xc0
0000            122   _SMB1CN         DATA 0xc0
0000            123   _SMB0CF         DATA 0xc1
0000            124   _SMB1CF         DATA 0xc1
0000            125   _SMB0DAT        DATA 0xc2
0000            126   _SMB1DAT        DATA 0xc2
0000            127   _ADC0GTL        DATA 0xc3
0000            128   _ADC0GTH        DATA 0xc4
0000            129   _ADC0LTL        DATA 0xc5
0000            130   _ADC0LTH        DATA 0xc6
0000            131   _P4             DATA 0xc7
0000            132   _TMR2CN         DATA 0xc8
0000            133   _TMR5CN         DATA 0xc8
0000            134   _REG01CN        DATA 0xc9
0000            135   _TMR2RLL        DATA 0xca
0000            136   _TMR5RLL        DATA 0xca
0000            137   _TMR2RLH        DATA 0xcb
0000            138   _TMR5RLH        DATA 0xcb
0000            139   _TMR2L          DATA 0xcc
0000            140   _TMR5L          DATA 0xcc
0000            141   _TMR2H          DATA 0xcd
0000            142   _TMR5H          DATA 0xcd
0000            143   _SMB0ADM        DATA 0xce
0000            144   _SMB1ADM        DATA 0xce
0000            145   _SMB0ADR        DATA 0xcf
0000            146   _SMB1ADR        DATA 0xcf
0000            147   _PSW            DATA 0xd0
0000            148   _REF0CN         DATA 0xd1
0000            149   _SCON1          DATA 0xd2
0000            150   _SBUF1          DATA 0xd3
0000            151   _P0SKIP         DATA 0xd4
0000            152   _P1SKIP         DATA 0xd5
0000            153   _P2SKIP         DATA 0xd6
0000            154   _USB0XCN        DATA 0xd7
0000            155   _PCA0CN         DATA 0xd8
0000            156   _PCA0MD         DATA 0xd9
0000            157   _PCA0CPM0       DATA 0xda
0000            158   _PCA0CPM1       DATA 0xdb
0000            159   _PCA0CPM2       DATA 0xdc
0000            160   _PCA0CPM3       DATA 0xdd
0000            161   _PCA0CPM4       DATA 0xde
0000            162   _P3SKIP         DATA 0xdf
0000            163   _ACC            DATA 0xe0
0000            164   _XBR0           DATA 0xe1
0000            165   _XBR1           DATA 0xe2
0000            166   _XBR2           DATA 0xe3
0000            167   _IT01CF         DATA 0xe4
0000            168   _CKCON1         DATA 0xe4
0000            169   _SMOD1          DATA 0xe5
0000            170   _EIE1           DATA 0xe6
0000            171   _EIE2           DATA 0xe7
0000            172   _ADC0CN         DATA 0xe8
0000            173   _PCA0CPL1       DATA 0xe9
0000            174   _PCA0CPH1       DATA 0xea
0000            175   _PCA0CPL2       DATA 0xeb
0000            176   _PCA0CPH2       DATA 0xec
0000            177   _PCA0CPL3       DATA 0xed
0000            178   _PCA0CPH3       DATA 0xee
0000            179   _RSTSRC         DATA 0xef
0000            180   _B              DATA 0xf0
0000            181   _P0MDIN         DATA 0xf1
0000            182   _P1MDIN         DATA 0xf2
0000            183   _P2MDIN         DATA 0xf3
0000            184   _P3MDIN         DATA 0xf4
0000            185   _P4MDIN         DATA 0xf5
0000            186   _EIP1           DATA 0xf6
0000            187   _EIP2           DATA 0xf7
0000            188   _SPI0CN         DATA 0xf8
0000            189   _PCA0L          DATA 0xf9
0000            190   _PCA0H          DATA 0xfa
0000            191   _PCA0CPL0       DATA 0xfb
0000            192   _PCA0CPH0       DATA 0xfc
0000            193   _PCA0CPL4       DATA 0xfd
0000            194   _PCA0CPH4       DATA 0xfe
0000            195   _VDM0CN         DATA 0xff
0000            196   _DPTR           DATA 0x8382
0000            197   _TMR2RL         DATA 0xcbca
0000            198   _TMR3RL         DATA 0x9392
0000            199   _TMR4RL         DATA 0x9392
0000            200   _TMR5RL         DATA 0xcbca
0000            201   _TMR2           DATA 0xcdcc
0000            202   _TMR3           DATA 0x9594
0000            203   _TMR4           DATA 0x9594
0000            204   _TMR5           DATA 0xcdcc
0000            205   _SBRL1          DATA 0xb5b4
0000            206   _ADC0           DATA 0xbebd
0000            207   _ADC0GT         DATA 0xc4c3
0000            208   _ADC0LT         DATA 0xc6c5
0000            209   _PCA0           DATA 0xfaf9
0000            210   _PCA0CP1        DATA 0xeae9
0000            211   _PCA0CP2        DATA 0xeceb
0000            212   _PCA0CP3        DATA 0xeeed
0000            213   _PCA0CP0        DATA 0xfcfb
0000            214   _PCA0CP4        DATA 0xfefd
0000            215   ;--------------------------------------------------------
0000            216   ; special function bits
0000            217   ;--------------------------------------------------------
0000            218   _P0_0           BIT 0x80
0000            219   _P0_1           BIT 0x81
0000            220   _P0_2           BIT 0x82
0000            221   _P0_3           BIT 0x83
0000            222   _P0_4           BIT 0x84
0000            223   _P0_5           BIT 0x85
0000            224   _P0_6           BIT 0x86
0000            225   _P0_7           BIT 0x87
0000            226   _TF1            BIT 0x8f
0000            227   _TR1            BIT 0x8e
0000            228   _TF0            BIT 0x8d
0000            229   _TR0            BIT 0x8c
0000            230   _IE1            BIT 0x8b
0000            231   _IT1            BIT 0x8a
0000            232   _IE0            BIT 0x89
0000            233   _IT0            BIT 0x88
0000            234   _P1_0           BIT 0x90
0000            235   _P1_1           BIT 0x91
0000            236   _P1_2           BIT 0x92
0000            237   _P1_3           BIT 0x93
0000            238   _P1_4           BIT 0x94
0000            239   _P1_5           BIT 0x95
0000            240   _P1_6           BIT 0x96
0000            241   _P1_7           BIT 0x97
0000            242   _S0MODE         BIT 0x9f
0000            243   _SCON0_6        BIT 0x9e
0000            244   _MCE0           BIT 0x9d
0000            245   _REN0           BIT 0x9c
0000            246   _TB80           BIT 0x9b
0000            247   _RB80           BIT 0x9a
0000            248   _TI0            BIT 0x99
0000            249   _RI0            BIT 0x98
0000            250   _SCON_6         BIT 0x9e
0000            251   _MCE            BIT 0x9d
0000            252   _REN            BIT 0x9c
0000            253   _TB8            BIT 0x9b
0000            254   _RB8            BIT 0x9a
0000            255   _TI             BIT 0x99
0000            256   _RI             BIT 0x98
0000            257   _P2_0           BIT 0xa0
0000            258   _P2_1           BIT 0xa1
0000            259   _P2_2           BIT 0xa2
0000            260   _P2_3           BIT 0xa3
0000            261   _P2_4           BIT 0xa4
0000            262   _P2_5           BIT 0xa5
0000            263   _P2_6           BIT 0xa6
0000            264   _P2_7           BIT 0xa7
0000            265   _EA             BIT 0xaf
0000            266   _ESPI0          BIT 0xae
0000            267   _ET2            BIT 0xad
0000            268   _ES0            BIT 0xac
0000            269   _ET1            BIT 0xab
0000            270   _EX1            BIT 0xaa
0000            271   _ET0            BIT 0xa9
0000            272   _EX0            BIT 0xa8
0000            273   _P3_0           BIT 0xb0
0000            274   _P3_1           BIT 0xb1
0000            275   _P3_2           BIT 0xb2
0000            276   _P3_3           BIT 0xb3
0000            277   _P3_4           BIT 0xb4
0000            278   _P3_5           BIT 0xb5
0000            279   _P3_6           BIT 0xb6
0000            280   _P3_7           BIT 0xb7
0000            281   _IP_7           BIT 0xbf
0000            282   _PSPI0          BIT 0xbe
0000            283   _PT2            BIT 0xbd
0000            284   _PS0            BIT 0xbc
0000            285   _PT1            BIT 0xbb
0000            286   _PX1            BIT 0xba
0000            287   _PT0            BIT 0xb9
0000            288   _PX0            BIT 0xb8
0000            289   _MASTER0        BIT 0xc7
0000            290   _TXMODE0        BIT 0xc6
0000            291   _STA0           BIT 0xc5
0000            292   _STO0           BIT 0xc4
0000            293   _ACKRQ0         BIT 0xc3
0000            294   _ARBLOST0       BIT 0xc2
0000            295   _ACK0           BIT 0xc1
0000            296   _SI0            BIT 0xc0
0000            297   _MASTER1        BIT 0xc7
0000            298   _TXMODE1        BIT 0xc6
0000            299   _STA1           BIT 0xc5
0000            300   _STO1           BIT 0xc4
0000            301   _ACKRQ1         BIT 0xc3
0000            302   _ARBLOST1       BIT 0xc2
0000            303   _ACK1           BIT 0xc1
0000            304   _SI1            BIT 0xc0
0000            305   _TF2            BIT 0xcf
0000            306   _TF2H           BIT 0xcf
0000            307   _TF2L           BIT 0xce
0000            308   _TF2LEN         BIT 0xcd
0000            309   _TF2CEN         BIT 0xcc
0000            310   _T2SPLIT        BIT 0xcb
0000            311   _TR2            BIT 0xca
0000            312   _T2CSS          BIT 0xc9
0000            313   _T2XCLK         BIT 0xc8
0000            314   _TF5H           BIT 0xcf
0000            315   _TF5L           BIT 0xce
0000            316   _TF5LEN         BIT 0xcd
0000            317   _TMR5CN_4       BIT 0xcc
0000            318   _T5SPLIT        BIT 0xcb
0000            319   _TR5            BIT 0xca
0000            320   _TMR5CN_1       BIT 0xc9
0000            321   _T5XCLK         BIT 0xc8
0000            322   _CY             BIT 0xd7
0000            323   _AC             BIT 0xd6
0000            324   _F0             BIT 0xd5
0000            325   _RS1            BIT 0xd4
0000            326   _RS0            BIT 0xd3
0000            327   _OV             BIT 0xd2
0000            328   _F1             BIT 0xd1
0000            329   _PARITY         BIT 0xd0
0000            330   _CF             BIT 0xdf
0000            331   _CR             BIT 0xde
0000            332   _PCA0CN_5       BIT 0xde
0000            333   _CCF4           BIT 0xdc
0000            334   _CCF3           BIT 0xdb
0000            335   _CCF2           BIT 0xda
0000            336   _CCF1           BIT 0xd9
0000            337   _CCF0           BIT 0xd8
0000            338   _ACC_7          BIT 0xe7
0000            339   _ACC_6          BIT 0xe6
0000            340   _ACC_5          BIT 0xe5
0000            341   _ACC_4          BIT 0xe4
0000            342   _ACC_3          BIT 0xe3
0000            343   _ACC_2          BIT 0xe2
0000            344   _ACC_1          BIT 0xe1
0000            345   _ACC_0          BIT 0xe0
0000            346   _AD0EN          BIT 0xef
0000            347   _AD0TM          BIT 0xee
0000            348   _AD0INT         BIT 0xed
0000            349   _AD0BUSY        BIT 0xec
0000            350   _AD0WINT        BIT 0xeb
0000            351   _AD0CM2         BIT 0xea
0000            352   _AD0CM1         BIT 0xe9
0000            353   _AD0CM0         BIT 0xe8
0000            354   _B_7            BIT 0xf7
0000            355   _B_6            BIT 0xf6
0000            356   _B_5            BIT 0xf5
0000            357   _B_4            BIT 0xf4
0000            358   _B_3            BIT 0xf3
0000            359   _B_2            BIT 0xf2
0000            360   _B_1            BIT 0xf1
0000            361   _B_0            BIT 0xf0
0000            362   _SPIF           BIT 0xff
0000            363   _WCOL           BIT 0xfe
0000            364   _MODF           BIT 0xfd
0000            365   _RXOVRN         BIT 0xfc
0000            366   _NSSMD1         BIT 0xfb
0000            367   _NSSMD0         BIT 0xfa
0000            368   _TXBMT          BIT 0xf9
0000            369   _SPIEN          BIT 0xf8
0000            370   ;--------------------------------------------------------
0000            371   ; overlayable register banks
0000            372   ;--------------------------------------------------------
0000            373            rbank0 segment data overlay
0000            374   ;--------------------------------------------------------
0000            375   ; internal ram data
0000            376   ;--------------------------------------------------------
0000            377            rseg R_DSEG
0000            378   _pwm_count:
0000            379            ds 1
0001            380   _mode:
0001            381            ds 1
0002            382   _pwm_both:
0002            383            ds 1
0003            384   _pwm_Left0:
0003            385            ds 1
0004            386   _pwm_Left1:
0004            387            ds 1
0005            388   _pwm_Right0:
0005            389            ds 1
0006            390   _pwm_Right1:
0006            391            ds 1
0007            392   _direction:
0007            393            ds 1
0008            394   _currentcmd:
0008            395            ds 1
0009            396   _currentstate:
0009            397            ds 1
000A            398   _overflow_count:
000A            399            ds 1
000B            400   _time:
000B            401            ds 4
000F            402   _distance:
000F            403            ds 4
0013            404   _main_v1_1_72:
0013            405            ds 4
0017            406   _main_v2_1_72:
0017            407            ds 4
001B            408   _linetrack_vleft_1_93:
001B            409            ds 4
001F            410   _linetrack_vright_1_93:
001F            411            ds 4
0023            412   _linetrack_sloc0_1_0:
0023            413            ds 4
0027            414   _linetrack_sloc1_1_0:
0027            415            ds 4
002B            416   _turncar_v_1_99:
002B            417            ds 4
002F            418   _turncar_direction_1_99:
002F            419            ds 1
0030            420   _uturn_vleft_1_109:
0030            421            ds 4
0034            422   _uturn_vright_1_109:
0034            423            ds 4
0038            424   ;--------------------------------------------------------
0038            425   ; overlayable items in internal ram 
0038            426   ;--------------------------------------------------------
0000            427            rseg R_OSEG
0000            428   ;--------------------------------------------------------
0000            429   ; indirectly addressable internal ram data
0000            430   ;--------------------------------------------------------
0000            431            rseg R_ISEG
0000            432   ;--------------------------------------------------------
0000            433   ; absolute internal ram data
0000            434   ;--------------------------------------------------------
0000            435            DSEG
0000            436   ;--------------------------------------------------------
0000            437   ; bit data
0000            438   ;--------------------------------------------------------
0000            439            rseg R_BSEG
0000            440   _main_sloc0_1_0:
0000            441            DBIT    1
0001            442   _Timer2_ISR_sloc0_1_0:
0001            443            DBIT    1
0002            444   ;--------------------------------------------------------
0002            445   ; paged external ram data
0002            446   ;--------------------------------------------------------
0000            447            rseg R_PSEG
0000            448   ;--------------------------------------------------------
0000            449   ; external ram data
0000            450   ;--------------------------------------------------------
0000            451            rseg R_XSEG
0000            452   ;--------------------------------------------------------
0000            453   ; absolute external ram data
0000            454   ;--------------------------------------------------------
0000            455            XSEG
0000            456   ;--------------------------------------------------------
0000            457   ; external initialized ram data
0000            458   ;--------------------------------------------------------
0000            459            rseg R_IXSEG
0000            460            rseg R_HOME
0000            461            rseg R_GSINIT
0000            462            rseg R_CSEG
0000            463   ;--------------------------------------------------------
0000            464   ; Reset entry point and interrupt vectors
0000            465   ;--------------------------------------------------------
0000            466            CSEG at 0x0000
0000 020100     467            ljmp    _crt0
002B            468            CSEG at 0x002b
002B 020100     469            ljmp    _Timer2_ISR
002E            470   ;--------------------------------------------------------
002E            471   ; global & static initialisations
002E            472   ;--------------------------------------------------------
0000            473            rseg R_HOME
0000            474            rseg R_GSINIT
0000            475            rseg R_GSINIT
0000            476   ;--------------------------------------------------------
0000            477   ; data variables initialization
0000            478   ;--------------------------------------------------------
0000            479            rseg R_DINIT
0000            480   ;        robot.c:8: volatile  char pwm_count=0;
0000 75E000     481            mov     _pwm_count,#0x00
0003            482   ;        robot.c:9: volatile  char mode = 0;
0003 75A000     483            mov     _mode,#0x00
0006            484   ;        robot.c:10: volatile  char pwm_both =0;
0006 756000     485            mov     _pwm_both,#0x00
0009            486   ;        robot.c:11: volatile  char pwm_Left0 = 0; //p1.5
0009 752000     487            mov     _pwm_Left0,#0x00
000C            488   ;        robot.c:12: volatile  char pwm_Left1 = 0; //p1.6
000C 75F000     489            mov     _pwm_Left1,#0x00
000F            490   ;        robot.c:13: volatile  char pwm_Right0 = 0; //p2.0
000F 75B000     491            mov     _pwm_Right0,#0x00
0012            492   ;        robot.c:14: volatile  char pwm_Right1 = 0; //p2.1
0012 757000     493            mov     _pwm_Right1,#0x00
0015            494   ;        robot.c:15: volatile  char direction = 0; // 1 for back 0 for forward
0015 753000     495            mov     _direction,#0x00
0018            496   ;        robot.c:17: volatile  char currentcmd = 0;
0018 75F000     497            mov     _currentcmd,#0x00
001B            498   ;        robot.c:18: volatile  char currentstate = 1;
001B 75B001     499            mov     _currentstate,#0x01
001E            500   ;        robot.c:21: volatile float time = 0.0f;
001E 753000     501            mov     _time,#0x00
0021 753100     502            mov     (_time + 1),#0x00
0024 753200     503            mov     (_time + 2),#0x00
0027 753300     504            mov     (_time + 3),#0x00
002A            505   ;        robot.c:22: volatile float distance = 0.0f;
002A 75F000     506            mov     _distance,#0x00
002D 75F100     507            mov     (_distance + 1),#0x00
0030 75F200     508            mov     (_distance + 2),#0x00
0033 75F300     509            mov     (_distance + 3),#0x00
0036            510            ; The linker places a 'ret' at the end of segment R_DINIT.
0036            511   ;--------------------------------------------------------
0036            512   ; code
0036            513   ;--------------------------------------------------------
0000            514            rseg R_CSEG
0000            515   ;------------------------------------------------------------
0000            516   ;Allocation info for local variables in function 'main'
0000            517   ;------------------------------------------------------------
0000            518   ;v1                        Allocated with name '_main_v1_1_72'
0000            519   ;v2                        Allocated with name '_main_v2_1_72'
0000            520   ;------------------------------------------------------------
0000            521   ;        robot.c:24: void main(void) {
0000            522   ;        -----------------------------------------
0000            523   ;         function main
0000            524   ;        -----------------------------------------
0000            525   _main:
0000            526            using   0
0000            527   ;        robot.c:26: volatile float v1 = 0;
0000 752800     528            mov     _main_v1_1_72,#0x00
0003 752900     529            mov     (_main_v1_1_72 + 1),#0x00
0006 752A00     530            mov     (_main_v1_1_72 + 2),#0x00
0009 752B00     531            mov     (_main_v1_1_72 + 3),#0x00
000C            532   ;        robot.c:27: volatile float v2 = 0;
000C 756800     533            mov     _main_v2_1_72,#0x00
000F 756900     534            mov     (_main_v2_1_72 + 1),#0x00
0012 756A00     535            mov     (_main_v2_1_72 + 2),#0x00
0015 756B00     536            mov     (_main_v2_1_72 + 3),#0x00
0018            537   ;        robot.c:29: MOTOR_LEFT0 = 0;
0018 C295       538            clr     _P1_5
001A            539   ;        robot.c:30: MOTOR_LEFT1 = 0;
001A C296       540            clr     _P1_6
001C            541   ;        robot.c:31: MOTOR_RIGHT0 = 0;
001C C2A0       542            clr     _P2_0
001E            543   ;        robot.c:32: MOTOR_RIGHT1 = 0;
001E C2A1       544            clr     _P2_1
0020            545   ;        robot.c:35: currentstate = 1;           //1-FORWARD, 2-BACKWARDS, 3-STOPPED, 4-DEBUGGER
0020 75B001     546            mov     _currentstate,#0x01
0023            547   ;        robot.c:36: currentcmd = 0;             //0-NO COMMAND, 1-TURN LEFT, 2-TURN RIGHT, 3-FORWARDS, 4-BACKWARDS, 5-STOP, 6-UTURN
0023 75F000     548            mov     _currentcmd,#0x00
0026            549   ;        robot.c:42: InitPinADC(2, 3); // Configure P2.3 as analog input (tank1)
0026 750003     550            mov     _InitPinADC_PARM_2,#0x03
0029 758202     551            mov     dpl,#0x02
002C 120100     552            lcall   _InitPinADC
002F            553   ;        robot.c:43: InitPinADC(2, 4); // Configure P2.4 as analog input         (tank1)
002F 750004     554            mov     _InitPinADC_PARM_2,#0x04
0032 758202     555            mov     dpl,#0x02
0035 120100     556            lcall   _InitPinADC
0038            557   ;        robot.c:44: InitPinADC(2, 5); // Configure P2.5 as analog input (tank2)
0038 750005     558            mov     _InitPinADC_PARM_2,#0x05
003B 758202     559            mov     dpl,#0x02
003E 120100     560            lcall   _InitPinADC
0041            561   ;        robot.c:45: InitPinADC(2, 6); // Configure P2.6 as analog input (tank2)
0041 750006     562            mov     _InitPinADC_PARM_2,#0x06
0044 758202     563            mov     dpl,#0x02
0047 120100     564            lcall   _InitPinADC
004A            565   ;        robot.c:48: InitADC();  
004A 120100     566            lcall   _InitADC
004D            567   ;        robot.c:51: while (1) {         
004D            568   L002050?:
004D            569   ;        robot.c:54: currentcmd = readData(currentcmd); 
004D 85F082     570            mov     dpl,_currentcmd
0050 120100     571            lcall   _readData
0053 8582F0     572            mov     _currentcmd,dpl
0056            573   ;        robot.c:60: if (currentcmd == CMD_LEFT) mxDirection(0);
0056 7401       574            mov     a,#0x01
0058 B5F038     575            cjne    a,_currentcmd,L002010?
005B 758200     576            mov     dpl,#0x00
005E 120100     577            lcall   _mxDirection
0061 8001       578            sjmp    L002011?
0063            579   L002010?:
0063            580   ;        robot.c:61: else if (currentcmd == CMD_RIGHT) mxDirection(1);
0063 7402       581            mov     a,#0x02
0065 B5F0F8     582            cjne    a,_currentcmd,L002007?
0068 758201     583            mov     dpl,#0x01
006B 120100     584            lcall   _mxDirection
006E 8001       585            sjmp    L002011?
0070            586   L002007?:
0070            587   ;        robot.c:62: else if (currentcmd == CMD_STOP) mxStop();
0070 7405       588            mov     a,#0x05
0072 B5F038     589            cjne    a,_currentcmd,L002004?
0075 120100     590            lcall   _mxStop
0078 8001       591            sjmp    L002011?
007A            592   L002004?:
007A            593   ;        robot.c:63: else if (currentcmd == CMD_UTURN) mxUTurn();
007A 7406       594            mov     a,#0x06
007C B5F0B8     595            cjne    a,_currentcmd,L002011?
007F 120100     596            lcall   _mxUTurn
0082            597   L002011?:
0082            598   ;        robot.c:66: Sonar_Reading();
0082 120100     599            lcall   _Sonar_Reading
0085            600   ;        robot.c:67: if (distance < 7) {
0085 E4         601            clr     a
0086 C0E0       602            push    acc
0088 C0E0       603            push    acc
008A 74E0       604            mov     a,#0xE0
008C C0E0       605            push    acc
008E 7440       606            mov     a,#0x40
0090 C0E0       607            push    acc
0092 85F082     608            mov     dpl,_distance
0095 85F183     609            mov     dph,(_distance + 1)
0098 85F2F0     610            mov     b,(_distance + 2)
009B E5F3       611            mov     a,(_distance + 3)
009D 120100     612            lcall   ___fslt
00A0 AA82       613            mov     r2,dpl
00A2 E581       614            mov     a,sp
00A4 24FC       615            add     a,#0xfc
00A6 F581       616            mov     sp,a
00A8 EA         617            mov     a,r2
00A9 6001       618            jz      L002016?
00AB            619   ;        robot.c:68: currentstate = 3;           //code for testing
00AB 75B003     620            mov     _currentstate,#0x03
00AE            621   ;        robot.c:69: stopcar();
00AE 120100     622            lcall   _stopcar
00B1            623   ;        robot.c:70: while (distance < 7) {
00B1            624   L002012?:
00B1 E4         625            clr     a
00B2 C0E0       626            push    acc
00B4 C0E0       627            push    acc
00B6 74E0       628            mov     a,#0xE0
00B8 C0E0       629            push    acc
00BA 7440       630            mov     a,#0x40
00BC C0E0       631            push    acc
00BE 85F082     632            mov     dpl,_distance
00C1 85F183     633            mov     dph,(_distance + 1)
00C4 85F2F0     634            mov     b,(_distance + 2)
00C7 E5F3       635            mov     a,(_distance + 3)
00C9 120100     636            lcall   ___fslt
00CC AA82       637            mov     r2,dpl
00CE E581       638            mov     a,sp
00D0 24FC       639            add     a,#0xfc
00D2 F581       640            mov     sp,a
00D4 EA         641            mov     a,r2
00D5 6001       642            jz      L002014?
00D7            643   ;        robot.c:71: Sonar_Reading();
00D7 120100     644            lcall   _Sonar_Reading
00DA 8001       645            sjmp    L002012?
00DC            646   L002014?:
00DC            647   ;        robot.c:73: currentstate = 1;           //code for testing
00DC 75B001     648            mov     _currentstate,#0x01
00DF            649   L002016?:
00DF            650   ;        robot.c:77: switch (currentstate) {
00DF AAB0       651            mov     r2,_currentstate
00E1 BA01F8     652            cjne    r2,#0x01,L002097?
00E4 8001       653            sjmp    L002017?
00E6            654   L002097?:
00E6 BA0278     655            cjne    r2,#0x02,L002098?
00E9 8001       656            sjmp    L002018?
00EB            657   L002098?:
00EB            658   ;        robot.c:78: case FORWARD_STATE:
00EB BA03F8     659            cjne    r2,#0x03,L002020?
00EE 8001       660            sjmp    L002019?
00F0            661   L002017?:
00F0            662   ;        robot.c:79: linetrack(0);       // forwards
00F0 900000     663            mov     dptr,#0x0000
00F3 120100     664            lcall   _linetrack
00F6            665   ;        robot.c:81: v1 = Volts_at_Pin(TANK_FL);
00F6 75820B     666            mov     dpl,#0x0B
00F9 120100     667            lcall   _Volts_at_Pin
00FC 858228     668            mov     _main_v1_1_72,dpl
00FF 858329     669            mov     (_main_v1_1_72 + 1),dph
0102 85F02A     670            mov     (_main_v1_1_72 + 2),b
0105 F52B       671            mov     (_main_v1_1_72 + 3),a
0107            672   ;        robot.c:82: v2 = Volts_at_Pin(TANK_FR);
0107 75820C     673            mov     dpl,#0x0C
010A 120100     674            lcall   _Volts_at_Pin
010D 858268     675            mov     _main_v2_1_72,dpl
0110 858369     676            mov     (_main_v2_1_72 + 1),dph
0113 85F06A     677            mov     (_main_v2_1_72 + 2),b
0116 F56B       678            mov     (_main_v2_1_72 + 3),a
0118            679   ;        robot.c:83: break;
0118            680   ;        robot.c:84: case REVERSE_STATE:
0118 8001       681            sjmp    L002020?
011A            682   L002018?:
011A            683   ;        robot.c:85: linetrack(1);       // backwards
011A 900001     684            mov     dptr,#0x0001
011D 120100     685            lcall   _linetrack
0120            686   ;        robot.c:87: v2 = Volts_at_Pin(TANK_RL);
0120 75820D     687            mov     dpl,#0x0D
0123 120100     688            lcall   _Volts_at_Pin
0126 858268     689            mov     _main_v2_1_72,dpl
0129 858369     690            mov     (_main_v2_1_72 + 1),dph
012C 85F06A     691            mov     (_main_v2_1_72 + 2),b
012F F56B       692            mov     (_main_v2_1_72 + 3),a
0131            693   ;        robot.c:88: v1 = Volts_at_Pin(TANK_RR);
0131 75820E     694            mov     dpl,#0x0E
0134 120100     695            lcall   _Volts_at_Pin
0137 858228     696            mov     _main_v1_1_72,dpl
013A 858329     697            mov     (_main_v1_1_72 + 1),dph
013D 85F02A     698            mov     (_main_v1_1_72 + 2),b
0140 F52B       699            mov     (_main_v1_1_72 + 3),a
0142            700   ;        robot.c:89: break;
0142            701   ;        robot.c:90: case STOP_STATE:
0142 8001       702            sjmp    L002020?
0144            703   L002019?:
0144            704   ;        robot.c:91: stopcar();          // stop car
0144 120100     705            lcall   _stopcar
0147            706   ;        robot.c:93: }
0147            707   L002020?:
0147            708   ;        robot.c:96: switch (currentcmd) {
0147 E5F0       709            mov     a,_currentcmd
0149 FA         710            mov     r2,a
014A 30E7B8     711            jnb     acc.7,L002100?
014D 020100     712            ljmp    L002047?
0150            713   L002100?:
0150 C3         714            clr     c
0151 7486       715            mov     a,#(0x06 ^ 0x80)
0153 8AF0       716            mov     b,r2
0155 63F080     717            xrl     b,#0x80
0158 95F0       718            subb    a,b
015A 5001       719            jnc     L002101?
015C 020100     720            ljmp    L002047?
015F            721   L002101?:
015F EA         722            mov     a,r2
0160 2A         723            add     a,r2
0161 2A         724            add     a,r2
0162 909D78     725            mov     dptr,#L002102?
0165 73         726            jmp     @a+dptr
0166            727   L002102?:
0166 020100     728            ljmp    L002021?
0169 020100     729            ljmp    L002035?
016C 020100     730            ljmp    L002039?
016F 020100     731            ljmp    L002043?
0172 020100     732            ljmp    L002044?
0175 020100     733            ljmp    L002045?
0178 020100     734            ljmp    L002046?
017B            735   ;        robot.c:98: case CMD_NONE:
017B            736   L002021?:
017B            737   ;        robot.c:100: if ((currentstate-1) ? 
017B AAB0       738            mov     r2,_currentstate
017D E5B0       739            mov     a,_currentstate
017F 33         740            rlc     a
0180 95E0       741            subb    a,acc
0182 FB         742            mov     r3,a
0183 1A         743            dec     r2
0184 BAFF78     744            cjne    r2,#0xff,L002103?
0187 1B         745            dec     r3
0188            746   L002103?:
0188 EA         747            mov     a,r2
0189 4B         748            orl     a,r3
018A 6001       749            jz      L002054?
018C            750   ;        robot.c:101: (v1 > 1.2 && v2 > 1.2) :
018C 749A       751            mov     a,#0x9A
018E C0E0       752            push    acc
0190 7499       753            mov     a,#0x99
0192 C0E0       754            push    acc
0194 C0E0       755            push    acc
0196 743F       756            mov     a,#0x3F
0198 C0E0       757            push    acc
019A 852882     758            mov     dpl,_main_v1_1_72
019D 852983     759            mov     dph,(_main_v1_1_72 + 1)
01A0 852AF0     760            mov     b,(_main_v1_1_72 + 2)
01A3 E52B       761            mov     a,(_main_v1_1_72 + 3)
01A5 120100     762            lcall   ___fsgt
01A8 AA82       763            mov     r2,dpl
01AA E581       764            mov     a,sp
01AC 24FC       765            add     a,#0xfc
01AE F581       766            mov     sp,a
01B0 EA         767            mov     a,r2
01B1 6001       768            jz      L002056?
01B3 749A       769            mov     a,#0x9A
01B5 C0E0       770            push    acc
01B7 7499       771            mov     a,#0x99
01B9 C0E0       772            push    acc
01BB C0E0       773            push    acc
01BD 743F       774            mov     a,#0x3F
01BF C0E0       775            push    acc
01C1 856882     776            mov     dpl,_main_v2_1_72
01C4 856983     777            mov     dph,(_main_v2_1_72 + 1)
01C7 856AF0     778            mov     b,(_main_v2_1_72 + 2)
01CA E56B       779            mov     a,(_main_v2_1_72 + 3)
01CC 120100     780            lcall   ___fsgt
01CF AA82       781            mov     r2,dpl
01D1 E581       782            mov     a,sp
01D3 24FC       783            add     a,#0xfc
01D5 F581       784            mov     sp,a
01D7 EA         785            mov     a,r2
01D8 7001       786            jnz     L002057?
01DA            787   L002056?:
01DA 7A00       788            mov     r2,#0x00
01DC 8001       789            sjmp    L002058?
01DE            790   L002057?:
01DE 7A01       791            mov     r2,#0x01
01E0            792   L002058?:
01E0 EA         793            mov     a,r2
01E1 24FF       794            add     a,#0xff
01E3 9218       795            mov     _main_sloc0_1_0,c
01E5 8001       796            sjmp    L002055?
01E7            797   L002054?:
01E7            798   ;        robot.c:102: (v1 > 0.7 && v2 > 1)) {
01E7 7433       799            mov     a,#0x33
01E9 C0E0       800            push    acc
01EB C0E0       801            push    acc
01ED C0E0       802            push    acc
01EF 743F       803            mov     a,#0x3F
01F1 C0E0       804            push    acc
01F3 852882     805            mov     dpl,_main_v1_1_72
01F6 852983     806            mov     dph,(_main_v1_1_72 + 1)
01F9 852AF0     807            mov     b,(_main_v1_1_72 + 2)
01FC E52B       808            mov     a,(_main_v1_1_72 + 3)
01FE 120100     809            lcall   ___fsgt
0201 AA82       810            mov     r2,dpl
0203 E581       811            mov     a,sp
0205 24FC       812            add     a,#0xfc
0207 F581       813            mov     sp,a
0209 EA         814            mov     a,r2
020A 6001       815            jz      L002059?
020C E4         816            clr     a
020D C0E0       817            push    acc
020F C0E0       818            push    acc
0211 7480       819            mov     a,#0x80
0213 C0E0       820            push    acc
0215 743F       821            mov     a,#0x3F
0217 C0E0       822            push    acc
0219 856882     823            mov     dpl,_main_v2_1_72
021C 856983     824            mov     dph,(_main_v2_1_72 + 1)
021F 856AF0     825            mov     b,(_main_v2_1_72 + 2)
0222 E56B       826            mov     a,(_main_v2_1_72 + 3)
0224 120100     827            lcall   ___fsgt
0227 AA82       828            mov     r2,dpl
0229 E581       829            mov     a,sp
022B 24FC       830            add     a,#0xfc
022D F581       831            mov     sp,a
022F EA         832            mov     a,r2
0230 7001       833            jnz     L002060?
0232            834   L002059?:
0232 7A00       835            mov     r2,#0x00
0234 8001       836            sjmp    L002061?
0236            837   L002060?:
0236 7A01       838            mov     r2,#0x01
0238            839   L002061?:
0238 EA         840            mov     a,r2
0239 24FF       841            add     a,#0xff
023B 9218       842            mov     _main_sloc0_1_0,c
023D            843   L002055?:
023D 201800     844            jb      _main_sloc0_1_0,L002109?
0240 020100     845            ljmp    L002050?
0243            846   L002109?:
0243            847   ;        robot.c:105: if (currentstate == 1) {
0243 7401       848            mov     a,#0x01
0245 B5B040     849            cjne    a,_currentstate,L002031?
0248            850   ;        robot.c:106: if (Volts_at_Pin(TANK_RL)>Volts_at_Pin(TANK_RR)) {
0248 75820D     851            mov     dpl,#0x0D
024B 120100     852            lcall   _Volts_at_Pin
024E AA82       853            mov     r2,dpl
0250 AB83       854            mov     r3,dph
0252 ACF0       855            mov     r4,b
0254 FD         856            mov     r5,a
0255 75820E     857            mov     dpl,#0x0E
0258 C002       858            push    ar2
025A C003       859            push    ar3
025C C004       860            push    ar4
025E C005       861            push    ar5
0260 120100     862            lcall   _Volts_at_Pin
0263 AE82       863            mov     r6,dpl
0265 AF83       864            mov     r7,dph
0267 A8F0       865            mov     r0,b
0269 F9         866            mov     r1,a
026A D005       867            pop     ar5
026C D004       868            pop     ar4
026E D003       869            pop     ar3
0270 D002       870            pop     ar2
0272 C006       871            push    ar6
0274 C007       872            push    ar7
0276 C000       873            push    ar0
0278 C001       874            push    ar1
027A 8A82       875            mov     dpl,r2
027C 8B83       876            mov     dph,r3
027E 8CF0       877            mov     b,r4
0280 ED         878            mov     a,r5
0281 120100     879            lcall   ___fsgt
0284 AA82       880            mov     r2,dpl
0286 E581       881            mov     a,sp
0288 24FC       882            add     a,#0xfc
028A F581       883            mov     sp,a
028C EA         884            mov     a,r2
028D 6001       885            jz      L002023?
028F            886   ;        robot.c:107: pwm_Left1 = 50;
028F 75F032     887            mov     _pwm_Left1,#0x32
0292            888   ;        robot.c:108: pwm_Left0 = -1;
0292 7520FF     889            mov     _pwm_Left0,#0xFF
0295            890   ;        robot.c:109: pwm_Right0 = 30;
0295 75B01E     891            mov     _pwm_Right0,#0x1E
0298            892   ;        robot.c:110: pwm_Right1 = -1;
0298 7570FF     893            mov     _pwm_Right1,#0xFF
029B 8001       894            sjmp    L002032?
029D            895   L002023?:
029D            896   ;        robot.c:113: pwm_Left1 = 30;
029D 75F01E     897            mov     _pwm_Left1,#0x1E
02A0            898   ;        robot.c:114: pwm_Left0 = -1;
02A0 7520FF     899            mov     _pwm_Left0,#0xFF
02A3            900   ;        robot.c:115: pwm_Right0 = 50;
02A3 75B032     901            mov     _pwm_Right0,#0x32
02A6            902   ;        robot.c:116: pwm_Right1 = -1;
02A6 7570FF     903            mov     _pwm_Right1,#0xFF
02A9 8001       904            sjmp    L002032?
02AB            905   L002031?:
02AB            906   ;        robot.c:118: } else if (currentstate == 2) {
02AB 7402       907            mov     a,#0x02
02AD B5B0C0     908            cjne    a,_currentstate,L002032?
02B0            909   ;        robot.c:119: if (Volts_at_Pin(TANK_FL)>Volts_at_Pin(TANK_FR)) {
02B0 75820B     910            mov     dpl,#0x0B
02B3 120100     911            lcall   _Volts_at_Pin
02B6 AA82       912            mov     r2,dpl
02B8 AB83       913            mov     r3,dph
02BA ACF0       914            mov     r4,b
02BC FD         915            mov     r5,a
02BD 75820C     916            mov     dpl,#0x0C
02C0 C002       917            push    ar2
02C2 C003       918            push    ar3
02C4 C004       919            push    ar4
02C6 C005       920            push    ar5
02C8 120100     921            lcall   _Volts_at_Pin
02CB AE82       922            mov     r6,dpl
02CD AF83       923            mov     r7,dph
02CF A8F0       924            mov     r0,b
02D1 F9         925            mov     r1,a
02D2 D005       926            pop     ar5
02D4 D004       927            pop     ar4
02D6 D003       928            pop     ar3
02D8 D002       929            pop     ar2
02DA C006       930            push    ar6
02DC C007       931            push    ar7
02DE C000       932            push    ar0
02E0 C001       933            push    ar1
02E2 8A82       934            mov     dpl,r2
02E4 8B83       935            mov     dph,r3
02E6 8CF0       936            mov     b,r4
02E8 ED         937            mov     a,r5
02E9 120100     938            lcall   ___fsgt
02EC AA82       939            mov     r2,dpl
02EE E581       940            mov     a,sp
02F0 24FC       941            add     a,#0xfc
02F2 F581       942            mov     sp,a
02F4 EA         943            mov     a,r2
02F5 6001       944            jz      L002026?
02F7            945   ;        robot.c:120: pwm_Left0 = 50;
02F7 752032     946            mov     _pwm_Left0,#0x32
02FA            947   ;        robot.c:121: pwm_Left1 = -1;
02FA 75F0FF     948            mov     _pwm_Left1,#0xFF
02FD            949   ;        robot.c:122: pwm_Right0 = -1;
02FD 75B0FF     950            mov     _pwm_Right0,#0xFF
0300            951   ;        robot.c:123: pwm_Right1 = 30;
0300 75701E     952            mov     _pwm_Right1,#0x1E
0303 8001       953            sjmp    L002032?
0305            954   L002026?:
0305            955   ;        robot.c:126: pwm_Left0 = 30;
0305 75201E     956            mov     _pwm_Left0,#0x1E
0308            957   ;        robot.c:127: pwm_Left1 = -1;
0308 75F0FF     958            mov     _pwm_Left1,#0xFF
030B            959   ;        robot.c:128: pwm_Right0 = -1;
030B 75B0FF     960            mov     _pwm_Right0,#0xFF
030E            961   ;        robot.c:129: pwm_Right1 = 50;
030E 757032     962            mov     _pwm_Right1,#0x32
0311            963   L002032?:
0311            964   ;        robot.c:133: waitms(1500);
0311 9005DC     965            mov     dptr,#0x05DC
0314 120100     966            lcall   _waitms
0317            967   ;        robot.c:135: break;
0317 020100     968            ljmp    L002050?
031A            969   ;        robot.c:137: case CMD_LEFT:
031A            970   L002035?:
031A            971   ;        robot.c:140: if (v1 > 0.7 && v2 >1)  {
031A 7433       972            mov     a,#0x33
031C C0E0       973            push    acc
031E C0E0       974            push    acc
0320 C0E0       975            push    acc
0322 743F       976            mov     a,#0x3F
0324 C0E0       977            push    acc
0326 852882     978            mov     dpl,_main_v1_1_72
0329 852983     979            mov     dph,(_main_v1_1_72 + 1)
032C 852AF0     980            mov     b,(_main_v1_1_72 + 2)
032F E52B       981            mov     a,(_main_v1_1_72 + 3)
0331 120100     982            lcall   ___fsgt
0334 AA82       983            mov     r2,dpl
0336 E581       984            mov     a,sp
0338 24FC       985            add     a,#0xfc
033A F581       986            mov     sp,a
033C EA         987            mov     a,r2
033D 7001       988            jnz     L002116?
033F 020100     989            ljmp    L002050?
0342            990   L002116?:
0342 E4         991            clr     a
0343 C0E0       992            push    acc
0345 C0E0       993            push    acc
0347 7480       994            mov     a,#0x80
0349 C0E0       995            push    acc
034B 743F       996            mov     a,#0x3F
034D C0E0       997            push    acc
034F 856882     998            mov     dpl,_main_v2_1_72
0352 856983     999            mov     dph,(_main_v2_1_72 + 1)
0355 856AF0    1000            mov     b,(_main_v2_1_72 + 2)
0358 E56B      1001            mov     a,(_main_v2_1_72 + 3)
035A 120100    1002            lcall   ___fsgt
035D AA82      1003            mov     r2,dpl
035F E581      1004            mov     a,sp
0361 24FC      1005            add     a,#0xfc
0363 F581      1006            mov     sp,a
0365 EA        1007            mov     a,r2
0366 7001      1008            jnz     L002117?
0368 020100    1009            ljmp    L002050?
036B           1010   L002117?:
036B           1011   ;        robot.c:146: turncar(currentstate);
036B AAB0      1012            mov     r2,_currentstate
036D E5B0      1013            mov     a,_currentstate
036F 33        1014            rlc     a
0370 95E0      1015            subb    a,acc
0372 FB        1016            mov     r3,a
0373 8A82      1017            mov     dpl,r2
0375 8B83      1018            mov     dph,r3
0377 120100    1019            lcall   _turncar
037A           1020   ;        robot.c:147: currentcmd = 0;
037A 75F000    1021            mov     _currentcmd,#0x00
037D           1022   ;        robot.c:149: break;
037D 020100    1023            ljmp    L002050?
0380           1024   ;        robot.c:152: case CMD_RIGHT:
0380           1025   L002039?:
0380           1026   ;        robot.c:155: if (v1 > 0.7 && v2 >1) {
0380 7433      1027            mov     a,#0x33
0382 C0E0      1028            push    acc
0384 C0E0      1029            push    acc
0386 C0E0      1030            push    acc
0388 743F      1031            mov     a,#0x3F
038A C0E0      1032            push    acc
038C 852882    1033            mov     dpl,_main_v1_1_72
038F 852983    1034            mov     dph,(_main_v1_1_72 + 1)
0392 852AF0    1035            mov     b,(_main_v1_1_72 + 2)
0395 E52B      1036            mov     a,(_main_v1_1_72 + 3)
0397 120100    1037            lcall   ___fsgt
039A AA82      1038            mov     r2,dpl
039C E581      1039            mov     a,sp
039E 24FC      1040            add     a,#0xfc
03A0 F581      1041            mov     sp,a
03A2 EA        1042            mov     a,r2
03A3 7001      1043            jnz     L002118?
03A5 020100    1044            ljmp    L002050?
03A8           1045   L002118?:
03A8 E4        1046            clr     a
03A9 C0E0      1047            push    acc
03AB C0E0      1048            push    acc
03AD 7480      1049            mov     a,#0x80
03AF C0E0      1050            push    acc
03B1 743F      1051            mov     a,#0x3F
03B3 C0E0      1052            push    acc
03B5 856882    1053            mov     dpl,_main_v2_1_72
03B8 856983    1054            mov     dph,(_main_v2_1_72 + 1)
03BB 856AF0    1055            mov     b,(_main_v2_1_72 + 2)
03BE E56B      1056            mov     a,(_main_v2_1_72 + 3)
03C0 120100    1057            lcall   ___fsgt
03C3 AA82      1058            mov     r2,dpl
03C5 E581      1059            mov     a,sp
03C7 24FC      1060            add     a,#0xfc
03C9 F581      1061            mov     sp,a
03CB EA        1062            mov     a,r2
03CC 7001      1063            jnz     L002119?
03CE 020100    1064            ljmp    L002050?
03D1           1065   L002119?:
03D1           1066   ;        robot.c:158: turncar(currentstate + 2); //1 = right
03D1 AAB0      1067            mov     r2,_currentstate
03D3 E5B0      1068            mov     a,_currentstate
03D5 33        1069            rlc     a
03D6 95E0      1070            subb    a,acc
03D8 FB        1071            mov     r3,a
03D9 8A82      1072            mov     dpl,r2
03DB 8B83      1073            mov     dph,r3
03DD A3        1074            inc     dptr
03DE A3        1075            inc     dptr
03DF 120100    1076            lcall   _turncar
03E2           1077   ;        robot.c:159: currentcmd = 0;
03E2 75F000    1078            mov     _currentcmd,#0x00
03E5           1079   ;        robot.c:161: break;
03E5 020100    1080            ljmp    L002050?
03E8           1081   ;        robot.c:164: case CMD_FORWARD:
03E8           1082   L002043?:
03E8           1083   ;        robot.c:167: currentstate = 1;
03E8 75B001    1084            mov     _currentstate,#0x01
03EB           1085   ;        robot.c:168: currentcmd = 0;
03EB 75F000    1086            mov     _currentcmd,#0x00
03EE           1087   ;        robot.c:169: break;
03EE 020100    1088            ljmp    L002050?
03F1           1089   ;        robot.c:172: case CMD_REVERSE:
03F1           1090   L002044?:
03F1           1091   ;        robot.c:175: currentstate = 2;
03F1 75B002    1092            mov     _currentstate,#0x02
03F4           1093   ;        robot.c:176: currentcmd = 0;
03F4 75F000    1094            mov     _currentcmd,#0x00
03F7           1095   ;        robot.c:177: break;
03F7 020100    1096            ljmp    L002050?
03FA           1097   ;        robot.c:180: case CMD_STOP:
03FA           1098   L002045?:
03FA           1099   ;        robot.c:183: currentstate = 3;
03FA 75B003    1100            mov     _currentstate,#0x03
03FD           1101   ;        robot.c:184: currentcmd = 0;
03FD 75F000    1102            mov     _currentcmd,#0x00
0400           1103   ;        robot.c:185: break;
0400 020100    1104            ljmp    L002050?
0403           1105   ;        robot.c:188: case CMD_UTURN:
0403           1106   L002046?:
0403           1107   ;        robot.c:189: uturn();
0403 120100    1108            lcall   _uturn
0406           1109   ;        robot.c:191: currentcmd = 0;
0406 75F000    1110            mov     _currentcmd,#0x00
0409           1111   ;        robot.c:192: break;
0409 020100    1112            ljmp    L002050?
040C           1113   ;        robot.c:195: default: 
040C           1114   L002047?:
040C           1115   ;        robot.c:196: currentstate = 1;
040C 75B001    1116            mov     _currentstate,#0x01
040F           1117   ;        robot.c:197: }
040F 020100    1118            ljmp    L002050?
0412           1119   ;------------------------------------------------------------
0412           1120   ;Allocation info for local variables in function 'Timer2_ISR'
0412           1121   ;------------------------------------------------------------
0412           1122   ;------------------------------------------------------------
0412           1123   ;        robot.c:201: void Timer2_ISR (void) interrupt 5 {
0412           1124   ;        -----------------------------------------
0412           1125   ;         function Timer2_ISR
0412           1126   ;        -----------------------------------------
0412           1127   _Timer2_ISR:
0412 C0E0      1128            push    acc
0414 C0F0      1129            push    b
0416 C0D0      1130            push    psw
0418 75D000    1131            mov     psw,#0x00
041B           1132   ;        robot.c:202: TF2H = 0; // Clear Timer2 interrupt flag
041B C2CF      1133            clr     _TF2H
041D           1134   ;        robot.c:204: pwm_count++;
041D 05E0      1135            inc     _pwm_count
041F           1136   ;        robot.c:205: if(pwm_count>100) pwm_count=0;
041F C3        1137            clr     c
0420 74E4      1138            mov     a,#(0x64 ^ 0x80)
0422 85E0F0    1139            mov     b,_pwm_count
0425 63F080    1140            xrl     b,#0x80
0428 95F0      1141            subb    a,b
042A 5001      1142            jnc     L003002?
042C 75E000    1143            mov     _pwm_count,#0x00
042F           1144   L003002?:
042F           1145   ;        robot.c:208: MOTOR_LEFT0 = pwm_count > pwm_Left0 ? 0 : 1; //p1.5
042F C3        1146            clr     c
0430 E520      1147            mov     a,_pwm_Left0
0432 6480      1148            xrl     a,#0x80
0434 85E0F0    1149            mov     b,_pwm_count
0437 63F080    1150            xrl     b,#0x80
043A 95F0      1151            subb    a,b
043C 9268      1152            mov  _Timer2_ISR_sloc0_1_0,c
043E B3        1153            cpl     c
043F 9295      1154            mov     _P1_5,c
0441           1155   ;        robot.c:209: MOTOR_LEFT1 = pwm_count > pwm_Left1 ? 0 : 1; //p1.6
0441 C3        1156            clr     c
0442 E5F0      1157            mov     a,_pwm_Left1
0444 6480      1158            xrl     a,#0x80
0446 85E0F0    1159            mov     b,_pwm_count
0449 63F080    1160            xrl     b,#0x80
044C 95F0      1161            subb    a,b
044E 9268      1162            mov  _Timer2_ISR_sloc0_1_0,c
0450 B3        1163            cpl     c
0451 9296      1164            mov     _P1_6,c
0453           1165   ;        robot.c:210: MOTOR_RIGHT0 = pwm_count > pwm_Right0 ? 0 : 1; //p2.0
0453 C3        1166            clr     c
0454 E5B0      1167            mov     a,_pwm_Right0
0456 6480      1168            xrl     a,#0x80
0458 85E0F0    1169            mov     b,_pwm_count
045B 63F080    1170            xrl     b,#0x80
045E 95F0      1171            subb    a,b
0460 9268      1172            mov  _Timer2_ISR_sloc0_1_0,c
0462 B3        1173            cpl     c
0463 92A0      1174            mov     _P2_0,c
0465           1175   ;        robot.c:211: MOTOR_RIGHT1 = pwm_count > pwm_Right1 ? 0 : 1; //p2.1
0465 C3        1176            clr     c
0466 E570      1177            mov     a,_pwm_Right1
0468 6480      1178            xrl     a,#0x80
046A 85E0F0    1179            mov     b,_pwm_count
046D 63F080    1180            xrl     b,#0x80
0470 95F0      1181            subb    a,b
0472 9268      1182            mov  _Timer2_ISR_sloc0_1_0,c
0474 B3        1183            cpl     c
0475 92A1      1184            mov     _P2_1,c
0477 D0D0      1185            pop     psw
0479 D0F0      1186            pop     b
047B D0E0      1187            pop     acc
047D 32        1188            reti
047E           1189   ;        eliminated unneeded push/pop dpl
047E           1190   ;        eliminated unneeded push/pop dph
047E           1191   ;------------------------------------------------------------
047E           1192   ;Allocation info for local variables in function 'readData'
047E           1193   ;------------------------------------------------------------
047E           1194   ;prevcommand               Allocated to registers r2 
047E           1195   ;command                   Allocated to registers r3 
047E           1196   ;------------------------------------------------------------
047E           1197   ;        robot.c:304: unsigned char readData(unsigned char prevcommand) {
047E           1198   ;        -----------------------------------------
047E           1199   ;         function readData
047E           1200   ;        -----------------------------------------
047E           1201   _readData:
047E AA82      1202            mov     r2,dpl
0480           1203   ;        robot.c:305: unsigned char command = prevcommand;
0480 8A03      1204            mov     ar3,r2
0482           1205   ;        robot.c:306: if (!COMMAND_PIN) {
0482 209100    1206            jb      _P1_1,L004010?
0485           1207   ;        robot.c:308: while (!COMMAND_PIN);
0485           1208   L004001?:
0485 309140    1209            jnb     _P1_1,L004001?
0488           1210   ;        robot.c:309: P1_4 = 1;
0488 D294      1211            setb    _P1_4
048A           1212   ;        robot.c:310: waitms((int)(CMDFRQ + CMDFRQ/2));
048A 900060    1213            mov     dptr,#0x0060
048D C002      1214            push    ar2
048F 120100    1215            lcall   _waitms
0492           1216   ;        robot.c:311: P1_4 = 0;
0492 C294      1217            clr     _P1_4
0494           1218   ;        robot.c:312: command |= COMMAND_PIN<<2;
0494 A291      1219            mov     c,_P1_1
0496 E4        1220            clr     a
0497 33        1221            rlc     a
0498 25E0      1222            add     a,acc
049A 25E0      1223            add     a,acc
049C FB        1224            mov     r3,a
049D           1225   ;        robot.c:313: waitms(CMDFRQ);
049D 900040    1226            mov     dptr,#0x0040
04A0 C003      1227            push    ar3
04A2 120100    1228            lcall   _waitms
04A5 D003      1229            pop     ar3
04A7           1230   ;        robot.c:314: P1_4 = 1;
04A7 D294      1231            setb    _P1_4
04A9           1232   ;        robot.c:315: command |= COMMAND_PIN<<1;
04A9 A291      1233            mov     c,_P1_1
04AB E4        1234            clr     a
04AC 33        1235            rlc     a
04AD 25E0      1236            add     a,acc
04AF 4203      1237            orl     ar3,a
04B1           1238   ;        robot.c:316: waitms(CMDFRQ);
04B1 900040    1239            mov     dptr,#0x0040
04B4 C003      1240            push    ar3
04B6 120100    1241            lcall   _waitms
04B9 D003      1242            pop     ar3
04BB D002      1243            pop     ar2
04BD           1244   ;        robot.c:317: P1_4 = 0;
04BD C294      1245            clr     _P1_4
04BF           1246   ;        robot.c:318: command |= COMMAND_PIN;
04BF A291      1247            mov     c,_P1_1
04C1 E4        1248            clr     a
04C2 33        1249            rlc     a
04C3 FC        1250            mov     r4,a
04C4 4203      1251            orl     ar3,a
04C6           1252   ;        robot.c:319: while (!COMMAND_PIN);
04C6           1253   L004004?:
04C6 309180    1254            jnb     _P1_1,L004004?
04C9           1255   ;        robot.c:324: if (command > 6) command = prevcommand; 
04C9 EB        1256            mov     a,r3
04CA 24F9      1257            add     a,#0xff - 0x06
04CC 5001      1258            jnc     L004010?
04CE 8A03      1259            mov     ar3,r2
04D0           1260   L004010?:
04D0           1261   ;        robot.c:327: return command;
04D0 8B82      1262            mov     dpl,r3
04D2 22        1263            ret
04D3           1264   ;------------------------------------------------------------
04D3           1265   ;Allocation info for local variables in function 'linetrack'
04D3           1266   ;------------------------------------------------------------
04D3           1267   ;forwardbackward           Allocated to registers r2 r3 
04D3           1268   ;vleft                     Allocated with name '_linetrack_vleft_1_93'
04D3           1269   ;vright                    Allocated with name '_linetrack_vright_1_93'
04D3           1270   ;sloc0                     Allocated with name '_linetrack_sloc0_1_0'
04D3           1271   ;sloc1                     Allocated with name '_linetrack_sloc1_1_0'
04D3           1272   ;------------------------------------------------------------
04D3           1273   ;        robot.c:334: void linetrack (int forwardbackward) {
04D3           1274   ;        -----------------------------------------
04D3           1275   ;         function linetrack
04D3           1276   ;        -----------------------------------------
04D3           1277   _linetrack:
04D3 AA82      1278            mov     r2,dpl
04D5 AB83      1279            mov     r3,dph
04D7           1280   ;        robot.c:342: if (forwardbackward == 0) {
04D7 EA        1281            mov     a,r2
04D8 4B        1282            orl     a,r3
04D9 6001      1283            jz      L005010?
04DB 020100    1284            ljmp    L005004?
04DE           1285   L005010?:
04DE           1286   ;        robot.c:343: vleft=Volts_at_Pin(TANK_FL);
04DE 75820B    1287            mov     dpl,#0x0B
04E1 120100    1288            lcall   _Volts_at_Pin
04E4 8582B8    1289            mov     _linetrack_vleft_1_93,dpl
04E7 8583B9    1290            mov     (_linetrack_vleft_1_93 + 1),dph
04EA 85F0BA    1291            mov     (_linetrack_vleft_1_93 + 2),b
04ED F5BB      1292            mov     (_linetrack_vleft_1_93 + 3),a
04EF           1293   ;        robot.c:344: vright=Volts_at_Pin(TANK_FR);
04EF 75820C    1294            mov     dpl,#0x0C
04F2 120100    1295            lcall   _Volts_at_Pin
04F5 858208    1296            mov     _linetrack_vright_1_93,dpl
04F8 858309    1297            mov     (_linetrack_vright_1_93 + 1),dph
04FB 85F00A    1298            mov     (_linetrack_vright_1_93 + 2),b
04FE F50B      1299            mov     (_linetrack_vright_1_93 + 3),a
0500           1300   ;        robot.c:347: pwm_Left0 = -1;
0500 7520FF    1301            mov     _pwm_Left0,#0xFF
0503           1302   ;        robot.c:348: pwm_Left1 = vright*vright*75/(vright*vright+vleft*vleft);
0503 C008      1303            push    _linetrack_vright_1_93
0505 C009      1304            push    (_linetrack_vright_1_93 + 1)
0507 C00A      1305            push    (_linetrack_vright_1_93 + 2)
0509 C00B      1306            push    (_linetrack_vright_1_93 + 3)
050B 850882    1307            mov     dpl,_linetrack_vright_1_93
050E 850983    1308            mov     dph,(_linetrack_vright_1_93 + 1)
0511 850AF0    1309            mov     b,(_linetrack_vright_1_93 + 2)
0514 E50B      1310            mov     a,(_linetrack_vright_1_93 + 3)
0516 120100    1311            lcall   ___fsmul
0519 AC82      1312            mov     r4,dpl
051B AD83      1313            mov     r5,dph
051D AEF0      1314            mov     r6,b
051F FF        1315            mov     r7,a
0520 E581      1316            mov     a,sp
0522 24FC      1317            add     a,#0xfc
0524 F581      1318            mov     sp,a
0526 C004      1319            push    ar4
0528 C005      1320            push    ar5
052A C006      1321            push    ar6
052C C007      1322            push    ar7
052E 900000    1323            mov     dptr,#0x0000
0531 75F096    1324            mov     b,#0x96
0534 7442      1325            mov     a,#0x42
0536 120100    1326            lcall   ___fsmul
0539 858258    1327            mov     _linetrack_sloc0_1_0,dpl
053C 858359    1328            mov     (_linetrack_sloc0_1_0 + 1),dph
053F 85F05A    1329            mov     (_linetrack_sloc0_1_0 + 2),b
0542 F55B      1330            mov     (_linetrack_sloc0_1_0 + 3),a
0544 E581      1331            mov     a,sp
0546 24FC      1332            add     a,#0xfc
0548 F581      1333            mov     sp,a
054A C008      1334            push    _linetrack_vright_1_93
054C C009      1335            push    (_linetrack_vright_1_93 + 1)
054E C00A      1336            push    (_linetrack_vright_1_93 + 2)
0550 C00B      1337            push    (_linetrack_vright_1_93 + 3)
0552 850882    1338            mov     dpl,_linetrack_vright_1_93
0555 850983    1339            mov     dph,(_linetrack_vright_1_93 + 1)
0558 850AF0    1340            mov     b,(_linetrack_vright_1_93 + 2)
055B E50B      1341            mov     a,(_linetrack_vright_1_93 + 3)
055D 120100    1342            lcall   ___fsmul
0560 8582A8    1343            mov     _linetrack_sloc1_1_0,dpl
0563 8583A9    1344            mov     (_linetrack_sloc1_1_0 + 1),dph
0566 85F0AA    1345            mov     (_linetrack_sloc1_1_0 + 2),b
0569 F5AB      1346            mov     (_linetrack_sloc1_1_0 + 3),a
056B E581      1347            mov     a,sp
056D 24FC      1348            add     a,#0xfc
056F F581      1349            mov     sp,a
0571 C0B8      1350            push    _linetrack_vleft_1_93
0573 C0B9      1351            push    (_linetrack_vleft_1_93 + 1)
0575 C0BA      1352            push    (_linetrack_vleft_1_93 + 2)
0577 C0BB      1353            push    (_linetrack_vleft_1_93 + 3)
0579 85B882    1354            mov     dpl,_linetrack_vleft_1_93
057C 85B983    1355            mov     dph,(_linetrack_vleft_1_93 + 1)
057F 85BAF0    1356            mov     b,(_linetrack_vleft_1_93 + 2)
0582 E5BB      1357            mov     a,(_linetrack_vleft_1_93 + 3)
0584 120100    1358            lcall   ___fsmul
0587 AE82      1359            mov     r6,dpl
0589 AF83      1360            mov     r7,dph
058B ACF0      1361            mov     r4,b
058D FD        1362            mov     r5,a
058E E581      1363            mov     a,sp
0590 24FC      1364            add     a,#0xfc
0592 F581      1365            mov     sp,a
0594 C006      1366            push    ar6
0596 C007      1367            push    ar7
0598 C004      1368            push    ar4
059A C005      1369            push    ar5
059C 85A882    1370            mov     dpl,_linetrack_sloc1_1_0
059F 85A983    1371            mov     dph,(_linetrack_sloc1_1_0 + 1)
05A2 85AAF0    1372            mov     b,(_linetrack_sloc1_1_0 + 2)
05A5 E5AB      1373            mov     a,(_linetrack_sloc1_1_0 + 3)
05A7 120100    1374            lcall   ___fsadd
05AA AC82      1375            mov     r4,dpl
05AC AD83      1376            mov     r5,dph
05AE AEF0      1377            mov     r6,b
05B0 FF        1378            mov     r7,a
05B1 E581      1379            mov     a,sp
05B3 24FC      1380            add     a,#0xfc
05B5 F581      1381            mov     sp,a
05B7 C004      1382            push    ar4
05B9 C005      1383            push    ar5
05BB C006      1384            push    ar6
05BD C007      1385            push    ar7
05BF 855882    1386            mov     dpl,_linetrack_sloc0_1_0
05C2 855983    1387            mov     dph,(_linetrack_sloc0_1_0 + 1)
05C5 855AF0    1388            mov     b,(_linetrack_sloc0_1_0 + 2)
05C8 E55B      1389            mov     a,(_linetrack_sloc0_1_0 + 3)
05CA 120100    1390            lcall   ___fsdiv
05CD AC82      1391            mov     r4,dpl
05CF AD83      1392            mov     r5,dph
05D1 AEF0      1393            mov     r6,b
05D3 FF        1394            mov     r7,a
05D4 E581      1395            mov     a,sp
05D6 24FC      1396            add     a,#0xfc
05D8 F581      1397            mov     sp,a
05DA 8C82      1398            mov     dpl,r4
05DC 8D83      1399            mov     dph,r5
05DE 8EF0      1400            mov     b,r6
05E0 EF        1401            mov     a,r7
05E1 120100    1402            lcall   ___fs2schar
05E4 8582F0    1403            mov     _pwm_Left1,dpl
05E7           1404   ;        robot.c:349: pwm_Right1 = -1;
05E7 7570FF    1405            mov     _pwm_Right1,#0xFF
05EA           1406   ;        robot.c:350: pwm_Right0 = vleft*vleft*75/(vright*vright+vleft*vleft);
05EA C0B8      1407            push    _linetrack_vleft_1_93
05EC C0B9      1408            push    (_linetrack_vleft_1_93 + 1)
05EE C0BA      1409            push    (_linetrack_vleft_1_93 + 2)
05F0 C0BB      1410            push    (_linetrack_vleft_1_93 + 3)
05F2 85B882    1411            mov     dpl,_linetrack_vleft_1_93
05F5 85B983    1412            mov     dph,(_linetrack_vleft_1_93 + 1)
05F8 85BAF0    1413            mov     b,(_linetrack_vleft_1_93 + 2)
05FB E5BB      1414            mov     a,(_linetrack_vleft_1_93 + 3)
05FD 120100    1415            lcall   ___fsmul
0600 AC82      1416            mov     r4,dpl
0602 AD83      1417            mov     r5,dph
0604 AEF0      1418            mov     r6,b
0606 FF        1419            mov     r7,a
0607 E581      1420            mov     a,sp
0609 24FC      1421            add     a,#0xfc
060B F581      1422            mov     sp,a
060D C004      1423            push    ar4
060F C005      1424            push    ar5
0611 C006      1425            push    ar6
0613 C007      1426            push    ar7
0615 900000    1427            mov     dptr,#0x0000
0618 75F096    1428            mov     b,#0x96
061B 7442      1429            mov     a,#0x42
061D 120100    1430            lcall   ___fsmul
0620 8582A8    1431            mov     _linetrack_sloc1_1_0,dpl
0623 8583A9    1432            mov     (_linetrack_sloc1_1_0 + 1),dph
0626 85F0AA    1433            mov     (_linetrack_sloc1_1_0 + 2),b
0629 F5AB      1434            mov     (_linetrack_sloc1_1_0 + 3),a
062B E581      1435            mov     a,sp
062D 24FC      1436            add     a,#0xfc
062F F581      1437            mov     sp,a
0631 C008      1438            push    _linetrack_vright_1_93
0633 C009      1439            push    (_linetrack_vright_1_93 + 1)
0635 C00A      1440            push    (_linetrack_vright_1_93 + 2)
0637 C00B      1441            push    (_linetrack_vright_1_93 + 3)
0639 850882    1442            mov     dpl,_linetrack_vright_1_93
063C 850983    1443            mov     dph,(_linetrack_vright_1_93 + 1)
063F 850AF0    1444            mov     b,(_linetrack_vright_1_93 + 2)
0642 E50B      1445            mov     a,(_linetrack_vright_1_93 + 3)
0644 120100    1446            lcall   ___fsmul
0647 858258    1447            mov     _linetrack_sloc0_1_0,dpl
064A 858359    1448            mov     (_linetrack_sloc0_1_0 + 1),dph
064D 85F05A    1449            mov     (_linetrack_sloc0_1_0 + 2),b
0650 F55B      1450            mov     (_linetrack_sloc0_1_0 + 3),a
0652 E581      1451            mov     a,sp
0654 24FC      1452            add     a,#0xfc
0656 F581      1453            mov     sp,a
0658 C0B8      1454            push    _linetrack_vleft_1_93
065A C0B9      1455            push    (_linetrack_vleft_1_93 + 1)
065C C0BA      1456            push    (_linetrack_vleft_1_93 + 2)
065E C0BB      1457            push    (_linetrack_vleft_1_93 + 3)
0660 85B882    1458            mov     dpl,_linetrack_vleft_1_93
0663 85B983    1459            mov     dph,(_linetrack_vleft_1_93 + 1)
0666 85BAF0    1460            mov     b,(_linetrack_vleft_1_93 + 2)
0669 E5BB      1461            mov     a,(_linetrack_vleft_1_93 + 3)
066B 120100    1462            lcall   ___fsmul
066E AE82      1463            mov     r6,dpl
0670 AF83      1464            mov     r7,dph
0672 ACF0      1465            mov     r4,b
0674 FD        1466            mov     r5,a
0675 E581      1467            mov     a,sp
0677 24FC      1468            add     a,#0xfc
0679 F581      1469            mov     sp,a
067B C006      1470            push    ar6
067D C007      1471            push    ar7
067F C004      1472            push    ar4
0681 C005      1473            push    ar5
0683 855882    1474            mov     dpl,_linetrack_sloc0_1_0
0686 855983    1475            mov     dph,(_linetrack_sloc0_1_0 + 1)
0689 855AF0    1476            mov     b,(_linetrack_sloc0_1_0 + 2)
068C E55B      1477            mov     a,(_linetrack_sloc0_1_0 + 3)
068E 120100    1478            lcall   ___fsadd
0691 AC82      1479            mov     r4,dpl
0693 AD83      1480            mov     r5,dph
0695 AEF0      1481            mov     r6,b
0697 FF        1482            mov     r7,a
0698 E581      1483            mov     a,sp
069A 24FC      1484            add     a,#0xfc
069C F581      1485            mov     sp,a
069E C004      1486            push    ar4
06A0 C005      1487            push    ar5
06A2 C006      1488            push    ar6
06A4 C007      1489            push    ar7
06A6 85A882    1490            mov     dpl,_linetrack_sloc1_1_0
06A9 85A983    1491            mov     dph,(_linetrack_sloc1_1_0 + 1)
06AC 85AAF0    1492            mov     b,(_linetrack_sloc1_1_0 + 2)
06AF E5AB      1493            mov     a,(_linetrack_sloc1_1_0 + 3)
06B1 120100    1494            lcall   ___fsdiv
06B4 AC82      1495            mov     r4,dpl
06B6 AD83      1496            mov     r5,dph
06B8 AEF0      1497            mov     r6,b
06BA FF        1498            mov     r7,a
06BB E581      1499            mov     a,sp
06BD 24FC      1500            add     a,#0xfc
06BF F581      1501            mov     sp,a
06C1 8C82      1502            mov     dpl,r4
06C3 8D83      1503            mov     dph,r5
06C5 8EF0      1504            mov     b,r6
06C7 EF        1505            mov     a,r7
06C8 120100    1506            lcall   ___fs2schar
06CB 8582B0    1507            mov     _pwm_Right0,dpl
06CE 22        1508            ret
06CF           1509   L005004?:
06CF           1510   ;        robot.c:351: } else if (forwardbackward == 1) {
06CF BA0140    1511            cjne    r2,#0x01,L005011?
06D2 BB0040    1512            cjne    r3,#0x00,L005011?
06D5 8001      1513            sjmp    L005012?
06D7           1514   L005011?:
06D7 22        1515            ret
06D8           1516   L005012?:
06D8           1517   ;        robot.c:354: vleft=Volts_at_Pin(TANK_RL);
06D8 75820D    1518            mov     dpl,#0x0D
06DB 120100    1519            lcall   _Volts_at_Pin
06DE 8582B8    1520            mov     _linetrack_vleft_1_93,dpl
06E1 8583B9    1521            mov     (_linetrack_vleft_1_93 + 1),dph
06E4 85F0BA    1522            mov     (_linetrack_vleft_1_93 + 2),b
06E7 F5BB      1523            mov     (_linetrack_vleft_1_93 + 3),a
06E9           1524   ;        robot.c:355: vright=Volts_at_Pin(TANK_RR);
06E9 75820E    1525            mov     dpl,#0x0E
06EC 120100    1526            lcall   _Volts_at_Pin
06EF 858208    1527            mov     _linetrack_vright_1_93,dpl
06F2 858309    1528            mov     (_linetrack_vright_1_93 + 1),dph
06F5 85F00A    1529            mov     (_linetrack_vright_1_93 + 2),b
06F8 F50B      1530            mov     (_linetrack_vright_1_93 + 3),a
06FA           1531   ;        robot.c:358: pwm_Left1 = -1;
06FA 75F0FF    1532            mov     _pwm_Left1,#0xFF
06FD           1533   ;        robot.c:359: pwm_Left0 = vright*vright*75/(vright*vright+vleft*vleft);
06FD C008      1534            push    _linetrack_vright_1_93
06FF C009      1535            push    (_linetrack_vright_1_93 + 1)
0701 C00A      1536            push    (_linetrack_vright_1_93 + 2)
0703 C00B      1537            push    (_linetrack_vright_1_93 + 3)
0705 850882    1538            mov     dpl,_linetrack_vright_1_93
0708 850983    1539            mov     dph,(_linetrack_vright_1_93 + 1)
070B 850AF0    1540            mov     b,(_linetrack_vright_1_93 + 2)
070E E50B      1541            mov     a,(_linetrack_vright_1_93 + 3)
0710 120100    1542            lcall   ___fsmul
0713 AA82      1543            mov     r2,dpl
0715 AB83      1544            mov     r3,dph
0717 ACF0      1545            mov     r4,b
0719 FD        1546            mov     r5,a
071A E581      1547            mov     a,sp
071C 24FC      1548            add     a,#0xfc
071E F581      1549            mov     sp,a
0720 C002      1550            push    ar2
0722 C003      1551            push    ar3
0724 C004      1552            push    ar4
0726 C005      1553            push    ar5
0728 900000    1554            mov     dptr,#0x0000
072B 75F096    1555            mov     b,#0x96
072E 7442      1556            mov     a,#0x42
0730 120100    1557            lcall   ___fsmul
0733 AA82      1558            mov     r2,dpl
0735 AB83      1559            mov     r3,dph
0737 ACF0      1560            mov     r4,b
0739 FD        1561            mov     r5,a
073A E581      1562            mov     a,sp
073C 24FC      1563            add     a,#0xfc
073E F581      1564            mov     sp,a
0740 C002      1565            push    ar2
0742 C003      1566            push    ar3
0744 C004      1567            push    ar4
0746 C005      1568            push    ar5
0748 C008      1569            push    _linetrack_vright_1_93
074A C009      1570            push    (_linetrack_vright_1_93 + 1)
074C C00A      1571            push    (_linetrack_vright_1_93 + 2)
074E C00B      1572            push    (_linetrack_vright_1_93 + 3)
0750 850882    1573            mov     dpl,_linetrack_vright_1_93
0753 850983    1574            mov     dph,(_linetrack_vright_1_93 + 1)
0756 850AF0    1575            mov     b,(_linetrack_vright_1_93 + 2)
0759 E50B      1576            mov     a,(_linetrack_vright_1_93 + 3)
075B 120100    1577            lcall   ___fsmul
075E 8582A8    1578            mov     _linetrack_sloc1_1_0,dpl
0761 8583A9    1579            mov     (_linetrack_sloc1_1_0 + 1),dph
0764 85F0AA    1580            mov     (_linetrack_sloc1_1_0 + 2),b
0767 F5AB      1581            mov     (_linetrack_sloc1_1_0 + 3),a
0769 E581      1582            mov     a,sp
076B 24FC      1583            add     a,#0xfc
076D F581      1584            mov     sp,a
076F C0B8      1585            push    _linetrack_vleft_1_93
0771 C0B9      1586            push    (_linetrack_vleft_1_93 + 1)
0773 C0BA      1587            push    (_linetrack_vleft_1_93 + 2)
0775 C0BB      1588            push    (_linetrack_vleft_1_93 + 3)
0777 85B882    1589            mov     dpl,_linetrack_vleft_1_93
077A 85B983    1590            mov     dph,(_linetrack_vleft_1_93 + 1)
077D 85BAF0    1591            mov     b,(_linetrack_vleft_1_93 + 2)
0780 E5BB      1592            mov     a,(_linetrack_vleft_1_93 + 3)
0782 120100    1593            lcall   ___fsmul
0785 AE82      1594            mov     r6,dpl
0787 AF83      1595            mov     r7,dph
0789 A8F0      1596            mov     r0,b
078B F9        1597            mov     r1,a
078C E581      1598            mov     a,sp
078E 24FC      1599            add     a,#0xfc
0790 F581      1600            mov     sp,a
0792 C006      1601            push    ar6
0794 C007      1602            push    ar7
0796 C000      1603            push    ar0
0798 C001      1604            push    ar1
079A 85A882    1605            mov     dpl,_linetrack_sloc1_1_0
079D 85A983    1606            mov     dph,(_linetrack_sloc1_1_0 + 1)
07A0 85AAF0    1607            mov     b,(_linetrack_sloc1_1_0 + 2)
07A3 E5AB      1608            mov     a,(_linetrack_sloc1_1_0 + 3)
07A5 120100    1609            lcall   ___fsadd
07A8 AE82      1610            mov     r6,dpl
07AA AF83      1611            mov     r7,dph
07AC A8F0      1612            mov     r0,b
07AE F9        1613            mov     r1,a
07AF E581      1614            mov     a,sp
07B1 24FC      1615            add     a,#0xfc
07B3 F581      1616            mov     sp,a
07B5 D005      1617            pop     ar5
07B7 D004      1618            pop     ar4
07B9 D003      1619            pop     ar3
07BB D002      1620            pop     ar2
07BD C006      1621            push    ar6
07BF C007      1622            push    ar7
07C1 C000      1623            push    ar0
07C3 C001      1624            push    ar1
07C5 8A82      1625            mov     dpl,r2
07C7 8B83      1626            mov     dph,r3
07C9 8CF0      1627            mov     b,r4
07CB ED        1628            mov     a,r5
07CC 120100    1629            lcall   ___fsdiv
07CF AA82      1630            mov     r2,dpl
07D1 AB83      1631            mov     r3,dph
07D3 ACF0      1632            mov     r4,b
07D5 FD        1633            mov     r5,a
07D6 E581      1634            mov     a,sp
07D8 24FC      1635            add     a,#0xfc
07DA F581      1636            mov     sp,a
07DC 8A82      1637            mov     dpl,r2
07DE 8B83      1638            mov     dph,r3
07E0 8CF0      1639            mov     b,r4
07E2 ED        1640            mov     a,r5
07E3 120100    1641            lcall   ___fs2schar
07E6 858220    1642            mov     _pwm_Left0,dpl
07E9           1643   ;        robot.c:360: pwm_Right0 = -1;
07E9 75B0FF    1644            mov     _pwm_Right0,#0xFF
07EC           1645   ;        robot.c:361: pwm_Right1 = vleft*vleft*75/(vright*vright+vleft*vleft);
07EC C0B8      1646            push    _linetrack_vleft_1_93
07EE C0B9      1647            push    (_linetrack_vleft_1_93 + 1)
07F0 C0BA      1648            push    (_linetrack_vleft_1_93 + 2)
07F2 C0BB      1649            push    (_linetrack_vleft_1_93 + 3)
07F4 85B882    1650            mov     dpl,_linetrack_vleft_1_93
07F7 85B983    1651            mov     dph,(_linetrack_vleft_1_93 + 1)
07FA 85BAF0    1652            mov     b,(_linetrack_vleft_1_93 + 2)
07FD E5BB      1653            mov     a,(_linetrack_vleft_1_93 + 3)
07FF 120100    1654            lcall   ___fsmul
0802 AA82      1655            mov     r2,dpl
0804 AB83      1656            mov     r3,dph
0806 ACF0      1657            mov     r4,b
0808 FD        1658            mov     r5,a
0809 E581      1659            mov     a,sp
080B 24FC      1660            add     a,#0xfc
080D F581      1661            mov     sp,a
080F C002      1662            push    ar2
0811 C003      1663            push    ar3
0813 C004      1664            push    ar4
0815 C005      1665            push    ar5
0817 900000    1666            mov     dptr,#0x0000
081A 75F096    1667            mov     b,#0x96
081D 7442      1668            mov     a,#0x42
081F 120100    1669            lcall   ___fsmul
0822 AA82      1670            mov     r2,dpl
0824 AB83      1671            mov     r3,dph
0826 ACF0      1672            mov     r4,b
0828 FD        1673            mov     r5,a
0829 E581      1674            mov     a,sp
082B 24FC      1675            add     a,#0xfc
082D F581      1676            mov     sp,a
082F C002      1677            push    ar2
0831 C003      1678            push    ar3
0833 C004      1679            push    ar4
0835 C005      1680            push    ar5
0837 C008      1681            push    _linetrack_vright_1_93
0839 C009      1682            push    (_linetrack_vright_1_93 + 1)
083B C00A      1683            push    (_linetrack_vright_1_93 + 2)
083D C00B      1684            push    (_linetrack_vright_1_93 + 3)
083F 850882    1685            mov     dpl,_linetrack_vright_1_93
0842 850983    1686            mov     dph,(_linetrack_vright_1_93 + 1)
0845 850AF0    1687            mov     b,(_linetrack_vright_1_93 + 2)
0848 E50B      1688            mov     a,(_linetrack_vright_1_93 + 3)
084A 120100    1689            lcall   ___fsmul
084D 8582A8    1690            mov     _linetrack_sloc1_1_0,dpl
0850 8583A9    1691            mov     (_linetrack_sloc1_1_0 + 1),dph
0853 85F0AA    1692            mov     (_linetrack_sloc1_1_0 + 2),b
0856 F5AB      1693            mov     (_linetrack_sloc1_1_0 + 3),a
0858 E581      1694            mov     a,sp
085A 24FC      1695            add     a,#0xfc
085C F581      1696            mov     sp,a
085E C0B8      1697            push    _linetrack_vleft_1_93
0860 C0B9      1698            push    (_linetrack_vleft_1_93 + 1)
0862 C0BA      1699            push    (_linetrack_vleft_1_93 + 2)
0864 C0BB      1700            push    (_linetrack_vleft_1_93 + 3)
0866 85B882    1701            mov     dpl,_linetrack_vleft_1_93
0869 85B983    1702            mov     dph,(_linetrack_vleft_1_93 + 1)
086C 85BAF0    1703            mov     b,(_linetrack_vleft_1_93 + 2)
086F E5BB      1704            mov     a,(_linetrack_vleft_1_93 + 3)
0871 120100    1705            lcall   ___fsmul
0874 AE82      1706            mov     r6,dpl
0876 AF83      1707            mov     r7,dph
0878 A8F0      1708            mov     r0,b
087A F9        1709            mov     r1,a
087B E581      1710            mov     a,sp
087D 24FC      1711            add     a,#0xfc
087F F581      1712            mov     sp,a
0881 C006      1713            push    ar6
0883 C007      1714            push    ar7
0885 C000      1715            push    ar0
0887 C001      1716            push    ar1
0889 85A882    1717            mov     dpl,_linetrack_sloc1_1_0
088C 85A983    1718            mov     dph,(_linetrack_sloc1_1_0 + 1)
088F 85AAF0    1719            mov     b,(_linetrack_sloc1_1_0 + 2)
0892 E5AB      1720            mov     a,(_linetrack_sloc1_1_0 + 3)
0894 120100    1721            lcall   ___fsadd
0897 AE82      1722            mov     r6,dpl
0899 AF83      1723            mov     r7,dph
089B A8F0      1724            mov     r0,b
089D F9        1725            mov     r1,a
089E E581      1726            mov     a,sp
08A0 24FC      1727            add     a,#0xfc
08A2 F581      1728            mov     sp,a
08A4 D005      1729            pop     ar5
08A6 D004      1730            pop     ar4
08A8 D003      1731            pop     ar3
08AA D002      1732            pop     ar2
08AC C006      1733            push    ar6
08AE C007      1734            push    ar7
08B0 C000      1735            push    ar0
08B2 C001      1736            push    ar1
08B4 8A82      1737            mov     dpl,r2
08B6 8B83      1738            mov     dph,r3
08B8 8CF0      1739            mov     b,r4
08BA ED        1740            mov     a,r5
08BB 120100    1741            lcall   ___fsdiv
08BE AA82      1742            mov     r2,dpl
08C0 AB83      1743            mov     r3,dph
08C2 ACF0      1744            mov     r4,b
08C4 FD        1745            mov     r5,a
08C5 E581      1746            mov     a,sp
08C7 24FC      1747            add     a,#0xfc
08C9 F581      1748            mov     sp,a
08CB 8A82      1749            mov     dpl,r2
08CD 8B83      1750            mov     dph,r3
08CF 8CF0      1751            mov     b,r4
08D1 ED        1752            mov     a,r5
08D2 120100    1753            lcall   ___fs2schar
08D5 858270    1754            mov     _pwm_Right1,dpl
08D8 22        1755            ret
08D9           1756   ;------------------------------------------------------------
08D9           1757   ;Allocation info for local variables in function 'stopcar'
08D9           1758   ;------------------------------------------------------------
08D9           1759   ;------------------------------------------------------------
08D9           1760   ;        robot.c:369: void stopcar(void) {
08D9           1761   ;        -----------------------------------------
08D9           1762   ;         function stopcar
08D9           1763   ;        -----------------------------------------
08D9           1764   _stopcar:
08D9           1765   ;        robot.c:371: pwm_Left1 = -1;
08D9 75F0FF    1766            mov     _pwm_Left1,#0xFF
08DC           1767   ;        robot.c:372: pwm_Right1 = -1;
08DC 7570FF    1768            mov     _pwm_Right1,#0xFF
08DF           1769   ;        robot.c:373: pwm_Left0 = -1;
08DF 7520FF    1770            mov     _pwm_Left0,#0xFF
08E2           1771   ;        robot.c:374: pwm_Right0 = -1;
08E2 75B0FF    1772            mov     _pwm_Right0,#0xFF
08E5 22        1773            ret
08E6           1774   ;------------------------------------------------------------
08E6           1775   ;Allocation info for local variables in function 'turncar'
08E6           1776   ;------------------------------------------------------------
08E6           1777   ;leftright                 Allocated to registers r2 r3 
08E6           1778   ;v                         Allocated with name '_turncar_v_1_99'
08E6           1779   ;direction                 Allocated with name '_turncar_direction_1_99'
08E6           1780   ;------------------------------------------------------------
08E6           1781   ;        robot.c:380: void turncar (int leftright) {
08E6           1782   ;        -----------------------------------------
08E6           1783   ;         function turncar
08E6           1784   ;        -----------------------------------------
08E6           1785   _turncar:
08E6 AA82      1786            mov     r2,dpl
08E8 AB83      1787            mov     r3,dph
08EA           1788   ;        robot.c:389: pwm_Left0 = -1;
08EA 7520FF    1789            mov     _pwm_Left0,#0xFF
08ED           1790   ;        robot.c:390: pwm_Left1 = -1;
08ED 75F0FF    1791            mov     _pwm_Left1,#0xFF
08F0           1792   ;        robot.c:391: pwm_Right0 = -1;
08F0 75B0FF    1793            mov     _pwm_Right0,#0xFF
08F3           1794   ;        robot.c:392: pwm_Right1 = -1;
08F3 7570FF    1795            mov     _pwm_Right1,#0xFF
08F6           1796   ;        robot.c:394: direction = currentstate - 1;
08F6 E5B0      1797            mov     a,_currentstate
08F8 14        1798            dec     a
08F9 F538      1799            mov     _turncar_direction_1_99,a
08FB           1800   ;        robot.c:397: if (leftright == 1) {
08FB BA01C0    1801            cjne    r2,#0x01,L007062?
08FE BB00C0    1802            cjne    r3,#0x00,L007062?
0901 8001      1803            sjmp    L007063?
0903           1804   L007062?:
0903 020100    1805            ljmp    L007022?
0906           1806   L007063?:
0906           1807   ;        robot.c:399: pwm_Right0 = 100;
0906 75B064    1808            mov     _pwm_Right0,#0x64
0909           1809   ;        robot.c:402: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0909 E538      1810            mov     a,_turncar_direction_1_99
090B 6001      1811            jz      L007026?
090D 75820C    1812            mov     dpl,#0x0C
0910 120100    1813            lcall   _Volts_at_Pin
0913 AC82      1814            mov     r4,dpl
0915 AD83      1815            mov     r5,dph
0917 AEF0      1816            mov     r6,b
0919 FF        1817            mov     r7,a
091A 8001      1818            sjmp    L007027?
091C           1819   L007026?:
091C 75820E    1820            mov     dpl,#0x0E
091F 120100    1821            lcall   _Volts_at_Pin
0922 AC82      1822            mov     r4,dpl
0924 AD83      1823            mov     r5,dph
0926 AEF0      1824            mov     r6,b
0928 FF        1825            mov     r7,a
0929           1826   L007027?:
0929 8CE8      1827            mov     _turncar_v_1_99,r4
092B 8DE9      1828            mov     (_turncar_v_1_99 + 1),r5
092D 8EEA      1829            mov     (_turncar_v_1_99 + 2),r6
092F 8FEB      1830            mov     (_turncar_v_1_99 + 3),r7
0931           1831   ;        robot.c:404: while (v < 1.2) {
0931           1832   L007001?:
0931 749A      1833            mov     a,#0x9A
0933 C0E0      1834            push    acc
0935 7499      1835            mov     a,#0x99
0937 C0E0      1836            push    acc
0939 C0E0      1837            push    acc
093B 743F      1838            mov     a,#0x3F
093D C0E0      1839            push    acc
093F 85E882    1840            mov     dpl,_turncar_v_1_99
0942 85E983    1841            mov     dph,(_turncar_v_1_99 + 1)
0945 85EAF0    1842            mov     b,(_turncar_v_1_99 + 2)
0948 E5EB      1843            mov     a,(_turncar_v_1_99 + 3)
094A 120100    1844            lcall   ___fslt
094D AC82      1845            mov     r4,dpl
094F E581      1846            mov     a,sp
0951 24FC      1847            add     a,#0xfc
0953 F581      1848            mov     sp,a
0955 EC        1849            mov     a,r4
0956 6001      1850            jz      L007003?
0958           1851   ;        robot.c:406: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0958 E538      1852            mov     a,_turncar_direction_1_99
095A 6001      1853            jz      L007028?
095C 75820C    1854            mov     dpl,#0x0C
095F 120100    1855            lcall   _Volts_at_Pin
0962 AC82      1856            mov     r4,dpl
0964 AD83      1857            mov     r5,dph
0966 AEF0      1858            mov     r6,b
0968 FF        1859            mov     r7,a
0969 8001      1860            sjmp    L007029?
096B           1861   L007028?:
096B 75820E    1862            mov     dpl,#0x0E
096E 120100    1863            lcall   _Volts_at_Pin
0971 AC82      1864            mov     r4,dpl
0973 AD83      1865            mov     r5,dph
0975 AEF0      1866            mov     r6,b
0977 FF        1867            mov     r7,a
0978           1868   L007029?:
0978 8CE8      1869            mov     _turncar_v_1_99,r4
097A 8DE9      1870            mov     (_turncar_v_1_99 + 1),r5
097C 8EEA      1871            mov     (_turncar_v_1_99 + 2),r6
097E 8FEB      1872            mov     (_turncar_v_1_99 + 3),r7
0980 8001      1873            sjmp    L007001?
0982           1874   L007003?:
0982           1875   ;        robot.c:411: waitms(300);
0982 90012C    1876            mov     dptr,#0x012C
0985 120100    1877            lcall   _waitms
0988           1878   ;        robot.c:414: pwm_Right0 = -1; 
0988 75B0FF    1879            mov     _pwm_Right0,#0xFF
098B 22        1880            ret
098C           1881   L007022?:
098C           1882   ;        robot.c:418: else if (leftright == 3) {
098C BA0300    1883            cjne    r2,#0x03,L007067?
098F BB0000    1884            cjne    r3,#0x00,L007067?
0992 8001      1885            sjmp    L007068?
0994           1886   L007067?:
0994 020100    1887            ljmp    L007019?
0997           1888   L007068?:
0997           1889   ;        robot.c:420: pwm_Left1 = 75;
0997 75F04B    1890            mov     _pwm_Left1,#0x4B
099A           1891   ;        robot.c:421: waitms(200);
099A 9000C8    1892            mov     dptr,#0x00C8
099D 120100    1893            lcall   _waitms
09A0           1894   ;        robot.c:424: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
09A0 E538      1895            mov     a,_turncar_direction_1_99
09A2 6001      1896            jz      L007030?
09A4 75820B    1897            mov     dpl,#0x0B
09A7 120100    1898            lcall   _Volts_at_Pin
09AA AC82      1899            mov     r4,dpl
09AC AD83      1900            mov     r5,dph
09AE AEF0      1901            mov     r6,b
09B0 FF        1902            mov     r7,a
09B1 8001      1903            sjmp    L007031?
09B3           1904   L007030?:
09B3 75820D    1905            mov     dpl,#0x0D
09B6 120100    1906            lcall   _Volts_at_Pin
09B9 AC82      1907            mov     r4,dpl
09BB AD83      1908            mov     r5,dph
09BD AEF0      1909            mov     r6,b
09BF FF        1910            mov     r7,a
09C0           1911   L007031?:
09C0 8CE8      1912            mov     _turncar_v_1_99,r4
09C2 8DE9      1913            mov     (_turncar_v_1_99 + 1),r5
09C4 8EEA      1914            mov     (_turncar_v_1_99 + 2),r6
09C6 8FEB      1915            mov     (_turncar_v_1_99 + 3),r7
09C8           1916   ;        robot.c:426: while (v < 1.2) {
09C8           1917   L007004?:
09C8 749A      1918            mov     a,#0x9A
09CA C0E0      1919            push    acc
09CC 7499      1920            mov     a,#0x99
09CE C0E0      1921            push    acc
09D0 C0E0      1922            push    acc
09D2 743F      1923            mov     a,#0x3F
09D4 C0E0      1924            push    acc
09D6 85E882    1925            mov     dpl,_turncar_v_1_99
09D9 85E983    1926            mov     dph,(_turncar_v_1_99 + 1)
09DC 85EAF0    1927            mov     b,(_turncar_v_1_99 + 2)
09DF E5EB      1928            mov     a,(_turncar_v_1_99 + 3)
09E1 120100    1929            lcall   ___fslt
09E4 AC82      1930            mov     r4,dpl
09E6 E581      1931            mov     a,sp
09E8 24FC      1932            add     a,#0xfc
09EA F581      1933            mov     sp,a
09EC EC        1934            mov     a,r4
09ED 6001      1935            jz      L007006?
09EF           1936   ;        robot.c:428: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
09EF E538      1937            mov     a,_turncar_direction_1_99
09F1 6001      1938            jz      L007032?
09F3 75820B    1939            mov     dpl,#0x0B
09F6 120100    1940            lcall   _Volts_at_Pin
09F9 AC82      1941            mov     r4,dpl
09FB AD83      1942            mov     r5,dph
09FD AEF0      1943            mov     r6,b
09FF FF        1944            mov     r7,a
0A00 8001      1945            sjmp    L007033?
0A02           1946   L007032?:
0A02 75820D    1947            mov     dpl,#0x0D
0A05 120100    1948            lcall   _Volts_at_Pin
0A08 AC82      1949            mov     r4,dpl
0A0A AD83      1950            mov     r5,dph
0A0C AEF0      1951            mov     r6,b
0A0E FF        1952            mov     r7,a
0A0F           1953   L007033?:
0A0F 8CE8      1954            mov     _turncar_v_1_99,r4
0A11 8DE9      1955            mov     (_turncar_v_1_99 + 1),r5
0A13 8EEA      1956            mov     (_turncar_v_1_99 + 2),r6
0A15 8FEB      1957            mov     (_turncar_v_1_99 + 3),r7
0A17 8001      1958            sjmp    L007004?
0A19           1959   L007006?:
0A19           1960   ;        robot.c:433: pwm_Left1 = -1; 
0A19 75F0FF    1961            mov     _pwm_Left1,#0xFF
0A1C 22        1962            ret
0A1D           1963   L007019?:
0A1D           1964   ;        robot.c:437: else if (leftright == 2) {
0A1D BA0240    1965            cjne    r2,#0x02,L007072?
0A20 BB0040    1966            cjne    r3,#0x00,L007072?
0A23 8001      1967            sjmp    L007073?
0A25           1968   L007072?:
0A25 020100    1969            ljmp    L007016?
0A28           1970   L007073?:
0A28           1971   ;        robot.c:439: pwm_Right1 = 100;
0A28 757064    1972            mov     _pwm_Right1,#0x64
0A2B           1973   ;        robot.c:442: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0A2B E538      1974            mov     a,_turncar_direction_1_99
0A2D 6001      1975            jz      L007034?
0A2F 75820C    1976            mov     dpl,#0x0C
0A32 120100    1977            lcall   _Volts_at_Pin
0A35 AC82      1978            mov     r4,dpl
0A37 AD83      1979            mov     r5,dph
0A39 AEF0      1980            mov     r6,b
0A3B FF        1981            mov     r7,a
0A3C 8001      1982            sjmp    L007035?
0A3E           1983   L007034?:
0A3E 75820E    1984            mov     dpl,#0x0E
0A41 120100    1985            lcall   _Volts_at_Pin
0A44 AC82      1986            mov     r4,dpl
0A46 AD83      1987            mov     r5,dph
0A48 AEF0      1988            mov     r6,b
0A4A FF        1989            mov     r7,a
0A4B           1990   L007035?:
0A4B 8CE8      1991            mov     _turncar_v_1_99,r4
0A4D 8DE9      1992            mov     (_turncar_v_1_99 + 1),r5
0A4F 8EEA      1993            mov     (_turncar_v_1_99 + 2),r6
0A51 8FEB      1994            mov     (_turncar_v_1_99 + 3),r7
0A53           1995   ;        robot.c:444: while (v < 0.9) {
0A53           1996   L007007?:
0A53 7466      1997            mov     a,#0x66
0A55 C0E0      1998            push    acc
0A57 C0E0      1999            push    acc
0A59 C0E0      2000            push    acc
0A5B 743F      2001            mov     a,#0x3F
0A5D C0E0      2002            push    acc
0A5F 85E882    2003            mov     dpl,_turncar_v_1_99
0A62 85E983    2004            mov     dph,(_turncar_v_1_99 + 1)
0A65 85EAF0    2005            mov     b,(_turncar_v_1_99 + 2)
0A68 E5EB      2006            mov     a,(_turncar_v_1_99 + 3)
0A6A 120100    2007            lcall   ___fslt
0A6D AC82      2008            mov     r4,dpl
0A6F E581      2009            mov     a,sp
0A71 24FC      2010            add     a,#0xfc
0A73 F581      2011            mov     sp,a
0A75 EC        2012            mov     a,r4
0A76 6001      2013            jz      L007009?
0A78           2014   ;        robot.c:446: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0A78 E538      2015            mov     a,_turncar_direction_1_99
0A7A 6001      2016            jz      L007036?
0A7C 75820C    2017            mov     dpl,#0x0C
0A7F 120100    2018            lcall   _Volts_at_Pin
0A82 AC82      2019            mov     r4,dpl
0A84 AD83      2020            mov     r5,dph
0A86 AEF0      2021            mov     r6,b
0A88 FF        2022            mov     r7,a
0A89 8001      2023            sjmp    L007037?
0A8B           2024   L007036?:
0A8B 75820E    2025            mov     dpl,#0x0E
0A8E 120100    2026            lcall   _Volts_at_Pin
0A91 AC82      2027            mov     r4,dpl
0A93 AD83      2028            mov     r5,dph
0A95 AEF0      2029            mov     r6,b
0A97 FF        2030            mov     r7,a
0A98           2031   L007037?:
0A98 8CE8      2032            mov     _turncar_v_1_99,r4
0A9A 8DE9      2033            mov     (_turncar_v_1_99 + 1),r5
0A9C 8EEA      2034            mov     (_turncar_v_1_99 + 2),r6
0A9E 8FEB      2035            mov     (_turncar_v_1_99 + 3),r7
0AA0 8001      2036            sjmp    L007007?
0AA2           2037   L007009?:
0AA2           2038   ;        robot.c:451: waitms(300);
0AA2 90012C    2039            mov     dptr,#0x012C
0AA5 120100    2040            lcall   _waitms
0AA8           2041   ;        robot.c:454: pwm_Right1 = -1; 
0AA8 7570FF    2042            mov     _pwm_Right1,#0xFF
0AAB 22        2043            ret
0AAC           2044   L007016?:
0AAC           2045   ;        robot.c:458: else if (leftright == 4) {
0AAC BA0480    2046            cjne    r2,#0x04,L007077?
0AAF BB0080    2047            cjne    r3,#0x00,L007077?
0AB2 8001      2048            sjmp    L007078?
0AB4           2049   L007077?:
0AB4 22        2050            ret
0AB5           2051   L007078?:
0AB5           2052   ;        robot.c:460: pwm_Left0 = 75;
0AB5 75204B    2053            mov     _pwm_Left0,#0x4B
0AB8           2054   ;        robot.c:461: waitms(200);
0AB8 9000C8    2055            mov     dptr,#0x00C8
0ABB 120100    2056            lcall   _waitms
0ABE           2057   ;        robot.c:464: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0ABE E538      2058            mov     a,_turncar_direction_1_99
0AC0 6001      2059            jz      L007038?
0AC2 75820B    2060            mov     dpl,#0x0B
0AC5 120100    2061            lcall   _Volts_at_Pin
0AC8 AA82      2062            mov     r2,dpl
0ACA AB83      2063            mov     r3,dph
0ACC ACF0      2064            mov     r4,b
0ACE FD        2065            mov     r5,a
0ACF 8001      2066            sjmp    L007039?
0AD1           2067   L007038?:
0AD1 75820D    2068            mov     dpl,#0x0D
0AD4 120100    2069            lcall   _Volts_at_Pin
0AD7 AA82      2070            mov     r2,dpl
0AD9 AB83      2071            mov     r3,dph
0ADB ACF0      2072            mov     r4,b
0ADD FD        2073            mov     r5,a
0ADE           2074   L007039?:
0ADE 8AE8      2075            mov     _turncar_v_1_99,r2
0AE0 8BE9      2076            mov     (_turncar_v_1_99 + 1),r3
0AE2 8CEA      2077            mov     (_turncar_v_1_99 + 2),r4
0AE4 8DEB      2078            mov     (_turncar_v_1_99 + 3),r5
0AE6           2079   ;        robot.c:466: while (v < 0.9) {
0AE6           2080   L007010?:
0AE6 7466      2081            mov     a,#0x66
0AE8 C0E0      2082            push    acc
0AEA C0E0      2083            push    acc
0AEC C0E0      2084            push    acc
0AEE 743F      2085            mov     a,#0x3F
0AF0 C0E0      2086            push    acc
0AF2 85E882    2087            mov     dpl,_turncar_v_1_99
0AF5 85E983    2088            mov     dph,(_turncar_v_1_99 + 1)
0AF8 85EAF0    2089            mov     b,(_turncar_v_1_99 + 2)
0AFB E5EB      2090            mov     a,(_turncar_v_1_99 + 3)
0AFD 120100    2091            lcall   ___fslt
0B00 AA82      2092            mov     r2,dpl
0B02 E581      2093            mov     a,sp
0B04 24FC      2094            add     a,#0xfc
0B06 F581      2095            mov     sp,a
0B08 EA        2096            mov     a,r2
0B09 6001      2097            jz      L007012?
0B0B           2098   ;        robot.c:468: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0B0B E538      2099            mov     a,_turncar_direction_1_99
0B0D 6001      2100            jz      L007040?
0B0F 75820B    2101            mov     dpl,#0x0B
0B12 120100    2102            lcall   _Volts_at_Pin
0B15 AA82      2103            mov     r2,dpl
0B17 AB83      2104            mov     r3,dph
0B19 ACF0      2105            mov     r4,b
0B1B FD        2106            mov     r5,a
0B1C 8001      2107            sjmp    L007041?
0B1E           2108   L007040?:
0B1E 75820D    2109            mov     dpl,#0x0D
0B21 120100    2110            lcall   _Volts_at_Pin
0B24 AA82      2111            mov     r2,dpl
0B26 AB83      2112            mov     r3,dph
0B28 ACF0      2113            mov     r4,b
0B2A FD        2114            mov     r5,a
0B2B           2115   L007041?:
0B2B 8AE8      2116            mov     _turncar_v_1_99,r2
0B2D 8BE9      2117            mov     (_turncar_v_1_99 + 1),r3
0B2F 8CEA      2118            mov     (_turncar_v_1_99 + 2),r4
0B31 8DEB      2119            mov     (_turncar_v_1_99 + 3),r5
0B33 8001      2120            sjmp    L007010?
0B35           2121   L007012?:
0B35           2122   ;        robot.c:473: pwm_Left0 = -1; 
0B35 7520FF    2123            mov     _pwm_Left0,#0xFF
0B38 22        2124            ret
0B39           2125   ;------------------------------------------------------------
0B39           2126   ;Allocation info for local variables in function 'uturn'
0B39           2127   ;------------------------------------------------------------
0B39           2128   ;vleft                     Allocated with name '_uturn_vleft_1_109'
0B39           2129   ;vright                    Allocated with name '_uturn_vright_1_109'
0B39           2130   ;------------------------------------------------------------
0B39           2131   ;        robot.c:480: void uturn(void) {
0B39           2132   ;        -----------------------------------------
0B39           2133   ;         function uturn
0B39           2134   ;        -----------------------------------------
0B39           2135   _uturn:
0B39           2136   ;        robot.c:484: vleft = Volts_at_Pin(TANK_FL);
0B39 75820B    2137            mov     dpl,#0x0B
0B3C 120100    2138            lcall   _Volts_at_Pin
0B3F 858288    2139            mov     _uturn_vleft_1_109,dpl
0B42 858389    2140            mov     (_uturn_vleft_1_109 + 1),dph
0B45 85F08A    2141            mov     (_uturn_vleft_1_109 + 2),b
0B48 F58B      2142            mov     (_uturn_vleft_1_109 + 3),a
0B4A           2143   ;        robot.c:485: vright = Volts_at_Pin(TANK_FR);
0B4A 75820C    2144            mov     dpl,#0x0C
0B4D 120100    2145            lcall   _Volts_at_Pin
0B50 8582D8    2146            mov     _uturn_vright_1_109,dpl
0B53 8583D9    2147            mov     (_uturn_vright_1_109 + 1),dph
0B56 85F0DA    2148            mov     (_uturn_vright_1_109 + 2),b
0B59 F5DB      2149            mov     (_uturn_vright_1_109 + 3),a
0B5B           2150   ;        robot.c:488: pwm_Left0 = -1;
0B5B 7520FF    2151            mov     _pwm_Left0,#0xFF
0B5E           2152   ;        robot.c:489: pwm_Left1 = 50;
0B5E 75F032    2153            mov     _pwm_Left1,#0x32
0B61           2154   ;        robot.c:490: pwm_Right0 = -1;
0B61 75B0FF    2155            mov     _pwm_Right0,#0xFF
0B64           2156   ;        robot.c:491: pwm_Right1 = 50;
0B64 757032    2157            mov     _pwm_Right1,#0x32
0B67           2158   ;        robot.c:494: waitms(3000);
0B67 900BB8    2159            mov     dptr,#0x0BB8
0B6A 120100    2160            lcall   _waitms
0B6D           2161   ;        robot.c:496: while ((Volts_at_Pin(TANK_FL)-Volts_at_Pin(TANK_FR))<-0.3 || (Volts_at_Pin(TANK_FL)-Volts_at_Pin(TANK_FR))>0.3);
0B6D           2162   L008002?:
0B6D 75820B    2163            mov     dpl,#0x0B
0B70 120100    2164            lcall   _Volts_at_Pin
0B73 AA82      2165            mov     r2,dpl
0B75 AB83      2166            mov     r3,dph
0B77 ACF0      2167            mov     r4,b
0B79 FD        2168            mov     r5,a
0B7A 75820C    2169            mov     dpl,#0x0C
0B7D C002      2170            push    ar2
0B7F C003      2171            push    ar3
0B81 C004      2172            push    ar4
0B83 C005      2173            push    ar5
0B85 120100    2174            lcall   _Volts_at_Pin
0B88 AE82      2175            mov     r6,dpl
0B8A AF83      2176            mov     r7,dph
0B8C A8F0      2177            mov     r0,b
0B8E F9        2178            mov     r1,a
0B8F D005      2179            pop     ar5
0B91 D004      2180            pop     ar4
0B93 D003      2181            pop     ar3
0B95 D002      2182            pop     ar2
0B97 C006      2183            push    ar6
0B99 C007      2184            push    ar7
0B9B C000      2185            push    ar0
0B9D C001      2186            push    ar1
0B9F 8A82      2187            mov     dpl,r2
0BA1 8B83      2188            mov     dph,r3
0BA3 8CF0      2189            mov     b,r4
0BA5 ED        2190            mov     a,r5
0BA6 120100    2191            lcall   ___fssub
0BA9 AA82      2192            mov     r2,dpl
0BAB AB83      2193            mov     r3,dph
0BAD ACF0      2194            mov     r4,b
0BAF FD        2195            mov     r5,a
0BB0 E581      2196            mov     a,sp
0BB2 24FC      2197            add     a,#0xfc
0BB4 F581      2198            mov     sp,a
0BB6 749A      2199            mov     a,#0x9A
0BB8 C0E0      2200            push    acc
0BBA 7499      2201            mov     a,#0x99
0BBC C0E0      2202            push    acc
0BBE C0E0      2203            push    acc
0BC0 74BE      2204            mov     a,#0xBE
0BC2 C0E0      2205            push    acc
0BC4 8A82      2206            mov     dpl,r2
0BC6 8B83      2207            mov     dph,r3
0BC8 8CF0      2208            mov     b,r4
0BCA ED        2209            mov     a,r5
0BCB 120100    2210            lcall   ___fslt
0BCE AA82      2211            mov     r2,dpl
0BD0 E581      2212            mov     a,sp
0BD2 24FC      2213            add     a,#0xfc
0BD4 F581      2214            mov     sp,a
0BD6 EA        2215            mov     a,r2
0BD7 7001      2216            jnz     L008002?
0BD9 75820B    2217            mov     dpl,#0x0B
0BDC 120100    2218            lcall   _Volts_at_Pin
0BDF AA82      2219            mov     r2,dpl
0BE1 AB83      2220            mov     r3,dph
0BE3 ACF0      2221            mov     r4,b
0BE5 FD        2222            mov     r5,a
0BE6 75820C    2223            mov     dpl,#0x0C
0BE9 C002      2224            push    ar2
0BEB C003      2225            push    ar3
0BED C004      2226            push    ar4
0BEF C005      2227            push    ar5
0BF1 120100    2228            lcall   _Volts_at_Pin
0BF4 AE82      2229            mov     r6,dpl
0BF6 AF83      2230            mov     r7,dph
0BF8 A8F0      2231            mov     r0,b
0BFA F9        2232            mov     r1,a
0BFB D005      2233            pop     ar5
0BFD D004      2234            pop     ar4
0BFF D003      2235            pop     ar3
0C01 D002      2236            pop     ar2
0C03 C006      2237            push    ar6
0C05 C007      2238            push    ar7
0C07 C000      2239            push    ar0
0C09 C001      2240            push    ar1
0C0B 8A82      2241            mov     dpl,r2
0C0D 8B83      2242            mov     dph,r3
0C0F 8CF0      2243            mov     b,r4
0C11 ED        2244            mov     a,r5
0C12 120100    2245            lcall   ___fssub
0C15 AA82      2246            mov     r2,dpl
0C17 AB83      2247            mov     r3,dph
0C19 ACF0      2248            mov     r4,b
0C1B FD        2249            mov     r5,a
0C1C E581      2250            mov     a,sp
0C1E 24FC      2251            add     a,#0xfc
0C20 F581      2252            mov     sp,a
0C22 749A      2253            mov     a,#0x9A
0C24 C0E0      2254            push    acc
0C26 7499      2255            mov     a,#0x99
0C28 C0E0      2256            push    acc
0C2A C0E0      2257            push    acc
0C2C 743E      2258            mov     a,#0x3E
0C2E C0E0      2259            push    acc
0C30 8A82      2260            mov     dpl,r2
0C32 8B83      2261            mov     dph,r3
0C34 8CF0      2262            mov     b,r4
0C36 ED        2263            mov     a,r5
0C37 120100    2264            lcall   ___fsgt
0C3A AA82      2265            mov     r2,dpl
0C3C E581      2266            mov     a,sp
0C3E 24FC      2267            add     a,#0xfc
0C40 F581      2268            mov     sp,a
0C42 EA        2269            mov     a,r2
0C43 6001      2270            jz      L008010?
0C45 020100    2271            ljmp    L008002?
0C48           2272   L008010?:
0C48 22        2273            ret
0C49           2274   ;------------------------------------------------------------
0C49           2275   ;Allocation info for local variables in function 'Sonar_Reading'
0C49           2276   ;------------------------------------------------------------
0C49           2277   ;------------------------------------------------------------
0C49           2278   ;        robot.c:522: void Sonar_Reading(void)
0C49           2279   ;        -----------------------------------------
0C49           2280   ;         function Sonar_Reading
0C49           2281   ;        -----------------------------------------
0C49           2282   _Sonar_Reading:
0C49           2283   ;        robot.c:525: TL0=0; 
0C49 758A00    2284            mov     _TL0,#0x00
0C4C           2285   ;        robot.c:526: TH0=0;
0C4C 758C00    2286            mov     _TH0,#0x00
0C4F           2287   ;        robot.c:527: TF0=0;
0C4F C28D      2288            clr     _TF0
0C51           2289   ;        robot.c:528: overflow_count=0;
0C51 757000    2290            mov     _overflow_count,#0x00
0C54           2291   ;        robot.c:531: Trigger = 0; 
0C54 C286      2292            clr     _P0_6
0C56           2293   ;        robot.c:532: Timer3us(2);
0C56 758202    2294            mov     dpl,#0x02
0C59 120100    2295            lcall   _Timer3us
0C5C           2296   ;        robot.c:533: Trigger = 1; // turn on trig
0C5C D286      2297            setb    _P0_6
0C5E           2298   ;        robot.c:534: Timer3us(10);//10us delay 
0C5E 75820A    2299            mov     dpl,#0x0A
0C61 120100    2300            lcall   _Timer3us
0C64           2301   ;        robot.c:535: Trigger = 0; // trun off trig 
0C64 C286      2302            clr     _P0_6
0C66           2303   ;        robot.c:536: while(Echo!=0); // Wait for the signal to be zero
0C66           2304   L009001?:
0C66 208180    2305            jb      _P0_1,L009001?
0C69           2306   ;        robot.c:537: while(Echo!=1); // Wait for the signal to be one
0C69           2307   L009004?:
0C69 3081C0    2308            jnb     _P0_1,L009004?
0C6C           2309   ;        robot.c:541: TR0=1; // Start the timer
0C6C D28C      2310            setb    _TR0
0C6E           2311   ;        robot.c:542: while(Echo!=0) // Wait for the signal to be zero
0C6E           2312   L009009?:
0C6E 308140    2313            jnb     _P0_1,L009011?
0C71           2314   ;        robot.c:544: if(TF0==1) // Did the 16-bit timer overflow?
0C71           2315   ;        robot.c:546: TF0=0;
0C71 108D80    2316            jbc     _TF0,L009023?
0C74 8001      2317            sjmp    L009009?
0C76           2318   L009023?:
0C76           2319   ;        robot.c:547: overflow_count++;
0C76 0570      2320            inc     _overflow_count
0C78 8001      2321            sjmp    L009009?
0C7A           2322   L009011?:
0C7A           2323   ;        robot.c:550: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
0C7A C28C      2324            clr     _TR0
0C7C           2325   ;        robot.c:551: time=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
0C7C 857082    2326            mov     dpl,_overflow_count
0C7F 120100    2327            lcall   ___uchar2fs
0C82 AA82      2328            mov     r2,dpl
0C84 AB83      2329            mov     r3,dph
0C86 ACF0      2330            mov     r4,b
0C88 FD        2331            mov     r5,a
0C89 C002      2332            push    ar2
0C8B C003      2333            push    ar3
0C8D C004      2334            push    ar4
0C8F C005      2335            push    ar5
0C91 900000    2336            mov     dptr,#0x0000
0C94 75F080    2337            mov     b,#0x80
0C97 7447      2338            mov     a,#0x47
0C99 120100    2339            lcall   ___fsmul
0C9C AA82      2340            mov     r2,dpl
0C9E AB83      2341            mov     r3,dph
0CA0 ACF0      2342            mov     r4,b
0CA2 FD        2343            mov     r5,a
0CA3 E581      2344            mov     a,sp
0CA5 24FC      2345            add     a,#0xfc
0CA7 F581      2346            mov     sp,a
0CA9 858C82    2347            mov     dpl,_TH0
0CAC C002      2348            push    ar2
0CAE C003      2349            push    ar3
0CB0 C004      2350            push    ar4
0CB2 C005      2351            push    ar5
0CB4 120100    2352            lcall   ___uchar2fs
0CB7 AE82      2353            mov     r6,dpl
0CB9 AF83      2354            mov     r7,dph
0CBB A8F0      2355            mov     r0,b
0CBD F9        2356            mov     r1,a
0CBE C006      2357            push    ar6
0CC0 C007      2358            push    ar7
0CC2 C000      2359            push    ar0
0CC4 C001      2360            push    ar1
0CC6 900000    2361            mov     dptr,#0x0000
0CC9 75F080    2362            mov     b,#0x80
0CCC 7443      2363            mov     a,#0x43
0CCE 120100    2364            lcall   ___fsmul
0CD1 AE82      2365            mov     r6,dpl
0CD3 AF83      2366            mov     r7,dph
0CD5 A8F0      2367            mov     r0,b
0CD7 F9        2368            mov     r1,a
0CD8 E581      2369            mov     a,sp
0CDA 24FC      2370            add     a,#0xfc
0CDC F581      2371            mov     sp,a
0CDE D005      2372            pop     ar5
0CE0 D004      2373            pop     ar4
0CE2 D003      2374            pop     ar3
0CE4 D002      2375            pop     ar2
0CE6 C006      2376            push    ar6
0CE8 C007      2377            push    ar7
0CEA C000      2378            push    ar0
0CEC C001      2379            push    ar1
0CEE 8A82      2380            mov     dpl,r2
0CF0 8B83      2381            mov     dph,r3
0CF2 8CF0      2382            mov     b,r4
0CF4 ED        2383            mov     a,r5
0CF5 120100    2384            lcall   ___fsadd
0CF8 AA82      2385            mov     r2,dpl
0CFA AB83      2386            mov     r3,dph
0CFC ACF0      2387            mov     r4,b
0CFE FD        2388            mov     r5,a
0CFF E581      2389            mov     a,sp
0D01 24FC      2390            add     a,#0xfc
0D03 F581      2391            mov     sp,a
0D05 AE8A      2392            mov     r6,_TL0
0D07 7F00      2393            mov     r7,#0x00
0D09 8E82      2394            mov     dpl,r6
0D0B 8F83      2395            mov     dph,r7
0D0D C002      2396            push    ar2
0D0F C003      2397            push    ar3
0D11 C004      2398            push    ar4
0D13 C005      2399            push    ar5
0D15 120100    2400            lcall   ___sint2fs
0D18 AE82      2401            mov     r6,dpl
0D1A AF83      2402            mov     r7,dph
0D1C A8F0      2403            mov     r0,b
0D1E F9        2404            mov     r1,a
0D1F D005      2405            pop     ar5
0D21 D004      2406            pop     ar4
0D23 D003      2407            pop     ar3
0D25 D002      2408            pop     ar2
0D27 C006      2409            push    ar6
0D29 C007      2410            push    ar7
0D2B C000      2411            push    ar0
0D2D C001      2412            push    ar1
0D2F 8A82      2413            mov     dpl,r2
0D31 8B83      2414            mov     dph,r3
0D33 8CF0      2415            mov     b,r4
0D35 ED        2416            mov     a,r5
0D36 120100    2417            lcall   ___fsadd
0D39 AA82      2418            mov     r2,dpl
0D3B AB83      2419            mov     r3,dph
0D3D ACF0      2420            mov     r4,b
0D3F FD        2421            mov     r5,a
0D40 E581      2422            mov     a,sp
0D42 24FC      2423            add     a,#0xfc
0D44 F581      2424            mov     sp,a
0D46 C002      2425            push    ar2
0D48 C003      2426            push    ar3
0D4A C004      2427            push    ar4
0D4C C005      2428            push    ar5
0D4E 9037BD    2429            mov     dptr,#0x37BD
0D51 75F086    2430            mov     b,#0x86
0D54 7434      2431            mov     a,#0x34
0D56 120100    2432            lcall   ___fsmul
0D59 858230    2433            mov     _time,dpl
0D5C 858331    2434            mov     (_time + 1),dph
0D5F 85F032    2435            mov     (_time + 2),b
0D62 F533      2436            mov     (_time + 3),a
0D64 E581      2437            mov     a,sp
0D66 24FC      2438            add     a,#0xfc
0D68 F581      2439            mov     sp,a
0D6A           2440   ;        robot.c:552: distance = ((time/2.0f)/29.1f)*100000;
0D6A E4        2441            clr     a
0D6B C0E0      2442            push    acc
0D6D C0E0      2443            push    acc
0D6F C0E0      2444            push    acc
0D71 7440      2445            mov     a,#0x40
0D73 C0E0      2446            push    acc
0D75 853082    2447            mov     dpl,_time
0D78 853183    2448            mov     dph,(_time + 1)
0D7B 8532F0    2449            mov     b,(_time + 2)
0D7E E533      2450            mov     a,(_time + 3)
0D80 120100    2451            lcall   ___fsdiv
0D83 AA82      2452            mov     r2,dpl
0D85 AB83      2453            mov     r3,dph
0D87 ACF0      2454            mov     r4,b
0D89 FD        2455            mov     r5,a
0D8A E581      2456            mov     a,sp
0D8C 24FC      2457            add     a,#0xfc
0D8E F581      2458            mov     sp,a
0D90 74CD      2459            mov     a,#0xCD
0D92 C0E0      2460            push    acc
0D94 74CC      2461            mov     a,#0xCC
0D96 C0E0      2462            push    acc
0D98 74E8      2463            mov     a,#0xE8
0D9A C0E0      2464            push    acc
0D9C 7441      2465            mov     a,#0x41
0D9E C0E0      2466            push    acc
0DA0 8A82      2467            mov     dpl,r2
0DA2 8B83      2468            mov     dph,r3
0DA4 8CF0      2469            mov     b,r4
0DA6 ED        2470            mov     a,r5
0DA7 120100    2471            lcall   ___fsdiv
0DAA AA82      2472            mov     r2,dpl
0DAC AB83      2473            mov     r3,dph
0DAE ACF0      2474            mov     r4,b
0DB0 FD        2475            mov     r5,a
0DB1 E581      2476            mov     a,sp
0DB3 24FC      2477            add     a,#0xfc
0DB5 F581      2478            mov     sp,a
0DB7 C002      2479            push    ar2
0DB9 C003      2480            push    ar3
0DBB C004      2481            push    ar4
0DBD C005      2482            push    ar5
0DBF 905000    2483            mov     dptr,#0x5000
0DC2 75F0C3    2484            mov     b,#0xC3
0DC5 7447      2485            mov     a,#0x47
0DC7 120100    2486            lcall   ___fsmul
0DCA 8582F0    2487            mov     _distance,dpl
0DCD 8583F1    2488            mov     (_distance + 1),dph
0DD0 85F0F2    2489            mov     (_distance + 2),b
0DD3 F5F3      2490            mov     (_distance + 3),a
0DD5 E581      2491            mov     a,sp
0DD7 24FC      2492            add     a,#0xfc
0DD9 F581      2493            mov     sp,a
0DDB 22        2494            ret
0DDC           2495            rseg R_CSEG
0DDC           2496   
0000           2497            rseg R_XINIT
0000           2498   
0000           2499            rseg R_CONST
0000           2500   
002E           2501            CSEG
002E           2502   
002E           2503   end
