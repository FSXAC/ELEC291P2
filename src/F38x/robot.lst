0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Sun Apr 02 22:11:08 2017
0000              5   ;--------------------------------------------------------
                  5   $name robot
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _movecar_PARM_2
0000             28            public _Timer2_ISR
0000             29            public _main
0000             30            public _currentstate
0000             31            public _currentcmd
0000             32            public _direction
0000             33            public _pwm_Right1
0000             34            public _pwm_Right0
0000             35            public _pwm_Left1
0000             36            public _pwm_Left0
0000             37            public _pwm_both
0000             38            public _mode
0000             39            public _pwm_count
0000             40            public _forward_backward
0000             41            public _readData
0000             42            public _linetrack
0000             43            public _stopcar
0000             44            public _turncar
0000             45            public _uturn
0000             46            public _movecar
0000             47   ;--------------------------------------------------------
0000             48   ; Special Function Registers
0000             49   ;--------------------------------------------------------
0000             50   _P0             DATA 0x80
0000             51   _SP             DATA 0x81
0000             52   _DPL            DATA 0x82
0000             53   _DPH            DATA 0x83
0000             54   _EMI0TC         DATA 0x84
0000             55   _EMI0CF         DATA 0x85
0000             56   _OSCLCN         DATA 0x86
0000             57   _PCON           DATA 0x87
0000             58   _TCON           DATA 0x88
0000             59   _TMOD           DATA 0x89
0000             60   _TL0            DATA 0x8a
0000             61   _TL1            DATA 0x8b
0000             62   _TH0            DATA 0x8c
0000             63   _TH1            DATA 0x8d
0000             64   _CKCON          DATA 0x8e
0000             65   _PSCTL          DATA 0x8f
0000             66   _P1             DATA 0x90
0000             67   _TMR3CN         DATA 0x91
0000             68   _TMR4CN         DATA 0x91
0000             69   _TMR3RLL        DATA 0x92
0000             70   _TMR4RLL        DATA 0x92
0000             71   _TMR3RLH        DATA 0x93
0000             72   _TMR4RLH        DATA 0x93
0000             73   _TMR3L          DATA 0x94
0000             74   _TMR4L          DATA 0x94
0000             75   _TMR3H          DATA 0x95
0000             76   _TMR4H          DATA 0x95
0000             77   _USB0ADR        DATA 0x96
0000             78   _USB0DAT        DATA 0x97
0000             79   _SCON           DATA 0x98
0000             80   _SCON0          DATA 0x98
0000             81   _SBUF           DATA 0x99
0000             82   _SBUF0          DATA 0x99
0000             83   _CPT1CN         DATA 0x9a
0000             84   _CPT0CN         DATA 0x9b
0000             85   _CPT1MD         DATA 0x9c
0000             86   _CPT0MD         DATA 0x9d
0000             87   _CPT1MX         DATA 0x9e
0000             88   _CPT0MX         DATA 0x9f
0000             89   _P2             DATA 0xa0
0000             90   _SPI0CFG        DATA 0xa1
0000             91   _SPI0CKR        DATA 0xa2
0000             92   _SPI0DAT        DATA 0xa3
0000             93   _P0MDOUT        DATA 0xa4
0000             94   _P1MDOUT        DATA 0xa5
0000             95   _P2MDOUT        DATA 0xa6
0000             96   _P3MDOUT        DATA 0xa7
0000             97   _IE             DATA 0xa8
0000             98   _CLKSEL         DATA 0xa9
0000             99   _EMI0CN         DATA 0xaa
0000            100   __XPAGE         DATA 0xaa
0000            101   _SBCON1         DATA 0xac
0000            102   _P4MDOUT        DATA 0xae
0000            103   _PFE0CN         DATA 0xaf
0000            104   _P3             DATA 0xb0
0000            105   _OSCXCN         DATA 0xb1
0000            106   _OSCICN         DATA 0xb2
0000            107   _OSCICL         DATA 0xb3
0000            108   _SBRLL1         DATA 0xb4
0000            109   _SBRLH1         DATA 0xb5
0000            110   _FLSCL          DATA 0xb6
0000            111   _FLKEY          DATA 0xb7
0000            112   _IP             DATA 0xb8
0000            113   _CLKMUL         DATA 0xb9
0000            114   _SMBTC          DATA 0xb9
0000            115   _AMX0N          DATA 0xba
0000            116   _AMX0P          DATA 0xbb
0000            117   _ADC0CF         DATA 0xbc
0000            118   _ADC0L          DATA 0xbd
0000            119   _ADC0H          DATA 0xbe
0000            120   _SFRPAGE        DATA 0xbf
0000            121   _SMB0CN         DATA 0xc0
0000            122   _SMB1CN         DATA 0xc0
0000            123   _SMB0CF         DATA 0xc1
0000            124   _SMB1CF         DATA 0xc1
0000            125   _SMB0DAT        DATA 0xc2
0000            126   _SMB1DAT        DATA 0xc2
0000            127   _ADC0GTL        DATA 0xc3
0000            128   _ADC0GTH        DATA 0xc4
0000            129   _ADC0LTL        DATA 0xc5
0000            130   _ADC0LTH        DATA 0xc6
0000            131   _P4             DATA 0xc7
0000            132   _TMR2CN         DATA 0xc8
0000            133   _TMR5CN         DATA 0xc8
0000            134   _REG01CN        DATA 0xc9
0000            135   _TMR2RLL        DATA 0xca
0000            136   _TMR5RLL        DATA 0xca
0000            137   _TMR2RLH        DATA 0xcb
0000            138   _TMR5RLH        DATA 0xcb
0000            139   _TMR2L          DATA 0xcc
0000            140   _TMR5L          DATA 0xcc
0000            141   _TMR2H          DATA 0xcd
0000            142   _TMR5H          DATA 0xcd
0000            143   _SMB0ADM        DATA 0xce
0000            144   _SMB1ADM        DATA 0xce
0000            145   _SMB0ADR        DATA 0xcf
0000            146   _SMB1ADR        DATA 0xcf
0000            147   _PSW            DATA 0xd0
0000            148   _REF0CN         DATA 0xd1
0000            149   _SCON1          DATA 0xd2
0000            150   _SBUF1          DATA 0xd3
0000            151   _P0SKIP         DATA 0xd4
0000            152   _P1SKIP         DATA 0xd5
0000            153   _P2SKIP         DATA 0xd6
0000            154   _USB0XCN        DATA 0xd7
0000            155   _PCA0CN         DATA 0xd8
0000            156   _PCA0MD         DATA 0xd9
0000            157   _PCA0CPM0       DATA 0xda
0000            158   _PCA0CPM1       DATA 0xdb
0000            159   _PCA0CPM2       DATA 0xdc
0000            160   _PCA0CPM3       DATA 0xdd
0000            161   _PCA0CPM4       DATA 0xde
0000            162   _P3SKIP         DATA 0xdf
0000            163   _ACC            DATA 0xe0
0000            164   _XBR0           DATA 0xe1
0000            165   _XBR1           DATA 0xe2
0000            166   _XBR2           DATA 0xe3
0000            167   _IT01CF         DATA 0xe4
0000            168   _CKCON1         DATA 0xe4
0000            169   _SMOD1          DATA 0xe5
0000            170   _EIE1           DATA 0xe6
0000            171   _EIE2           DATA 0xe7
0000            172   _ADC0CN         DATA 0xe8
0000            173   _PCA0CPL1       DATA 0xe9
0000            174   _PCA0CPH1       DATA 0xea
0000            175   _PCA0CPL2       DATA 0xeb
0000            176   _PCA0CPH2       DATA 0xec
0000            177   _PCA0CPL3       DATA 0xed
0000            178   _PCA0CPH3       DATA 0xee
0000            179   _RSTSRC         DATA 0xef
0000            180   _B              DATA 0xf0
0000            181   _P0MDIN         DATA 0xf1
0000            182   _P1MDIN         DATA 0xf2
0000            183   _P2MDIN         DATA 0xf3
0000            184   _P3MDIN         DATA 0xf4
0000            185   _P4MDIN         DATA 0xf5
0000            186   _EIP1           DATA 0xf6
0000            187   _EIP2           DATA 0xf7
0000            188   _SPI0CN         DATA 0xf8
0000            189   _PCA0L          DATA 0xf9
0000            190   _PCA0H          DATA 0xfa
0000            191   _PCA0CPL0       DATA 0xfb
0000            192   _PCA0CPH0       DATA 0xfc
0000            193   _PCA0CPL4       DATA 0xfd
0000            194   _PCA0CPH4       DATA 0xfe
0000            195   _VDM0CN         DATA 0xff
0000            196   _DPTR           DATA 0x8382
0000            197   _TMR2RL         DATA 0xcbca
0000            198   _TMR3RL         DATA 0x9392
0000            199   _TMR4RL         DATA 0x9392
0000            200   _TMR5RL         DATA 0xcbca
0000            201   _TMR2           DATA 0xcdcc
0000            202   _TMR3           DATA 0x9594
0000            203   _TMR4           DATA 0x9594
0000            204   _TMR5           DATA 0xcdcc
0000            205   _SBRL1          DATA 0xb5b4
0000            206   _ADC0           DATA 0xbebd
0000            207   _ADC0GT         DATA 0xc4c3
0000            208   _ADC0LT         DATA 0xc6c5
0000            209   _PCA0           DATA 0xfaf9
0000            210   _PCA0CP1        DATA 0xeae9
0000            211   _PCA0CP2        DATA 0xeceb
0000            212   _PCA0CP3        DATA 0xeeed
0000            213   _PCA0CP0        DATA 0xfcfb
0000            214   _PCA0CP4        DATA 0xfefd
0000            215   ;--------------------------------------------------------
0000            216   ; special function bits
0000            217   ;--------------------------------------------------------
0000            218   _P0_0           BIT 0x80
0000            219   _P0_1           BIT 0x81
0000            220   _P0_2           BIT 0x82
0000            221   _P0_3           BIT 0x83
0000            222   _P0_4           BIT 0x84
0000            223   _P0_5           BIT 0x85
0000            224   _P0_6           BIT 0x86
0000            225   _P0_7           BIT 0x87
0000            226   _TF1            BIT 0x8f
0000            227   _TR1            BIT 0x8e
0000            228   _TF0            BIT 0x8d
0000            229   _TR0            BIT 0x8c
0000            230   _IE1            BIT 0x8b
0000            231   _IT1            BIT 0x8a
0000            232   _IE0            BIT 0x89
0000            233   _IT0            BIT 0x88
0000            234   _P1_0           BIT 0x90
0000            235   _P1_1           BIT 0x91
0000            236   _P1_2           BIT 0x92
0000            237   _P1_3           BIT 0x93
0000            238   _P1_4           BIT 0x94
0000            239   _P1_5           BIT 0x95
0000            240   _P1_6           BIT 0x96
0000            241   _P1_7           BIT 0x97
0000            242   _S0MODE         BIT 0x9f
0000            243   _SCON0_6        BIT 0x9e
0000            244   _MCE0           BIT 0x9d
0000            245   _REN0           BIT 0x9c
0000            246   _TB80           BIT 0x9b
0000            247   _RB80           BIT 0x9a
0000            248   _TI0            BIT 0x99
0000            249   _RI0            BIT 0x98
0000            250   _SCON_6         BIT 0x9e
0000            251   _MCE            BIT 0x9d
0000            252   _REN            BIT 0x9c
0000            253   _TB8            BIT 0x9b
0000            254   _RB8            BIT 0x9a
0000            255   _TI             BIT 0x99
0000            256   _RI             BIT 0x98
0000            257   _P2_0           BIT 0xa0
0000            258   _P2_1           BIT 0xa1
0000            259   _P2_2           BIT 0xa2
0000            260   _P2_3           BIT 0xa3
0000            261   _P2_4           BIT 0xa4
0000            262   _P2_5           BIT 0xa5
0000            263   _P2_6           BIT 0xa6
0000            264   _P2_7           BIT 0xa7
0000            265   _EA             BIT 0xaf
0000            266   _ESPI0          BIT 0xae
0000            267   _ET2            BIT 0xad
0000            268   _ES0            BIT 0xac
0000            269   _ET1            BIT 0xab
0000            270   _EX1            BIT 0xaa
0000            271   _ET0            BIT 0xa9
0000            272   _EX0            BIT 0xa8
0000            273   _P3_0           BIT 0xb0
0000            274   _P3_1           BIT 0xb1
0000            275   _P3_2           BIT 0xb2
0000            276   _P3_3           BIT 0xb3
0000            277   _P3_4           BIT 0xb4
0000            278   _P3_5           BIT 0xb5
0000            279   _P3_6           BIT 0xb6
0000            280   _P3_7           BIT 0xb7
0000            281   _IP_7           BIT 0xbf
0000            282   _PSPI0          BIT 0xbe
0000            283   _PT2            BIT 0xbd
0000            284   _PS0            BIT 0xbc
0000            285   _PT1            BIT 0xbb
0000            286   _PX1            BIT 0xba
0000            287   _PT0            BIT 0xb9
0000            288   _PX0            BIT 0xb8
0000            289   _MASTER0        BIT 0xc7
0000            290   _TXMODE0        BIT 0xc6
0000            291   _STA0           BIT 0xc5
0000            292   _STO0           BIT 0xc4
0000            293   _ACKRQ0         BIT 0xc3
0000            294   _ARBLOST0       BIT 0xc2
0000            295   _ACK0           BIT 0xc1
0000            296   _SI0            BIT 0xc0
0000            297   _MASTER1        BIT 0xc7
0000            298   _TXMODE1        BIT 0xc6
0000            299   _STA1           BIT 0xc5
0000            300   _STO1           BIT 0xc4
0000            301   _ACKRQ1         BIT 0xc3
0000            302   _ARBLOST1       BIT 0xc2
0000            303   _ACK1           BIT 0xc1
0000            304   _SI1            BIT 0xc0
0000            305   _TF2            BIT 0xcf
0000            306   _TF2H           BIT 0xcf
0000            307   _TF2L           BIT 0xce
0000            308   _TF2LEN         BIT 0xcd
0000            309   _TF2CEN         BIT 0xcc
0000            310   _T2SPLIT        BIT 0xcb
0000            311   _TR2            BIT 0xca
0000            312   _T2CSS          BIT 0xc9
0000            313   _T2XCLK         BIT 0xc8
0000            314   _TF5H           BIT 0xcf
0000            315   _TF5L           BIT 0xce
0000            316   _TF5LEN         BIT 0xcd
0000            317   _TMR5CN_4       BIT 0xcc
0000            318   _T5SPLIT        BIT 0xcb
0000            319   _TR5            BIT 0xca
0000            320   _TMR5CN_1       BIT 0xc9
0000            321   _T5XCLK         BIT 0xc8
0000            322   _CY             BIT 0xd7
0000            323   _AC             BIT 0xd6
0000            324   _F0             BIT 0xd5
0000            325   _RS1            BIT 0xd4
0000            326   _RS0            BIT 0xd3
0000            327   _OV             BIT 0xd2
0000            328   _F1             BIT 0xd1
0000            329   _PARITY         BIT 0xd0
0000            330   _CF             BIT 0xdf
0000            331   _CR             BIT 0xde
0000            332   _PCA0CN_5       BIT 0xde
0000            333   _CCF4           BIT 0xdc
0000            334   _CCF3           BIT 0xdb
0000            335   _CCF2           BIT 0xda
0000            336   _CCF1           BIT 0xd9
0000            337   _CCF0           BIT 0xd8
0000            338   _ACC_7          BIT 0xe7
0000            339   _ACC_6          BIT 0xe6
0000            340   _ACC_5          BIT 0xe5
0000            341   _ACC_4          BIT 0xe4
0000            342   _ACC_3          BIT 0xe3
0000            343   _ACC_2          BIT 0xe2
0000            344   _ACC_1          BIT 0xe1
0000            345   _ACC_0          BIT 0xe0
0000            346   _AD0EN          BIT 0xef
0000            347   _AD0TM          BIT 0xee
0000            348   _AD0INT         BIT 0xed
0000            349   _AD0BUSY        BIT 0xec
0000            350   _AD0WINT        BIT 0xeb
0000            351   _AD0CM2         BIT 0xea
0000            352   _AD0CM1         BIT 0xe9
0000            353   _AD0CM0         BIT 0xe8
0000            354   _B_7            BIT 0xf7
0000            355   _B_6            BIT 0xf6
0000            356   _B_5            BIT 0xf5
0000            357   _B_4            BIT 0xf4
0000            358   _B_3            BIT 0xf3
0000            359   _B_2            BIT 0xf2
0000            360   _B_1            BIT 0xf1
0000            361   _B_0            BIT 0xf0
0000            362   _SPIF           BIT 0xff
0000            363   _WCOL           BIT 0xfe
0000            364   _MODF           BIT 0xfd
0000            365   _RXOVRN         BIT 0xfc
0000            366   _NSSMD1         BIT 0xfb
0000            367   _NSSMD0         BIT 0xfa
0000            368   _TXBMT          BIT 0xf9
0000            369   _SPIEN          BIT 0xf8
0000            370   ;--------------------------------------------------------
0000            371   ; overlayable register banks
0000            372   ;--------------------------------------------------------
0000            373            rbank0 segment data overlay
0000            374   ;--------------------------------------------------------
0000            375   ; internal ram data
0000            376   ;--------------------------------------------------------
0000            377            rseg R_DSEG
0000            378   _pwm_count:
0000            379            ds 1
0001            380   _mode:
0001            381            ds 1
0002            382   _pwm_both:
0002            383            ds 1
0003            384   _pwm_Left0:
0003            385            ds 1
0004            386   _pwm_Left1:
0004            387            ds 1
0005            388   _pwm_Right0:
0005            389            ds 1
0006            390   _pwm_Right1:
0006            391            ds 1
0007            392   _direction:
0007            393            ds 1
0008            394   _currentcmd:
0008            395            ds 1
0009            396   _currentstate:
0009            397            ds 1
000A            398   _main_v1_1_57:
000A            399            ds 4
000E            400   _main_v2_1_57:
000E            401            ds 4
0012            402   _main_sloc0_1_0:
0012            403            ds 4
0016            404   _main_sloc1_1_0:
0016            405            ds 4
001A            406   _linetrack_forwardbackward_1_81:
001A            407            ds 2
001C            408   _linetrack_vleft_1_82:
001C            409            ds 4
0020            410   _linetrack_vright_1_82:
0020            411            ds 4
0024            412   _linetrack_sloc0_1_0:
0024            413            ds 4
0028            414   _turncar_v_1_89:
0028            415            ds 4
002C            416   _turncar_direction_1_89:
002C            417            ds 1
002D            418   _uturn_vleft_1_95:
002D            419            ds 4
0031            420   _uturn_vright_1_95:
0031            421            ds 4
0035            422   ;--------------------------------------------------------
0035            423   ; overlayable items in internal ram 
0035            424   ;--------------------------------------------------------
0000            425            rseg    R_OSEG
0000            426            rseg    R_OSEG
0000            427   _movecar_PARM_2:
0000            428            ds 2
0002            429   ;--------------------------------------------------------
0002            430   ; indirectly addressable internal ram data
0002            431   ;--------------------------------------------------------
0000            432            rseg R_ISEG
0000            433   ;--------------------------------------------------------
0000            434   ; absolute internal ram data
0000            435   ;--------------------------------------------------------
0000            436            DSEG
0000            437   ;--------------------------------------------------------
0000            438   ; bit data
0000            439   ;--------------------------------------------------------
0000            440            rseg R_BSEG
0000            441   _Timer2_ISR_sloc0_1_0:
0000            442            DBIT    1
0001            443   ;--------------------------------------------------------
0001            444   ; paged external ram data
0001            445   ;--------------------------------------------------------
0000            446            rseg R_PSEG
0000            447   ;--------------------------------------------------------
0000            448   ; external ram data
0000            449   ;--------------------------------------------------------
0000            450            rseg R_XSEG
0000            451   ;--------------------------------------------------------
0000            452   ; absolute external ram data
0000            453   ;--------------------------------------------------------
0000            454            XSEG
0000            455   ;--------------------------------------------------------
0000            456   ; external initialized ram data
0000            457   ;--------------------------------------------------------
0000            458            rseg R_IXSEG
0000            459            rseg R_HOME
0000            460            rseg R_GSINIT
0000            461            rseg R_CSEG
0000            462   ;--------------------------------------------------------
0000            463   ; Reset entry point and interrupt vectors
0000            464   ;--------------------------------------------------------
0000            465            CSEG at 0x0000
0000 020100     466            ljmp    _crt0
002B            467            CSEG at 0x002b
002B 020100     468            ljmp    _Timer2_ISR
002E            469   ;--------------------------------------------------------
002E            470   ; global & static initialisations
002E            471   ;--------------------------------------------------------
0000            472            rseg R_HOME
0000            473            rseg R_GSINIT
0000            474            rseg R_GSINIT
0000            475   ;--------------------------------------------------------
0000            476   ; data variables initialization
0000            477   ;--------------------------------------------------------
0000            478            rseg R_DINIT
0000            479   ;        robot.c:10: volatile  char pwm_count=0;
0000 755800     480            mov     _pwm_count,#0x00
0003            481   ;        robot.c:11: volatile  char mode = 0;
0003 751800     482            mov     _mode,#0x00
0006            483   ;        robot.c:12: volatile  char pwm_both =0;
0006 75D800     484            mov     _pwm_both,#0x00
0009            485   ;        robot.c:13: volatile  char pwm_Left0 = 0; //p1.5
0009 759800     486            mov     _pwm_Left0,#0x00
000C            487   ;        robot.c:14: volatile  char pwm_Left1 = 0; //p1.6
000C 755800     488            mov     _pwm_Left1,#0x00
000F            489   ;        robot.c:15: volatile  char pwm_Right0 = 0; //p2.0
000F 751800     490            mov     _pwm_Right0,#0x00
0012            491   ;        robot.c:16: volatile  char pwm_Right1 = 0; //p2.1
0012 75D800     492            mov     _pwm_Right1,#0x00
0015            493   ;        robot.c:17: volatile  char direction = 0; // 1 for back 0 for forward
0015 759800     494            mov     _direction,#0x00
0018            495   ;        robot.c:19: volatile  char currentcmd = 0;
0018 755800     496            mov     _currentcmd,#0x00
001B            497   ;        robot.c:20: volatile  char currentstate = 1;
001B 751801     498            mov     _currentstate,#0x01
001E            499            ; The linker places a 'ret' at the end of segment R_DINIT.
001E            500   ;--------------------------------------------------------
001E            501   ; code
001E            502   ;--------------------------------------------------------
0000            503            rseg R_CSEG
0000            504   ;------------------------------------------------------------
0000            505   ;Allocation info for local variables in function 'main'
0000            506   ;------------------------------------------------------------
0000            507   ;v1                        Allocated with name '_main_v1_1_57'
0000            508   ;v2                        Allocated with name '_main_v2_1_57'
0000            509   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0000            510   ;sloc1                     Allocated with name '_main_sloc1_1_0'
0000            511   ;------------------------------------------------------------
0000            512   ;        robot.c:22: void main(void) {
0000            513   ;        -----------------------------------------
0000            514   ;         function main
0000            515   ;        -----------------------------------------
0000            516   _main:
0000            517            using   0
0000            518   ;        robot.c:24: volatile float v1 = 0;
0000 75E800     519            mov     _main_v1_1_57,#0x00
0003 75E900     520            mov     (_main_v1_1_57 + 1),#0x00
0006 75EA00     521            mov     (_main_v1_1_57 + 2),#0x00
0009 75EB00     522            mov     (_main_v1_1_57 + 3),#0x00
000C            523   ;        robot.c:25: volatile float v2 = 0;
000C 752800     524            mov     _main_v2_1_57,#0x00
000F 752900     525            mov     (_main_v2_1_57 + 1),#0x00
0012 752A00     526            mov     (_main_v2_1_57 + 2),#0x00
0015 752B00     527            mov     (_main_v2_1_57 + 3),#0x00
0018            528   ;        robot.c:27: MOTOR_LEFT0 =0;
0018 C295       529            clr     _P1_5
001A            530   ;        robot.c:28: MOTOR_LEFT1 =0;
001A C296       531            clr     _P1_6
001C            532   ;        robot.c:29: MOTOR_RIGHT0 =0;
001C C2A0       533            clr     _P2_0
001E            534   ;        robot.c:30: MOTOR_RIGHT1 =0;
001E C2A1       535            clr     _P2_1
0020            536   ;        robot.c:33: currentstate = 1;           //1-FORWARD, 2-BACKWARDS, 3-STOPPED, 4-DEBUGGER
0020 751801     537            mov     _currentstate,#0x01
0023            538   ;        robot.c:34: currentcmd = 1;             //0-NO COMMAND, 1-TURN LEFT, 2-TURN RIGHT, 3-FORWARDS, 4-BACKWARDS, 5-STOP, 6-UTURN
0023 755801     539            mov     _currentcmd,#0x01
0026            540   ;        robot.c:37: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0026 74E8       541            mov     a,#__str_0
0028 C0E0       542            push    acc
002A 7499       543            mov     a,#(__str_0 >> 8)
002C C0E0       544            push    acc
002E 7480       545            mov     a,#0x80
0030 C0E0       546            push    acc
0032 120100     547            lcall   _printf
0035 1581       548            dec     sp
0037 1581       549            dec     sp
0039 1581       550            dec     sp
003B            551   ;        robot.c:40: InitPinADC(2, 3); // Configure P2.3 as analog input (tank1)
003B 750003     552            mov     _InitPinADC_PARM_2,#0x03
003E 758202     553            mov     dpl,#0x02
0041 120100     554            lcall   _InitPinADC
0044            555   ;        robot.c:41: InitPinADC(2, 4); // Configure P2.4 as analog input         (tank1)
0044 750004     556            mov     _InitPinADC_PARM_2,#0x04
0047 758202     557            mov     dpl,#0x02
004A 120100     558            lcall   _InitPinADC
004D            559   ;        robot.c:42: InitPinADC(2, 5); // Configure P2.5 as analog input (tank2)
004D 750005     560            mov     _InitPinADC_PARM_2,#0x05
0050 758202     561            mov     dpl,#0x02
0053 120100     562            lcall   _InitPinADC
0056            563   ;        robot.c:43: InitPinADC(2, 6); // Configure P2.6 as analog input (tank2)
0056 750006     564            mov     _InitPinADC_PARM_2,#0x06
0059 758202     565            mov     dpl,#0x02
005C 120100     566            lcall   _InitPinADC
005F            567   ;        robot.c:49: InitADC();
005F 120100     568            lcall   _InitADC
0062            569   ;        robot.c:53: while(1)
0062            570   L002024?:
0062            571   ;        robot.c:56: readData(); 
0062 120100     572            lcall   _readData
0065            573   ;        robot.c:58: printf("frontL %f frontR %f backL %f backR %f\r", Volts_at_Pin(LQFP32_MUX_P2_3),Volts_at_Pin(LQFP32_MUX_P2_4),Volts_at_Pin(LQFP32_MUX_P2_5),Volts_at_Pin(LQFP32_MUX_P2_6));
0065 75820E     574            mov     dpl,#0x0E
0068 120100     575            lcall   _Volts_at_Pin
006B AA82       576            mov     r2,dpl
006D AB83       577            mov     r3,dph
006F ACF0       578            mov     r4,b
0071 FD         579            mov     r5,a
0072 75820D     580            mov     dpl,#0x0D
0075 C002       581            push    ar2
0077 C003       582            push    ar3
0079 C004       583            push    ar4
007B C005       584            push    ar5
007D 120100     585            lcall   _Volts_at_Pin
0080 858268     586            mov     _main_sloc0_1_0,dpl
0083 858369     587            mov     (_main_sloc0_1_0 + 1),dph
0086 85F06A     588            mov     (_main_sloc0_1_0 + 2),b
0089 F56B       589            mov     (_main_sloc0_1_0 + 3),a
008B 75820C     590            mov     dpl,#0x0C
008E 120100     591            lcall   _Volts_at_Pin
0091 8582A8     592            mov     _main_sloc1_1_0,dpl
0094 8583A9     593            mov     (_main_sloc1_1_0 + 1),dph
0097 85F0AA     594            mov     (_main_sloc1_1_0 + 2),b
009A F5AB       595            mov     (_main_sloc1_1_0 + 3),a
009C 75820B     596            mov     dpl,#0x0B
009F 120100     597            lcall   _Volts_at_Pin
00A2 AE82       598            mov     r6,dpl
00A4 AF83       599            mov     r7,dph
00A6 A8F0       600            mov     r0,b
00A8 F9         601            mov     r1,a
00A9 C068       602            push    _main_sloc0_1_0
00AB C069       603            push    (_main_sloc0_1_0 + 1)
00AD C06A       604            push    (_main_sloc0_1_0 + 2)
00AF C06B       605            push    (_main_sloc0_1_0 + 3)
00B1 C0A8       606            push    _main_sloc1_1_0
00B3 C0A9       607            push    (_main_sloc1_1_0 + 1)
00B5 C0AA       608            push    (_main_sloc1_1_0 + 2)
00B7 C0AB       609            push    (_main_sloc1_1_0 + 3)
00B9 C006       610            push    ar6
00BB C007       611            push    ar7
00BD C000       612            push    ar0
00BF C001       613            push    ar1
00C1 74F8       614            mov     a,#__str_1
00C3 C0E0       615            push    acc
00C5 749C       616            mov     a,#(__str_1 >> 8)
00C7 C0E0       617            push    acc
00C9 7480       618            mov     a,#0x80
00CB C0E0       619            push    acc
00CD 120100     620            lcall   _printf
00D0 E581       621            mov     a,sp
00D2 24ED       622            add     a,#0xed
00D4 F581       623            mov     sp,a
00D6            624   ;        robot.c:61: switch (currentstate) {
00D6 AA18       625            mov     r2,_currentstate
00D8 BA0138     626            cjne    r2,#0x01,L002040?
00DB 8001       627            sjmp    L002001?
00DD            628   L002040?:
00DD BA02B8     629            cjne    r2,#0x02,L002041?
00E0 8001       630            sjmp    L002002?
00E2            631   L002041?:
00E2            632   ;        robot.c:62: case 1:
00E2 BA0338     633            cjne    r2,#0x03,L002004?
00E5 8001       634            sjmp    L002003?
00E7            635   L002001?:
00E7            636   ;        robot.c:63: linetrack(0);       //forwards
00E7 900000     637            mov     dptr,#0x0000
00EA 120100     638            lcall   _linetrack
00ED            639   ;        robot.c:65: v1 = Volts_at_Pin(LQFP32_MUX_P2_3);
00ED 75820B     640            mov     dpl,#0x0B
00F0 120100     641            lcall   _Volts_at_Pin
00F3 8582E8     642            mov     _main_v1_1_57,dpl
00F6 8583E9     643            mov     (_main_v1_1_57 + 1),dph
00F9 85F0EA     644            mov     (_main_v1_1_57 + 2),b
00FC F5EB       645            mov     (_main_v1_1_57 + 3),a
00FE            646   ;        robot.c:66: v2 = Volts_at_Pin(LQFP32_MUX_P2_4);
00FE 75820C     647            mov     dpl,#0x0C
0101 120100     648            lcall   _Volts_at_Pin
0104 858228     649            mov     _main_v2_1_57,dpl
0107 858329     650            mov     (_main_v2_1_57 + 1),dph
010A 85F02A     651            mov     (_main_v2_1_57 + 2),b
010D F52B       652            mov     (_main_v2_1_57 + 3),a
010F            653   ;        robot.c:67: break;
010F            654   ;        robot.c:68: case 2:
010F 8001       655            sjmp    L002004?
0111            656   L002002?:
0111            657   ;        robot.c:69: linetrack(1);       //backwards
0111 900001     658            mov     dptr,#0x0001
0114 120100     659            lcall   _linetrack
0117            660   ;        robot.c:71: v2 = Volts_at_Pin(LQFP32_MUX_P2_5);
0117 75820D     661            mov     dpl,#0x0D
011A 120100     662            lcall   _Volts_at_Pin
011D 858228     663            mov     _main_v2_1_57,dpl
0120 858329     664            mov     (_main_v2_1_57 + 1),dph
0123 85F02A     665            mov     (_main_v2_1_57 + 2),b
0126 F52B       666            mov     (_main_v2_1_57 + 3),a
0128            667   ;        robot.c:72: v1 = Volts_at_Pin(LQFP32_MUX_P2_6);
0128 75820E     668            mov     dpl,#0x0E
012B 120100     669            lcall   _Volts_at_Pin
012E 8582E8     670            mov     _main_v1_1_57,dpl
0131 8583E9     671            mov     (_main_v1_1_57 + 1),dph
0134 85F0EA     672            mov     (_main_v1_1_57 + 2),b
0137 F5EB       673            mov     (_main_v1_1_57 + 3),a
0139            674   ;        robot.c:73: break;
0139            675   ;        robot.c:74: case 3:
0139 8001       676            sjmp    L002004?
013B            677   L002003?:
013B            678   ;        robot.c:75: stopcar();          //stop car
013B 120100     679            lcall   _stopcar
013E            680   ;        robot.c:77: }
013E            681   L002004?:
013E            682   ;        robot.c:80: switch (currentcmd) {
013E E558       683            mov     a,_currentcmd
0140 FA         684            mov     r2,a
0141 30E7B8     685            jnb     acc.7,L002043?
0144 020100     686            ljmp    L002021?
0147            687   L002043?:
0147 C3         688            clr     c
0148 7486       689            mov     a,#(0x06 ^ 0x80)
014A 8AF0       690            mov     b,r2
014C 63F080     691            xrl     b,#0x80
014F 95F0       692            subb    a,b
0151 5001       693            jnc     L002044?
0153 020100     694            ljmp    L002021?
0156            695   L002044?:
0156 EA         696            mov     a,r2
0157 2A         697            add     a,r2
0158 2A         698            add     a,r2
0159 909F78     699            mov     dptr,#L002045?
015C 73         700            jmp     @a+dptr
015D            701   L002045?:
015D 020100     702            ljmp    L002005?
0160 020100     703            ljmp    L002009?
0163 020100     704            ljmp    L002013?
0166 020100     705            ljmp    L002017?
0169 020100     706            ljmp    L002018?
016C 020100     707            ljmp    L002019?
016F 020100     708            ljmp    L002020?
0172            709   ;        robot.c:82: case 0 :
0172            710   L002005?:
0172            711   ;        robot.c:84: if (v1 > 0.7 && v2 >1) {
0172 7433       712            mov     a,#0x33
0174 C0E0       713            push    acc
0176 C0E0       714            push    acc
0178 C0E0       715            push    acc
017A 743F       716            mov     a,#0x3F
017C C0E0       717            push    acc
017E 85E882     718            mov     dpl,_main_v1_1_57
0181 85E983     719            mov     dph,(_main_v1_1_57 + 1)
0184 85EAF0     720            mov     b,(_main_v1_1_57 + 2)
0187 E5EB       721            mov     a,(_main_v1_1_57 + 3)
0189 120100     722            lcall   ___fsgt
018C AA82       723            mov     r2,dpl
018E E581       724            mov     a,sp
0190 24FC       725            add     a,#0xfc
0192 F581       726            mov     sp,a
0194 EA         727            mov     a,r2
0195 7001       728            jnz     L002046?
0197 020100     729            ljmp    L002024?
019A            730   L002046?:
019A E4         731            clr     a
019B C0E0       732            push    acc
019D C0E0       733            push    acc
019F 7480       734            mov     a,#0x80
01A1 C0E0       735            push    acc
01A3 743F       736            mov     a,#0x3F
01A5 C0E0       737            push    acc
01A7 852882     738            mov     dpl,_main_v2_1_57
01AA 852983     739            mov     dph,(_main_v2_1_57 + 1)
01AD 852AF0     740            mov     b,(_main_v2_1_57 + 2)
01B0 E52B       741            mov     a,(_main_v2_1_57 + 3)
01B2 120100     742            lcall   ___fsgt
01B5 AA82       743            mov     r2,dpl
01B7 E581       744            mov     a,sp
01B9 24FC       745            add     a,#0xfc
01BB F581       746            mov     sp,a
01BD EA         747            mov     a,r2
01BE 7001       748            jnz     L002047?
01C0 020100     749            ljmp    L002024?
01C3            750   L002047?:
01C3            751   ;        robot.c:85: printf("\nINTERSECTION\n"); 
01C3 7440       752            mov     a,#__str_2
01C5 C0E0       753            push    acc
01C7 74A2       754            mov     a,#(__str_2 >> 8)
01C9 C0E0       755            push    acc
01CB 7480       756            mov     a,#0x80
01CD C0E0       757            push    acc
01CF 120100     758            lcall   _printf
01D2 1581       759            dec     sp
01D4 1581       760            dec     sp
01D6 1581       761            dec     sp
01D8            762   ;        robot.c:87: linetrack(currentstate*2);
01D8 C2D5       763            clr     F0
01DA 75F002     764            mov     b,#0x02
01DD E518       765            mov     a,_currentstate
01DF 30E7C0     766            jnb     acc.7,L002048?
01E2 B2D5       767            cpl     F0
01E4 F4         768            cpl     a
01E5 04         769            inc     a
01E6            770   L002048?:
01E6 A4         771            mul     ab
01E7 30D500     772            jnb     F0,L002049?
01EA F4         773            cpl     a
01EB 2401       774            add     a,#0x01
01ED C5F0       775            xch     a,b
01EF F4         776            cpl     a
01F0 3400       777            addc    a,#0x00
01F2 C5F0       778            xch     a,b
01F4            779   L002049?:
01F4 F582       780            mov     dpl,a
01F6 85F083     781            mov     dph,b
01F9 120100     782            lcall   _linetrack
01FC            783   ;        robot.c:88: waitms(1500);
01FC 9005DC     784            mov     dptr,#0x05DC
01FF 120100     785            lcall   _waitms
0202            786   ;        robot.c:90: break;
0202 020100     787            ljmp    L002024?
0205            788   ;        robot.c:92: case 1 :
0205            789   L002009?:
0205            790   ;        robot.c:94: if (v1 > 0.7 && v2 >1)  {
0205 7433       791            mov     a,#0x33
0207 C0E0       792            push    acc
0209 C0E0       793            push    acc
020B C0E0       794            push    acc
020D 743F       795            mov     a,#0x3F
020F C0E0       796            push    acc
0211 85E882     797            mov     dpl,_main_v1_1_57
0214 85E983     798            mov     dph,(_main_v1_1_57 + 1)
0217 85EAF0     799            mov     b,(_main_v1_1_57 + 2)
021A E5EB       800            mov     a,(_main_v1_1_57 + 3)
021C 120100     801            lcall   ___fsgt
021F AA82       802            mov     r2,dpl
0221 E581       803            mov     a,sp
0223 24FC       804            add     a,#0xfc
0225 F581       805            mov     sp,a
0227 EA         806            mov     a,r2
0228 7001       807            jnz     L002050?
022A 020100     808            ljmp    L002024?
022D            809   L002050?:
022D E4         810            clr     a
022E C0E0       811            push    acc
0230 C0E0       812            push    acc
0232 7480       813            mov     a,#0x80
0234 C0E0       814            push    acc
0236 743F       815            mov     a,#0x3F
0238 C0E0       816            push    acc
023A 852882     817            mov     dpl,_main_v2_1_57
023D 852983     818            mov     dph,(_main_v2_1_57 + 1)
0240 852AF0     819            mov     b,(_main_v2_1_57 + 2)
0243 E52B       820            mov     a,(_main_v2_1_57 + 3)
0245 120100     821            lcall   ___fsgt
0248 AA82       822            mov     r2,dpl
024A E581       823            mov     a,sp
024C 24FC       824            add     a,#0xfc
024E F581       825            mov     sp,a
0250 EA         826            mov     a,r2
0251 7001       827            jnz     L002051?
0253 020100     828            ljmp    L002024?
0256            829   L002051?:
0256            830   ;        robot.c:95: printf("\n\r INTERSECTION\n");
0256 7400       831            mov     a,#__str_3
0258 C0E0       832            push    acc
025A 74A4       833            mov     a,#(__str_3 >> 8)
025C C0E0       834            push    acc
025E 7480       835            mov     a,#0x80
0260 C0E0       836            push    acc
0262 120100     837            lcall   _printf
0265 1581       838            dec     sp
0267 1581       839            dec     sp
0269 1581       840            dec     sp
026B            841   ;        robot.c:101: turncar(0); //0 = left
026B 900000     842            mov     dptr,#0x0000
026E 120100     843            lcall   _turncar
0271            844   ;        robot.c:102: currentcmd = 0;
0271 755800     845            mov     _currentcmd,#0x00
0274            846   ;        robot.c:104: break;
0274 020100     847            ljmp    L002024?
0277            848   ;        robot.c:107: case 2 :
0277            849   L002013?:
0277            850   ;        robot.c:109: if (v1 > 0.7 && v2 >1) {
0277 7433       851            mov     a,#0x33
0279 C0E0       852            push    acc
027B C0E0       853            push    acc
027D C0E0       854            push    acc
027F 743F       855            mov     a,#0x3F
0281 C0E0       856            push    acc
0283 85E882     857            mov     dpl,_main_v1_1_57
0286 85E983     858            mov     dph,(_main_v1_1_57 + 1)
0289 85EAF0     859            mov     b,(_main_v1_1_57 + 2)
028C E5EB       860            mov     a,(_main_v1_1_57 + 3)
028E 120100     861            lcall   ___fsgt
0291 AA82       862            mov     r2,dpl
0293 E581       863            mov     a,sp
0295 24FC       864            add     a,#0xfc
0297 F581       865            mov     sp,a
0299 EA         866            mov     a,r2
029A 7001       867            jnz     L002052?
029C 020100     868            ljmp    L002024?
029F            869   L002052?:
029F E4         870            clr     a
02A0 C0E0       871            push    acc
02A2 C0E0       872            push    acc
02A4 7480       873            mov     a,#0x80
02A6 C0E0       874            push    acc
02A8 743F       875            mov     a,#0x3F
02AA C0E0       876            push    acc
02AC 852882     877            mov     dpl,_main_v2_1_57
02AF 852983     878            mov     dph,(_main_v2_1_57 + 1)
02B2 852AF0     879            mov     b,(_main_v2_1_57 + 2)
02B5 E52B       880            mov     a,(_main_v2_1_57 + 3)
02B7 120100     881            lcall   ___fsgt
02BA AA82       882            mov     r2,dpl
02BC E581       883            mov     a,sp
02BE 24FC       884            add     a,#0xfc
02C0 F581       885            mov     sp,a
02C2 EA         886            mov     a,r2
02C3 7001       887            jnz     L002053?
02C5 020100     888            ljmp    L002024?
02C8            889   L002053?:
02C8            890   ;        robot.c:110: printf("\n\r INTERSECTION\n");
02C8 7400       891            mov     a,#__str_3
02CA C0E0       892            push    acc
02CC 74A4       893            mov     a,#(__str_3 >> 8)
02CE C0E0       894            push    acc
02D0 7480       895            mov     a,#0x80
02D2 C0E0       896            push    acc
02D4 120100     897            lcall   _printf
02D7 1581       898            dec     sp
02D9 1581       899            dec     sp
02DB 1581       900            dec     sp
02DD            901   ;        robot.c:116: turncar(1); //1 = right
02DD 900001     902            mov     dptr,#0x0001
02E0 120100     903            lcall   _turncar
02E3            904   ;        robot.c:117: currentcmd = 0;
02E3 755800     905            mov     _currentcmd,#0x00
02E6            906   ;        robot.c:119: break;
02E6 020100     907            ljmp    L002024?
02E9            908   ;        robot.c:122: case 3 :
02E9            909   L002017?:
02E9            910   ;        robot.c:124: currentstate = 1;
02E9 751801     911            mov     _currentstate,#0x01
02EC            912   ;        robot.c:125: currentcmd = 0;
02EC 755800     913            mov     _currentcmd,#0x00
02EF            914   ;        robot.c:126: break;
02EF 020100     915            ljmp    L002024?
02F2            916   ;        robot.c:129: case 4 :
02F2            917   L002018?:
02F2            918   ;        robot.c:131: currentstate = 2;
02F2 751802     919            mov     _currentstate,#0x02
02F5            920   ;        robot.c:132: currentcmd = 0;
02F5 755800     921            mov     _currentcmd,#0x00
02F8            922   ;        robot.c:133: break;
02F8 020100     923            ljmp    L002024?
02FB            924   ;        robot.c:136: case 5 :
02FB            925   L002019?:
02FB            926   ;        robot.c:138: currentstate = 3;
02FB 751803     927            mov     _currentstate,#0x03
02FE            928   ;        robot.c:139: currentcmd = 0;
02FE 755800     929            mov     _currentcmd,#0x00
0301            930   ;        robot.c:140: break;
0301 020100     931            ljmp    L002024?
0304            932   ;        robot.c:143: case 6 :
0304            933   L002020?:
0304            934   ;        robot.c:144: uturn();
0304 120100     935            lcall   _uturn
0307            936   ;        robot.c:145: currentcmd = 0;
0307 755800     937            mov     _currentcmd,#0x00
030A            938   ;        robot.c:146: break;
030A 020100     939            ljmp    L002024?
030D            940   ;        robot.c:149: default: 
030D            941   L002021?:
030D            942   ;        robot.c:150: currentstate = 1;
030D 751801     943            mov     _currentstate,#0x01
0310            944   ;        robot.c:151: }
0310 020100     945            ljmp    L002024?
0313            946   ;------------------------------------------------------------
0313            947   ;Allocation info for local variables in function 'Timer2_ISR'
0313            948   ;------------------------------------------------------------
0313            949   ;------------------------------------------------------------
0313            950   ;        robot.c:155: void Timer2_ISR (void) interrupt 5 {
0313            951   ;        -----------------------------------------
0313            952   ;         function Timer2_ISR
0313            953   ;        -----------------------------------------
0313            954   _Timer2_ISR:
0313 C0E0       955            push    acc
0315 C0F0       956            push    b
0317 C0D0       957            push    psw
0319 75D000     958            mov     psw,#0x00
031C            959   ;        robot.c:156: TF2H = 0; // Clear Timer2 interrupt flag
031C C2CF       960            clr     _TF2H
031E            961   ;        robot.c:158: pwm_count++;
031E 0558       962            inc     _pwm_count
0320            963   ;        robot.c:159: if(pwm_count>100) pwm_count=0;
0320 C3         964            clr     c
0321 74E4       965            mov     a,#(0x64 ^ 0x80)
0323 8558F0     966            mov     b,_pwm_count
0326 63F080     967            xrl     b,#0x80
0329 95F0       968            subb    a,b
032B 5001       969            jnc     L003002?
032D 755800     970            mov     _pwm_count,#0x00
0330            971   L003002?:
0330            972   ;        robot.c:162: MOTOR_LEFT0 = pwm_count > pwm_Left0 ? 0 : 1; //p1.5
0330 C3         973            clr     c
0331 E598       974            mov     a,_pwm_Left0
0333 6480       975            xrl     a,#0x80
0335 8558F0     976            mov     b,_pwm_count
0338 63F080     977            xrl     b,#0x80
033B 95F0       978            subb    a,b
033D 9268       979            mov  _Timer2_ISR_sloc0_1_0,c
033F B3         980            cpl     c
0340 9295       981            mov     _P1_5,c
0342            982   ;        robot.c:163: MOTOR_LEFT1 = pwm_count > pwm_Left1 ? 0 : 1; //p1.6
0342 C3         983            clr     c
0343 E558       984            mov     a,_pwm_Left1
0345 6480       985            xrl     a,#0x80
0347 8558F0     986            mov     b,_pwm_count
034A 63F080     987            xrl     b,#0x80
034D 95F0       988            subb    a,b
034F 9268       989            mov  _Timer2_ISR_sloc0_1_0,c
0351 B3         990            cpl     c
0352 9296       991            mov     _P1_6,c
0354            992   ;        robot.c:164: MOTOR_RIGHT0 = pwm_count > pwm_Right0 ? 0 : 1; //p2.0
0354 C3         993            clr     c
0355 E518       994            mov     a,_pwm_Right0
0357 6480       995            xrl     a,#0x80
0359 8558F0     996            mov     b,_pwm_count
035C 63F080     997            xrl     b,#0x80
035F 95F0       998            subb    a,b
0361 9268       999            mov  _Timer2_ISR_sloc0_1_0,c
0363 B3        1000            cpl     c
0364 92A0      1001            mov     _P2_0,c
0366           1002   ;        robot.c:165: MOTOR_RIGHT1 = pwm_count > pwm_Right1 ? 0 : 1; //p2.1
0366 C3        1003            clr     c
0367 E5D8      1004            mov     a,_pwm_Right1
0369 6480      1005            xrl     a,#0x80
036B 8558F0    1006            mov     b,_pwm_count
036E 63F080    1007            xrl     b,#0x80
0371 95F0      1008            subb    a,b
0373 9268      1009            mov  _Timer2_ISR_sloc0_1_0,c
0375 B3        1010            cpl     c
0376 92A1      1011            mov     _P2_1,c
0378 D0D0      1012            pop     psw
037A D0F0      1013            pop     b
037C D0E0      1014            pop     acc
037E 32        1015            reti
037F           1016   ;        eliminated unneeded push/pop dpl
037F           1017   ;        eliminated unneeded push/pop dph
037F           1018   ;------------------------------------------------------------
037F           1019   ;Allocation info for local variables in function 'forward_backward'
037F           1020   ;------------------------------------------------------------
037F           1021   ;direction                 Allocated to registers r2 
037F           1022   ;------------------------------------------------------------
037F           1023   ;        robot.c:172: void forward_backward(unsigned char direction) {
037F           1024   ;        -----------------------------------------
037F           1025   ;         function forward_backward
037F           1026   ;        -----------------------------------------
037F           1027   _forward_backward:
037F           1028   ;        robot.c:173: if (direction == 0) { //p2.1,1.6 on
037F E582      1029            mov     a,dpl
0381 FA        1030            mov     r2,a
0382 7001      1031            jnz     L004004?
0384           1032   ;        robot.c:174: pwm_Left0 = pwm_Right0 = -1;
0384 7518FF    1033            mov     _pwm_Right0,#0xFF
0387 7598FF    1034            mov     _pwm_Left0,#0xFF
038A           1035   ;        robot.c:175: pwm_Left1 = pwm_Right1 = pwm_both;  //MOTOR_LEFT1 = MOTOR_RIGHT1 = pwm_both;
038A 85D8D8    1036            mov     _pwm_Right1,_pwm_both
038D 85D858    1037            mov     _pwm_Left1,_pwm_both
0390 22        1038            ret
0391           1039   L004004?:
0391           1040   ;        robot.c:178: else if (direction == 1) { //p2.0,1.5 on
0391 BA0180    1041            cjne    r2,#0x01,L004006?
0394           1042   ;        robot.c:179: pwm_Left1 = pwm_Right1 = -1;
0394 75D8FF    1043            mov     _pwm_Right1,#0xFF
0397 7558FF    1044            mov     _pwm_Left1,#0xFF
039A           1045   ;        robot.c:180: pwm_Left0 = pwm_Right0 = pwm_both; 
039A 85D818    1046            mov     _pwm_Right0,_pwm_both
039D 85D898    1047            mov     _pwm_Left0,_pwm_both
03A0           1048   L004006?:
03A0 22        1049            ret
03A1           1050   ;------------------------------------------------------------
03A1           1051   ;Allocation info for local variables in function 'readData'
03A1           1052   ;------------------------------------------------------------
03A1           1053   ;commandflag               Allocated to registers r2 r3 
03A1           1054   ;------------------------------------------------------------
03A1           1055   ;        robot.c:191: void readData (void) {
03A1           1056   ;        -----------------------------------------
03A1           1057   ;         function readData
03A1           1058   ;        -----------------------------------------
03A1           1059   _readData:
03A1           1060   ;        robot.c:192: int commandflag = 0;                                       //determines if there's a real command coming in or not
03A1 7A00      1061            mov     r2,#0x00
03A3 7B00      1062            mov     r3,#0x00
03A5           1063   ;        robot.c:195: if (COMMAND_PIN == 0) {                                    //0---
03A5 3090C0    1064            jnb     _P1_0,L005039?
03A8 020100    1065            ljmp    L005022?
03AB           1066   L005039?:
03AB           1067   ;        robot.c:196: waitms(CMDFRQ*1.5);
03AB 900069    1068            mov     dptr,#0x0069
03AE C002      1069            push    ar2
03B0 C003      1070            push    ar3
03B2 120100    1071            lcall   _waitms
03B5 D003      1072            pop     ar3
03B7 D002      1073            pop     ar2
03B9           1074   ;        robot.c:197: if (COMMAND_PIN == 1) {                            //01--
03B9 309040    1075            jnb     _P1_0,L005019?
03BC           1076   ;        robot.c:198: waitms(CMDFRQ);
03BC 900046    1077            mov     dptr,#0x0046
03BF C002      1078            push    ar2
03C1 C003      1079            push    ar3
03C3 120100    1080            lcall   _waitms
03C6 D003      1081            pop     ar3
03C8 D002      1082            pop     ar2
03CA           1083   ;        robot.c:199: if (COMMAND_PIN == 0) {                    //010-
03CA 209080    1084            jb      _P1_0,L005007?
03CD           1085   ;        robot.c:200: waitms(CMDFRQ);
03CD 900046    1086            mov     dptr,#0x0046
03D0 C002      1087            push    ar2
03D2 C003      1088            push    ar3
03D4 120100    1089            lcall   _waitms
03D7 D003      1090            pop     ar3
03D9 D002      1091            pop     ar2
03DB           1092   ;        robot.c:201: if (COMMAND_PIN == 0)      currentcmd = 4;         //0100  
03DB 2090C0    1093            jb      _P1_0,L005002?
03DE 755804    1094            mov     _currentcmd,#0x04
03E1 8001      1095            sjmp    L005022?
03E3           1096   L005002?:
03E3           1097   ;        robot.c:202: else                                       currentcmd = 5;         //0101
03E3 755805    1098            mov     _currentcmd,#0x05
03E6 8001      1099            sjmp    L005022?
03E8           1100   L005007?:
03E8           1101   ;        robot.c:205: waitms(CMDFRQ);
03E8 900046    1102            mov     dptr,#0x0046
03EB C002      1103            push    ar2
03ED C003      1104            push    ar3
03EF 120100    1105            lcall   _waitms
03F2 D003      1106            pop     ar3
03F4 D002      1107            pop     ar2
03F6           1108   ;        robot.c:206: if (COMMAND_PIN == 0)      currentcmd = 6;         //0110
03F6 209000    1109            jb      _P1_0,L005022?
03F9 755806    1110            mov     _currentcmd,#0x06
03FC 8001      1111            sjmp    L005022?
03FE           1112   L005019?:
03FE           1113   ;        robot.c:210: waitms(CMDFRQ);
03FE 900046    1114            mov     dptr,#0x0046
0401 C002      1115            push    ar2
0403 C003      1116            push    ar3
0405 120100    1117            lcall   _waitms
0408 D003      1118            pop     ar3
040A D002      1119            pop     ar2
040C           1120   ;        robot.c:211: if (COMMAND_PIN == 1) {                    //001-
040C 309000    1121            jnb     _P1_0,L005016?
040F           1122   ;        robot.c:212: waitms(CMDFRQ);
040F 900046    1123            mov     dptr,#0x0046
0412 C002      1124            push    ar2
0414 C003      1125            push    ar3
0416 120100    1126            lcall   _waitms
0419 D003      1127            pop     ar3
041B D002      1128            pop     ar2
041D           1129   ;        robot.c:213: if (COMMAND_PIN == 1)      currentcmd = 3;         //0011
041D 309040    1130            jnb     _P1_0,L005010?
0420 755803    1131            mov     _currentcmd,#0x03
0423 8001      1132            sjmp    L005022?
0425           1133   L005010?:
0425           1134   ;        robot.c:214: else                                       currentcmd = 2;         //0010
0425 755802    1135            mov     _currentcmd,#0x02
0428 8001      1136            sjmp    L005022?
042A           1137   L005016?:
042A           1138   ;        robot.c:217: waitms(CMDFRQ);
042A 900046    1139            mov     dptr,#0x0046
042D C002      1140            push    ar2
042F C003      1141            push    ar3
0431 120100    1142            lcall   _waitms
0434 D003      1143            pop     ar3
0436 D002      1144            pop     ar2
0438           1145   ;        robot.c:218: if (COMMAND_PIN == 1)      currentcmd = 1; //0001
0438 309080    1146            jnb     _P1_0,L005013?
043B 755801    1147            mov     _currentcmd,#0x01
043E 8001      1148            sjmp    L005022?
0440           1149   L005013?:
0440           1150   ;        robot.c:220: commandflag = 1;
0440 7A01      1151            mov     r2,#0x01
0442 7B00      1152            mov     r3,#0x00
0444           1153   L005022?:
0444           1154   ;        robot.c:227: if (commandflag == 0)      {while (COMMAND_PIN == 0);} 
0444 EA        1155            mov     a,r2
0445 4B        1156            orl     a,r3
0446 7001      1157            jnz     L005028?
0448           1158   L005023?:
0448 309000    1159            jnb     _P1_0,L005023?
044B           1160   L005028?:
044B 22        1161            ret
044C           1162   ;------------------------------------------------------------
044C           1163   ;Allocation info for local variables in function 'linetrack'
044C           1164   ;------------------------------------------------------------
044C           1165   ;forwardbackward           Allocated with name '_linetrack_forwardbackward_1_81'
044C           1166   ;vleft                     Allocated with name '_linetrack_vleft_1_82'
044C           1167   ;vright                    Allocated with name '_linetrack_vright_1_82'
044C           1168   ;sloc0                     Allocated with name '_linetrack_sloc0_1_0'
044C           1169   ;------------------------------------------------------------
044C           1170   ;        robot.c:237: void linetrack (int forwardbackward) {
044C           1171   ;        -----------------------------------------
044C           1172   ;         function linetrack
044C           1173   ;        -----------------------------------------
044C           1174   _linetrack:
044C 8582F8    1175            mov     _linetrack_forwardbackward_1_81,dpl
044F 8583F9    1176            mov     (_linetrack_forwardbackward_1_81 + 1),dph
0452           1177   ;        robot.c:243: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0452 75820B    1178            mov     dpl,#0x0B
0455 120100    1179            lcall   _Volts_at_Pin
0458 858248    1180            mov     _linetrack_vleft_1_82,dpl
045B 858349    1181            mov     (_linetrack_vleft_1_82 + 1),dph
045E 85F04A    1182            mov     (_linetrack_vleft_1_82 + 2),b
0461 F54B      1183            mov     (_linetrack_vleft_1_82 + 3),a
0463           1184   ;        robot.c:244: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0463 75820C    1185            mov     dpl,#0x0C
0466 120100    1186            lcall   _Volts_at_Pin
0469 858298    1187            mov     _linetrack_vright_1_82,dpl
046C 858399    1188            mov     (_linetrack_vright_1_82 + 1),dph
046F 85F09A    1189            mov     (_linetrack_vright_1_82 + 2),b
0472 F59B      1190            mov     (_linetrack_vright_1_82 + 3),a
0474           1191   ;        robot.c:247: if (forwardbackward == 2) {
0474 7402      1192            mov     a,#0x02
0476 B5F840    1193            cjne    a,_linetrack_forwardbackward_1_81,L006013?
0479 E4        1194            clr     a
047A B5F940    1195            cjne    a,(_linetrack_forwardbackward_1_81 + 1),L006013?
047D 8001      1196            sjmp    L006014?
047F           1197   L006013?:
047F 8001      1198            sjmp    L006002?
0481           1199   L006014?:
0481           1200   ;        robot.c:248: vleft=Volts_at_Pin(LQFP32_MUX_P2_5);
0481 75820D    1201            mov     dpl,#0x0D
0484 120100    1202            lcall   _Volts_at_Pin
0487 858248    1203            mov     _linetrack_vleft_1_82,dpl
048A 858349    1204            mov     (_linetrack_vleft_1_82 + 1),dph
048D 85F04A    1205            mov     (_linetrack_vleft_1_82 + 2),b
0490 F54B      1206            mov     (_linetrack_vleft_1_82 + 3),a
0492           1207   ;        robot.c:249: vright=Volts_at_Pin(LQFP32_MUX_P2_6);
0492 75820E    1208            mov     dpl,#0x0E
0495 120100    1209            lcall   _Volts_at_Pin
0498 858298    1210            mov     _linetrack_vright_1_82,dpl
049B 858399    1211            mov     (_linetrack_vright_1_82 + 1),dph
049E 85F09A    1212            mov     (_linetrack_vright_1_82 + 2),b
04A1 F59B      1213            mov     (_linetrack_vright_1_82 + 3),a
04A3           1214   L006002?:
04A3           1215   ;        robot.c:253: pwm_Left0 = -1;
04A3 7598FF    1216            mov     _pwm_Left0,#0xFF
04A6           1217   ;        robot.c:254: pwm_Left1 = vright*vright*75/(vright*vright+vleft*vleft);
04A6 C098      1218            push    _linetrack_vright_1_82
04A8 C099      1219            push    (_linetrack_vright_1_82 + 1)
04AA C09A      1220            push    (_linetrack_vright_1_82 + 2)
04AC C09B      1221            push    (_linetrack_vright_1_82 + 3)
04AE 859882    1222            mov     dpl,_linetrack_vright_1_82
04B1 859983    1223            mov     dph,(_linetrack_vright_1_82 + 1)
04B4 859AF0    1224            mov     b,(_linetrack_vright_1_82 + 2)
04B7 E59B      1225            mov     a,(_linetrack_vright_1_82 + 3)
04B9 120100    1226            lcall   ___fsmul
04BC AC82      1227            mov     r4,dpl
04BE AD83      1228            mov     r5,dph
04C0 AEF0      1229            mov     r6,b
04C2 FF        1230            mov     r7,a
04C3 E581      1231            mov     a,sp
04C5 24FC      1232            add     a,#0xfc
04C7 F581      1233            mov     sp,a
04C9 C004      1234            push    ar4
04CB C005      1235            push    ar5
04CD C006      1236            push    ar6
04CF C007      1237            push    ar7
04D1 900000    1238            mov     dptr,#0x0000
04D4 75F096    1239            mov     b,#0x96
04D7 7442      1240            mov     a,#0x42
04D9 120100    1241            lcall   ___fsmul
04DC AC82      1242            mov     r4,dpl
04DE AD83      1243            mov     r5,dph
04E0 AEF0      1244            mov     r6,b
04E2 FF        1245            mov     r7,a
04E3 E581      1246            mov     a,sp
04E5 24FC      1247            add     a,#0xfc
04E7 F581      1248            mov     sp,a
04E9 C004      1249            push    ar4
04EB C005      1250            push    ar5
04ED C006      1251            push    ar6
04EF C007      1252            push    ar7
04F1 C098      1253            push    _linetrack_vright_1_82
04F3 C099      1254            push    (_linetrack_vright_1_82 + 1)
04F5 C09A      1255            push    (_linetrack_vright_1_82 + 2)
04F7 C09B      1256            push    (_linetrack_vright_1_82 + 3)
04F9 859882    1257            mov     dpl,_linetrack_vright_1_82
04FC 859983    1258            mov     dph,(_linetrack_vright_1_82 + 1)
04FF 859AF0    1259            mov     b,(_linetrack_vright_1_82 + 2)
0502 E59B      1260            mov     a,(_linetrack_vright_1_82 + 3)
0504 120100    1261            lcall   ___fsmul
0507 8582E8    1262            mov     _linetrack_sloc0_1_0,dpl
050A 8583E9    1263            mov     (_linetrack_sloc0_1_0 + 1),dph
050D 85F0EA    1264            mov     (_linetrack_sloc0_1_0 + 2),b
0510 F5EB      1265            mov     (_linetrack_sloc0_1_0 + 3),a
0512 E581      1266            mov     a,sp
0514 24FC      1267            add     a,#0xfc
0516 F581      1268            mov     sp,a
0518 C048      1269            push    _linetrack_vleft_1_82
051A C049      1270            push    (_linetrack_vleft_1_82 + 1)
051C C04A      1271            push    (_linetrack_vleft_1_82 + 2)
051E C04B      1272            push    (_linetrack_vleft_1_82 + 3)
0520 854882    1273            mov     dpl,_linetrack_vleft_1_82
0523 854983    1274            mov     dph,(_linetrack_vleft_1_82 + 1)
0526 854AF0    1275            mov     b,(_linetrack_vleft_1_82 + 2)
0529 E54B      1276            mov     a,(_linetrack_vleft_1_82 + 3)
052B 120100    1277            lcall   ___fsmul
052E AA82      1278            mov     r2,dpl
0530 AB83      1279            mov     r3,dph
0532 A8F0      1280            mov     r0,b
0534 F9        1281            mov     r1,a
0535 E581      1282            mov     a,sp
0537 24FC      1283            add     a,#0xfc
0539 F581      1284            mov     sp,a
053B C002      1285            push    ar2
053D C003      1286            push    ar3
053F C000      1287            push    ar0
0541 C001      1288            push    ar1
0543 85E882    1289            mov     dpl,_linetrack_sloc0_1_0
0546 85E983    1290            mov     dph,(_linetrack_sloc0_1_0 + 1)
0549 85EAF0    1291            mov     b,(_linetrack_sloc0_1_0 + 2)
054C E5EB      1292            mov     a,(_linetrack_sloc0_1_0 + 3)
054E 120100    1293            lcall   ___fsadd
0551 AA82      1294            mov     r2,dpl
0553 AB83      1295            mov     r3,dph
0555 A8F0      1296            mov     r0,b
0557 F9        1297            mov     r1,a
0558 E581      1298            mov     a,sp
055A 24FC      1299            add     a,#0xfc
055C F581      1300            mov     sp,a
055E D007      1301            pop     ar7
0560 D006      1302            pop     ar6
0562 D005      1303            pop     ar5
0564 D004      1304            pop     ar4
0566 C002      1305            push    ar2
0568 C003      1306            push    ar3
056A C000      1307            push    ar0
056C C001      1308            push    ar1
056E 8C82      1309            mov     dpl,r4
0570 8D83      1310            mov     dph,r5
0572 8EF0      1311            mov     b,r6
0574 EF        1312            mov     a,r7
0575 120100    1313            lcall   ___fsdiv
0578 AA82      1314            mov     r2,dpl
057A AB83      1315            mov     r3,dph
057C ACF0      1316            mov     r4,b
057E FD        1317            mov     r5,a
057F E581      1318            mov     a,sp
0581 24FC      1319            add     a,#0xfc
0583 F581      1320            mov     sp,a
0585 8A82      1321            mov     dpl,r2
0587 8B83      1322            mov     dph,r3
0589 8CF0      1323            mov     b,r4
058B ED        1324            mov     a,r5
058C 120100    1325            lcall   ___fs2schar
058F 858258    1326            mov     _pwm_Left1,dpl
0592           1327   ;        robot.c:255: pwm_Right1 = -1;
0592 75D8FF    1328            mov     _pwm_Right1,#0xFF
0595           1329   ;        robot.c:256: pwm_Right0 = vleft*vleft*75/(vright*vright+vleft*vleft);
0595 C048      1330            push    _linetrack_vleft_1_82
0597 C049      1331            push    (_linetrack_vleft_1_82 + 1)
0599 C04A      1332            push    (_linetrack_vleft_1_82 + 2)
059B C04B      1333            push    (_linetrack_vleft_1_82 + 3)
059D 854882    1334            mov     dpl,_linetrack_vleft_1_82
05A0 854983    1335            mov     dph,(_linetrack_vleft_1_82 + 1)
05A3 854AF0    1336            mov     b,(_linetrack_vleft_1_82 + 2)
05A6 E54B      1337            mov     a,(_linetrack_vleft_1_82 + 3)
05A8 120100    1338            lcall   ___fsmul
05AB AA82      1339            mov     r2,dpl
05AD AB83      1340            mov     r3,dph
05AF ACF0      1341            mov     r4,b
05B1 FD        1342            mov     r5,a
05B2 E581      1343            mov     a,sp
05B4 24FC      1344            add     a,#0xfc
05B6 F581      1345            mov     sp,a
05B8 C002      1346            push    ar2
05BA C003      1347            push    ar3
05BC C004      1348            push    ar4
05BE C005      1349            push    ar5
05C0 900000    1350            mov     dptr,#0x0000
05C3 75F096    1351            mov     b,#0x96
05C6 7442      1352            mov     a,#0x42
05C8 120100    1353            lcall   ___fsmul
05CB AA82      1354            mov     r2,dpl
05CD AB83      1355            mov     r3,dph
05CF ACF0      1356            mov     r4,b
05D1 FD        1357            mov     r5,a
05D2 E581      1358            mov     a,sp
05D4 24FC      1359            add     a,#0xfc
05D6 F581      1360            mov     sp,a
05D8 C002      1361            push    ar2
05DA C003      1362            push    ar3
05DC C004      1363            push    ar4
05DE C005      1364            push    ar5
05E0 C098      1365            push    _linetrack_vright_1_82
05E2 C099      1366            push    (_linetrack_vright_1_82 + 1)
05E4 C09A      1367            push    (_linetrack_vright_1_82 + 2)
05E6 C09B      1368            push    (_linetrack_vright_1_82 + 3)
05E8 859882    1369            mov     dpl,_linetrack_vright_1_82
05EB 859983    1370            mov     dph,(_linetrack_vright_1_82 + 1)
05EE 859AF0    1371            mov     b,(_linetrack_vright_1_82 + 2)
05F1 E59B      1372            mov     a,(_linetrack_vright_1_82 + 3)
05F3 120100    1373            lcall   ___fsmul
05F6 8582E8    1374            mov     _linetrack_sloc0_1_0,dpl
05F9 8583E9    1375            mov     (_linetrack_sloc0_1_0 + 1),dph
05FC 85F0EA    1376            mov     (_linetrack_sloc0_1_0 + 2),b
05FF F5EB      1377            mov     (_linetrack_sloc0_1_0 + 3),a
0601 E581      1378            mov     a,sp
0603 24FC      1379            add     a,#0xfc
0605 F581      1380            mov     sp,a
0607 C048      1381            push    _linetrack_vleft_1_82
0609 C049      1382            push    (_linetrack_vleft_1_82 + 1)
060B C04A      1383            push    (_linetrack_vleft_1_82 + 2)
060D C04B      1384            push    (_linetrack_vleft_1_82 + 3)
060F 854882    1385            mov     dpl,_linetrack_vleft_1_82
0612 854983    1386            mov     dph,(_linetrack_vleft_1_82 + 1)
0615 854AF0    1387            mov     b,(_linetrack_vleft_1_82 + 2)
0618 E54B      1388            mov     a,(_linetrack_vleft_1_82 + 3)
061A 120100    1389            lcall   ___fsmul
061D AE82      1390            mov     r6,dpl
061F AF83      1391            mov     r7,dph
0621 A8F0      1392            mov     r0,b
0623 F9        1393            mov     r1,a
0624 E581      1394            mov     a,sp
0626 24FC      1395            add     a,#0xfc
0628 F581      1396            mov     sp,a
062A C006      1397            push    ar6
062C C007      1398            push    ar7
062E C000      1399            push    ar0
0630 C001      1400            push    ar1
0632 85E882    1401            mov     dpl,_linetrack_sloc0_1_0
0635 85E983    1402            mov     dph,(_linetrack_sloc0_1_0 + 1)
0638 85EAF0    1403            mov     b,(_linetrack_sloc0_1_0 + 2)
063B E5EB      1404            mov     a,(_linetrack_sloc0_1_0 + 3)
063D 120100    1405            lcall   ___fsadd
0640 AE82      1406            mov     r6,dpl
0642 AF83      1407            mov     r7,dph
0644 A8F0      1408            mov     r0,b
0646 F9        1409            mov     r1,a
0647 E581      1410            mov     a,sp
0649 24FC      1411            add     a,#0xfc
064B F581      1412            mov     sp,a
064D D005      1413            pop     ar5
064F D004      1414            pop     ar4
0651 D003      1415            pop     ar3
0653 D002      1416            pop     ar2
0655 C006      1417            push    ar6
0657 C007      1418            push    ar7
0659 C000      1419            push    ar0
065B C001      1420            push    ar1
065D 8A82      1421            mov     dpl,r2
065F 8B83      1422            mov     dph,r3
0661 8CF0      1423            mov     b,r4
0663 ED        1424            mov     a,r5
0664 120100    1425            lcall   ___fsdiv
0667 AA82      1426            mov     r2,dpl
0669 AB83      1427            mov     r3,dph
066B ACF0      1428            mov     r4,b
066D FD        1429            mov     r5,a
066E E581      1430            mov     a,sp
0670 24FC      1431            add     a,#0xfc
0672 F581      1432            mov     sp,a
0674 8A82      1433            mov     dpl,r2
0676 8B83      1434            mov     dph,r3
0678 8CF0      1435            mov     b,r4
067A ED        1436            mov     a,r5
067B 120100    1437            lcall   ___fs2schar
067E 858218    1438            mov     _pwm_Right0,dpl
0681           1439   ;        robot.c:260: if ((forwardbackward == 1)||(forwardbackward == 3)) {
0681 7401      1440            mov     a,#0x01
0683 B5F800    1441            cjne    a,_linetrack_forwardbackward_1_81,L006015?
0686 E4        1442            clr     a
0687 B5F900    1443            cjne    a,(_linetrack_forwardbackward_1_81 + 1),L006015?
068A 8001      1444            sjmp    L006005?
068C           1445   L006015?:
068C 7403      1446            mov     a,#0x03
068E B5F880    1447            cjne    a,_linetrack_forwardbackward_1_81,L006016?
0691 E4        1448            clr     a
0692 B5F980    1449            cjne    a,(_linetrack_forwardbackward_1_81 + 1),L006016?
0695 8001      1450            sjmp    L006017?
0697           1451   L006016?:
0697 22        1452            ret
0698           1453   L006017?:
0698           1454   L006005?:
0698           1455   ;        robot.c:262: vleft=Volts_at_Pin(LQFP32_MUX_P2_5);
0698 75820D    1456            mov     dpl,#0x0D
069B 120100    1457            lcall   _Volts_at_Pin
069E 858248    1458            mov     _linetrack_vleft_1_82,dpl
06A1 858349    1459            mov     (_linetrack_vleft_1_82 + 1),dph
06A4 85F04A    1460            mov     (_linetrack_vleft_1_82 + 2),b
06A7 F54B      1461            mov     (_linetrack_vleft_1_82 + 3),a
06A9           1462   ;        robot.c:263: vright=Volts_at_Pin(LQFP32_MUX_P2_6);
06A9 75820E    1463            mov     dpl,#0x0E
06AC 120100    1464            lcall   _Volts_at_Pin
06AF 858298    1465            mov     _linetrack_vright_1_82,dpl
06B2 858399    1466            mov     (_linetrack_vright_1_82 + 1),dph
06B5 85F09A    1467            mov     (_linetrack_vright_1_82 + 2),b
06B8 F59B      1468            mov     (_linetrack_vright_1_82 + 3),a
06BA           1469   ;        robot.c:266: if (forwardbackward == 3) {
06BA 7403      1470            mov     a,#0x03
06BC B5F800    1471            cjne    a,_linetrack_forwardbackward_1_81,L006018?
06BF E4        1472            clr     a
06C0 B5F900    1473            cjne    a,(_linetrack_forwardbackward_1_81 + 1),L006018?
06C3 8001      1474            sjmp    L006019?
06C5           1475   L006018?:
06C5 8001      1476            sjmp    L006004?
06C7           1477   L006019?:
06C7           1478   ;        robot.c:267: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
06C7 75820B    1479            mov     dpl,#0x0B
06CA 120100    1480            lcall   _Volts_at_Pin
06CD 858248    1481            mov     _linetrack_vleft_1_82,dpl
06D0 858349    1482            mov     (_linetrack_vleft_1_82 + 1),dph
06D3 85F04A    1483            mov     (_linetrack_vleft_1_82 + 2),b
06D6 F54B      1484            mov     (_linetrack_vleft_1_82 + 3),a
06D8           1485   ;        robot.c:268: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
06D8 75820C    1486            mov     dpl,#0x0C
06DB 120100    1487            lcall   _Volts_at_Pin
06DE 858298    1488            mov     _linetrack_vright_1_82,dpl
06E1 858399    1489            mov     (_linetrack_vright_1_82 + 1),dph
06E4 85F09A    1490            mov     (_linetrack_vright_1_82 + 2),b
06E7 F59B      1491            mov     (_linetrack_vright_1_82 + 3),a
06E9           1492   L006004?:
06E9           1493   ;        robot.c:272: pwm_Left1 = -1;
06E9 7558FF    1494            mov     _pwm_Left1,#0xFF
06EC           1495   ;        robot.c:273: pwm_Left0 = vright*vright*75/(vright*vright+vleft*vleft);
06EC C098      1496            push    _linetrack_vright_1_82
06EE C099      1497            push    (_linetrack_vright_1_82 + 1)
06F0 C09A      1498            push    (_linetrack_vright_1_82 + 2)
06F2 C09B      1499            push    (_linetrack_vright_1_82 + 3)
06F4 859882    1500            mov     dpl,_linetrack_vright_1_82
06F7 859983    1501            mov     dph,(_linetrack_vright_1_82 + 1)
06FA 859AF0    1502            mov     b,(_linetrack_vright_1_82 + 2)
06FD E59B      1503            mov     a,(_linetrack_vright_1_82 + 3)
06FF 120100    1504            lcall   ___fsmul
0702 AA82      1505            mov     r2,dpl
0704 AB83      1506            mov     r3,dph
0706 ACF0      1507            mov     r4,b
0708 FD        1508            mov     r5,a
0709 E581      1509            mov     a,sp
070B 24FC      1510            add     a,#0xfc
070D F581      1511            mov     sp,a
070F C002      1512            push    ar2
0711 C003      1513            push    ar3
0713 C004      1514            push    ar4
0715 C005      1515            push    ar5
0717 900000    1516            mov     dptr,#0x0000
071A 75F096    1517            mov     b,#0x96
071D 7442      1518            mov     a,#0x42
071F 120100    1519            lcall   ___fsmul
0722 AA82      1520            mov     r2,dpl
0724 AB83      1521            mov     r3,dph
0726 ACF0      1522            mov     r4,b
0728 FD        1523            mov     r5,a
0729 E581      1524            mov     a,sp
072B 24FC      1525            add     a,#0xfc
072D F581      1526            mov     sp,a
072F C002      1527            push    ar2
0731 C003      1528            push    ar3
0733 C004      1529            push    ar4
0735 C005      1530            push    ar5
0737 C098      1531            push    _linetrack_vright_1_82
0739 C099      1532            push    (_linetrack_vright_1_82 + 1)
073B C09A      1533            push    (_linetrack_vright_1_82 + 2)
073D C09B      1534            push    (_linetrack_vright_1_82 + 3)
073F 859882    1535            mov     dpl,_linetrack_vright_1_82
0742 859983    1536            mov     dph,(_linetrack_vright_1_82 + 1)
0745 859AF0    1537            mov     b,(_linetrack_vright_1_82 + 2)
0748 E59B      1538            mov     a,(_linetrack_vright_1_82 + 3)
074A 120100    1539            lcall   ___fsmul
074D 8582E8    1540            mov     _linetrack_sloc0_1_0,dpl
0750 8583E9    1541            mov     (_linetrack_sloc0_1_0 + 1),dph
0753 85F0EA    1542            mov     (_linetrack_sloc0_1_0 + 2),b
0756 F5EB      1543            mov     (_linetrack_sloc0_1_0 + 3),a
0758 E581      1544            mov     a,sp
075A 24FC      1545            add     a,#0xfc
075C F581      1546            mov     sp,a
075E C048      1547            push    _linetrack_vleft_1_82
0760 C049      1548            push    (_linetrack_vleft_1_82 + 1)
0762 C04A      1549            push    (_linetrack_vleft_1_82 + 2)
0764 C04B      1550            push    (_linetrack_vleft_1_82 + 3)
0766 854882    1551            mov     dpl,_linetrack_vleft_1_82
0769 854983    1552            mov     dph,(_linetrack_vleft_1_82 + 1)
076C 854AF0    1553            mov     b,(_linetrack_vleft_1_82 + 2)
076F E54B      1554            mov     a,(_linetrack_vleft_1_82 + 3)
0771 120100    1555            lcall   ___fsmul
0774 AE82      1556            mov     r6,dpl
0776 AF83      1557            mov     r7,dph
0778 A8F0      1558            mov     r0,b
077A F9        1559            mov     r1,a
077B E581      1560            mov     a,sp
077D 24FC      1561            add     a,#0xfc
077F F581      1562            mov     sp,a
0781 C006      1563            push    ar6
0783 C007      1564            push    ar7
0785 C000      1565            push    ar0
0787 C001      1566            push    ar1
0789 85E882    1567            mov     dpl,_linetrack_sloc0_1_0
078C 85E983    1568            mov     dph,(_linetrack_sloc0_1_0 + 1)
078F 85EAF0    1569            mov     b,(_linetrack_sloc0_1_0 + 2)
0792 E5EB      1570            mov     a,(_linetrack_sloc0_1_0 + 3)
0794 120100    1571            lcall   ___fsadd
0797 AE82      1572            mov     r6,dpl
0799 AF83      1573            mov     r7,dph
079B A8F0      1574            mov     r0,b
079D F9        1575            mov     r1,a
079E E581      1576            mov     a,sp
07A0 24FC      1577            add     a,#0xfc
07A2 F581      1578            mov     sp,a
07A4 D005      1579            pop     ar5
07A6 D004      1580            pop     ar4
07A8 D003      1581            pop     ar3
07AA D002      1582            pop     ar2
07AC C006      1583            push    ar6
07AE C007      1584            push    ar7
07B0 C000      1585            push    ar0
07B2 C001      1586            push    ar1
07B4 8A82      1587            mov     dpl,r2
07B6 8B83      1588            mov     dph,r3
07B8 8CF0      1589            mov     b,r4
07BA ED        1590            mov     a,r5
07BB 120100    1591            lcall   ___fsdiv
07BE AA82      1592            mov     r2,dpl
07C0 AB83      1593            mov     r3,dph
07C2 ACF0      1594            mov     r4,b
07C4 FD        1595            mov     r5,a
07C5 E581      1596            mov     a,sp
07C7 24FC      1597            add     a,#0xfc
07C9 F581      1598            mov     sp,a
07CB 8A82      1599            mov     dpl,r2
07CD 8B83      1600            mov     dph,r3
07CF 8CF0      1601            mov     b,r4
07D1 ED        1602            mov     a,r5
07D2 120100    1603            lcall   ___fs2schar
07D5 858298    1604            mov     _pwm_Left0,dpl
07D8           1605   ;        robot.c:274: pwm_Right0 = -1;
07D8 7518FF    1606            mov     _pwm_Right0,#0xFF
07DB           1607   ;        robot.c:275: pwm_Right1 = vleft*vleft*75/(vright*vright+vleft*vleft);
07DB C048      1608            push    _linetrack_vleft_1_82
07DD C049      1609            push    (_linetrack_vleft_1_82 + 1)
07DF C04A      1610            push    (_linetrack_vleft_1_82 + 2)
07E1 C04B      1611            push    (_linetrack_vleft_1_82 + 3)
07E3 854882    1612            mov     dpl,_linetrack_vleft_1_82
07E6 854983    1613            mov     dph,(_linetrack_vleft_1_82 + 1)
07E9 854AF0    1614            mov     b,(_linetrack_vleft_1_82 + 2)
07EC E54B      1615            mov     a,(_linetrack_vleft_1_82 + 3)
07EE 120100    1616            lcall   ___fsmul
07F1 AA82      1617            mov     r2,dpl
07F3 AB83      1618            mov     r3,dph
07F5 ACF0      1619            mov     r4,b
07F7 FD        1620            mov     r5,a
07F8 E581      1621            mov     a,sp
07FA 24FC      1622            add     a,#0xfc
07FC F581      1623            mov     sp,a
07FE C002      1624            push    ar2
0800 C003      1625            push    ar3
0802 C004      1626            push    ar4
0804 C005      1627            push    ar5
0806 900000    1628            mov     dptr,#0x0000
0809 75F096    1629            mov     b,#0x96
080C 7442      1630            mov     a,#0x42
080E 120100    1631            lcall   ___fsmul
0811 AA82      1632            mov     r2,dpl
0813 AB83      1633            mov     r3,dph
0815 ACF0      1634            mov     r4,b
0817 FD        1635            mov     r5,a
0818 E581      1636            mov     a,sp
081A 24FC      1637            add     a,#0xfc
081C F581      1638            mov     sp,a
081E C002      1639            push    ar2
0820 C003      1640            push    ar3
0822 C004      1641            push    ar4
0824 C005      1642            push    ar5
0826 C098      1643            push    _linetrack_vright_1_82
0828 C099      1644            push    (_linetrack_vright_1_82 + 1)
082A C09A      1645            push    (_linetrack_vright_1_82 + 2)
082C C09B      1646            push    (_linetrack_vright_1_82 + 3)
082E 859882    1647            mov     dpl,_linetrack_vright_1_82
0831 859983    1648            mov     dph,(_linetrack_vright_1_82 + 1)
0834 859AF0    1649            mov     b,(_linetrack_vright_1_82 + 2)
0837 E59B      1650            mov     a,(_linetrack_vright_1_82 + 3)
0839 120100    1651            lcall   ___fsmul
083C 8582E8    1652            mov     _linetrack_sloc0_1_0,dpl
083F 8583E9    1653            mov     (_linetrack_sloc0_1_0 + 1),dph
0842 85F0EA    1654            mov     (_linetrack_sloc0_1_0 + 2),b
0845 F5EB      1655            mov     (_linetrack_sloc0_1_0 + 3),a
0847 E581      1656            mov     a,sp
0849 24FC      1657            add     a,#0xfc
084B F581      1658            mov     sp,a
084D C048      1659            push    _linetrack_vleft_1_82
084F C049      1660            push    (_linetrack_vleft_1_82 + 1)
0851 C04A      1661            push    (_linetrack_vleft_1_82 + 2)
0853 C04B      1662            push    (_linetrack_vleft_1_82 + 3)
0855 854882    1663            mov     dpl,_linetrack_vleft_1_82
0858 854983    1664            mov     dph,(_linetrack_vleft_1_82 + 1)
085B 854AF0    1665            mov     b,(_linetrack_vleft_1_82 + 2)
085E E54B      1666            mov     a,(_linetrack_vleft_1_82 + 3)
0860 120100    1667            lcall   ___fsmul
0863 AE82      1668            mov     r6,dpl
0865 AF83      1669            mov     r7,dph
0867 A8F0      1670            mov     r0,b
0869 F9        1671            mov     r1,a
086A E581      1672            mov     a,sp
086C 24FC      1673            add     a,#0xfc
086E F581      1674            mov     sp,a
0870 C006      1675            push    ar6
0872 C007      1676            push    ar7
0874 C000      1677            push    ar0
0876 C001      1678            push    ar1
0878 85E882    1679            mov     dpl,_linetrack_sloc0_1_0
087B 85E983    1680            mov     dph,(_linetrack_sloc0_1_0 + 1)
087E 85EAF0    1681            mov     b,(_linetrack_sloc0_1_0 + 2)
0881 E5EB      1682            mov     a,(_linetrack_sloc0_1_0 + 3)
0883 120100    1683            lcall   ___fsadd
0886 AE82      1684            mov     r6,dpl
0888 AF83      1685            mov     r7,dph
088A A8F0      1686            mov     r0,b
088C F9        1687            mov     r1,a
088D E581      1688            mov     a,sp
088F 24FC      1689            add     a,#0xfc
0891 F581      1690            mov     sp,a
0893 D005      1691            pop     ar5
0895 D004      1692            pop     ar4
0897 D003      1693            pop     ar3
0899 D002      1694            pop     ar2
089B C006      1695            push    ar6
089D C007      1696            push    ar7
089F C000      1697            push    ar0
08A1 C001      1698            push    ar1
08A3 8A82      1699            mov     dpl,r2
08A5 8B83      1700            mov     dph,r3
08A7 8CF0      1701            mov     b,r4
08A9 ED        1702            mov     a,r5
08AA 120100    1703            lcall   ___fsdiv
08AD AA82      1704            mov     r2,dpl
08AF AB83      1705            mov     r3,dph
08B1 ACF0      1706            mov     r4,b
08B3 FD        1707            mov     r5,a
08B4 E581      1708            mov     a,sp
08B6 24FC      1709            add     a,#0xfc
08B8 F581      1710            mov     sp,a
08BA 8A82      1711            mov     dpl,r2
08BC 8B83      1712            mov     dph,r3
08BE 8CF0      1713            mov     b,r4
08C0 ED        1714            mov     a,r5
08C1 120100    1715            lcall   ___fs2schar
08C4 8582D8    1716            mov     _pwm_Right1,dpl
08C7 22        1717            ret
08C8           1718   ;------------------------------------------------------------
08C8           1719   ;Allocation info for local variables in function 'stopcar'
08C8           1720   ;------------------------------------------------------------
08C8           1721   ;------------------------------------------------------------
08C8           1722   ;        robot.c:287: void stopcar(void) {
08C8           1723   ;        -----------------------------------------
08C8           1724   ;         function stopcar
08C8           1725   ;        -----------------------------------------
08C8           1726   _stopcar:
08C8           1727   ;        robot.c:289: pwm_Left1 = -1;
08C8 7558FF    1728            mov     _pwm_Left1,#0xFF
08CB           1729   ;        robot.c:290: pwm_Right1 = -1;
08CB 75D8FF    1730            mov     _pwm_Right1,#0xFF
08CE           1731   ;        robot.c:291: pwm_Left0 = -1;
08CE 7598FF    1732            mov     _pwm_Left0,#0xFF
08D1           1733   ;        robot.c:292: pwm_Right0 = -1;
08D1 7518FF    1734            mov     _pwm_Right0,#0xFF
08D4 22        1735            ret
08D5           1736   ;------------------------------------------------------------
08D5           1737   ;Allocation info for local variables in function 'turncar'
08D5           1738   ;------------------------------------------------------------
08D5           1739   ;leftright                 Allocated to registers r2 r3 
08D5           1740   ;v                         Allocated with name '_turncar_v_1_89'
08D5           1741   ;direction                 Allocated with name '_turncar_direction_1_89'
08D5           1742   ;------------------------------------------------------------
08D5           1743   ;        robot.c:298: void turncar (int leftright) {
08D5           1744   ;        -----------------------------------------
08D5           1745   ;         function turncar
08D5           1746   ;        -----------------------------------------
08D5           1747   _turncar:
08D5 AA82      1748            mov     r2,dpl
08D7 AB83      1749            mov     r3,dph
08D9           1750   ;        robot.c:304: pwm_Left0 = -1;
08D9 7598FF    1751            mov     _pwm_Left0,#0xFF
08DC           1752   ;        robot.c:305: pwm_Left1 = -1;
08DC 7558FF    1753            mov     _pwm_Left1,#0xFF
08DF           1754   ;        robot.c:306: pwm_Right0 = -1;
08DF 7518FF    1755            mov     _pwm_Right0,#0xFF
08E2           1756   ;        robot.c:307: pwm_Right1 = -1;
08E2 75D8FF    1757            mov     _pwm_Right1,#0xFF
08E5           1758   ;        robot.c:309: direction = currentstate - 1;
08E5 E518      1759            mov     a,_currentstate
08E7 14        1760            dec     a
08E8 F578      1761            mov     _turncar_direction_1_89,a
08EA           1762   ;        robot.c:312: if (leftright == 0) {
08EA EA        1763            mov     a,r2
08EB 4B        1764            orl     a,r3
08EC 6001      1765            jz      L008032?
08EE 020100    1766            ljmp    L008010?
08F1           1767   L008032?:
08F1           1768   ;        robot.c:314: pwm_Right0 = 100;
08F1 751864    1769            mov     _pwm_Right0,#0x64
08F4           1770   ;        robot.c:318: v= direction ? Volts_at_Pin(LQFP32_MUX_P2_4) : Volts_at_Pin(LQFP32_MUX_P2_6);
08F4 E578      1771            mov     a,_turncar_direction_1_89
08F6 6001      1772            jz      L008014?
08F8 75820C    1773            mov     dpl,#0x0C
08FB 120100    1774            lcall   _Volts_at_Pin
08FE AC82      1775            mov     r4,dpl
0900 AD83      1776            mov     r5,dph
0902 AEF0      1777            mov     r6,b
0904 FF        1778            mov     r7,a
0905 8001      1779            sjmp    L008015?
0907           1780   L008014?:
0907 75820E    1781            mov     dpl,#0x0E
090A 120100    1782            lcall   _Volts_at_Pin
090D AC82      1783            mov     r4,dpl
090F AD83      1784            mov     r5,dph
0911 AEF0      1785            mov     r6,b
0913 FF        1786            mov     r7,a
0914           1787   L008015?:
0914 8C28      1788            mov     _turncar_v_1_89,r4
0916 8D29      1789            mov     (_turncar_v_1_89 + 1),r5
0918 8E2A      1790            mov     (_turncar_v_1_89 + 2),r6
091A 8F2B      1791            mov     (_turncar_v_1_89 + 3),r7
091C           1792   ;        robot.c:320: while (v < 1.5) {
091C           1793   L008001?:
091C E4        1794            clr     a
091D C0E0      1795            push    acc
091F C0E0      1796            push    acc
0921 74C0      1797            mov     a,#0xC0
0923 C0E0      1798            push    acc
0925 743F      1799            mov     a,#0x3F
0927 C0E0      1800            push    acc
0929 852882    1801            mov     dpl,_turncar_v_1_89
092C 852983    1802            mov     dph,(_turncar_v_1_89 + 1)
092F 852AF0    1803            mov     b,(_turncar_v_1_89 + 2)
0932 E52B      1804            mov     a,(_turncar_v_1_89 + 3)
0934 120100    1805            lcall   ___fslt
0937 AC82      1806            mov     r4,dpl
0939 E581      1807            mov     a,sp
093B 24FC      1808            add     a,#0xfc
093D F581      1809            mov     sp,a
093F EC        1810            mov     a,r4
0940 6001      1811            jz      L008003?
0942           1812   ;        robot.c:322: v= direction ? Volts_at_Pin(LQFP32_MUX_P2_4) : Volts_at_Pin(LQFP32_MUX_P2_6);
0942 E578      1813            mov     a,_turncar_direction_1_89
0944 6001      1814            jz      L008016?
0946 75820C    1815            mov     dpl,#0x0C
0949 120100    1816            lcall   _Volts_at_Pin
094C AC82      1817            mov     r4,dpl
094E AD83      1818            mov     r5,dph
0950 AEF0      1819            mov     r6,b
0952 FF        1820            mov     r7,a
0953 8001      1821            sjmp    L008017?
0955           1822   L008016?:
0955 75820E    1823            mov     dpl,#0x0E
0958 120100    1824            lcall   _Volts_at_Pin
095B AC82      1825            mov     r4,dpl
095D AD83      1826            mov     r5,dph
095F AEF0      1827            mov     r6,b
0961 FF        1828            mov     r7,a
0962           1829   L008017?:
0962 8C28      1830            mov     _turncar_v_1_89,r4
0964 8D29      1831            mov     (_turncar_v_1_89 + 1),r5
0966 8E2A      1832            mov     (_turncar_v_1_89 + 2),r6
0968 8F2B      1833            mov     (_turncar_v_1_89 + 3),r7
096A 8001      1834            sjmp    L008001?
096C           1835   L008003?:
096C           1836   ;        robot.c:326: pwm_Right0 = -1; 
096C 7518FF    1837            mov     _pwm_Right0,#0xFF
096F           1838   ;        robot.c:327: pwm_Left0 = -1;            
096F 7598FF    1839            mov     _pwm_Left0,#0xFF
0972 22        1840            ret
0973           1841   L008010?:
0973           1842   ;        robot.c:331: else if (leftright == 1) {
0973 BA0100    1843            cjne    r2,#0x01,L008036?
0976 BB0000    1844            cjne    r3,#0x00,L008036?
0979 8001      1845            sjmp    L008037?
097B           1846   L008036?:
097B 22        1847            ret
097C           1848   L008037?:
097C           1849   ;        robot.c:333: pwm_Left1 = 100;
097C 755864    1850            mov     _pwm_Left1,#0x64
097F           1851   ;        robot.c:337: waitms(1000);
097F 9003E8    1852            mov     dptr,#0x03E8
0982 120100    1853            lcall   _waitms
0985           1854   ;        robot.c:340: v= direction ? Volts_at_Pin(LQFP32_MUX_P2_3) : Volts_at_Pin(LQFP32_MUX_P2_5);
0985 E578      1855            mov     a,_turncar_direction_1_89
0987 6001      1856            jz      L008018?
0989 75820B    1857            mov     dpl,#0x0B
098C 120100    1858            lcall   _Volts_at_Pin
098F AA82      1859            mov     r2,dpl
0991 AB83      1860            mov     r3,dph
0993 ACF0      1861            mov     r4,b
0995 FD        1862            mov     r5,a
0996 8001      1863            sjmp    L008019?
0998           1864   L008018?:
0998 75820D    1865            mov     dpl,#0x0D
099B 120100    1866            lcall   _Volts_at_Pin
099E AA82      1867            mov     r2,dpl
09A0 AB83      1868            mov     r3,dph
09A2 ACF0      1869            mov     r4,b
09A4 FD        1870            mov     r5,a
09A5           1871   L008019?:
09A5 8A28      1872            mov     _turncar_v_1_89,r2
09A7 8B29      1873            mov     (_turncar_v_1_89 + 1),r3
09A9 8C2A      1874            mov     (_turncar_v_1_89 + 2),r4
09AB 8D2B      1875            mov     (_turncar_v_1_89 + 3),r5
09AD           1876   ;        robot.c:342: while (v < 1.5) {
09AD           1877   L008004?:
09AD E4        1878            clr     a
09AE C0E0      1879            push    acc
09B0 C0E0      1880            push    acc
09B2 74C0      1881            mov     a,#0xC0
09B4 C0E0      1882            push    acc
09B6 743F      1883            mov     a,#0x3F
09B8 C0E0      1884            push    acc
09BA 852882    1885            mov     dpl,_turncar_v_1_89
09BD 852983    1886            mov     dph,(_turncar_v_1_89 + 1)
09C0 852AF0    1887            mov     b,(_turncar_v_1_89 + 2)
09C3 E52B      1888            mov     a,(_turncar_v_1_89 + 3)
09C5 120100    1889            lcall   ___fslt
09C8 AA82      1890            mov     r2,dpl
09CA E581      1891            mov     a,sp
09CC 24FC      1892            add     a,#0xfc
09CE F581      1893            mov     sp,a
09D0 EA        1894            mov     a,r2
09D1 6001      1895            jz      L008006?
09D3           1896   ;        robot.c:344: v= direction ? Volts_at_Pin(LQFP32_MUX_P2_3) : Volts_at_Pin(LQFP32_MUX_P2_5);
09D3 E578      1897            mov     a,_turncar_direction_1_89
09D5 6001      1898            jz      L008020?
09D7 75820B    1899            mov     dpl,#0x0B
09DA 120100    1900            lcall   _Volts_at_Pin
09DD AA82      1901            mov     r2,dpl
09DF AB83      1902            mov     r3,dph
09E1 ACF0      1903            mov     r4,b
09E3 FD        1904            mov     r5,a
09E4 8001      1905            sjmp    L008021?
09E6           1906   L008020?:
09E6 75820D    1907            mov     dpl,#0x0D
09E9 120100    1908            lcall   _Volts_at_Pin
09EC AA82      1909            mov     r2,dpl
09EE AB83      1910            mov     r3,dph
09F0 ACF0      1911            mov     r4,b
09F2 FD        1912            mov     r5,a
09F3           1913   L008021?:
09F3 8A28      1914            mov     _turncar_v_1_89,r2
09F5 8B29      1915            mov     (_turncar_v_1_89 + 1),r3
09F7 8C2A      1916            mov     (_turncar_v_1_89 + 2),r4
09F9 8D2B      1917            mov     (_turncar_v_1_89 + 3),r5
09FB 8001      1918            sjmp    L008004?
09FD           1919   L008006?:
09FD           1920   ;        robot.c:348: pwm_Left1 = -1; 
09FD 7558FF    1921            mov     _pwm_Left1,#0xFF
0A00           1922   ;        robot.c:349: pwm_Right1 = -1; 
0A00 75D8FF    1923            mov     _pwm_Right1,#0xFF
0A03 22        1924            ret
0A04           1925   ;------------------------------------------------------------
0A04           1926   ;Allocation info for local variables in function 'uturn'
0A04           1927   ;------------------------------------------------------------
0A04           1928   ;vleft                     Allocated with name '_uturn_vleft_1_95'
0A04           1929   ;vright                    Allocated with name '_uturn_vright_1_95'
0A04           1930   ;------------------------------------------------------------
0A04           1931   ;        robot.c:357: void uturn(void) {
0A04           1932   ;        -----------------------------------------
0A04           1933   ;         function uturn
0A04           1934   ;        -----------------------------------------
0A04           1935   _uturn:
0A04           1936   ;        robot.c:361: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0A04 75820B    1937            mov     dpl,#0x0B
0A07 120100    1938            lcall   _Volts_at_Pin
0A0A 8582C8    1939            mov     _uturn_vleft_1_95,dpl
0A0D 8583C9    1940            mov     (_uturn_vleft_1_95 + 1),dph
0A10 85F0CA    1941            mov     (_uturn_vleft_1_95 + 2),b
0A13 F5CB      1942            mov     (_uturn_vleft_1_95 + 3),a
0A15           1943   ;        robot.c:362: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0A15 75820C    1944            mov     dpl,#0x0C
0A18 120100    1945            lcall   _Volts_at_Pin
0A1B 858218    1946            mov     _uturn_vright_1_95,dpl
0A1E 858319    1947            mov     (_uturn_vright_1_95 + 1),dph
0A21 85F01A    1948            mov     (_uturn_vright_1_95 + 2),b
0A24 F51B      1949            mov     (_uturn_vright_1_95 + 3),a
0A26           1950   ;        robot.c:365: pwm_Left0 = -1;
0A26 7598FF    1951            mov     _pwm_Left0,#0xFF
0A29           1952   ;        robot.c:366: pwm_Left1 = 50;
0A29 755832    1953            mov     _pwm_Left1,#0x32
0A2C           1954   ;        robot.c:367: pwm_Right0 = -1;
0A2C 7518FF    1955            mov     _pwm_Right0,#0xFF
0A2F           1956   ;        robot.c:368: pwm_Right1 = 50;
0A2F 75D832    1957            mov     _pwm_Right1,#0x32
0A32           1958   ;        robot.c:371: waitms(4000);
0A32 900FA0    1959            mov     dptr,#0x0FA0
0A35 120100    1960            lcall   _waitms
0A38           1961   ;        robot.c:374: while (((vleft - vright) > 0.2) || ((vleft - vright) < (-0.2))) {
0A38           1962   L009002?:
0A38 C018      1963            push    _uturn_vright_1_95
0A3A C019      1964            push    (_uturn_vright_1_95 + 1)
0A3C C01A      1965            push    (_uturn_vright_1_95 + 2)
0A3E C01B      1966            push    (_uturn_vright_1_95 + 3)
0A40 85C882    1967            mov     dpl,_uturn_vleft_1_95
0A43 85C983    1968            mov     dph,(_uturn_vleft_1_95 + 1)
0A46 85CAF0    1969            mov     b,(_uturn_vleft_1_95 + 2)
0A49 E5CB      1970            mov     a,(_uturn_vleft_1_95 + 3)
0A4B 120100    1971            lcall   ___fssub
0A4E AA82      1972            mov     r2,dpl
0A50 AB83      1973            mov     r3,dph
0A52 ACF0      1974            mov     r4,b
0A54 FD        1975            mov     r5,a
0A55 E581      1976            mov     a,sp
0A57 24FC      1977            add     a,#0xfc
0A59 F581      1978            mov     sp,a
0A5B 74CD      1979            mov     a,#0xCD
0A5D C0E0      1980            push    acc
0A5F 74CC      1981            mov     a,#0xCC
0A61 C0E0      1982            push    acc
0A63 744C      1983            mov     a,#0x4C
0A65 C0E0      1984            push    acc
0A67 743E      1985            mov     a,#0x3E
0A69 C0E0      1986            push    acc
0A6B 8A82      1987            mov     dpl,r2
0A6D 8B83      1988            mov     dph,r3
0A6F 8CF0      1989            mov     b,r4
0A71 ED        1990            mov     a,r5
0A72 120100    1991            lcall   ___fsgt
0A75 AA82      1992            mov     r2,dpl
0A77 E581      1993            mov     a,sp
0A79 24FC      1994            add     a,#0xfc
0A7B F581      1995            mov     sp,a
0A7D EA        1996            mov     a,r2
0A7E 7001      1997            jnz     L009003?
0A80 C018      1998            push    _uturn_vright_1_95
0A82 C019      1999            push    (_uturn_vright_1_95 + 1)
0A84 C01A      2000            push    (_uturn_vright_1_95 + 2)
0A86 C01B      2001            push    (_uturn_vright_1_95 + 3)
0A88 85C882    2002            mov     dpl,_uturn_vleft_1_95
0A8B 85C983    2003            mov     dph,(_uturn_vleft_1_95 + 1)
0A8E 85CAF0    2004            mov     b,(_uturn_vleft_1_95 + 2)
0A91 E5CB      2005            mov     a,(_uturn_vleft_1_95 + 3)
0A93 120100    2006            lcall   ___fssub
0A96 AA82      2007            mov     r2,dpl
0A98 AB83      2008            mov     r3,dph
0A9A ACF0      2009            mov     r4,b
0A9C FD        2010            mov     r5,a
0A9D E581      2011            mov     a,sp
0A9F 24FC      2012            add     a,#0xfc
0AA1 F581      2013            mov     sp,a
0AA3 74CD      2014            mov     a,#0xCD
0AA5 C0E0      2015            push    acc
0AA7 74CC      2016            mov     a,#0xCC
0AA9 C0E0      2017            push    acc
0AAB 744C      2018            mov     a,#0x4C
0AAD C0E0      2019            push    acc
0AAF 74BE      2020            mov     a,#0xBE
0AB1 C0E0      2021            push    acc
0AB3 8A82      2022            mov     dpl,r2
0AB5 8B83      2023            mov     dph,r3
0AB7 8CF0      2024            mov     b,r4
0AB9 ED        2025            mov     a,r5
0ABA 120100    2026            lcall   ___fslt
0ABD AA82      2027            mov     r2,dpl
0ABF E581      2028            mov     a,sp
0AC1 24FC      2029            add     a,#0xfc
0AC3 F581      2030            mov     sp,a
0AC5 EA        2031            mov     a,r2
0AC6 6001      2032            jz      L009005?
0AC8           2033   L009003?:
0AC8           2034   ;        robot.c:376: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0AC8 75820B    2035            mov     dpl,#0x0B
0ACB 120100    2036            lcall   _Volts_at_Pin
0ACE 8582C8    2037            mov     _uturn_vleft_1_95,dpl
0AD1 8583C9    2038            mov     (_uturn_vleft_1_95 + 1),dph
0AD4 85F0CA    2039            mov     (_uturn_vleft_1_95 + 2),b
0AD7 F5CB      2040            mov     (_uturn_vleft_1_95 + 3),a
0AD9           2041   ;        robot.c:377: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0AD9 75820C    2042            mov     dpl,#0x0C
0ADC 120100    2043            lcall   _Volts_at_Pin
0ADF 858218    2044            mov     _uturn_vright_1_95,dpl
0AE2 858319    2045            mov     (_uturn_vright_1_95 + 1),dph
0AE5 85F01A    2046            mov     (_uturn_vright_1_95 + 2),b
0AE8 F51B      2047            mov     (_uturn_vright_1_95 + 3),a
0AEA 020100    2048            ljmp    L009002?
0AED           2049   L009005?:
0AED 22        2050            ret
0AEE           2051   ;------------------------------------------------------------
0AEE           2052   ;Allocation info for local variables in function 'movecar'
0AEE           2053   ;------------------------------------------------------------
0AEE           2054   ;power                     Allocated with name '_movecar_PARM_2'
0AEE           2055   ;forback                   Allocated to registers r2 r3 
0AEE           2056   ;------------------------------------------------------------
0AEE           2057   ;        robot.c:384: void movecar (int forback, int power) {
0AEE           2058   ;        -----------------------------------------
0AEE           2059   ;         function movecar
0AEE           2060   ;        -----------------------------------------
0AEE           2061   _movecar:
0AEE AA82      2062            mov     r2,dpl
0AF0 AB83      2063            mov     r3,dph
0AF2           2064   ;        robot.c:386: if (forback == 1) {
0AF2 BA0100    2065            cjne    r2,#0x01,L010004?
0AF5 BB0000    2066            cjne    r3,#0x00,L010004?
0AF8           2067   ;        robot.c:387: pwm_Left1 = power;
0AF8 AC58      2068            mov     r4,_movecar_PARM_2
0AFA 8C58      2069            mov     _pwm_Left1,r4
0AFC           2070   ;        robot.c:388: pwm_Left0 = -1;
0AFC 7598FF    2071            mov     _pwm_Left0,#0xFF
0AFF           2072   ;        robot.c:389: pwm_Right0 = power;
0AFF 8C18      2073            mov     _pwm_Right0,r4
0B01           2074   ;        robot.c:390: pwm_Right1 = -1;
0B01 75D8FF    2075            mov     _pwm_Right1,#0xFF
0B04 22        2076            ret
0B05           2077   L010004?:
0B05           2078   ;        robot.c:392: else if (forback == 2) {
0B05 BA0240    2079            cjne    r2,#0x02,L010006?
0B08 BB0040    2080            cjne    r3,#0x00,L010006?
0B0B           2081   ;        robot.c:393: pwm_Left0 = power;
0B0B AA58      2082            mov     r2,_movecar_PARM_2
0B0D 8A98      2083            mov     _pwm_Left0,r2
0B0F           2084   ;        robot.c:394: pwm_Left1 = -1;
0B0F 7558FF    2085            mov     _pwm_Left1,#0xFF
0B12           2086   ;        robot.c:395: pwm_Right1 = power;
0B12 8AD8      2087            mov     _pwm_Right1,r2
0B14           2088   ;        robot.c:396: pwm_Right0 = -1;
0B14 7518FF    2089            mov     _pwm_Right0,#0xFF
0B17           2090   L010006?:
0B17 22        2091            ret
0B18           2092            rseg R_CSEG
0B18           2093   
0000           2094            rseg R_XINIT
0000           2095   
0000           2096            rseg R_CONST
0000           2097   __str_0:
0000 1B        2098            db 0x1B
0001 5B324A    2099            db '[2J'
0004 00        2100            db 0x00
0005           2101   __str_1:
0005 66726F6E  2102            db 'frontL %f frontR %f backL %f backR %f'
     744C2025
     66206672
     6F6E7452
     20256620
     6261636B
     4C202566
     20626163
     6B522025
     66
002A 0D        2103            db 0x0D
002B 00        2104            db 0x00
002C           2105   __str_2:
002C 0A        2106            db 0x0A
002D 494E5445  2107            db 'INTERSECTION'
     52534543
     54494F4E
0039 0A        2108            db 0x0A
003A 00        2109            db 0x00
003B           2110   __str_3:
003B 0A        2111            db 0x0A
003C 0D        2112            db 0x0D
003D 20494E54  2113            db ' INTERSECTION'
     45525345
     4354494F
     4E
004A 0A        2114            db 0x0A
004B 00        2115            db 0x00
004C           2116   
002E           2117            CSEG
002E           2118   
002E           2119   end
