0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Sun Apr 02 21:00:27 2017
0000              5   ;--------------------------------------------------------
                  5   $name robot
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _movecar_PARM_2
0000             28            public _Timer2_ISR
0000             29            public _main
0000             30            public _currentstate
0000             31            public _currentcmd
0000             32            public _direction
0000             33            public _pwm_Right1
0000             34            public _pwm_Right0
0000             35            public _pwm_Left1
0000             36            public _pwm_Left0
0000             37            public _pwm_both
0000             38            public _mode
0000             39            public _pwm_count
0000             40            public _forward_backward
0000             41            public _readData
0000             42            public _linetrack
0000             43            public _stopcar
0000             44            public _turncar
0000             45            public _uturn
0000             46            public _movecar
0000             47   ;--------------------------------------------------------
0000             48   ; Special Function Registers
0000             49   ;--------------------------------------------------------
0000             50   _P0             DATA 0x80
0000             51   _SP             DATA 0x81
0000             52   _DPL            DATA 0x82
0000             53   _DPH            DATA 0x83
0000             54   _EMI0TC         DATA 0x84
0000             55   _EMI0CF         DATA 0x85
0000             56   _OSCLCN         DATA 0x86
0000             57   _PCON           DATA 0x87
0000             58   _TCON           DATA 0x88
0000             59   _TMOD           DATA 0x89
0000             60   _TL0            DATA 0x8a
0000             61   _TL1            DATA 0x8b
0000             62   _TH0            DATA 0x8c
0000             63   _TH1            DATA 0x8d
0000             64   _CKCON          DATA 0x8e
0000             65   _PSCTL          DATA 0x8f
0000             66   _P1             DATA 0x90
0000             67   _TMR3CN         DATA 0x91
0000             68   _TMR4CN         DATA 0x91
0000             69   _TMR3RLL        DATA 0x92
0000             70   _TMR4RLL        DATA 0x92
0000             71   _TMR3RLH        DATA 0x93
0000             72   _TMR4RLH        DATA 0x93
0000             73   _TMR3L          DATA 0x94
0000             74   _TMR4L          DATA 0x94
0000             75   _TMR3H          DATA 0x95
0000             76   _TMR4H          DATA 0x95
0000             77   _USB0ADR        DATA 0x96
0000             78   _USB0DAT        DATA 0x97
0000             79   _SCON           DATA 0x98
0000             80   _SCON0          DATA 0x98
0000             81   _SBUF           DATA 0x99
0000             82   _SBUF0          DATA 0x99
0000             83   _CPT1CN         DATA 0x9a
0000             84   _CPT0CN         DATA 0x9b
0000             85   _CPT1MD         DATA 0x9c
0000             86   _CPT0MD         DATA 0x9d
0000             87   _CPT1MX         DATA 0x9e
0000             88   _CPT0MX         DATA 0x9f
0000             89   _P2             DATA 0xa0
0000             90   _SPI0CFG        DATA 0xa1
0000             91   _SPI0CKR        DATA 0xa2
0000             92   _SPI0DAT        DATA 0xa3
0000             93   _P0MDOUT        DATA 0xa4
0000             94   _P1MDOUT        DATA 0xa5
0000             95   _P2MDOUT        DATA 0xa6
0000             96   _P3MDOUT        DATA 0xa7
0000             97   _IE             DATA 0xa8
0000             98   _CLKSEL         DATA 0xa9
0000             99   _EMI0CN         DATA 0xaa
0000            100   __XPAGE         DATA 0xaa
0000            101   _SBCON1         DATA 0xac
0000            102   _P4MDOUT        DATA 0xae
0000            103   _PFE0CN         DATA 0xaf
0000            104   _P3             DATA 0xb0
0000            105   _OSCXCN         DATA 0xb1
0000            106   _OSCICN         DATA 0xb2
0000            107   _OSCICL         DATA 0xb3
0000            108   _SBRLL1         DATA 0xb4
0000            109   _SBRLH1         DATA 0xb5
0000            110   _FLSCL          DATA 0xb6
0000            111   _FLKEY          DATA 0xb7
0000            112   _IP             DATA 0xb8
0000            113   _CLKMUL         DATA 0xb9
0000            114   _SMBTC          DATA 0xb9
0000            115   _AMX0N          DATA 0xba
0000            116   _AMX0P          DATA 0xbb
0000            117   _ADC0CF         DATA 0xbc
0000            118   _ADC0L          DATA 0xbd
0000            119   _ADC0H          DATA 0xbe
0000            120   _SFRPAGE        DATA 0xbf
0000            121   _SMB0CN         DATA 0xc0
0000            122   _SMB1CN         DATA 0xc0
0000            123   _SMB0CF         DATA 0xc1
0000            124   _SMB1CF         DATA 0xc1
0000            125   _SMB0DAT        DATA 0xc2
0000            126   _SMB1DAT        DATA 0xc2
0000            127   _ADC0GTL        DATA 0xc3
0000            128   _ADC0GTH        DATA 0xc4
0000            129   _ADC0LTL        DATA 0xc5
0000            130   _ADC0LTH        DATA 0xc6
0000            131   _P4             DATA 0xc7
0000            132   _TMR2CN         DATA 0xc8
0000            133   _TMR5CN         DATA 0xc8
0000            134   _REG01CN        DATA 0xc9
0000            135   _TMR2RLL        DATA 0xca
0000            136   _TMR5RLL        DATA 0xca
0000            137   _TMR2RLH        DATA 0xcb
0000            138   _TMR5RLH        DATA 0xcb
0000            139   _TMR2L          DATA 0xcc
0000            140   _TMR5L          DATA 0xcc
0000            141   _TMR2H          DATA 0xcd
0000            142   _TMR5H          DATA 0xcd
0000            143   _SMB0ADM        DATA 0xce
0000            144   _SMB1ADM        DATA 0xce
0000            145   _SMB0ADR        DATA 0xcf
0000            146   _SMB1ADR        DATA 0xcf
0000            147   _PSW            DATA 0xd0
0000            148   _REF0CN         DATA 0xd1
0000            149   _SCON1          DATA 0xd2
0000            150   _SBUF1          DATA 0xd3
0000            151   _P0SKIP         DATA 0xd4
0000            152   _P1SKIP         DATA 0xd5
0000            153   _P2SKIP         DATA 0xd6
0000            154   _USB0XCN        DATA 0xd7
0000            155   _PCA0CN         DATA 0xd8
0000            156   _PCA0MD         DATA 0xd9
0000            157   _PCA0CPM0       DATA 0xda
0000            158   _PCA0CPM1       DATA 0xdb
0000            159   _PCA0CPM2       DATA 0xdc
0000            160   _PCA0CPM3       DATA 0xdd
0000            161   _PCA0CPM4       DATA 0xde
0000            162   _P3SKIP         DATA 0xdf
0000            163   _ACC            DATA 0xe0
0000            164   _XBR0           DATA 0xe1
0000            165   _XBR1           DATA 0xe2
0000            166   _XBR2           DATA 0xe3
0000            167   _IT01CF         DATA 0xe4
0000            168   _CKCON1         DATA 0xe4
0000            169   _SMOD1          DATA 0xe5
0000            170   _EIE1           DATA 0xe6
0000            171   _EIE2           DATA 0xe7
0000            172   _ADC0CN         DATA 0xe8
0000            173   _PCA0CPL1       DATA 0xe9
0000            174   _PCA0CPH1       DATA 0xea
0000            175   _PCA0CPL2       DATA 0xeb
0000            176   _PCA0CPH2       DATA 0xec
0000            177   _PCA0CPL3       DATA 0xed
0000            178   _PCA0CPH3       DATA 0xee
0000            179   _RSTSRC         DATA 0xef
0000            180   _B              DATA 0xf0
0000            181   _P0MDIN         DATA 0xf1
0000            182   _P1MDIN         DATA 0xf2
0000            183   _P2MDIN         DATA 0xf3
0000            184   _P3MDIN         DATA 0xf4
0000            185   _P4MDIN         DATA 0xf5
0000            186   _EIP1           DATA 0xf6
0000            187   _EIP2           DATA 0xf7
0000            188   _SPI0CN         DATA 0xf8
0000            189   _PCA0L          DATA 0xf9
0000            190   _PCA0H          DATA 0xfa
0000            191   _PCA0CPL0       DATA 0xfb
0000            192   _PCA0CPH0       DATA 0xfc
0000            193   _PCA0CPL4       DATA 0xfd
0000            194   _PCA0CPH4       DATA 0xfe
0000            195   _VDM0CN         DATA 0xff
0000            196   _DPTR           DATA 0x8382
0000            197   _TMR2RL         DATA 0xcbca
0000            198   _TMR3RL         DATA 0x9392
0000            199   _TMR4RL         DATA 0x9392
0000            200   _TMR5RL         DATA 0xcbca
0000            201   _TMR2           DATA 0xcdcc
0000            202   _TMR3           DATA 0x9594
0000            203   _TMR4           DATA 0x9594
0000            204   _TMR5           DATA 0xcdcc
0000            205   _SBRL1          DATA 0xb5b4
0000            206   _ADC0           DATA 0xbebd
0000            207   _ADC0GT         DATA 0xc4c3
0000            208   _ADC0LT         DATA 0xc6c5
0000            209   _PCA0           DATA 0xfaf9
0000            210   _PCA0CP1        DATA 0xeae9
0000            211   _PCA0CP2        DATA 0xeceb
0000            212   _PCA0CP3        DATA 0xeeed
0000            213   _PCA0CP0        DATA 0xfcfb
0000            214   _PCA0CP4        DATA 0xfefd
0000            215   ;--------------------------------------------------------
0000            216   ; special function bits
0000            217   ;--------------------------------------------------------
0000            218   _P0_0           BIT 0x80
0000            219   _P0_1           BIT 0x81
0000            220   _P0_2           BIT 0x82
0000            221   _P0_3           BIT 0x83
0000            222   _P0_4           BIT 0x84
0000            223   _P0_5           BIT 0x85
0000            224   _P0_6           BIT 0x86
0000            225   _P0_7           BIT 0x87
0000            226   _TF1            BIT 0x8f
0000            227   _TR1            BIT 0x8e
0000            228   _TF0            BIT 0x8d
0000            229   _TR0            BIT 0x8c
0000            230   _IE1            BIT 0x8b
0000            231   _IT1            BIT 0x8a
0000            232   _IE0            BIT 0x89
0000            233   _IT0            BIT 0x88
0000            234   _P1_0           BIT 0x90
0000            235   _P1_1           BIT 0x91
0000            236   _P1_2           BIT 0x92
0000            237   _P1_3           BIT 0x93
0000            238   _P1_4           BIT 0x94
0000            239   _P1_5           BIT 0x95
0000            240   _P1_6           BIT 0x96
0000            241   _P1_7           BIT 0x97
0000            242   _S0MODE         BIT 0x9f
0000            243   _SCON0_6        BIT 0x9e
0000            244   _MCE0           BIT 0x9d
0000            245   _REN0           BIT 0x9c
0000            246   _TB80           BIT 0x9b
0000            247   _RB80           BIT 0x9a
0000            248   _TI0            BIT 0x99
0000            249   _RI0            BIT 0x98
0000            250   _SCON_6         BIT 0x9e
0000            251   _MCE            BIT 0x9d
0000            252   _REN            BIT 0x9c
0000            253   _TB8            BIT 0x9b
0000            254   _RB8            BIT 0x9a
0000            255   _TI             BIT 0x99
0000            256   _RI             BIT 0x98
0000            257   _P2_0           BIT 0xa0
0000            258   _P2_1           BIT 0xa1
0000            259   _P2_2           BIT 0xa2
0000            260   _P2_3           BIT 0xa3
0000            261   _P2_4           BIT 0xa4
0000            262   _P2_5           BIT 0xa5
0000            263   _P2_6           BIT 0xa6
0000            264   _P2_7           BIT 0xa7
0000            265   _EA             BIT 0xaf
0000            266   _ESPI0          BIT 0xae
0000            267   _ET2            BIT 0xad
0000            268   _ES0            BIT 0xac
0000            269   _ET1            BIT 0xab
0000            270   _EX1            BIT 0xaa
0000            271   _ET0            BIT 0xa9
0000            272   _EX0            BIT 0xa8
0000            273   _P3_0           BIT 0xb0
0000            274   _P3_1           BIT 0xb1
0000            275   _P3_2           BIT 0xb2
0000            276   _P3_3           BIT 0xb3
0000            277   _P3_4           BIT 0xb4
0000            278   _P3_5           BIT 0xb5
0000            279   _P3_6           BIT 0xb6
0000            280   _P3_7           BIT 0xb7
0000            281   _IP_7           BIT 0xbf
0000            282   _PSPI0          BIT 0xbe
0000            283   _PT2            BIT 0xbd
0000            284   _PS0            BIT 0xbc
0000            285   _PT1            BIT 0xbb
0000            286   _PX1            BIT 0xba
0000            287   _PT0            BIT 0xb9
0000            288   _PX0            BIT 0xb8
0000            289   _MASTER0        BIT 0xc7
0000            290   _TXMODE0        BIT 0xc6
0000            291   _STA0           BIT 0xc5
0000            292   _STO0           BIT 0xc4
0000            293   _ACKRQ0         BIT 0xc3
0000            294   _ARBLOST0       BIT 0xc2
0000            295   _ACK0           BIT 0xc1
0000            296   _SI0            BIT 0xc0
0000            297   _MASTER1        BIT 0xc7
0000            298   _TXMODE1        BIT 0xc6
0000            299   _STA1           BIT 0xc5
0000            300   _STO1           BIT 0xc4
0000            301   _ACKRQ1         BIT 0xc3
0000            302   _ARBLOST1       BIT 0xc2
0000            303   _ACK1           BIT 0xc1
0000            304   _SI1            BIT 0xc0
0000            305   _TF2            BIT 0xcf
0000            306   _TF2H           BIT 0xcf
0000            307   _TF2L           BIT 0xce
0000            308   _TF2LEN         BIT 0xcd
0000            309   _TF2CEN         BIT 0xcc
0000            310   _T2SPLIT        BIT 0xcb
0000            311   _TR2            BIT 0xca
0000            312   _T2CSS          BIT 0xc9
0000            313   _T2XCLK         BIT 0xc8
0000            314   _TF5H           BIT 0xcf
0000            315   _TF5L           BIT 0xce
0000            316   _TF5LEN         BIT 0xcd
0000            317   _TMR5CN_4       BIT 0xcc
0000            318   _T5SPLIT        BIT 0xcb
0000            319   _TR5            BIT 0xca
0000            320   _TMR5CN_1       BIT 0xc9
0000            321   _T5XCLK         BIT 0xc8
0000            322   _CY             BIT 0xd7
0000            323   _AC             BIT 0xd6
0000            324   _F0             BIT 0xd5
0000            325   _RS1            BIT 0xd4
0000            326   _RS0            BIT 0xd3
0000            327   _OV             BIT 0xd2
0000            328   _F1             BIT 0xd1
0000            329   _PARITY         BIT 0xd0
0000            330   _CF             BIT 0xdf
0000            331   _CR             BIT 0xde
0000            332   _PCA0CN_5       BIT 0xde
0000            333   _CCF4           BIT 0xdc
0000            334   _CCF3           BIT 0xdb
0000            335   _CCF2           BIT 0xda
0000            336   _CCF1           BIT 0xd9
0000            337   _CCF0           BIT 0xd8
0000            338   _ACC_7          BIT 0xe7
0000            339   _ACC_6          BIT 0xe6
0000            340   _ACC_5          BIT 0xe5
0000            341   _ACC_4          BIT 0xe4
0000            342   _ACC_3          BIT 0xe3
0000            343   _ACC_2          BIT 0xe2
0000            344   _ACC_1          BIT 0xe1
0000            345   _ACC_0          BIT 0xe0
0000            346   _AD0EN          BIT 0xef
0000            347   _AD0TM          BIT 0xee
0000            348   _AD0INT         BIT 0xed
0000            349   _AD0BUSY        BIT 0xec
0000            350   _AD0WINT        BIT 0xeb
0000            351   _AD0CM2         BIT 0xea
0000            352   _AD0CM1         BIT 0xe9
0000            353   _AD0CM0         BIT 0xe8
0000            354   _B_7            BIT 0xf7
0000            355   _B_6            BIT 0xf6
0000            356   _B_5            BIT 0xf5
0000            357   _B_4            BIT 0xf4
0000            358   _B_3            BIT 0xf3
0000            359   _B_2            BIT 0xf2
0000            360   _B_1            BIT 0xf1
0000            361   _B_0            BIT 0xf0
0000            362   _SPIF           BIT 0xff
0000            363   _WCOL           BIT 0xfe
0000            364   _MODF           BIT 0xfd
0000            365   _RXOVRN         BIT 0xfc
0000            366   _NSSMD1         BIT 0xfb
0000            367   _NSSMD0         BIT 0xfa
0000            368   _TXBMT          BIT 0xf9
0000            369   _SPIEN          BIT 0xf8
0000            370   ;--------------------------------------------------------
0000            371   ; overlayable register banks
0000            372   ;--------------------------------------------------------
0000            373            rbank0 segment data overlay
0000            374   ;--------------------------------------------------------
0000            375   ; internal ram data
0000            376   ;--------------------------------------------------------
0000            377            rseg R_DSEG
0000            378   _pwm_count:
0000            379            ds 1
0001            380   _mode:
0001            381            ds 1
0002            382   _pwm_both:
0002            383            ds 1
0003            384   _pwm_Left0:
0003            385            ds 1
0004            386   _pwm_Left1:
0004            387            ds 1
0005            388   _pwm_Right0:
0005            389            ds 1
0006            390   _pwm_Right1:
0006            391            ds 1
0007            392   _direction:
0007            393            ds 1
0008            394   _currentcmd:
0008            395            ds 1
0009            396   _currentstate:
0009            397            ds 1
000A            398   _main_v1_1_57:
000A            399            ds 4
000E            400   _main_v2_1_57:
000E            401            ds 4
0012            402   _main_sloc0_1_0:
0012            403            ds 4
0016            404   _main_sloc1_1_0:
0016            405            ds 4
001A            406   _linetrack_forwardbackward_1_81:
001A            407            ds 2
001C            408   _linetrack_vleft_1_82:
001C            409            ds 4
0020            410   _linetrack_vright_1_82:
0020            411            ds 4
0024            412   _linetrack_sloc0_1_0:
0024            413            ds 4
0028            414   _turncar_vleft_1_87:
0028            415            ds 4
002C            416   _turncar_vright_1_87:
002C            417            ds 4
0030            418   _turncar_direction_1_87:
0030            419            ds 1
0031            420   _uturn_vleft_1_93:
0031            421            ds 4
0035            422   _uturn_vright_1_93:
0035            423            ds 4
0039            424   ;--------------------------------------------------------
0039            425   ; overlayable items in internal ram 
0039            426   ;--------------------------------------------------------
0000            427            rseg    R_OSEG
0000            428            rseg    R_OSEG
0000            429   _movecar_PARM_2:
0000            430            ds 2
0002            431   ;--------------------------------------------------------
0002            432   ; indirectly addressable internal ram data
0002            433   ;--------------------------------------------------------
0000            434            rseg R_ISEG
0000            435   ;--------------------------------------------------------
0000            436   ; absolute internal ram data
0000            437   ;--------------------------------------------------------
0000            438            DSEG
0000            439   ;--------------------------------------------------------
0000            440   ; bit data
0000            441   ;--------------------------------------------------------
0000            442            rseg R_BSEG
0000            443   _Timer2_ISR_sloc0_1_0:
0000            444            DBIT    1
0001            445   ;--------------------------------------------------------
0001            446   ; paged external ram data
0001            447   ;--------------------------------------------------------
0000            448            rseg R_PSEG
0000            449   ;--------------------------------------------------------
0000            450   ; external ram data
0000            451   ;--------------------------------------------------------
0000            452            rseg R_XSEG
0000            453   ;--------------------------------------------------------
0000            454   ; absolute external ram data
0000            455   ;--------------------------------------------------------
0000            456            XSEG
0000            457   ;--------------------------------------------------------
0000            458   ; external initialized ram data
0000            459   ;--------------------------------------------------------
0000            460            rseg R_IXSEG
0000            461            rseg R_HOME
0000            462            rseg R_GSINIT
0000            463            rseg R_CSEG
0000            464   ;--------------------------------------------------------
0000            465   ; Reset entry point and interrupt vectors
0000            466   ;--------------------------------------------------------
0000            467            CSEG at 0x0000
0000 020100     468            ljmp    _crt0
002B            469            CSEG at 0x002b
002B 020100     470            ljmp    _Timer2_ISR
002E            471   ;--------------------------------------------------------
002E            472   ; global & static initialisations
002E            473   ;--------------------------------------------------------
0000            474            rseg R_HOME
0000            475            rseg R_GSINIT
0000            476            rseg R_GSINIT
0000            477   ;--------------------------------------------------------
0000            478   ; data variables initialization
0000            479   ;--------------------------------------------------------
0000            480            rseg R_DINIT
0000            481   ;        robot.c:10: volatile  char pwm_count=0;
0000 755800     482            mov     _pwm_count,#0x00
0003            483   ;        robot.c:11: volatile  char mode = 0;
0003 751800     484            mov     _mode,#0x00
0006            485   ;        robot.c:12: volatile  char pwm_both =0;
0006 75D800     486            mov     _pwm_both,#0x00
0009            487   ;        robot.c:13: volatile  char pwm_Left0 = 0; //p1.5
0009 759800     488            mov     _pwm_Left0,#0x00
000C            489   ;        robot.c:14: volatile  char pwm_Left1 = 0; //p1.6
000C 755800     490            mov     _pwm_Left1,#0x00
000F            491   ;        robot.c:15: volatile  char pwm_Right0 = 0; //p2.0
000F 751800     492            mov     _pwm_Right0,#0x00
0012            493   ;        robot.c:16: volatile  char pwm_Right1 = 0; //p2.1
0012 75D800     494            mov     _pwm_Right1,#0x00
0015            495   ;        robot.c:17: volatile  char direction = 0; // 1 for back 0 for forward
0015 759800     496            mov     _direction,#0x00
0018            497   ;        robot.c:19: volatile  char currentcmd = 0;
0018 755800     498            mov     _currentcmd,#0x00
001B            499   ;        robot.c:20: volatile  char currentstate = 1;
001B 751801     500            mov     _currentstate,#0x01
001E            501            ; The linker places a 'ret' at the end of segment R_DINIT.
001E            502   ;--------------------------------------------------------
001E            503   ; code
001E            504   ;--------------------------------------------------------
0000            505            rseg R_CSEG
0000            506   ;------------------------------------------------------------
0000            507   ;Allocation info for local variables in function 'main'
0000            508   ;------------------------------------------------------------
0000            509   ;v1                        Allocated with name '_main_v1_1_57'
0000            510   ;v2                        Allocated with name '_main_v2_1_57'
0000            511   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0000            512   ;sloc1                     Allocated with name '_main_sloc1_1_0'
0000            513   ;------------------------------------------------------------
0000            514   ;        robot.c:22: void main(void) {
0000            515   ;        -----------------------------------------
0000            516   ;         function main
0000            517   ;        -----------------------------------------
0000            518   _main:
0000            519            using   0
0000            520   ;        robot.c:24: volatile float v1 = 0;
0000 75E800     521            mov     _main_v1_1_57,#0x00
0003 75E900     522            mov     (_main_v1_1_57 + 1),#0x00
0006 75EA00     523            mov     (_main_v1_1_57 + 2),#0x00
0009 75EB00     524            mov     (_main_v1_1_57 + 3),#0x00
000C            525   ;        robot.c:25: volatile float v2 = 0;
000C 752800     526            mov     _main_v2_1_57,#0x00
000F 752900     527            mov     (_main_v2_1_57 + 1),#0x00
0012 752A00     528            mov     (_main_v2_1_57 + 2),#0x00
0015 752B00     529            mov     (_main_v2_1_57 + 3),#0x00
0018            530   ;        robot.c:27: MOTOR_LEFT0 =0;
0018 C295       531            clr     _P1_5
001A            532   ;        robot.c:28: MOTOR_LEFT1 =0;
001A C296       533            clr     _P1_6
001C            534   ;        robot.c:29: MOTOR_RIGHT0 =0;
001C C2A0       535            clr     _P2_0
001E            536   ;        robot.c:30: MOTOR_RIGHT1 =0;
001E C2A1       537            clr     _P2_1
0020            538   ;        robot.c:33: currentstate = 1;           //1-FORWARD, 2-BACKWARDS, 3-STOPPED, 4-DEBUGGER
0020 751801     539            mov     _currentstate,#0x01
0023            540   ;        robot.c:34: currentcmd = 0;             //0-NO COMMAND, 1-TURN LEFT, 2-TURN RIGHT, 3-FORWARDS, 4-BACKWARDS, 5-STOP, 6-UTURN
0023 755800     541            mov     _currentcmd,#0x00
0026            542   ;        robot.c:37: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0026 7448       543            mov     a,#__str_0
0028 C0E0       544            push    acc
002A 749A       545            mov     a,#(__str_0 >> 8)
002C C0E0       546            push    acc
002E 7480       547            mov     a,#0x80
0030 C0E0       548            push    acc
0032 120100     549            lcall   _printf
0035 1581       550            dec     sp
0037 1581       551            dec     sp
0039 1581       552            dec     sp
003B            553   ;        robot.c:40: InitPinADC(2, 3); // Configure P2.3 as analog input (tank1)
003B 750003     554            mov     _InitPinADC_PARM_2,#0x03
003E 758202     555            mov     dpl,#0x02
0041 120100     556            lcall   _InitPinADC
0044            557   ;        robot.c:41: InitPinADC(2, 4); // Configure P2.4 as analog input         (tank1)
0044 750004     558            mov     _InitPinADC_PARM_2,#0x04
0047 758202     559            mov     dpl,#0x02
004A 120100     560            lcall   _InitPinADC
004D            561   ;        robot.c:42: InitPinADC(2, 5); // Configure P2.5 as analog input (tank2)
004D 750005     562            mov     _InitPinADC_PARM_2,#0x05
0050 758202     563            mov     dpl,#0x02
0053 120100     564            lcall   _InitPinADC
0056            565   ;        robot.c:43: InitPinADC(2, 6); // Configure P2.6 as analog input (tank2)
0056 750006     566            mov     _InitPinADC_PARM_2,#0x06
0059 758202     567            mov     dpl,#0x02
005C 120100     568            lcall   _InitPinADC
005F            569   ;        robot.c:49: InitADC();
005F 120100     570            lcall   _InitADC
0062            571   ;        robot.c:53: while(1)
0062            572   L002024?:
0062            573   ;        robot.c:56: readData(); 
0062 120100     574            lcall   _readData
0065            575   ;        robot.c:58: printf("frontL %f frontR %f backL %f backR %f\r", Volts_at_Pin(LQFP32_MUX_P2_3),Volts_at_Pin(LQFP32_MUX_P2_4),Volts_at_Pin(LQFP32_MUX_P2_5),Volts_at_Pin(LQFP32_MUX_P2_6));
0065 75820E     576            mov     dpl,#0x0E
0068 120100     577            lcall   _Volts_at_Pin
006B AA82       578            mov     r2,dpl
006D AB83       579            mov     r3,dph
006F ACF0       580            mov     r4,b
0071 FD         581            mov     r5,a
0072 75820D     582            mov     dpl,#0x0D
0075 C002       583            push    ar2
0077 C003       584            push    ar3
0079 C004       585            push    ar4
007B C005       586            push    ar5
007D 120100     587            lcall   _Volts_at_Pin
0080 858268     588            mov     _main_sloc0_1_0,dpl
0083 858369     589            mov     (_main_sloc0_1_0 + 1),dph
0086 85F06A     590            mov     (_main_sloc0_1_0 + 2),b
0089 F56B       591            mov     (_main_sloc0_1_0 + 3),a
008B 75820C     592            mov     dpl,#0x0C
008E 120100     593            lcall   _Volts_at_Pin
0091 8582A8     594            mov     _main_sloc1_1_0,dpl
0094 8583A9     595            mov     (_main_sloc1_1_0 + 1),dph
0097 85F0AA     596            mov     (_main_sloc1_1_0 + 2),b
009A F5AB       597            mov     (_main_sloc1_1_0 + 3),a
009C 75820B     598            mov     dpl,#0x0B
009F 120100     599            lcall   _Volts_at_Pin
00A2 AE82       600            mov     r6,dpl
00A4 AF83       601            mov     r7,dph
00A6 A8F0       602            mov     r0,b
00A8 F9         603            mov     r1,a
00A9 C068       604            push    _main_sloc0_1_0
00AB C069       605            push    (_main_sloc0_1_0 + 1)
00AD C06A       606            push    (_main_sloc0_1_0 + 2)
00AF C06B       607            push    (_main_sloc0_1_0 + 3)
00B1 C0A8       608            push    _main_sloc1_1_0
00B3 C0A9       609            push    (_main_sloc1_1_0 + 1)
00B5 C0AA       610            push    (_main_sloc1_1_0 + 2)
00B7 C0AB       611            push    (_main_sloc1_1_0 + 3)
00B9 C006       612            push    ar6
00BB C007       613            push    ar7
00BD C000       614            push    ar0
00BF C001       615            push    ar1
00C1 7458       616            mov     a,#__str_1
00C3 C0E0       617            push    acc
00C5 749D       618            mov     a,#(__str_1 >> 8)
00C7 C0E0       619            push    acc
00C9 7480       620            mov     a,#0x80
00CB C0E0       621            push    acc
00CD 120100     622            lcall   _printf
00D0 E581       623            mov     a,sp
00D2 24ED       624            add     a,#0xed
00D4 F581       625            mov     sp,a
00D6            626   ;        robot.c:61: switch (currentstate) {
00D6 AA18       627            mov     r2,_currentstate
00D8 BA0198     628            cjne    r2,#0x01,L002040?
00DB 8001       629            sjmp    L002001?
00DD            630   L002040?:
00DD BA0218     631            cjne    r2,#0x02,L002041?
00E0 8001       632            sjmp    L002002?
00E2            633   L002041?:
00E2            634   ;        robot.c:62: case 1:
00E2 BA0398     635            cjne    r2,#0x03,L002004?
00E5 8001       636            sjmp    L002003?
00E7            637   L002001?:
00E7            638   ;        robot.c:63: linetrack(0);       //forwards
00E7 900000     639            mov     dptr,#0x0000
00EA 120100     640            lcall   _linetrack
00ED            641   ;        robot.c:65: v1 = Volts_at_Pin(LQFP32_MUX_P2_3);
00ED 75820B     642            mov     dpl,#0x0B
00F0 120100     643            lcall   _Volts_at_Pin
00F3 8582E8     644            mov     _main_v1_1_57,dpl
00F6 8583E9     645            mov     (_main_v1_1_57 + 1),dph
00F9 85F0EA     646            mov     (_main_v1_1_57 + 2),b
00FC F5EB       647            mov     (_main_v1_1_57 + 3),a
00FE            648   ;        robot.c:66: v2 = Volts_at_Pin(LQFP32_MUX_P2_4);
00FE 75820C     649            mov     dpl,#0x0C
0101 120100     650            lcall   _Volts_at_Pin
0104 858228     651            mov     _main_v2_1_57,dpl
0107 858329     652            mov     (_main_v2_1_57 + 1),dph
010A 85F02A     653            mov     (_main_v2_1_57 + 2),b
010D F52B       654            mov     (_main_v2_1_57 + 3),a
010F            655   ;        robot.c:67: break;
010F            656   ;        robot.c:68: case 2:
010F 8001       657            sjmp    L002004?
0111            658   L002002?:
0111            659   ;        robot.c:69: linetrack(1);       //backwards
0111 900001     660            mov     dptr,#0x0001
0114 120100     661            lcall   _linetrack
0117            662   ;        robot.c:71: v2 = Volts_at_Pin(LQFP32_MUX_P2_5);
0117 75820D     663            mov     dpl,#0x0D
011A 120100     664            lcall   _Volts_at_Pin
011D 858228     665            mov     _main_v2_1_57,dpl
0120 858329     666            mov     (_main_v2_1_57 + 1),dph
0123 85F02A     667            mov     (_main_v2_1_57 + 2),b
0126 F52B       668            mov     (_main_v2_1_57 + 3),a
0128            669   ;        robot.c:72: v1 = Volts_at_Pin(LQFP32_MUX_P2_6);
0128 75820E     670            mov     dpl,#0x0E
012B 120100     671            lcall   _Volts_at_Pin
012E 8582E8     672            mov     _main_v1_1_57,dpl
0131 8583E9     673            mov     (_main_v1_1_57 + 1),dph
0134 85F0EA     674            mov     (_main_v1_1_57 + 2),b
0137 F5EB       675            mov     (_main_v1_1_57 + 3),a
0139            676   ;        robot.c:73: break;
0139            677   ;        robot.c:74: case 3:
0139 8001       678            sjmp    L002004?
013B            679   L002003?:
013B            680   ;        robot.c:75: stopcar();          //stop car
013B 120100     681            lcall   _stopcar
013E            682   ;        robot.c:77: }
013E            683   L002004?:
013E            684   ;        robot.c:80: switch (currentcmd) {
013E E558       685            mov     a,_currentcmd
0140 FA         686            mov     r2,a
0141 30E718     687            jnb     acc.7,L002043?
0144 020100     688            ljmp    L002021?
0147            689   L002043?:
0147 C3         690            clr     c
0148 7486       691            mov     a,#(0x06 ^ 0x80)
014A 8AF0       692            mov     b,r2
014C 63F080     693            xrl     b,#0x80
014F 95F0       694            subb    a,b
0151 5001       695            jnc     L002044?
0153 020100     696            ljmp    L002021?
0156            697   L002044?:
0156 EA         698            mov     a,r2
0157 2A         699            add     a,r2
0158 2A         700            add     a,r2
0159 909FD8     701            mov     dptr,#L002045?
015C 73         702            jmp     @a+dptr
015D            703   L002045?:
015D 020100     704            ljmp    L002005?
0160 020100     705            ljmp    L002009?
0163 020100     706            ljmp    L002013?
0166 020100     707            ljmp    L002017?
0169 020100     708            ljmp    L002018?
016C 020100     709            ljmp    L002019?
016F 020100     710            ljmp    L002020?
0172            711   ;        robot.c:82: case 0 :
0172            712   L002005?:
0172            713   ;        robot.c:84: if (v1 > 0.9 && v2 >1.2) {
0172 7466       714            mov     a,#0x66
0174 C0E0       715            push    acc
0176 C0E0       716            push    acc
0178 C0E0       717            push    acc
017A 743F       718            mov     a,#0x3F
017C C0E0       719            push    acc
017E 85E882     720            mov     dpl,_main_v1_1_57
0181 85E983     721            mov     dph,(_main_v1_1_57 + 1)
0184 85EAF0     722            mov     b,(_main_v1_1_57 + 2)
0187 E5EB       723            mov     a,(_main_v1_1_57 + 3)
0189 120100     724            lcall   ___fsgt
018C AA82       725            mov     r2,dpl
018E E581       726            mov     a,sp
0190 24FC       727            add     a,#0xfc
0192 F581       728            mov     sp,a
0194 EA         729            mov     a,r2
0195 7001       730            jnz     L002046?
0197 020100     731            ljmp    L002024?
019A            732   L002046?:
019A 749A       733            mov     a,#0x9A
019C C0E0       734            push    acc
019E 7499       735            mov     a,#0x99
01A0 C0E0       736            push    acc
01A2 C0E0       737            push    acc
01A4 743F       738            mov     a,#0x3F
01A6 C0E0       739            push    acc
01A8 852882     740            mov     dpl,_main_v2_1_57
01AB 852983     741            mov     dph,(_main_v2_1_57 + 1)
01AE 852AF0     742            mov     b,(_main_v2_1_57 + 2)
01B1 E52B       743            mov     a,(_main_v2_1_57 + 3)
01B3 120100     744            lcall   ___fsgt
01B6 AA82       745            mov     r2,dpl
01B8 E581       746            mov     a,sp
01BA 24FC       747            add     a,#0xfc
01BC F581       748            mov     sp,a
01BE EA         749            mov     a,r2
01BF 7001       750            jnz     L002047?
01C1 020100     751            ljmp    L002024?
01C4            752   L002047?:
01C4            753   ;        robot.c:85: printf("\nINTERSECTION\n"); 
01C4 7498       754            mov     a,#__str_2
01C6 C0E0       755            push    acc
01C8 74A2       756            mov     a,#(__str_2 >> 8)
01CA C0E0       757            push    acc
01CC 7480       758            mov     a,#0x80
01CE C0E0       759            push    acc
01D0 120100     760            lcall   _printf
01D3 1581       761            dec     sp
01D5 1581       762            dec     sp
01D7 1581       763            dec     sp
01D9            764   ;        robot.c:86: movecar(currentstate, 35);
01D9 AA18       765            mov     r2,_currentstate
01DB E518       766            mov     a,_currentstate
01DD 33         767            rlc     a
01DE 95E0       768            subb    a,acc
01E0 FB         769            mov     r3,a
01E1 755823     770            mov     _movecar_PARM_2,#0x23
01E4 E4         771            clr     a
01E5 F559       772            mov     (_movecar_PARM_2 + 1),a
01E7 8A82       773            mov     dpl,r2
01E9 8B83       774            mov     dph,r3
01EB 120100     775            lcall   _movecar
01EE            776   ;        robot.c:87: waitms(1500);
01EE 9005DC     777            mov     dptr,#0x05DC
01F1 120100     778            lcall   _waitms
01F4            779   ;        robot.c:89: break;
01F4 020100     780            ljmp    L002024?
01F7            781   ;        robot.c:91: case 1 :
01F7            782   L002009?:
01F7            783   ;        robot.c:93: if (v1 > 0.9 && v2 >1.2)  {
01F7 7466       784            mov     a,#0x66
01F9 C0E0       785            push    acc
01FB C0E0       786            push    acc
01FD C0E0       787            push    acc
01FF 743F       788            mov     a,#0x3F
0201 C0E0       789            push    acc
0203 85E882     790            mov     dpl,_main_v1_1_57
0206 85E983     791            mov     dph,(_main_v1_1_57 + 1)
0209 85EAF0     792            mov     b,(_main_v1_1_57 + 2)
020C E5EB       793            mov     a,(_main_v1_1_57 + 3)
020E 120100     794            lcall   ___fsgt
0211 AA82       795            mov     r2,dpl
0213 E581       796            mov     a,sp
0215 24FC       797            add     a,#0xfc
0217 F581       798            mov     sp,a
0219 EA         799            mov     a,r2
021A 7001       800            jnz     L002048?
021C 020100     801            ljmp    L002024?
021F            802   L002048?:
021F 749A       803            mov     a,#0x9A
0221 C0E0       804            push    acc
0223 7499       805            mov     a,#0x99
0225 C0E0       806            push    acc
0227 C0E0       807            push    acc
0229 743F       808            mov     a,#0x3F
022B C0E0       809            push    acc
022D 852882     810            mov     dpl,_main_v2_1_57
0230 852983     811            mov     dph,(_main_v2_1_57 + 1)
0233 852AF0     812            mov     b,(_main_v2_1_57 + 2)
0236 E52B       813            mov     a,(_main_v2_1_57 + 3)
0238 120100     814            lcall   ___fsgt
023B AA82       815            mov     r2,dpl
023D E581       816            mov     a,sp
023F 24FC       817            add     a,#0xfc
0241 F581       818            mov     sp,a
0243 EA         819            mov     a,r2
0244 7001       820            jnz     L002049?
0246 020100     821            ljmp    L002024?
0249            822   L002049?:
0249            823   ;        robot.c:96: movecar(currentstate, 35);                                          
0249 AA18       824            mov     r2,_currentstate
024B E518       825            mov     a,_currentstate
024D 33         826            rlc     a
024E 95E0       827            subb    a,acc
0250 FB         828            mov     r3,a
0251 755823     829            mov     _movecar_PARM_2,#0x23
0254 E4         830            clr     a
0255 F559       831            mov     (_movecar_PARM_2 + 1),a
0257 8A82       832            mov     dpl,r2
0259 8B83       833            mov     dph,r3
025B 120100     834            lcall   _movecar
025E            835   ;        robot.c:97: waitms(1500);
025E 9005DC     836            mov     dptr,#0x05DC
0261 120100     837            lcall   _waitms
0264            838   ;        robot.c:100: turncar(0); //0 = left
0264 900000     839            mov     dptr,#0x0000
0267 120100     840            lcall   _turncar
026A            841   ;        robot.c:101: currentcmd = 0;
026A 755800     842            mov     _currentcmd,#0x00
026D            843   ;        robot.c:103: break;
026D 020100     844            ljmp    L002024?
0270            845   ;        robot.c:106: case 2 :
0270            846   L002013?:
0270            847   ;        robot.c:108: if (v1 > 0.9 && v2 >1.2) {
0270 7466       848            mov     a,#0x66
0272 C0E0       849            push    acc
0274 C0E0       850            push    acc
0276 C0E0       851            push    acc
0278 743F       852            mov     a,#0x3F
027A C0E0       853            push    acc
027C 85E882     854            mov     dpl,_main_v1_1_57
027F 85E983     855            mov     dph,(_main_v1_1_57 + 1)
0282 85EAF0     856            mov     b,(_main_v1_1_57 + 2)
0285 E5EB       857            mov     a,(_main_v1_1_57 + 3)
0287 120100     858            lcall   ___fsgt
028A AA82       859            mov     r2,dpl
028C E581       860            mov     a,sp
028E 24FC       861            add     a,#0xfc
0290 F581       862            mov     sp,a
0292 EA         863            mov     a,r2
0293 7001       864            jnz     L002050?
0295 020100     865            ljmp    L002024?
0298            866   L002050?:
0298 749A       867            mov     a,#0x9A
029A C0E0       868            push    acc
029C 7499       869            mov     a,#0x99
029E C0E0       870            push    acc
02A0 C0E0       871            push    acc
02A2 743F       872            mov     a,#0x3F
02A4 C0E0       873            push    acc
02A6 852882     874            mov     dpl,_main_v2_1_57
02A9 852983     875            mov     dph,(_main_v2_1_57 + 1)
02AC 852AF0     876            mov     b,(_main_v2_1_57 + 2)
02AF E52B       877            mov     a,(_main_v2_1_57 + 3)
02B1 120100     878            lcall   ___fsgt
02B4 AA82       879            mov     r2,dpl
02B6 E581       880            mov     a,sp
02B8 24FC       881            add     a,#0xfc
02BA F581       882            mov     sp,a
02BC EA         883            mov     a,r2
02BD 7001       884            jnz     L002051?
02BF 020100     885            ljmp    L002024?
02C2            886   L002051?:
02C2            887   ;        robot.c:111: movecar(currentstate, 35);
02C2 AA18       888            mov     r2,_currentstate
02C4 E518       889            mov     a,_currentstate
02C6 33         890            rlc     a
02C7 95E0       891            subb    a,acc
02C9 FB         892            mov     r3,a
02CA 755823     893            mov     _movecar_PARM_2,#0x23
02CD E4         894            clr     a
02CE F559       895            mov     (_movecar_PARM_2 + 1),a
02D0 8A82       896            mov     dpl,r2
02D2 8B83       897            mov     dph,r3
02D4 120100     898            lcall   _movecar
02D7            899   ;        robot.c:112: waitms(1500);
02D7 9005DC     900            mov     dptr,#0x05DC
02DA 120100     901            lcall   _waitms
02DD            902   ;        robot.c:115: turncar(1); //1 = right
02DD 900001     903            mov     dptr,#0x0001
02E0 120100     904            lcall   _turncar
02E3            905   ;        robot.c:116: currentcmd = 0;
02E3 755800     906            mov     _currentcmd,#0x00
02E6            907   ;        robot.c:118: break;
02E6 020100     908            ljmp    L002024?
02E9            909   ;        robot.c:121: case 3 :
02E9            910   L002017?:
02E9            911   ;        robot.c:123: currentstate = 1;
02E9 751801     912            mov     _currentstate,#0x01
02EC            913   ;        robot.c:124: currentcmd = 0;
02EC 755800     914            mov     _currentcmd,#0x00
02EF            915   ;        robot.c:125: break;
02EF 020100     916            ljmp    L002024?
02F2            917   ;        robot.c:128: case 4 :
02F2            918   L002018?:
02F2            919   ;        robot.c:130: currentstate = 2;
02F2 751802     920            mov     _currentstate,#0x02
02F5            921   ;        robot.c:131: currentcmd = 0;
02F5 755800     922            mov     _currentcmd,#0x00
02F8            923   ;        robot.c:132: break;
02F8 020100     924            ljmp    L002024?
02FB            925   ;        robot.c:135: case 5 :
02FB            926   L002019?:
02FB            927   ;        robot.c:137: currentstate = 3;
02FB 751803     928            mov     _currentstate,#0x03
02FE            929   ;        robot.c:138: currentcmd = 0;
02FE 755800     930            mov     _currentcmd,#0x00
0301            931   ;        robot.c:139: break;
0301 020100     932            ljmp    L002024?
0304            933   ;        robot.c:142: case 6 :
0304            934   L002020?:
0304            935   ;        robot.c:143: uturn();
0304 120100     936            lcall   _uturn
0307            937   ;        robot.c:144: currentcmd = 0;
0307 755800     938            mov     _currentcmd,#0x00
030A            939   ;        robot.c:145: break;
030A 020100     940            ljmp    L002024?
030D            941   ;        robot.c:148: default: 
030D            942   L002021?:
030D            943   ;        robot.c:149: currentstate = 1;
030D 751801     944            mov     _currentstate,#0x01
0310            945   ;        robot.c:150: }
0310 020100     946            ljmp    L002024?
0313            947   ;------------------------------------------------------------
0313            948   ;Allocation info for local variables in function 'Timer2_ISR'
0313            949   ;------------------------------------------------------------
0313            950   ;------------------------------------------------------------
0313            951   ;        robot.c:154: void Timer2_ISR (void) interrupt 5 {
0313            952   ;        -----------------------------------------
0313            953   ;         function Timer2_ISR
0313            954   ;        -----------------------------------------
0313            955   _Timer2_ISR:
0313 C0E0       956            push    acc
0315 C0F0       957            push    b
0317 C0D0       958            push    psw
0319 75D000     959            mov     psw,#0x00
031C            960   ;        robot.c:155: TF2H = 0; // Clear Timer2 interrupt flag
031C C2CF       961            clr     _TF2H
031E            962   ;        robot.c:157: pwm_count++;
031E 0558       963            inc     _pwm_count
0320            964   ;        robot.c:158: if(pwm_count>100) pwm_count=0;
0320 C3         965            clr     c
0321 74E4       966            mov     a,#(0x64 ^ 0x80)
0323 8558F0     967            mov     b,_pwm_count
0326 63F080     968            xrl     b,#0x80
0329 95F0       969            subb    a,b
032B 5001       970            jnc     L003002?
032D 755800     971            mov     _pwm_count,#0x00
0330            972   L003002?:
0330            973   ;        robot.c:161: MOTOR_LEFT0 = pwm_count > pwm_Left0 ? 0 : 1; //p1.5
0330 C3         974            clr     c
0331 E598       975            mov     a,_pwm_Left0
0333 6480       976            xrl     a,#0x80
0335 8558F0     977            mov     b,_pwm_count
0338 63F080     978            xrl     b,#0x80
033B 95F0       979            subb    a,b
033D 92C8       980            mov  _Timer2_ISR_sloc0_1_0,c
033F B3         981            cpl     c
0340 9295       982            mov     _P1_5,c
0342            983   ;        robot.c:162: MOTOR_LEFT1 = pwm_count > pwm_Left1 ? 0 : 1; //p1.6
0342 C3         984            clr     c
0343 E558       985            mov     a,_pwm_Left1
0345 6480       986            xrl     a,#0x80
0347 8558F0     987            mov     b,_pwm_count
034A 63F080     988            xrl     b,#0x80
034D 95F0       989            subb    a,b
034F 92C8       990            mov  _Timer2_ISR_sloc0_1_0,c
0351 B3         991            cpl     c
0352 9296       992            mov     _P1_6,c
0354            993   ;        robot.c:163: MOTOR_RIGHT0 = pwm_count > pwm_Right0 ? 0 : 1; //p2.0
0354 C3         994            clr     c
0355 E518       995            mov     a,_pwm_Right0
0357 6480       996            xrl     a,#0x80
0359 8558F0     997            mov     b,_pwm_count
035C 63F080     998            xrl     b,#0x80
035F 95F0       999            subb    a,b
0361 92C8      1000            mov  _Timer2_ISR_sloc0_1_0,c
0363 B3        1001            cpl     c
0364 92A0      1002            mov     _P2_0,c
0366           1003   ;        robot.c:164: MOTOR_RIGHT1 = pwm_count > pwm_Right1 ? 0 : 1; //p2.1
0366 C3        1004            clr     c
0367 E5D8      1005            mov     a,_pwm_Right1
0369 6480      1006            xrl     a,#0x80
036B 8558F0    1007            mov     b,_pwm_count
036E 63F080    1008            xrl     b,#0x80
0371 95F0      1009            subb    a,b
0373 92C8      1010            mov  _Timer2_ISR_sloc0_1_0,c
0375 B3        1011            cpl     c
0376 92A1      1012            mov     _P2_1,c
0378 D0D0      1013            pop     psw
037A D0F0      1014            pop     b
037C D0E0      1015            pop     acc
037E 32        1016            reti
037F           1017   ;        eliminated unneeded push/pop dpl
037F           1018   ;        eliminated unneeded push/pop dph
037F           1019   ;------------------------------------------------------------
037F           1020   ;Allocation info for local variables in function 'forward_backward'
037F           1021   ;------------------------------------------------------------
037F           1022   ;direction                 Allocated to registers r2 
037F           1023   ;------------------------------------------------------------
037F           1024   ;        robot.c:171: void forward_backward(unsigned char direction) {
037F           1025   ;        -----------------------------------------
037F           1026   ;         function forward_backward
037F           1027   ;        -----------------------------------------
037F           1028   _forward_backward:
037F           1029   ;        robot.c:172: if (direction == 0) { //p2.1,1.6 on
037F E582      1030            mov     a,dpl
0381 FA        1031            mov     r2,a
0382 7001      1032            jnz     L004004?
0384           1033   ;        robot.c:173: pwm_Left0 = pwm_Right0 = -1;
0384 7518FF    1034            mov     _pwm_Right0,#0xFF
0387 7598FF    1035            mov     _pwm_Left0,#0xFF
038A           1036   ;        robot.c:174: pwm_Left1 = pwm_Right1 = pwm_both;  //MOTOR_LEFT1 = MOTOR_RIGHT1 = pwm_both;
038A 85D8D8    1037            mov     _pwm_Right1,_pwm_both
038D 85D858    1038            mov     _pwm_Left1,_pwm_both
0390 22        1039            ret
0391           1040   L004004?:
0391           1041   ;        robot.c:177: else if (direction == 1) { //p2.0,1.5 on
0391 BA01D8    1042            cjne    r2,#0x01,L004006?
0394           1043   ;        robot.c:178: pwm_Left1 = pwm_Right1 = -1;
0394 75D8FF    1044            mov     _pwm_Right1,#0xFF
0397 7558FF    1045            mov     _pwm_Left1,#0xFF
039A           1046   ;        robot.c:179: pwm_Left0 = pwm_Right0 = pwm_both; 
039A 85D818    1047            mov     _pwm_Right0,_pwm_both
039D 85D898    1048            mov     _pwm_Left0,_pwm_both
03A0           1049   L004006?:
03A0 22        1050            ret
03A1           1051   ;------------------------------------------------------------
03A1           1052   ;Allocation info for local variables in function 'readData'
03A1           1053   ;------------------------------------------------------------
03A1           1054   ;commandflag               Allocated to registers r2 r3 
03A1           1055   ;------------------------------------------------------------
03A1           1056   ;        robot.c:190: void readData (void) {
03A1           1057   ;        -----------------------------------------
03A1           1058   ;         function readData
03A1           1059   ;        -----------------------------------------
03A1           1060   _readData:
03A1           1061   ;        robot.c:191: int commandflag = 0;                                       //determines if there's a real command coming in or not
03A1 7A00      1062            mov     r2,#0x00
03A3 7B00      1063            mov     r3,#0x00
03A5           1064   ;        robot.c:194: if (COMMAND_PIN == 0) {                                    //0---
03A5 309018    1065            jnb     _P1_0,L005039?
03A8 020100    1066            ljmp    L005022?
03AB           1067   L005039?:
03AB           1068   ;        robot.c:195: waitms(CMDFRQ*1.5);
03AB 900069    1069            mov     dptr,#0x0069
03AE C002      1070            push    ar2
03B0 C003      1071            push    ar3
03B2 120100    1072            lcall   _waitms
03B5 D003      1073            pop     ar3
03B7 D002      1074            pop     ar2
03B9           1075   ;        robot.c:196: if (COMMAND_PIN == 1) {                            //01--
03B9 309098    1076            jnb     _P1_0,L005019?
03BC           1077   ;        robot.c:197: waitms(CMDFRQ);
03BC 900046    1078            mov     dptr,#0x0046
03BF C002      1079            push    ar2
03C1 C003      1080            push    ar3
03C3 120100    1081            lcall   _waitms
03C6 D003      1082            pop     ar3
03C8 D002      1083            pop     ar2
03CA           1084   ;        robot.c:198: if (COMMAND_PIN == 0) {                    //010-
03CA 2090D8    1085            jb      _P1_0,L005007?
03CD           1086   ;        robot.c:199: waitms(CMDFRQ);
03CD 900046    1087            mov     dptr,#0x0046
03D0 C002      1088            push    ar2
03D2 C003      1089            push    ar3
03D4 120100    1090            lcall   _waitms
03D7 D003      1091            pop     ar3
03D9 D002      1092            pop     ar2
03DB           1093   ;        robot.c:200: if (COMMAND_PIN == 0)      currentcmd = 4;         //0100  
03DB 209018    1094            jb      _P1_0,L005002?
03DE 755804    1095            mov     _currentcmd,#0x04
03E1 8001      1096            sjmp    L005022?
03E3           1097   L005002?:
03E3           1098   ;        robot.c:201: else                                       currentcmd = 5;         //0101
03E3 755805    1099            mov     _currentcmd,#0x05
03E6 8001      1100            sjmp    L005022?
03E8           1101   L005007?:
03E8           1102   ;        robot.c:204: waitms(CMDFRQ);
03E8 900046    1103            mov     dptr,#0x0046
03EB C002      1104            push    ar2
03ED C003      1105            push    ar3
03EF 120100    1106            lcall   _waitms
03F2 D003      1107            pop     ar3
03F4 D002      1108            pop     ar2
03F6           1109   ;        robot.c:205: if (COMMAND_PIN == 0)      currentcmd = 6;         //0110
03F6 209058    1110            jb      _P1_0,L005022?
03F9 755806    1111            mov     _currentcmd,#0x06
03FC 8001      1112            sjmp    L005022?
03FE           1113   L005019?:
03FE           1114   ;        robot.c:209: waitms(CMDFRQ);
03FE 900046    1115            mov     dptr,#0x0046
0401 C002      1116            push    ar2
0403 C003      1117            push    ar3
0405 120100    1118            lcall   _waitms
0408 D003      1119            pop     ar3
040A D002      1120            pop     ar2
040C           1121   ;        robot.c:210: if (COMMAND_PIN == 1) {                    //001-
040C 309058    1122            jnb     _P1_0,L005016?
040F           1123   ;        robot.c:211: waitms(CMDFRQ);
040F 900046    1124            mov     dptr,#0x0046
0412 C002      1125            push    ar2
0414 C003      1126            push    ar3
0416 120100    1127            lcall   _waitms
0419 D003      1128            pop     ar3
041B D002      1129            pop     ar2
041D           1130   ;        robot.c:212: if (COMMAND_PIN == 1)      currentcmd = 3;         //0011
041D 309098    1131            jnb     _P1_0,L005010?
0420 755803    1132            mov     _currentcmd,#0x03
0423 8001      1133            sjmp    L005022?
0425           1134   L005010?:
0425           1135   ;        robot.c:213: else                                       currentcmd = 2;         //0010
0425 755802    1136            mov     _currentcmd,#0x02
0428 8001      1137            sjmp    L005022?
042A           1138   L005016?:
042A           1139   ;        robot.c:216: waitms(CMDFRQ);
042A 900046    1140            mov     dptr,#0x0046
042D C002      1141            push    ar2
042F C003      1142            push    ar3
0431 120100    1143            lcall   _waitms
0434 D003      1144            pop     ar3
0436 D002      1145            pop     ar2
0438           1146   ;        robot.c:217: if (COMMAND_PIN == 1)      currentcmd = 1; //0001
0438 3090D8    1147            jnb     _P1_0,L005013?
043B 755801    1148            mov     _currentcmd,#0x01
043E 8001      1149            sjmp    L005022?
0440           1150   L005013?:
0440           1151   ;        robot.c:219: commandflag = 1;
0440 7A01      1152            mov     r2,#0x01
0442 7B00      1153            mov     r3,#0x00
0444           1154   L005022?:
0444           1155   ;        robot.c:226: if (commandflag == 0)      {while (COMMAND_PIN == 0);} 
0444 EA        1156            mov     a,r2
0445 4B        1157            orl     a,r3
0446 7001      1158            jnz     L005028?
0448           1159   L005023?:
0448 309058    1160            jnb     _P1_0,L005023?
044B           1161   L005028?:
044B 22        1162            ret
044C           1163   ;------------------------------------------------------------
044C           1164   ;Allocation info for local variables in function 'linetrack'
044C           1165   ;------------------------------------------------------------
044C           1166   ;forwardbackward           Allocated with name '_linetrack_forwardbackward_1_81'
044C           1167   ;vleft                     Allocated with name '_linetrack_vleft_1_82'
044C           1168   ;vright                    Allocated with name '_linetrack_vright_1_82'
044C           1169   ;sloc0                     Allocated with name '_linetrack_sloc0_1_0'
044C           1170   ;------------------------------------------------------------
044C           1171   ;        robot.c:236: void linetrack (int forwardbackward) {
044C           1172   ;        -----------------------------------------
044C           1173   ;         function linetrack
044C           1174   ;        -----------------------------------------
044C           1175   _linetrack:
044C 8582F8    1176            mov     _linetrack_forwardbackward_1_81,dpl
044F 8583F9    1177            mov     (_linetrack_forwardbackward_1_81 + 1),dph
0452           1178   ;        robot.c:241: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0452 75820B    1179            mov     dpl,#0x0B
0455 120100    1180            lcall   _Volts_at_Pin
0458 858248    1181            mov     _linetrack_vleft_1_82,dpl
045B 858349    1182            mov     (_linetrack_vleft_1_82 + 1),dph
045E 85F04A    1183            mov     (_linetrack_vleft_1_82 + 2),b
0461 F54B      1184            mov     (_linetrack_vleft_1_82 + 3),a
0463           1185   ;        robot.c:242: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0463 75820C    1186            mov     dpl,#0x0C
0466 120100    1187            lcall   _Volts_at_Pin
0469 858298    1188            mov     _linetrack_vright_1_82,dpl
046C 858399    1189            mov     (_linetrack_vright_1_82 + 1),dph
046F 85F09A    1190            mov     (_linetrack_vright_1_82 + 2),b
0472 F59B      1191            mov     (_linetrack_vright_1_82 + 3),a
0474           1192   ;        robot.c:245: pwm_Left0 = -1;
0474 7598FF    1193            mov     _pwm_Left0,#0xFF
0477           1194   ;        robot.c:246: pwm_Left1 = vright*vright*75/(vright*vright+vleft*vleft);
0477 C098      1195            push    _linetrack_vright_1_82
0479 C099      1196            push    (_linetrack_vright_1_82 + 1)
047B C09A      1197            push    (_linetrack_vright_1_82 + 2)
047D C09B      1198            push    (_linetrack_vright_1_82 + 3)
047F 859882    1199            mov     dpl,_linetrack_vright_1_82
0482 859983    1200            mov     dph,(_linetrack_vright_1_82 + 1)
0485 859AF0    1201            mov     b,(_linetrack_vright_1_82 + 2)
0488 E59B      1202            mov     a,(_linetrack_vright_1_82 + 3)
048A 120100    1203            lcall   ___fsmul
048D AC82      1204            mov     r4,dpl
048F AD83      1205            mov     r5,dph
0491 AEF0      1206            mov     r6,b
0493 FF        1207            mov     r7,a
0494 E581      1208            mov     a,sp
0496 24FC      1209            add     a,#0xfc
0498 F581      1210            mov     sp,a
049A C004      1211            push    ar4
049C C005      1212            push    ar5
049E C006      1213            push    ar6
04A0 C007      1214            push    ar7
04A2 900000    1215            mov     dptr,#0x0000
04A5 75F096    1216            mov     b,#0x96
04A8 7442      1217            mov     a,#0x42
04AA 120100    1218            lcall   ___fsmul
04AD AC82      1219            mov     r4,dpl
04AF AD83      1220            mov     r5,dph
04B1 AEF0      1221            mov     r6,b
04B3 FF        1222            mov     r7,a
04B4 E581      1223            mov     a,sp
04B6 24FC      1224            add     a,#0xfc
04B8 F581      1225            mov     sp,a
04BA C004      1226            push    ar4
04BC C005      1227            push    ar5
04BE C006      1228            push    ar6
04C0 C007      1229            push    ar7
04C2 C098      1230            push    _linetrack_vright_1_82
04C4 C099      1231            push    (_linetrack_vright_1_82 + 1)
04C6 C09A      1232            push    (_linetrack_vright_1_82 + 2)
04C8 C09B      1233            push    (_linetrack_vright_1_82 + 3)
04CA 859882    1234            mov     dpl,_linetrack_vright_1_82
04CD 859983    1235            mov     dph,(_linetrack_vright_1_82 + 1)
04D0 859AF0    1236            mov     b,(_linetrack_vright_1_82 + 2)
04D3 E59B      1237            mov     a,(_linetrack_vright_1_82 + 3)
04D5 120100    1238            lcall   ___fsmul
04D8 8582E8    1239            mov     _linetrack_sloc0_1_0,dpl
04DB 8583E9    1240            mov     (_linetrack_sloc0_1_0 + 1),dph
04DE 85F0EA    1241            mov     (_linetrack_sloc0_1_0 + 2),b
04E1 F5EB      1242            mov     (_linetrack_sloc0_1_0 + 3),a
04E3 E581      1243            mov     a,sp
04E5 24FC      1244            add     a,#0xfc
04E7 F581      1245            mov     sp,a
04E9 C048      1246            push    _linetrack_vleft_1_82
04EB C049      1247            push    (_linetrack_vleft_1_82 + 1)
04ED C04A      1248            push    (_linetrack_vleft_1_82 + 2)
04EF C04B      1249            push    (_linetrack_vleft_1_82 + 3)
04F1 854882    1250            mov     dpl,_linetrack_vleft_1_82
04F4 854983    1251            mov     dph,(_linetrack_vleft_1_82 + 1)
04F7 854AF0    1252            mov     b,(_linetrack_vleft_1_82 + 2)
04FA E54B      1253            mov     a,(_linetrack_vleft_1_82 + 3)
04FC 120100    1254            lcall   ___fsmul
04FF AA82      1255            mov     r2,dpl
0501 AB83      1256            mov     r3,dph
0503 A8F0      1257            mov     r0,b
0505 F9        1258            mov     r1,a
0506 E581      1259            mov     a,sp
0508 24FC      1260            add     a,#0xfc
050A F581      1261            mov     sp,a
050C C002      1262            push    ar2
050E C003      1263            push    ar3
0510 C000      1264            push    ar0
0512 C001      1265            push    ar1
0514 85E882    1266            mov     dpl,_linetrack_sloc0_1_0
0517 85E983    1267            mov     dph,(_linetrack_sloc0_1_0 + 1)
051A 85EAF0    1268            mov     b,(_linetrack_sloc0_1_0 + 2)
051D E5EB      1269            mov     a,(_linetrack_sloc0_1_0 + 3)
051F 120100    1270            lcall   ___fsadd
0522 AA82      1271            mov     r2,dpl
0524 AB83      1272            mov     r3,dph
0526 A8F0      1273            mov     r0,b
0528 F9        1274            mov     r1,a
0529 E581      1275            mov     a,sp
052B 24FC      1276            add     a,#0xfc
052D F581      1277            mov     sp,a
052F D007      1278            pop     ar7
0531 D006      1279            pop     ar6
0533 D005      1280            pop     ar5
0535 D004      1281            pop     ar4
0537 C002      1282            push    ar2
0539 C003      1283            push    ar3
053B C000      1284            push    ar0
053D C001      1285            push    ar1
053F 8C82      1286            mov     dpl,r4
0541 8D83      1287            mov     dph,r5
0543 8EF0      1288            mov     b,r6
0545 EF        1289            mov     a,r7
0546 120100    1290            lcall   ___fsdiv
0549 AA82      1291            mov     r2,dpl
054B AB83      1292            mov     r3,dph
054D ACF0      1293            mov     r4,b
054F FD        1294            mov     r5,a
0550 E581      1295            mov     a,sp
0552 24FC      1296            add     a,#0xfc
0554 F581      1297            mov     sp,a
0556 8A82      1298            mov     dpl,r2
0558 8B83      1299            mov     dph,r3
055A 8CF0      1300            mov     b,r4
055C ED        1301            mov     a,r5
055D 120100    1302            lcall   ___fs2schar
0560 858258    1303            mov     _pwm_Left1,dpl
0563           1304   ;        robot.c:247: pwm_Right1 = -1;
0563 75D8FF    1305            mov     _pwm_Right1,#0xFF
0566           1306   ;        robot.c:248: pwm_Right0 = vleft*vleft*75/(vright*vright+vleft*vleft);
0566 C048      1307            push    _linetrack_vleft_1_82
0568 C049      1308            push    (_linetrack_vleft_1_82 + 1)
056A C04A      1309            push    (_linetrack_vleft_1_82 + 2)
056C C04B      1310            push    (_linetrack_vleft_1_82 + 3)
056E 854882    1311            mov     dpl,_linetrack_vleft_1_82
0571 854983    1312            mov     dph,(_linetrack_vleft_1_82 + 1)
0574 854AF0    1313            mov     b,(_linetrack_vleft_1_82 + 2)
0577 E54B      1314            mov     a,(_linetrack_vleft_1_82 + 3)
0579 120100    1315            lcall   ___fsmul
057C AA82      1316            mov     r2,dpl
057E AB83      1317            mov     r3,dph
0580 ACF0      1318            mov     r4,b
0582 FD        1319            mov     r5,a
0583 E581      1320            mov     a,sp
0585 24FC      1321            add     a,#0xfc
0587 F581      1322            mov     sp,a
0589 C002      1323            push    ar2
058B C003      1324            push    ar3
058D C004      1325            push    ar4
058F C005      1326            push    ar5
0591 900000    1327            mov     dptr,#0x0000
0594 75F096    1328            mov     b,#0x96
0597 7442      1329            mov     a,#0x42
0599 120100    1330            lcall   ___fsmul
059C AA82      1331            mov     r2,dpl
059E AB83      1332            mov     r3,dph
05A0 ACF0      1333            mov     r4,b
05A2 FD        1334            mov     r5,a
05A3 E581      1335            mov     a,sp
05A5 24FC      1336            add     a,#0xfc
05A7 F581      1337            mov     sp,a
05A9 C002      1338            push    ar2
05AB C003      1339            push    ar3
05AD C004      1340            push    ar4
05AF C005      1341            push    ar5
05B1 C098      1342            push    _linetrack_vright_1_82
05B3 C099      1343            push    (_linetrack_vright_1_82 + 1)
05B5 C09A      1344            push    (_linetrack_vright_1_82 + 2)
05B7 C09B      1345            push    (_linetrack_vright_1_82 + 3)
05B9 859882    1346            mov     dpl,_linetrack_vright_1_82
05BC 859983    1347            mov     dph,(_linetrack_vright_1_82 + 1)
05BF 859AF0    1348            mov     b,(_linetrack_vright_1_82 + 2)
05C2 E59B      1349            mov     a,(_linetrack_vright_1_82 + 3)
05C4 120100    1350            lcall   ___fsmul
05C7 8582E8    1351            mov     _linetrack_sloc0_1_0,dpl
05CA 8583E9    1352            mov     (_linetrack_sloc0_1_0 + 1),dph
05CD 85F0EA    1353            mov     (_linetrack_sloc0_1_0 + 2),b
05D0 F5EB      1354            mov     (_linetrack_sloc0_1_0 + 3),a
05D2 E581      1355            mov     a,sp
05D4 24FC      1356            add     a,#0xfc
05D6 F581      1357            mov     sp,a
05D8 C048      1358            push    _linetrack_vleft_1_82
05DA C049      1359            push    (_linetrack_vleft_1_82 + 1)
05DC C04A      1360            push    (_linetrack_vleft_1_82 + 2)
05DE C04B      1361            push    (_linetrack_vleft_1_82 + 3)
05E0 854882    1362            mov     dpl,_linetrack_vleft_1_82
05E3 854983    1363            mov     dph,(_linetrack_vleft_1_82 + 1)
05E6 854AF0    1364            mov     b,(_linetrack_vleft_1_82 + 2)
05E9 E54B      1365            mov     a,(_linetrack_vleft_1_82 + 3)
05EB 120100    1366            lcall   ___fsmul
05EE AE82      1367            mov     r6,dpl
05F0 AF83      1368            mov     r7,dph
05F2 A8F0      1369            mov     r0,b
05F4 F9        1370            mov     r1,a
05F5 E581      1371            mov     a,sp
05F7 24FC      1372            add     a,#0xfc
05F9 F581      1373            mov     sp,a
05FB C006      1374            push    ar6
05FD C007      1375            push    ar7
05FF C000      1376            push    ar0
0601 C001      1377            push    ar1
0603 85E882    1378            mov     dpl,_linetrack_sloc0_1_0
0606 85E983    1379            mov     dph,(_linetrack_sloc0_1_0 + 1)
0609 85EAF0    1380            mov     b,(_linetrack_sloc0_1_0 + 2)
060C E5EB      1381            mov     a,(_linetrack_sloc0_1_0 + 3)
060E 120100    1382            lcall   ___fsadd
0611 AE82      1383            mov     r6,dpl
0613 AF83      1384            mov     r7,dph
0615 A8F0      1385            mov     r0,b
0617 F9        1386            mov     r1,a
0618 E581      1387            mov     a,sp
061A 24FC      1388            add     a,#0xfc
061C F581      1389            mov     sp,a
061E D005      1390            pop     ar5
0620 D004      1391            pop     ar4
0622 D003      1392            pop     ar3
0624 D002      1393            pop     ar2
0626 C006      1394            push    ar6
0628 C007      1395            push    ar7
062A C000      1396            push    ar0
062C C001      1397            push    ar1
062E 8A82      1398            mov     dpl,r2
0630 8B83      1399            mov     dph,r3
0632 8CF0      1400            mov     b,r4
0634 ED        1401            mov     a,r5
0635 120100    1402            lcall   ___fsdiv
0638 AA82      1403            mov     r2,dpl
063A AB83      1404            mov     r3,dph
063C ACF0      1405            mov     r4,b
063E FD        1406            mov     r5,a
063F E581      1407            mov     a,sp
0641 24FC      1408            add     a,#0xfc
0643 F581      1409            mov     sp,a
0645 8A82      1410            mov     dpl,r2
0647 8B83      1411            mov     dph,r3
0649 8CF0      1412            mov     b,r4
064B ED        1413            mov     a,r5
064C 120100    1414            lcall   ___fs2schar
064F 858218    1415            mov     _pwm_Right0,dpl
0652           1416   ;        robot.c:252: if (forwardbackward) {
0652 E5F8      1417            mov     a,_linetrack_forwardbackward_1_81
0654 45F9      1418            orl     a,(_linetrack_forwardbackward_1_81 + 1)
0656 7001      1419            jnz     L006006?
0658 22        1420            ret
0659           1421   L006006?:
0659           1422   ;        robot.c:254: vleft=Volts_at_Pin(LQFP32_MUX_P2_5);
0659 75820D    1423            mov     dpl,#0x0D
065C 120100    1424            lcall   _Volts_at_Pin
065F 858248    1425            mov     _linetrack_vleft_1_82,dpl
0662 858349    1426            mov     (_linetrack_vleft_1_82 + 1),dph
0665 85F04A    1427            mov     (_linetrack_vleft_1_82 + 2),b
0668 F54B      1428            mov     (_linetrack_vleft_1_82 + 3),a
066A           1429   ;        robot.c:255: vright=Volts_at_Pin(LQFP32_MUX_P2_6);
066A 75820E    1430            mov     dpl,#0x0E
066D 120100    1431            lcall   _Volts_at_Pin
0670 858298    1432            mov     _linetrack_vright_1_82,dpl
0673 858399    1433            mov     (_linetrack_vright_1_82 + 1),dph
0676 85F09A    1434            mov     (_linetrack_vright_1_82 + 2),b
0679 F59B      1435            mov     (_linetrack_vright_1_82 + 3),a
067B           1436   ;        robot.c:258: pwm_Left1 = -1;
067B 7558FF    1437            mov     _pwm_Left1,#0xFF
067E           1438   ;        robot.c:259: pwm_Left0 = vright*vright*75/(vright*vright+vleft*vleft);
067E C098      1439            push    _linetrack_vright_1_82
0680 C099      1440            push    (_linetrack_vright_1_82 + 1)
0682 C09A      1441            push    (_linetrack_vright_1_82 + 2)
0684 C09B      1442            push    (_linetrack_vright_1_82 + 3)
0686 859882    1443            mov     dpl,_linetrack_vright_1_82
0689 859983    1444            mov     dph,(_linetrack_vright_1_82 + 1)
068C 859AF0    1445            mov     b,(_linetrack_vright_1_82 + 2)
068F E59B      1446            mov     a,(_linetrack_vright_1_82 + 3)
0691 120100    1447            lcall   ___fsmul
0694 AA82      1448            mov     r2,dpl
0696 AB83      1449            mov     r3,dph
0698 ACF0      1450            mov     r4,b
069A FD        1451            mov     r5,a
069B E581      1452            mov     a,sp
069D 24FC      1453            add     a,#0xfc
069F F581      1454            mov     sp,a
06A1 C002      1455            push    ar2
06A3 C003      1456            push    ar3
06A5 C004      1457            push    ar4
06A7 C005      1458            push    ar5
06A9 900000    1459            mov     dptr,#0x0000
06AC 75F096    1460            mov     b,#0x96
06AF 7442      1461            mov     a,#0x42
06B1 120100    1462            lcall   ___fsmul
06B4 AA82      1463            mov     r2,dpl
06B6 AB83      1464            mov     r3,dph
06B8 ACF0      1465            mov     r4,b
06BA FD        1466            mov     r5,a
06BB E581      1467            mov     a,sp
06BD 24FC      1468            add     a,#0xfc
06BF F581      1469            mov     sp,a
06C1 C002      1470            push    ar2
06C3 C003      1471            push    ar3
06C5 C004      1472            push    ar4
06C7 C005      1473            push    ar5
06C9 C098      1474            push    _linetrack_vright_1_82
06CB C099      1475            push    (_linetrack_vright_1_82 + 1)
06CD C09A      1476            push    (_linetrack_vright_1_82 + 2)
06CF C09B      1477            push    (_linetrack_vright_1_82 + 3)
06D1 859882    1478            mov     dpl,_linetrack_vright_1_82
06D4 859983    1479            mov     dph,(_linetrack_vright_1_82 + 1)
06D7 859AF0    1480            mov     b,(_linetrack_vright_1_82 + 2)
06DA E59B      1481            mov     a,(_linetrack_vright_1_82 + 3)
06DC 120100    1482            lcall   ___fsmul
06DF 8582E8    1483            mov     _linetrack_sloc0_1_0,dpl
06E2 8583E9    1484            mov     (_linetrack_sloc0_1_0 + 1),dph
06E5 85F0EA    1485            mov     (_linetrack_sloc0_1_0 + 2),b
06E8 F5EB      1486            mov     (_linetrack_sloc0_1_0 + 3),a
06EA E581      1487            mov     a,sp
06EC 24FC      1488            add     a,#0xfc
06EE F581      1489            mov     sp,a
06F0 C048      1490            push    _linetrack_vleft_1_82
06F2 C049      1491            push    (_linetrack_vleft_1_82 + 1)
06F4 C04A      1492            push    (_linetrack_vleft_1_82 + 2)
06F6 C04B      1493            push    (_linetrack_vleft_1_82 + 3)
06F8 854882    1494            mov     dpl,_linetrack_vleft_1_82
06FB 854983    1495            mov     dph,(_linetrack_vleft_1_82 + 1)
06FE 854AF0    1496            mov     b,(_linetrack_vleft_1_82 + 2)
0701 E54B      1497            mov     a,(_linetrack_vleft_1_82 + 3)
0703 120100    1498            lcall   ___fsmul
0706 AE82      1499            mov     r6,dpl
0708 AF83      1500            mov     r7,dph
070A A8F0      1501            mov     r0,b
070C F9        1502            mov     r1,a
070D E581      1503            mov     a,sp
070F 24FC      1504            add     a,#0xfc
0711 F581      1505            mov     sp,a
0713 C006      1506            push    ar6
0715 C007      1507            push    ar7
0717 C000      1508            push    ar0
0719 C001      1509            push    ar1
071B 85E882    1510            mov     dpl,_linetrack_sloc0_1_0
071E 85E983    1511            mov     dph,(_linetrack_sloc0_1_0 + 1)
0721 85EAF0    1512            mov     b,(_linetrack_sloc0_1_0 + 2)
0724 E5EB      1513            mov     a,(_linetrack_sloc0_1_0 + 3)
0726 120100    1514            lcall   ___fsadd
0729 AE82      1515            mov     r6,dpl
072B AF83      1516            mov     r7,dph
072D A8F0      1517            mov     r0,b
072F F9        1518            mov     r1,a
0730 E581      1519            mov     a,sp
0732 24FC      1520            add     a,#0xfc
0734 F581      1521            mov     sp,a
0736 D005      1522            pop     ar5
0738 D004      1523            pop     ar4
073A D003      1524            pop     ar3
073C D002      1525            pop     ar2
073E C006      1526            push    ar6
0740 C007      1527            push    ar7
0742 C000      1528            push    ar0
0744 C001      1529            push    ar1
0746 8A82      1530            mov     dpl,r2
0748 8B83      1531            mov     dph,r3
074A 8CF0      1532            mov     b,r4
074C ED        1533            mov     a,r5
074D 120100    1534            lcall   ___fsdiv
0750 AA82      1535            mov     r2,dpl
0752 AB83      1536            mov     r3,dph
0754 ACF0      1537            mov     r4,b
0756 FD        1538            mov     r5,a
0757 E581      1539            mov     a,sp
0759 24FC      1540            add     a,#0xfc
075B F581      1541            mov     sp,a
075D 8A82      1542            mov     dpl,r2
075F 8B83      1543            mov     dph,r3
0761 8CF0      1544            mov     b,r4
0763 ED        1545            mov     a,r5
0764 120100    1546            lcall   ___fs2schar
0767 858298    1547            mov     _pwm_Left0,dpl
076A           1548   ;        robot.c:260: pwm_Right0 = -1;
076A 7518FF    1549            mov     _pwm_Right0,#0xFF
076D           1550   ;        robot.c:261: pwm_Right1 = vleft*vleft*75/(vright*vright+vleft*vleft);
076D C048      1551            push    _linetrack_vleft_1_82
076F C049      1552            push    (_linetrack_vleft_1_82 + 1)
0771 C04A      1553            push    (_linetrack_vleft_1_82 + 2)
0773 C04B      1554            push    (_linetrack_vleft_1_82 + 3)
0775 854882    1555            mov     dpl,_linetrack_vleft_1_82
0778 854983    1556            mov     dph,(_linetrack_vleft_1_82 + 1)
077B 854AF0    1557            mov     b,(_linetrack_vleft_1_82 + 2)
077E E54B      1558            mov     a,(_linetrack_vleft_1_82 + 3)
0780 120100    1559            lcall   ___fsmul
0783 AA82      1560            mov     r2,dpl
0785 AB83      1561            mov     r3,dph
0787 ACF0      1562            mov     r4,b
0789 FD        1563            mov     r5,a
078A E581      1564            mov     a,sp
078C 24FC      1565            add     a,#0xfc
078E F581      1566            mov     sp,a
0790 C002      1567            push    ar2
0792 C003      1568            push    ar3
0794 C004      1569            push    ar4
0796 C005      1570            push    ar5
0798 900000    1571            mov     dptr,#0x0000
079B 75F096    1572            mov     b,#0x96
079E 7442      1573            mov     a,#0x42
07A0 120100    1574            lcall   ___fsmul
07A3 AA82      1575            mov     r2,dpl
07A5 AB83      1576            mov     r3,dph
07A7 ACF0      1577            mov     r4,b
07A9 FD        1578            mov     r5,a
07AA E581      1579            mov     a,sp
07AC 24FC      1580            add     a,#0xfc
07AE F581      1581            mov     sp,a
07B0 C002      1582            push    ar2
07B2 C003      1583            push    ar3
07B4 C004      1584            push    ar4
07B6 C005      1585            push    ar5
07B8 C098      1586            push    _linetrack_vright_1_82
07BA C099      1587            push    (_linetrack_vright_1_82 + 1)
07BC C09A      1588            push    (_linetrack_vright_1_82 + 2)
07BE C09B      1589            push    (_linetrack_vright_1_82 + 3)
07C0 859882    1590            mov     dpl,_linetrack_vright_1_82
07C3 859983    1591            mov     dph,(_linetrack_vright_1_82 + 1)
07C6 859AF0    1592            mov     b,(_linetrack_vright_1_82 + 2)
07C9 E59B      1593            mov     a,(_linetrack_vright_1_82 + 3)
07CB 120100    1594            lcall   ___fsmul
07CE 8582E8    1595            mov     _linetrack_sloc0_1_0,dpl
07D1 8583E9    1596            mov     (_linetrack_sloc0_1_0 + 1),dph
07D4 85F0EA    1597            mov     (_linetrack_sloc0_1_0 + 2),b
07D7 F5EB      1598            mov     (_linetrack_sloc0_1_0 + 3),a
07D9 E581      1599            mov     a,sp
07DB 24FC      1600            add     a,#0xfc
07DD F581      1601            mov     sp,a
07DF C048      1602            push    _linetrack_vleft_1_82
07E1 C049      1603            push    (_linetrack_vleft_1_82 + 1)
07E3 C04A      1604            push    (_linetrack_vleft_1_82 + 2)
07E5 C04B      1605            push    (_linetrack_vleft_1_82 + 3)
07E7 854882    1606            mov     dpl,_linetrack_vleft_1_82
07EA 854983    1607            mov     dph,(_linetrack_vleft_1_82 + 1)
07ED 854AF0    1608            mov     b,(_linetrack_vleft_1_82 + 2)
07F0 E54B      1609            mov     a,(_linetrack_vleft_1_82 + 3)
07F2 120100    1610            lcall   ___fsmul
07F5 AE82      1611            mov     r6,dpl
07F7 AF83      1612            mov     r7,dph
07F9 A8F0      1613            mov     r0,b
07FB F9        1614            mov     r1,a
07FC E581      1615            mov     a,sp
07FE 24FC      1616            add     a,#0xfc
0800 F581      1617            mov     sp,a
0802 C006      1618            push    ar6
0804 C007      1619            push    ar7
0806 C000      1620            push    ar0
0808 C001      1621            push    ar1
080A 85E882    1622            mov     dpl,_linetrack_sloc0_1_0
080D 85E983    1623            mov     dph,(_linetrack_sloc0_1_0 + 1)
0810 85EAF0    1624            mov     b,(_linetrack_sloc0_1_0 + 2)
0813 E5EB      1625            mov     a,(_linetrack_sloc0_1_0 + 3)
0815 120100    1626            lcall   ___fsadd
0818 AE82      1627            mov     r6,dpl
081A AF83      1628            mov     r7,dph
081C A8F0      1629            mov     r0,b
081E F9        1630            mov     r1,a
081F E581      1631            mov     a,sp
0821 24FC      1632            add     a,#0xfc
0823 F581      1633            mov     sp,a
0825 D005      1634            pop     ar5
0827 D004      1635            pop     ar4
0829 D003      1636            pop     ar3
082B D002      1637            pop     ar2
082D C006      1638            push    ar6
082F C007      1639            push    ar7
0831 C000      1640            push    ar0
0833 C001      1641            push    ar1
0835 8A82      1642            mov     dpl,r2
0837 8B83      1643            mov     dph,r3
0839 8CF0      1644            mov     b,r4
083B ED        1645            mov     a,r5
083C 120100    1646            lcall   ___fsdiv
083F AA82      1647            mov     r2,dpl
0841 AB83      1648            mov     r3,dph
0843 ACF0      1649            mov     r4,b
0845 FD        1650            mov     r5,a
0846 E581      1651            mov     a,sp
0848 24FC      1652            add     a,#0xfc
084A F581      1653            mov     sp,a
084C 8A82      1654            mov     dpl,r2
084E 8B83      1655            mov     dph,r3
0850 8CF0      1656            mov     b,r4
0852 ED        1657            mov     a,r5
0853 120100    1658            lcall   ___fs2schar
0856 8582D8    1659            mov     _pwm_Right1,dpl
0859 22        1660            ret
085A           1661   ;------------------------------------------------------------
085A           1662   ;Allocation info for local variables in function 'stopcar'
085A           1663   ;------------------------------------------------------------
085A           1664   ;------------------------------------------------------------
085A           1665   ;        robot.c:273: void stopcar(void) {
085A           1666   ;        -----------------------------------------
085A           1667   ;         function stopcar
085A           1668   ;        -----------------------------------------
085A           1669   _stopcar:
085A           1670   ;        robot.c:275: pwm_Left1 = -1;
085A 7558FF    1671            mov     _pwm_Left1,#0xFF
085D           1672   ;        robot.c:276: pwm_Right1 = -1;
085D 75D8FF    1673            mov     _pwm_Right1,#0xFF
0860           1674   ;        robot.c:277: pwm_Left0 = -1;
0860 7598FF    1675            mov     _pwm_Left0,#0xFF
0863           1676   ;        robot.c:278: pwm_Right0 = -1;
0863 7518FF    1677            mov     _pwm_Right0,#0xFF
0866 22        1678            ret
0867           1679   ;------------------------------------------------------------
0867           1680   ;Allocation info for local variables in function 'turncar'
0867           1681   ;------------------------------------------------------------
0867           1682   ;leftright                 Allocated to registers r2 r3 
0867           1683   ;vleft                     Allocated with name '_turncar_vleft_1_87'
0867           1684   ;vright                    Allocated with name '_turncar_vright_1_87'
0867           1685   ;direction                 Allocated with name '_turncar_direction_1_87'
0867           1686   ;------------------------------------------------------------
0867           1687   ;        robot.c:284: void turncar (int leftright) {
0867           1688   ;        -----------------------------------------
0867           1689   ;         function turncar
0867           1690   ;        -----------------------------------------
0867           1691   _turncar:
0867 AA82      1692            mov     r2,dpl
0869 AB83      1693            mov     r3,dph
086B           1694   ;        robot.c:291: pwm_Left0 = -1;
086B 7598FF    1695            mov     _pwm_Left0,#0xFF
086E           1696   ;        robot.c:292: pwm_Left1 = -1;
086E 7558FF    1697            mov     _pwm_Left1,#0xFF
0871           1698   ;        robot.c:293: pwm_Right0 = -1;
0871 7518FF    1699            mov     _pwm_Right0,#0xFF
0874           1700   ;        robot.c:294: pwm_Right1 = -1;
0874 75D8FF    1701            mov     _pwm_Right1,#0xFF
0877           1702   ;        robot.c:296: direction = currentstate - 1;
0877 E518      1703            mov     a,_currentstate
0879 14        1704            dec     a
087A F5D8      1705            mov     _turncar_direction_1_87,a
087C           1706   ;        robot.c:299: if (leftright == 0) {
087C EA        1707            mov     a,r2
087D 4B        1708            orl     a,r3
087E 6001      1709            jz      L008046?
0880 020100    1710            ljmp    L008012?
0883           1711   L008046?:
0883           1712   ;        robot.c:301: pwm_Right0 = 50;
0883 751832    1713            mov     _pwm_Right0,#0x32
0886           1714   ;        robot.c:304: waitms(1000);
0886 9003E8    1715            mov     dptr,#0x03E8
0889 120100    1716            lcall   _waitms
088C           1717   ;        robot.c:307: vleft= direction ? Volts_at_Pin(LQFP32_MUX_P2_5) : Volts_at_Pin(LQFP32_MUX_P2_3);
088C E5D8      1718            mov     a,_turncar_direction_1_87
088E 6001      1719            jz      L008016?
0890 75820D    1720            mov     dpl,#0x0D
0893 120100    1721            lcall   _Volts_at_Pin
0896 AC82      1722            mov     r4,dpl
0898 AD83      1723            mov     r5,dph
089A AEF0      1724            mov     r6,b
089C FF        1725            mov     r7,a
089D 8001      1726            sjmp    L008017?
089F           1727   L008016?:
089F 75820B    1728            mov     dpl,#0x0B
08A2 120100    1729            lcall   _Volts_at_Pin
08A5 AC82      1730            mov     r4,dpl
08A7 AD83      1731            mov     r5,dph
08A9 AEF0      1732            mov     r6,b
08AB FF        1733            mov     r7,a
08AC           1734   L008017?:
08AC 8C38      1735            mov     _turncar_vleft_1_87,r4
08AE 8D39      1736            mov     (_turncar_vleft_1_87 + 1),r5
08B0 8E3A      1737            mov     (_turncar_vleft_1_87 + 2),r6
08B2 8F3B      1738            mov     (_turncar_vleft_1_87 + 3),r7
08B4           1739   ;        robot.c:308: vright=direction ? Volts_at_Pin(LQFP32_MUX_P2_6) : Volts_at_Pin(LQFP32_MUX_P2_4);
08B4 E5D8      1740            mov     a,_turncar_direction_1_87
08B6 6001      1741            jz      L008018?
08B8 75820E    1742            mov     dpl,#0x0E
08BB 120100    1743            lcall   _Volts_at_Pin
08BE AC82      1744            mov     r4,dpl
08C0 AD83      1745            mov     r5,dph
08C2 AEF0      1746            mov     r6,b
08C4 FF        1747            mov     r7,a
08C5 8001      1748            sjmp    L008019?
08C7           1749   L008018?:
08C7 75820C    1750            mov     dpl,#0x0C
08CA 120100    1751            lcall   _Volts_at_Pin
08CD AC82      1752            mov     r4,dpl
08CF AD83      1753            mov     r5,dph
08D1 AEF0      1754            mov     r6,b
08D3 FF        1755            mov     r7,a
08D4           1756   L008019?:
08D4 8C88      1757            mov     _turncar_vright_1_87,r4
08D6 8D89      1758            mov     (_turncar_vright_1_87 + 1),r5
08D8 8E8A      1759            mov     (_turncar_vright_1_87 + 2),r6
08DA 8F8B      1760            mov     (_turncar_vright_1_87 + 3),r7
08DC           1761   ;        robot.c:310: while (((vleft - vright) > 0.2) || ((vleft - vright) < (-0.2))) {
08DC           1762   L008002?:
08DC C088      1763            push    _turncar_vright_1_87
08DE C089      1764            push    (_turncar_vright_1_87 + 1)
08E0 C08A      1765            push    (_turncar_vright_1_87 + 2)
08E2 C08B      1766            push    (_turncar_vright_1_87 + 3)
08E4 853882    1767            mov     dpl,_turncar_vleft_1_87
08E7 853983    1768            mov     dph,(_turncar_vleft_1_87 + 1)
08EA 853AF0    1769            mov     b,(_turncar_vleft_1_87 + 2)
08ED E53B      1770            mov     a,(_turncar_vleft_1_87 + 3)
08EF 120100    1771            lcall   ___fssub
08F2 AC82      1772            mov     r4,dpl
08F4 AD83      1773            mov     r5,dph
08F6 AEF0      1774            mov     r6,b
08F8 FF        1775            mov     r7,a
08F9 E581      1776            mov     a,sp
08FB 24FC      1777            add     a,#0xfc
08FD F581      1778            mov     sp,a
08FF 74CD      1779            mov     a,#0xCD
0901 C0E0      1780            push    acc
0903 74CC      1781            mov     a,#0xCC
0905 C0E0      1782            push    acc
0907 744C      1783            mov     a,#0x4C
0909 C0E0      1784            push    acc
090B 743E      1785            mov     a,#0x3E
090D C0E0      1786            push    acc
090F 8C82      1787            mov     dpl,r4
0911 8D83      1788            mov     dph,r5
0913 8EF0      1789            mov     b,r6
0915 EF        1790            mov     a,r7
0916 120100    1791            lcall   ___fsgt
0919 AC82      1792            mov     r4,dpl
091B E581      1793            mov     a,sp
091D 24FC      1794            add     a,#0xfc
091F F581      1795            mov     sp,a
0921 EC        1796            mov     a,r4
0922 7001      1797            jnz     L008003?
0924 C088      1798            push    _turncar_vright_1_87
0926 C089      1799            push    (_turncar_vright_1_87 + 1)
0928 C08A      1800            push    (_turncar_vright_1_87 + 2)
092A C08B      1801            push    (_turncar_vright_1_87 + 3)
092C 853882    1802            mov     dpl,_turncar_vleft_1_87
092F 853983    1803            mov     dph,(_turncar_vleft_1_87 + 1)
0932 853AF0    1804            mov     b,(_turncar_vleft_1_87 + 2)
0935 E53B      1805            mov     a,(_turncar_vleft_1_87 + 3)
0937 120100    1806            lcall   ___fssub
093A AC82      1807            mov     r4,dpl
093C AD83      1808            mov     r5,dph
093E AEF0      1809            mov     r6,b
0940 FF        1810            mov     r7,a
0941 E581      1811            mov     a,sp
0943 24FC      1812            add     a,#0xfc
0945 F581      1813            mov     sp,a
0947 74CD      1814            mov     a,#0xCD
0949 C0E0      1815            push    acc
094B 74CC      1816            mov     a,#0xCC
094D C0E0      1817            push    acc
094F 744C      1818            mov     a,#0x4C
0951 C0E0      1819            push    acc
0953 74BE      1820            mov     a,#0xBE
0955 C0E0      1821            push    acc
0957 8C82      1822            mov     dpl,r4
0959 8D83      1823            mov     dph,r5
095B 8EF0      1824            mov     b,r6
095D EF        1825            mov     a,r7
095E 120100    1826            lcall   ___fslt
0961 AC82      1827            mov     r4,dpl
0963 E581      1828            mov     a,sp
0965 24FC      1829            add     a,#0xfc
0967 F581      1830            mov     sp,a
0969 EC        1831            mov     a,r4
096A 6001      1832            jz      L008004?
096C           1833   L008003?:
096C           1834   ;        robot.c:312: vleft= direction ? Volts_at_Pin(LQFP32_MUX_P2_5) : Volts_at_Pin(LQFP32_MUX_P2_3);
096C E5D8      1835            mov     a,_turncar_direction_1_87
096E 6001      1836            jz      L008020?
0970 75820D    1837            mov     dpl,#0x0D
0973 120100    1838            lcall   _Volts_at_Pin
0976 AC82      1839            mov     r4,dpl
0978 AD83      1840            mov     r5,dph
097A AEF0      1841            mov     r6,b
097C FF        1842            mov     r7,a
097D 8001      1843            sjmp    L008021?
097F           1844   L008020?:
097F 75820B    1845            mov     dpl,#0x0B
0982 120100    1846            lcall   _Volts_at_Pin
0985 AC82      1847            mov     r4,dpl
0987 AD83      1848            mov     r5,dph
0989 AEF0      1849            mov     r6,b
098B FF        1850            mov     r7,a
098C           1851   L008021?:
098C 8C38      1852            mov     _turncar_vleft_1_87,r4
098E 8D39      1853            mov     (_turncar_vleft_1_87 + 1),r5
0990 8E3A      1854            mov     (_turncar_vleft_1_87 + 2),r6
0992 8F3B      1855            mov     (_turncar_vleft_1_87 + 3),r7
0994           1856   ;        robot.c:313: vright=direction ? Volts_at_Pin(LQFP32_MUX_P2_6) : Volts_at_Pin(LQFP32_MUX_P2_4);
0994 E5D8      1857            mov     a,_turncar_direction_1_87
0996 6001      1858            jz      L008022?
0998 75820E    1859            mov     dpl,#0x0E
099B 120100    1860            lcall   _Volts_at_Pin
099E AC82      1861            mov     r4,dpl
09A0 AD83      1862            mov     r5,dph
09A2 AEF0      1863            mov     r6,b
09A4 FF        1864            mov     r7,a
09A5 8001      1865            sjmp    L008023?
09A7           1866   L008022?:
09A7 75820C    1867            mov     dpl,#0x0C
09AA 120100    1868            lcall   _Volts_at_Pin
09AD AC82      1869            mov     r4,dpl
09AF AD83      1870            mov     r5,dph
09B1 AEF0      1871            mov     r6,b
09B3 FF        1872            mov     r7,a
09B4           1873   L008023?:
09B4 8C88      1874            mov     _turncar_vright_1_87,r4
09B6 8D89      1875            mov     (_turncar_vright_1_87 + 1),r5
09B8 8E8A      1876            mov     (_turncar_vright_1_87 + 2),r6
09BA 8F8B      1877            mov     (_turncar_vright_1_87 + 3),r7
09BC 020100    1878            ljmp    L008002?
09BF           1879   L008004?:
09BF           1880   ;        robot.c:318: pwm_Right0 = -1;           
09BF 7518FF    1881            mov     _pwm_Right0,#0xFF
09C2 22        1882            ret
09C3           1883   L008012?:
09C3           1884   ;        robot.c:322: else if (leftright == 1) {
09C3 BA0198    1885            cjne    r2,#0x01,L008053?
09C6 BB0098    1886            cjne    r3,#0x00,L008053?
09C9 8001      1887            sjmp    L008054?
09CB           1888   L008053?:
09CB 22        1889            ret
09CC           1890   L008054?:
09CC           1891   ;        robot.c:324: pwm_Left1 = 50;
09CC 755832    1892            mov     _pwm_Left1,#0x32
09CF           1893   ;        robot.c:327: waitms(1000);
09CF 9003E8    1894            mov     dptr,#0x03E8
09D2 120100    1895            lcall   _waitms
09D5           1896   ;        robot.c:330: vleft= direction ? Volts_at_Pin(LQFP32_MUX_P2_5) : Volts_at_Pin(LQFP32_MUX_P2_3);
09D5 E5D8      1897            mov     a,_turncar_direction_1_87
09D7 6001      1898            jz      L008024?
09D9 75820D    1899            mov     dpl,#0x0D
09DC 120100    1900            lcall   _Volts_at_Pin
09DF AA82      1901            mov     r2,dpl
09E1 AB83      1902            mov     r3,dph
09E3 ACF0      1903            mov     r4,b
09E5 FD        1904            mov     r5,a
09E6 8001      1905            sjmp    L008025?
09E8           1906   L008024?:
09E8 75820B    1907            mov     dpl,#0x0B
09EB 120100    1908            lcall   _Volts_at_Pin
09EE AA82      1909            mov     r2,dpl
09F0 AB83      1910            mov     r3,dph
09F2 ACF0      1911            mov     r4,b
09F4 FD        1912            mov     r5,a
09F5           1913   L008025?:
09F5 8A38      1914            mov     _turncar_vleft_1_87,r2
09F7 8B39      1915            mov     (_turncar_vleft_1_87 + 1),r3
09F9 8C3A      1916            mov     (_turncar_vleft_1_87 + 2),r4
09FB 8D3B      1917            mov     (_turncar_vleft_1_87 + 3),r5
09FD           1918   ;        robot.c:331: vright=direction ? Volts_at_Pin(LQFP32_MUX_P2_6) : Volts_at_Pin(LQFP32_MUX_P2_4);
09FD E5D8      1919            mov     a,_turncar_direction_1_87
09FF 6001      1920            jz      L008026?
0A01 75820E    1921            mov     dpl,#0x0E
0A04 120100    1922            lcall   _Volts_at_Pin
0A07 AA82      1923            mov     r2,dpl
0A09 AB83      1924            mov     r3,dph
0A0B ACF0      1925            mov     r4,b
0A0D FD        1926            mov     r5,a
0A0E 8001      1927            sjmp    L008027?
0A10           1928   L008026?:
0A10 75820C    1929            mov     dpl,#0x0C
0A13 120100    1930            lcall   _Volts_at_Pin
0A16 AA82      1931            mov     r2,dpl
0A18 AB83      1932            mov     r3,dph
0A1A ACF0      1933            mov     r4,b
0A1C FD        1934            mov     r5,a
0A1D           1935   L008027?:
0A1D 8A88      1936            mov     _turncar_vright_1_87,r2
0A1F 8B89      1937            mov     (_turncar_vright_1_87 + 1),r3
0A21 8C8A      1938            mov     (_turncar_vright_1_87 + 2),r4
0A23 8D8B      1939            mov     (_turncar_vright_1_87 + 3),r5
0A25           1940   ;        robot.c:333: while (((vleft - vright) > 0.2) || ((vleft - vright) < (-0.2))) {
0A25           1941   L008006?:
0A25 C088      1942            push    _turncar_vright_1_87
0A27 C089      1943            push    (_turncar_vright_1_87 + 1)
0A29 C08A      1944            push    (_turncar_vright_1_87 + 2)
0A2B C08B      1945            push    (_turncar_vright_1_87 + 3)
0A2D 853882    1946            mov     dpl,_turncar_vleft_1_87
0A30 853983    1947            mov     dph,(_turncar_vleft_1_87 + 1)
0A33 853AF0    1948            mov     b,(_turncar_vleft_1_87 + 2)
0A36 E53B      1949            mov     a,(_turncar_vleft_1_87 + 3)
0A38 120100    1950            lcall   ___fssub
0A3B AA82      1951            mov     r2,dpl
0A3D AB83      1952            mov     r3,dph
0A3F ACF0      1953            mov     r4,b
0A41 FD        1954            mov     r5,a
0A42 E581      1955            mov     a,sp
0A44 24FC      1956            add     a,#0xfc
0A46 F581      1957            mov     sp,a
0A48 74CD      1958            mov     a,#0xCD
0A4A C0E0      1959            push    acc
0A4C 74CC      1960            mov     a,#0xCC
0A4E C0E0      1961            push    acc
0A50 744C      1962            mov     a,#0x4C
0A52 C0E0      1963            push    acc
0A54 743E      1964            mov     a,#0x3E
0A56 C0E0      1965            push    acc
0A58 8A82      1966            mov     dpl,r2
0A5A 8B83      1967            mov     dph,r3
0A5C 8CF0      1968            mov     b,r4
0A5E ED        1969            mov     a,r5
0A5F 120100    1970            lcall   ___fsgt
0A62 AA82      1971            mov     r2,dpl
0A64 E581      1972            mov     a,sp
0A66 24FC      1973            add     a,#0xfc
0A68 F581      1974            mov     sp,a
0A6A EA        1975            mov     a,r2
0A6B 7001      1976            jnz     L008007?
0A6D C088      1977            push    _turncar_vright_1_87
0A6F C089      1978            push    (_turncar_vright_1_87 + 1)
0A71 C08A      1979            push    (_turncar_vright_1_87 + 2)
0A73 C08B      1980            push    (_turncar_vright_1_87 + 3)
0A75 853882    1981            mov     dpl,_turncar_vleft_1_87
0A78 853983    1982            mov     dph,(_turncar_vleft_1_87 + 1)
0A7B 853AF0    1983            mov     b,(_turncar_vleft_1_87 + 2)
0A7E E53B      1984            mov     a,(_turncar_vleft_1_87 + 3)
0A80 120100    1985            lcall   ___fssub
0A83 AA82      1986            mov     r2,dpl
0A85 AB83      1987            mov     r3,dph
0A87 ACF0      1988            mov     r4,b
0A89 FD        1989            mov     r5,a
0A8A E581      1990            mov     a,sp
0A8C 24FC      1991            add     a,#0xfc
0A8E F581      1992            mov     sp,a
0A90 74CD      1993            mov     a,#0xCD
0A92 C0E0      1994            push    acc
0A94 74CC      1995            mov     a,#0xCC
0A96 C0E0      1996            push    acc
0A98 744C      1997            mov     a,#0x4C
0A9A C0E0      1998            push    acc
0A9C 74BE      1999            mov     a,#0xBE
0A9E C0E0      2000            push    acc
0AA0 8A82      2001            mov     dpl,r2
0AA2 8B83      2002            mov     dph,r3
0AA4 8CF0      2003            mov     b,r4
0AA6 ED        2004            mov     a,r5
0AA7 120100    2005            lcall   ___fslt
0AAA AA82      2006            mov     r2,dpl
0AAC E581      2007            mov     a,sp
0AAE 24FC      2008            add     a,#0xfc
0AB0 F581      2009            mov     sp,a
0AB2 EA        2010            mov     a,r2
0AB3 6001      2011            jz      L008008?
0AB5           2012   L008007?:
0AB5           2013   ;        robot.c:335: vleft= direction ? Volts_at_Pin(LQFP32_MUX_P2_5) : Volts_at_Pin(LQFP32_MUX_P2_3);
0AB5 E5D8      2014            mov     a,_turncar_direction_1_87
0AB7 6001      2015            jz      L008028?
0AB9 75820D    2016            mov     dpl,#0x0D
0ABC 120100    2017            lcall   _Volts_at_Pin
0ABF AA82      2018            mov     r2,dpl
0AC1 AB83      2019            mov     r3,dph
0AC3 ACF0      2020            mov     r4,b
0AC5 FD        2021            mov     r5,a
0AC6 8001      2022            sjmp    L008029?
0AC8           2023   L008028?:
0AC8 75820B    2024            mov     dpl,#0x0B
0ACB 120100    2025            lcall   _Volts_at_Pin
0ACE AA82      2026            mov     r2,dpl
0AD0 AB83      2027            mov     r3,dph
0AD2 ACF0      2028            mov     r4,b
0AD4 FD        2029            mov     r5,a
0AD5           2030   L008029?:
0AD5 8A38      2031            mov     _turncar_vleft_1_87,r2
0AD7 8B39      2032            mov     (_turncar_vleft_1_87 + 1),r3
0AD9 8C3A      2033            mov     (_turncar_vleft_1_87 + 2),r4
0ADB 8D3B      2034            mov     (_turncar_vleft_1_87 + 3),r5
0ADD           2035   ;        robot.c:336: vright=direction ? Volts_at_Pin(LQFP32_MUX_P2_6) : Volts_at_Pin(LQFP32_MUX_P2_4);
0ADD E5D8      2036            mov     a,_turncar_direction_1_87
0ADF 6001      2037            jz      L008030?
0AE1 75820E    2038            mov     dpl,#0x0E
0AE4 120100    2039            lcall   _Volts_at_Pin
0AE7 AA82      2040            mov     r2,dpl
0AE9 AB83      2041            mov     r3,dph
0AEB ACF0      2042            mov     r4,b
0AED FD        2043            mov     r5,a
0AEE 8001      2044            sjmp    L008031?
0AF0           2045   L008030?:
0AF0 75820C    2046            mov     dpl,#0x0C
0AF3 120100    2047            lcall   _Volts_at_Pin
0AF6 AA82      2048            mov     r2,dpl
0AF8 AB83      2049            mov     r3,dph
0AFA ACF0      2050            mov     r4,b
0AFC FD        2051            mov     r5,a
0AFD           2052   L008031?:
0AFD 8A88      2053            mov     _turncar_vright_1_87,r2
0AFF 8B89      2054            mov     (_turncar_vright_1_87 + 1),r3
0B01 8C8A      2055            mov     (_turncar_vright_1_87 + 2),r4
0B03 8D8B      2056            mov     (_turncar_vright_1_87 + 3),r5
0B05 020100    2057            ljmp    L008006?
0B08           2058   L008008?:
0B08           2059   ;        robot.c:341: pwm_Left1 = -1; 
0B08 7558FF    2060            mov     _pwm_Left1,#0xFF
0B0B 22        2061            ret
0B0C           2062   ;------------------------------------------------------------
0B0C           2063   ;Allocation info for local variables in function 'uturn'
0B0C           2064   ;------------------------------------------------------------
0B0C           2065   ;vleft                     Allocated with name '_uturn_vleft_1_93'
0B0C           2066   ;vright                    Allocated with name '_uturn_vright_1_93'
0B0C           2067   ;------------------------------------------------------------
0B0C           2068   ;        robot.c:349: void uturn(void) {
0B0C           2069   ;        -----------------------------------------
0B0C           2070   ;         function uturn
0B0C           2071   ;        -----------------------------------------
0B0C           2072   _uturn:
0B0C           2073   ;        robot.c:353: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0B0C 75820B    2074            mov     dpl,#0x0B
0B0F 120100    2075            lcall   _Volts_at_Pin
0B12 858228    2076            mov     _uturn_vleft_1_93,dpl
0B15 858329    2077            mov     (_uturn_vleft_1_93 + 1),dph
0B18 85F02A    2078            mov     (_uturn_vleft_1_93 + 2),b
0B1B F52B      2079            mov     (_uturn_vleft_1_93 + 3),a
0B1D           2080   ;        robot.c:354: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0B1D 75820C    2081            mov     dpl,#0x0C
0B20 120100    2082            lcall   _Volts_at_Pin
0B23 858278    2083            mov     _uturn_vright_1_93,dpl
0B26 858379    2084            mov     (_uturn_vright_1_93 + 1),dph
0B29 85F07A    2085            mov     (_uturn_vright_1_93 + 2),b
0B2C F57B      2086            mov     (_uturn_vright_1_93 + 3),a
0B2E           2087   ;        robot.c:357: pwm_Left0 = -1;
0B2E 7598FF    2088            mov     _pwm_Left0,#0xFF
0B31           2089   ;        robot.c:358: pwm_Left1 = 50;
0B31 755832    2090            mov     _pwm_Left1,#0x32
0B34           2091   ;        robot.c:359: pwm_Right0 = -1;
0B34 7518FF    2092            mov     _pwm_Right0,#0xFF
0B37           2093   ;        robot.c:360: pwm_Right1 = 50;
0B37 75D832    2094            mov     _pwm_Right1,#0x32
0B3A           2095   ;        robot.c:363: waitms(4000);
0B3A 900FA0    2096            mov     dptr,#0x0FA0
0B3D 120100    2097            lcall   _waitms
0B40           2098   ;        robot.c:366: while (((vleft - vright) > 0.2) || ((vleft - vright) < (-0.2))) {
0B40           2099   L009002?:
0B40 C078      2100            push    _uturn_vright_1_93
0B42 C079      2101            push    (_uturn_vright_1_93 + 1)
0B44 C07A      2102            push    (_uturn_vright_1_93 + 2)
0B46 C07B      2103            push    (_uturn_vright_1_93 + 3)
0B48 852882    2104            mov     dpl,_uturn_vleft_1_93
0B4B 852983    2105            mov     dph,(_uturn_vleft_1_93 + 1)
0B4E 852AF0    2106            mov     b,(_uturn_vleft_1_93 + 2)
0B51 E52B      2107            mov     a,(_uturn_vleft_1_93 + 3)
0B53 120100    2108            lcall   ___fssub
0B56 AA82      2109            mov     r2,dpl
0B58 AB83      2110            mov     r3,dph
0B5A ACF0      2111            mov     r4,b
0B5C FD        2112            mov     r5,a
0B5D E581      2113            mov     a,sp
0B5F 24FC      2114            add     a,#0xfc
0B61 F581      2115            mov     sp,a
0B63 74CD      2116            mov     a,#0xCD
0B65 C0E0      2117            push    acc
0B67 74CC      2118            mov     a,#0xCC
0B69 C0E0      2119            push    acc
0B6B 744C      2120            mov     a,#0x4C
0B6D C0E0      2121            push    acc
0B6F 743E      2122            mov     a,#0x3E
0B71 C0E0      2123            push    acc
0B73 8A82      2124            mov     dpl,r2
0B75 8B83      2125            mov     dph,r3
0B77 8CF0      2126            mov     b,r4
0B79 ED        2127            mov     a,r5
0B7A 120100    2128            lcall   ___fsgt
0B7D AA82      2129            mov     r2,dpl
0B7F E581      2130            mov     a,sp
0B81 24FC      2131            add     a,#0xfc
0B83 F581      2132            mov     sp,a
0B85 EA        2133            mov     a,r2
0B86 7001      2134            jnz     L009003?
0B88 C078      2135            push    _uturn_vright_1_93
0B8A C079      2136            push    (_uturn_vright_1_93 + 1)
0B8C C07A      2137            push    (_uturn_vright_1_93 + 2)
0B8E C07B      2138            push    (_uturn_vright_1_93 + 3)
0B90 852882    2139            mov     dpl,_uturn_vleft_1_93
0B93 852983    2140            mov     dph,(_uturn_vleft_1_93 + 1)
0B96 852AF0    2141            mov     b,(_uturn_vleft_1_93 + 2)
0B99 E52B      2142            mov     a,(_uturn_vleft_1_93 + 3)
0B9B 120100    2143            lcall   ___fssub
0B9E AA82      2144            mov     r2,dpl
0BA0 AB83      2145            mov     r3,dph
0BA2 ACF0      2146            mov     r4,b
0BA4 FD        2147            mov     r5,a
0BA5 E581      2148            mov     a,sp
0BA7 24FC      2149            add     a,#0xfc
0BA9 F581      2150            mov     sp,a
0BAB 74CD      2151            mov     a,#0xCD
0BAD C0E0      2152            push    acc
0BAF 74CC      2153            mov     a,#0xCC
0BB1 C0E0      2154            push    acc
0BB3 744C      2155            mov     a,#0x4C
0BB5 C0E0      2156            push    acc
0BB7 74BE      2157            mov     a,#0xBE
0BB9 C0E0      2158            push    acc
0BBB 8A82      2159            mov     dpl,r2
0BBD 8B83      2160            mov     dph,r3
0BBF 8CF0      2161            mov     b,r4
0BC1 ED        2162            mov     a,r5
0BC2 120100    2163            lcall   ___fslt
0BC5 AA82      2164            mov     r2,dpl
0BC7 E581      2165            mov     a,sp
0BC9 24FC      2166            add     a,#0xfc
0BCB F581      2167            mov     sp,a
0BCD EA        2168            mov     a,r2
0BCE 6001      2169            jz      L009005?
0BD0           2170   L009003?:
0BD0           2171   ;        robot.c:368: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0BD0 75820B    2172            mov     dpl,#0x0B
0BD3 120100    2173            lcall   _Volts_at_Pin
0BD6 858228    2174            mov     _uturn_vleft_1_93,dpl
0BD9 858329    2175            mov     (_uturn_vleft_1_93 + 1),dph
0BDC 85F02A    2176            mov     (_uturn_vleft_1_93 + 2),b
0BDF F52B      2177            mov     (_uturn_vleft_1_93 + 3),a
0BE1           2178   ;        robot.c:369: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0BE1 75820C    2179            mov     dpl,#0x0C
0BE4 120100    2180            lcall   _Volts_at_Pin
0BE7 858278    2181            mov     _uturn_vright_1_93,dpl
0BEA 858379    2182            mov     (_uturn_vright_1_93 + 1),dph
0BED 85F07A    2183            mov     (_uturn_vright_1_93 + 2),b
0BF0 F57B      2184            mov     (_uturn_vright_1_93 + 3),a
0BF2 020100    2185            ljmp    L009002?
0BF5           2186   L009005?:
0BF5 22        2187            ret
0BF6           2188   ;------------------------------------------------------------
0BF6           2189   ;Allocation info for local variables in function 'movecar'
0BF6           2190   ;------------------------------------------------------------
0BF6           2191   ;power                     Allocated with name '_movecar_PARM_2'
0BF6           2192   ;forback                   Allocated to registers r2 r3 
0BF6           2193   ;------------------------------------------------------------
0BF6           2194   ;        robot.c:376: void movecar (int forback, int power) {
0BF6           2195   ;        -----------------------------------------
0BF6           2196   ;         function movecar
0BF6           2197   ;        -----------------------------------------
0BF6           2198   _movecar:
0BF6 AA82      2199            mov     r2,dpl
0BF8 AB83      2200            mov     r3,dph
0BFA           2201   ;        robot.c:378: if (forback == 1) {
0BFA BA0198    2202            cjne    r2,#0x01,L010004?
0BFD BB0098    2203            cjne    r3,#0x00,L010004?
0C00           2204   ;        robot.c:379: pwm_Left1 = power;
0C00 AC58      2205            mov     r4,_movecar_PARM_2
0C02 8C58      2206            mov     _pwm_Left1,r4
0C04           2207   ;        robot.c:380: pwm_Left0 = -1;
0C04 7598FF    2208            mov     _pwm_Left0,#0xFF
0C07           2209   ;        robot.c:381: pwm_Right0 = power;
0C07 8C18      2210            mov     _pwm_Right0,r4
0C09           2211   ;        robot.c:382: pwm_Right1 = -1;
0C09 75D8FF    2212            mov     _pwm_Right1,#0xFF
0C0C 22        2213            ret
0C0D           2214   L010004?:
0C0D           2215   ;        robot.c:384: else if (forback == 2) {
0C0D BA02D8    2216            cjne    r2,#0x02,L010006?
0C10 BB00D8    2217            cjne    r3,#0x00,L010006?
0C13           2218   ;        robot.c:385: pwm_Left0 = power;
0C13 AA58      2219            mov     r2,_movecar_PARM_2
0C15 8A98      2220            mov     _pwm_Left0,r2
0C17           2221   ;        robot.c:386: pwm_Left1 = -1;
0C17 7558FF    2222            mov     _pwm_Left1,#0xFF
0C1A           2223   ;        robot.c:387: pwm_Right1 = power;
0C1A 8AD8      2224            mov     _pwm_Right1,r2
0C1C           2225   ;        robot.c:388: pwm_Right0 = -1;
0C1C 7518FF    2226            mov     _pwm_Right0,#0xFF
0C1F           2227   L010006?:
0C1F 22        2228            ret
0C20           2229            rseg R_CSEG
0C20           2230   
0000           2231            rseg R_XINIT
0000           2232   
0000           2233            rseg R_CONST
0000           2234   __str_0:
0000 1B        2235            db 0x1B
0001 5B324A    2236            db '[2J'
0004 00        2237            db 0x00
0005           2238   __str_1:
0005 66726F6E  2239            db 'frontL %f frontR %f backL %f backR %f'
     744C2025
     66206672
     6F6E7452
     20256620
     6261636B
     4C202566
     20626163
     6B522025
     66
002A 0D        2240            db 0x0D
002B 00        2241            db 0x00
002C           2242   __str_2:
002C 0A        2243            db 0x0A
002D 494E5445  2244            db 'INTERSECTION'
     52534543
     54494F4E
0039 0A        2245            db 0x0A
003A 00        2246            db 0x00
003B           2247   
002E           2248            CSEG
002E           2249   
002E           2250   end
