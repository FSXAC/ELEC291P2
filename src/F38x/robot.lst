0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Tue Apr 04 01:07:23 2017
0000              5   ;--------------------------------------------------------
                  5   $name robot
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _Timer2_ISR
0000             28            public _main
0000             29            public _currentstate
0000             30            public _currentcmd
0000             31            public _direction
0000             32            public _pwm_Right1
0000             33            public _pwm_Right0
0000             34            public _pwm_Left1
0000             35            public _pwm_Left0
0000             36            public _pwm_both
0000             37            public _mode
0000             38            public _pwm_count
0000             39            public _readData
0000             40            public _linetrack
0000             41            public _stopcar
0000             42            public _turncar
0000             43            public _uturn
0000             44   ;--------------------------------------------------------
0000             45   ; Special Function Registers
0000             46   ;--------------------------------------------------------
0000             47   _P0             DATA 0x80
0000             48   _SP             DATA 0x81
0000             49   _DPL            DATA 0x82
0000             50   _DPH            DATA 0x83
0000             51   _EMI0TC         DATA 0x84
0000             52   _EMI0CF         DATA 0x85
0000             53   _OSCLCN         DATA 0x86
0000             54   _PCON           DATA 0x87
0000             55   _TCON           DATA 0x88
0000             56   _TMOD           DATA 0x89
0000             57   _TL0            DATA 0x8a
0000             58   _TL1            DATA 0x8b
0000             59   _TH0            DATA 0x8c
0000             60   _TH1            DATA 0x8d
0000             61   _CKCON          DATA 0x8e
0000             62   _PSCTL          DATA 0x8f
0000             63   _P1             DATA 0x90
0000             64   _TMR3CN         DATA 0x91
0000             65   _TMR4CN         DATA 0x91
0000             66   _TMR3RLL        DATA 0x92
0000             67   _TMR4RLL        DATA 0x92
0000             68   _TMR3RLH        DATA 0x93
0000             69   _TMR4RLH        DATA 0x93
0000             70   _TMR3L          DATA 0x94
0000             71   _TMR4L          DATA 0x94
0000             72   _TMR3H          DATA 0x95
0000             73   _TMR4H          DATA 0x95
0000             74   _USB0ADR        DATA 0x96
0000             75   _USB0DAT        DATA 0x97
0000             76   _SCON           DATA 0x98
0000             77   _SCON0          DATA 0x98
0000             78   _SBUF           DATA 0x99
0000             79   _SBUF0          DATA 0x99
0000             80   _CPT1CN         DATA 0x9a
0000             81   _CPT0CN         DATA 0x9b
0000             82   _CPT1MD         DATA 0x9c
0000             83   _CPT0MD         DATA 0x9d
0000             84   _CPT1MX         DATA 0x9e
0000             85   _CPT0MX         DATA 0x9f
0000             86   _P2             DATA 0xa0
0000             87   _SPI0CFG        DATA 0xa1
0000             88   _SPI0CKR        DATA 0xa2
0000             89   _SPI0DAT        DATA 0xa3
0000             90   _P0MDOUT        DATA 0xa4
0000             91   _P1MDOUT        DATA 0xa5
0000             92   _P2MDOUT        DATA 0xa6
0000             93   _P3MDOUT        DATA 0xa7
0000             94   _IE             DATA 0xa8
0000             95   _CLKSEL         DATA 0xa9
0000             96   _EMI0CN         DATA 0xaa
0000             97   __XPAGE         DATA 0xaa
0000             98   _SBCON1         DATA 0xac
0000             99   _P4MDOUT        DATA 0xae
0000            100   _PFE0CN         DATA 0xaf
0000            101   _P3             DATA 0xb0
0000            102   _OSCXCN         DATA 0xb1
0000            103   _OSCICN         DATA 0xb2
0000            104   _OSCICL         DATA 0xb3
0000            105   _SBRLL1         DATA 0xb4
0000            106   _SBRLH1         DATA 0xb5
0000            107   _FLSCL          DATA 0xb6
0000            108   _FLKEY          DATA 0xb7
0000            109   _IP             DATA 0xb8
0000            110   _CLKMUL         DATA 0xb9
0000            111   _SMBTC          DATA 0xb9
0000            112   _AMX0N          DATA 0xba
0000            113   _AMX0P          DATA 0xbb
0000            114   _ADC0CF         DATA 0xbc
0000            115   _ADC0L          DATA 0xbd
0000            116   _ADC0H          DATA 0xbe
0000            117   _SFRPAGE        DATA 0xbf
0000            118   _SMB0CN         DATA 0xc0
0000            119   _SMB1CN         DATA 0xc0
0000            120   _SMB0CF         DATA 0xc1
0000            121   _SMB1CF         DATA 0xc1
0000            122   _SMB0DAT        DATA 0xc2
0000            123   _SMB1DAT        DATA 0xc2
0000            124   _ADC0GTL        DATA 0xc3
0000            125   _ADC0GTH        DATA 0xc4
0000            126   _ADC0LTL        DATA 0xc5
0000            127   _ADC0LTH        DATA 0xc6
0000            128   _P4             DATA 0xc7
0000            129   _TMR2CN         DATA 0xc8
0000            130   _TMR5CN         DATA 0xc8
0000            131   _REG01CN        DATA 0xc9
0000            132   _TMR2RLL        DATA 0xca
0000            133   _TMR5RLL        DATA 0xca
0000            134   _TMR2RLH        DATA 0xcb
0000            135   _TMR5RLH        DATA 0xcb
0000            136   _TMR2L          DATA 0xcc
0000            137   _TMR5L          DATA 0xcc
0000            138   _TMR2H          DATA 0xcd
0000            139   _TMR5H          DATA 0xcd
0000            140   _SMB0ADM        DATA 0xce
0000            141   _SMB1ADM        DATA 0xce
0000            142   _SMB0ADR        DATA 0xcf
0000            143   _SMB1ADR        DATA 0xcf
0000            144   _PSW            DATA 0xd0
0000            145   _REF0CN         DATA 0xd1
0000            146   _SCON1          DATA 0xd2
0000            147   _SBUF1          DATA 0xd3
0000            148   _P0SKIP         DATA 0xd4
0000            149   _P1SKIP         DATA 0xd5
0000            150   _P2SKIP         DATA 0xd6
0000            151   _USB0XCN        DATA 0xd7
0000            152   _PCA0CN         DATA 0xd8
0000            153   _PCA0MD         DATA 0xd9
0000            154   _PCA0CPM0       DATA 0xda
0000            155   _PCA0CPM1       DATA 0xdb
0000            156   _PCA0CPM2       DATA 0xdc
0000            157   _PCA0CPM3       DATA 0xdd
0000            158   _PCA0CPM4       DATA 0xde
0000            159   _P3SKIP         DATA 0xdf
0000            160   _ACC            DATA 0xe0
0000            161   _XBR0           DATA 0xe1
0000            162   _XBR1           DATA 0xe2
0000            163   _XBR2           DATA 0xe3
0000            164   _IT01CF         DATA 0xe4
0000            165   _CKCON1         DATA 0xe4
0000            166   _SMOD1          DATA 0xe5
0000            167   _EIE1           DATA 0xe6
0000            168   _EIE2           DATA 0xe7
0000            169   _ADC0CN         DATA 0xe8
0000            170   _PCA0CPL1       DATA 0xe9
0000            171   _PCA0CPH1       DATA 0xea
0000            172   _PCA0CPL2       DATA 0xeb
0000            173   _PCA0CPH2       DATA 0xec
0000            174   _PCA0CPL3       DATA 0xed
0000            175   _PCA0CPH3       DATA 0xee
0000            176   _RSTSRC         DATA 0xef
0000            177   _B              DATA 0xf0
0000            178   _P0MDIN         DATA 0xf1
0000            179   _P1MDIN         DATA 0xf2
0000            180   _P2MDIN         DATA 0xf3
0000            181   _P3MDIN         DATA 0xf4
0000            182   _P4MDIN         DATA 0xf5
0000            183   _EIP1           DATA 0xf6
0000            184   _EIP2           DATA 0xf7
0000            185   _SPI0CN         DATA 0xf8
0000            186   _PCA0L          DATA 0xf9
0000            187   _PCA0H          DATA 0xfa
0000            188   _PCA0CPL0       DATA 0xfb
0000            189   _PCA0CPH0       DATA 0xfc
0000            190   _PCA0CPL4       DATA 0xfd
0000            191   _PCA0CPH4       DATA 0xfe
0000            192   _VDM0CN         DATA 0xff
0000            193   _DPTR           DATA 0x8382
0000            194   _TMR2RL         DATA 0xcbca
0000            195   _TMR3RL         DATA 0x9392
0000            196   _TMR4RL         DATA 0x9392
0000            197   _TMR5RL         DATA 0xcbca
0000            198   _TMR2           DATA 0xcdcc
0000            199   _TMR3           DATA 0x9594
0000            200   _TMR4           DATA 0x9594
0000            201   _TMR5           DATA 0xcdcc
0000            202   _SBRL1          DATA 0xb5b4
0000            203   _ADC0           DATA 0xbebd
0000            204   _ADC0GT         DATA 0xc4c3
0000            205   _ADC0LT         DATA 0xc6c5
0000            206   _PCA0           DATA 0xfaf9
0000            207   _PCA0CP1        DATA 0xeae9
0000            208   _PCA0CP2        DATA 0xeceb
0000            209   _PCA0CP3        DATA 0xeeed
0000            210   _PCA0CP0        DATA 0xfcfb
0000            211   _PCA0CP4        DATA 0xfefd
0000            212   ;--------------------------------------------------------
0000            213   ; special function bits
0000            214   ;--------------------------------------------------------
0000            215   _P0_0           BIT 0x80
0000            216   _P0_1           BIT 0x81
0000            217   _P0_2           BIT 0x82
0000            218   _P0_3           BIT 0x83
0000            219   _P0_4           BIT 0x84
0000            220   _P0_5           BIT 0x85
0000            221   _P0_6           BIT 0x86
0000            222   _P0_7           BIT 0x87
0000            223   _TF1            BIT 0x8f
0000            224   _TR1            BIT 0x8e
0000            225   _TF0            BIT 0x8d
0000            226   _TR0            BIT 0x8c
0000            227   _IE1            BIT 0x8b
0000            228   _IT1            BIT 0x8a
0000            229   _IE0            BIT 0x89
0000            230   _IT0            BIT 0x88
0000            231   _P1_0           BIT 0x90
0000            232   _P1_1           BIT 0x91
0000            233   _P1_2           BIT 0x92
0000            234   _P1_3           BIT 0x93
0000            235   _P1_4           BIT 0x94
0000            236   _P1_5           BIT 0x95
0000            237   _P1_6           BIT 0x96
0000            238   _P1_7           BIT 0x97
0000            239   _S0MODE         BIT 0x9f
0000            240   _SCON0_6        BIT 0x9e
0000            241   _MCE0           BIT 0x9d
0000            242   _REN0           BIT 0x9c
0000            243   _TB80           BIT 0x9b
0000            244   _RB80           BIT 0x9a
0000            245   _TI0            BIT 0x99
0000            246   _RI0            BIT 0x98
0000            247   _SCON_6         BIT 0x9e
0000            248   _MCE            BIT 0x9d
0000            249   _REN            BIT 0x9c
0000            250   _TB8            BIT 0x9b
0000            251   _RB8            BIT 0x9a
0000            252   _TI             BIT 0x99
0000            253   _RI             BIT 0x98
0000            254   _P2_0           BIT 0xa0
0000            255   _P2_1           BIT 0xa1
0000            256   _P2_2           BIT 0xa2
0000            257   _P2_3           BIT 0xa3
0000            258   _P2_4           BIT 0xa4
0000            259   _P2_5           BIT 0xa5
0000            260   _P2_6           BIT 0xa6
0000            261   _P2_7           BIT 0xa7
0000            262   _EA             BIT 0xaf
0000            263   _ESPI0          BIT 0xae
0000            264   _ET2            BIT 0xad
0000            265   _ES0            BIT 0xac
0000            266   _ET1            BIT 0xab
0000            267   _EX1            BIT 0xaa
0000            268   _ET0            BIT 0xa9
0000            269   _EX0            BIT 0xa8
0000            270   _P3_0           BIT 0xb0
0000            271   _P3_1           BIT 0xb1
0000            272   _P3_2           BIT 0xb2
0000            273   _P3_3           BIT 0xb3
0000            274   _P3_4           BIT 0xb4
0000            275   _P3_5           BIT 0xb5
0000            276   _P3_6           BIT 0xb6
0000            277   _P3_7           BIT 0xb7
0000            278   _IP_7           BIT 0xbf
0000            279   _PSPI0          BIT 0xbe
0000            280   _PT2            BIT 0xbd
0000            281   _PS0            BIT 0xbc
0000            282   _PT1            BIT 0xbb
0000            283   _PX1            BIT 0xba
0000            284   _PT0            BIT 0xb9
0000            285   _PX0            BIT 0xb8
0000            286   _MASTER0        BIT 0xc7
0000            287   _TXMODE0        BIT 0xc6
0000            288   _STA0           BIT 0xc5
0000            289   _STO0           BIT 0xc4
0000            290   _ACKRQ0         BIT 0xc3
0000            291   _ARBLOST0       BIT 0xc2
0000            292   _ACK0           BIT 0xc1
0000            293   _SI0            BIT 0xc0
0000            294   _MASTER1        BIT 0xc7
0000            295   _TXMODE1        BIT 0xc6
0000            296   _STA1           BIT 0xc5
0000            297   _STO1           BIT 0xc4
0000            298   _ACKRQ1         BIT 0xc3
0000            299   _ARBLOST1       BIT 0xc2
0000            300   _ACK1           BIT 0xc1
0000            301   _SI1            BIT 0xc0
0000            302   _TF2            BIT 0xcf
0000            303   _TF2H           BIT 0xcf
0000            304   _TF2L           BIT 0xce
0000            305   _TF2LEN         BIT 0xcd
0000            306   _TF2CEN         BIT 0xcc
0000            307   _T2SPLIT        BIT 0xcb
0000            308   _TR2            BIT 0xca
0000            309   _T2CSS          BIT 0xc9
0000            310   _T2XCLK         BIT 0xc8
0000            311   _TF5H           BIT 0xcf
0000            312   _TF5L           BIT 0xce
0000            313   _TF5LEN         BIT 0xcd
0000            314   _TMR5CN_4       BIT 0xcc
0000            315   _T5SPLIT        BIT 0xcb
0000            316   _TR5            BIT 0xca
0000            317   _TMR5CN_1       BIT 0xc9
0000            318   _T5XCLK         BIT 0xc8
0000            319   _CY             BIT 0xd7
0000            320   _AC             BIT 0xd6
0000            321   _F0             BIT 0xd5
0000            322   _RS1            BIT 0xd4
0000            323   _RS0            BIT 0xd3
0000            324   _OV             BIT 0xd2
0000            325   _F1             BIT 0xd1
0000            326   _PARITY         BIT 0xd0
0000            327   _CF             BIT 0xdf
0000            328   _CR             BIT 0xde
0000            329   _PCA0CN_5       BIT 0xde
0000            330   _CCF4           BIT 0xdc
0000            331   _CCF3           BIT 0xdb
0000            332   _CCF2           BIT 0xda
0000            333   _CCF1           BIT 0xd9
0000            334   _CCF0           BIT 0xd8
0000            335   _ACC_7          BIT 0xe7
0000            336   _ACC_6          BIT 0xe6
0000            337   _ACC_5          BIT 0xe5
0000            338   _ACC_4          BIT 0xe4
0000            339   _ACC_3          BIT 0xe3
0000            340   _ACC_2          BIT 0xe2
0000            341   _ACC_1          BIT 0xe1
0000            342   _ACC_0          BIT 0xe0
0000            343   _AD0EN          BIT 0xef
0000            344   _AD0TM          BIT 0xee
0000            345   _AD0INT         BIT 0xed
0000            346   _AD0BUSY        BIT 0xec
0000            347   _AD0WINT        BIT 0xeb
0000            348   _AD0CM2         BIT 0xea
0000            349   _AD0CM1         BIT 0xe9
0000            350   _AD0CM0         BIT 0xe8
0000            351   _B_7            BIT 0xf7
0000            352   _B_6            BIT 0xf6
0000            353   _B_5            BIT 0xf5
0000            354   _B_4            BIT 0xf4
0000            355   _B_3            BIT 0xf3
0000            356   _B_2            BIT 0xf2
0000            357   _B_1            BIT 0xf1
0000            358   _B_0            BIT 0xf0
0000            359   _SPIF           BIT 0xff
0000            360   _WCOL           BIT 0xfe
0000            361   _MODF           BIT 0xfd
0000            362   _RXOVRN         BIT 0xfc
0000            363   _NSSMD1         BIT 0xfb
0000            364   _NSSMD0         BIT 0xfa
0000            365   _TXBMT          BIT 0xf9
0000            366   _SPIEN          BIT 0xf8
0000            367   ;--------------------------------------------------------
0000            368   ; overlayable register banks
0000            369   ;--------------------------------------------------------
0000            370            rbank0 segment data overlay
0000            371   ;--------------------------------------------------------
0000            372   ; internal ram data
0000            373   ;--------------------------------------------------------
0000            374            rseg R_DSEG
0000            375   _pwm_count:
0000            376            ds 1
0001            377   _mode:
0001            378            ds 1
0002            379   _pwm_both:
0002            380            ds 1
0003            381   _pwm_Left0:
0003            382            ds 1
0004            383   _pwm_Left1:
0004            384            ds 1
0005            385   _pwm_Right0:
0005            386            ds 1
0006            387   _pwm_Right1:
0006            388            ds 1
0007            389   _direction:
0007            390            ds 1
0008            391   _currentcmd:
0008            392            ds 1
0009            393   _currentstate:
0009            394            ds 1
000A            395   _main_v1_1_70:
000A            396            ds 4
000E            397   _main_v2_1_70:
000E            398            ds 4
0012            399   _main_sloc0_1_0:
0012            400            ds 2
0014            401   _main_sloc1_1_0:
0014            402            ds 2
0016            403   _main_sloc2_1_0:
0016            404            ds 2
0018            405   _main_sloc3_1_0:
0018            406            ds 2
001A            407   _main_sloc4_1_0:
001A            408            ds 2
001C            409   _main_sloc5_1_0:
001C            410            ds 2
001E            411   _main_sloc6_1_0:
001E            412            ds 4
0022            413   _main_sloc7_1_0:
0022            414            ds 4
0026            415   _linetrack_vleft_1_89:
0026            416            ds 4
002A            417   _linetrack_vright_1_89:
002A            418            ds 4
002E            419   _linetrack_sloc0_1_0:
002E            420            ds 4
0032            421   _linetrack_sloc1_1_0:
0032            422            ds 4
0036            423   _turncar_v_1_95:
0036            424            ds 4
003A            425   _turncar_direction_1_95:
003A            426            ds 1
003B            427   _uturn_vleft_1_105:
003B            428            ds 4
003F            429   _uturn_vright_1_105:
003F            430            ds 4
0043            431   ;--------------------------------------------------------
0043            432   ; overlayable items in internal ram 
0043            433   ;--------------------------------------------------------
0000            434            rseg R_OSEG
0000            435   ;--------------------------------------------------------
0000            436   ; indirectly addressable internal ram data
0000            437   ;--------------------------------------------------------
0000            438            rseg R_ISEG
0000            439   ;--------------------------------------------------------
0000            440   ; absolute internal ram data
0000            441   ;--------------------------------------------------------
0000            442            DSEG
0000            443   ;--------------------------------------------------------
0000            444   ; bit data
0000            445   ;--------------------------------------------------------
0000            446            rseg R_BSEG
0000            447   _main_sloc8_1_0:
0000            448            DBIT    1
0001            449   _Timer2_ISR_sloc0_1_0:
0001            450            DBIT    1
0002            451   ;--------------------------------------------------------
0002            452   ; paged external ram data
0002            453   ;--------------------------------------------------------
0000            454            rseg R_PSEG
0000            455   ;--------------------------------------------------------
0000            456   ; external ram data
0000            457   ;--------------------------------------------------------
0000            458            rseg R_XSEG
0000            459   ;--------------------------------------------------------
0000            460   ; absolute external ram data
0000            461   ;--------------------------------------------------------
0000            462            XSEG
0000            463   ;--------------------------------------------------------
0000            464   ; external initialized ram data
0000            465   ;--------------------------------------------------------
0000            466            rseg R_IXSEG
0000            467            rseg R_HOME
0000            468            rseg R_GSINIT
0000            469            rseg R_CSEG
0000            470   ;--------------------------------------------------------
0000            471   ; Reset entry point and interrupt vectors
0000            472   ;--------------------------------------------------------
0000            473            CSEG at 0x0000
0000 020100     474            ljmp    _crt0
002B            475            CSEG at 0x002b
002B 020100     476            ljmp    _Timer2_ISR
002E            477   ;--------------------------------------------------------
002E            478   ; global & static initialisations
002E            479   ;--------------------------------------------------------
0000            480            rseg R_HOME
0000            481            rseg R_GSINIT
0000            482            rseg R_GSINIT
0000            483   ;--------------------------------------------------------
0000            484   ; data variables initialization
0000            485   ;--------------------------------------------------------
0000            486            rseg R_DINIT
0000            487   ;        robot.c:8: volatile  char pwm_count=0;
0000 752000     488            mov     _pwm_count,#0x00
0003            489   ;        robot.c:9: volatile  char mode = 0;
0003 75F000     490            mov     _mode,#0x00
0006            491   ;        robot.c:10: volatile  char pwm_both =0;
0006 75B000     492            mov     _pwm_both,#0x00
0009            493   ;        robot.c:11: volatile  char pwm_Left0 = 0; //p1.5
0009 757000     494            mov     _pwm_Left0,#0x00
000C            495   ;        robot.c:12: volatile  char pwm_Left1 = 0; //p1.6
000C 753000     496            mov     _pwm_Left1,#0x00
000F            497   ;        robot.c:13: volatile  char pwm_Right0 = 0; //p2.0
000F 75F000     498            mov     _pwm_Right0,#0x00
0012            499   ;        robot.c:14: volatile  char pwm_Right1 = 0; //p2.1
0012 75B000     500            mov     _pwm_Right1,#0x00
0015            501   ;        robot.c:15: volatile  char direction = 0; // 1 for back 0 for forward
0015 757000     502            mov     _direction,#0x00
0018            503   ;        robot.c:17: volatile  char currentcmd = 0;
0018 753000     504            mov     _currentcmd,#0x00
001B            505   ;        robot.c:18: volatile  char currentstate = 1;
001B 75F001     506            mov     _currentstate,#0x01
001E            507            ; The linker places a 'ret' at the end of segment R_DINIT.
001E            508   ;--------------------------------------------------------
001E            509   ; code
001E            510   ;--------------------------------------------------------
0000            511            rseg R_CSEG
0000            512   ;------------------------------------------------------------
0000            513   ;Allocation info for local variables in function 'main'
0000            514   ;------------------------------------------------------------
0000            515   ;v1                        Allocated with name '_main_v1_1_70'
0000            516   ;v2                        Allocated with name '_main_v2_1_70'
0000            517   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0000            518   ;sloc1                     Allocated with name '_main_sloc1_1_0'
0000            519   ;sloc2                     Allocated with name '_main_sloc2_1_0'
0000            520   ;sloc3                     Allocated with name '_main_sloc3_1_0'
0000            521   ;sloc4                     Allocated with name '_main_sloc4_1_0'
0000            522   ;sloc5                     Allocated with name '_main_sloc5_1_0'
0000            523   ;sloc6                     Allocated with name '_main_sloc6_1_0'
0000            524   ;sloc7                     Allocated with name '_main_sloc7_1_0'
0000            525   ;------------------------------------------------------------
0000            526   ;        robot.c:20: void main(void) {
0000            527   ;        -----------------------------------------
0000            528   ;         function main
0000            529   ;        -----------------------------------------
0000            530   _main:
0000            531            using   0
0000            532   ;        robot.c:22: volatile float v1 = 0;
0000 752800     533            mov     _main_v1_1_70,#0x00
0003 752900     534            mov     (_main_v1_1_70 + 1),#0x00
0006 752A00     535            mov     (_main_v1_1_70 + 2),#0x00
0009 752B00     536            mov     (_main_v1_1_70 + 3),#0x00
000C            537   ;        robot.c:23: volatile float v2 = 0;
000C 756800     538            mov     _main_v2_1_70,#0x00
000F 756900     539            mov     (_main_v2_1_70 + 1),#0x00
0012 756A00     540            mov     (_main_v2_1_70 + 2),#0x00
0015 756B00     541            mov     (_main_v2_1_70 + 3),#0x00
0018            542   ;        robot.c:25: MOTOR_LEFT0 = 0;
0018 C295       543            clr     _P1_5
001A            544   ;        robot.c:26: MOTOR_LEFT1 = 0;
001A C296       545            clr     _P1_6
001C            546   ;        robot.c:27: MOTOR_RIGHT0 = 0;
001C C2A0       547            clr     _P2_0
001E            548   ;        robot.c:28: MOTOR_RIGHT1 = 0;
001E C2A1       549            clr     _P2_1
0020            550   ;        robot.c:31: currentstate = 1;           //1-FORWARD, 2-BACKWARDS, 3-STOPPED, 4-DEBUGGER
0020 75F001     551            mov     _currentstate,#0x01
0023            552   ;        robot.c:32: currentcmd = 0;             //0-NO COMMAND, 1-TURN LEFT, 2-TURN RIGHT, 3-FORWARDS, 4-BACKWARDS, 5-STOP, 6-UTURN
0023 753000     553            mov     _currentcmd,#0x00
0026            554   ;        robot.c:35: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0026 74E8       555            mov     a,#__str_0
0028 C0E0       556            push    acc
002A 7496       557            mov     a,#(__str_0 >> 8)
002C C0E0       558            push    acc
002E 7480       559            mov     a,#0x80
0030 C0E0       560            push    acc
0032 120100     561            lcall   _printf
0035 1581       562            dec     sp
0037 1581       563            dec     sp
0039 1581       564            dec     sp
003B            565   ;        robot.c:38: InitPinADC(2, 3); // Configure P2.3 as analog input (tank1)
003B 750003     566            mov     _InitPinADC_PARM_2,#0x03
003E 758202     567            mov     dpl,#0x02
0041 120100     568            lcall   _InitPinADC
0044            569   ;        robot.c:39: InitPinADC(2, 4); // Configure P2.4 as analog input         (tank1)
0044 750004     570            mov     _InitPinADC_PARM_2,#0x04
0047 758202     571            mov     dpl,#0x02
004A 120100     572            lcall   _InitPinADC
004D            573   ;        robot.c:40: InitPinADC(2, 5); // Configure P2.5 as analog input (tank2)
004D 750005     574            mov     _InitPinADC_PARM_2,#0x05
0050 758202     575            mov     dpl,#0x02
0053 120100     576            lcall   _InitPinADC
0056            577   ;        robot.c:41: InitPinADC(2, 6); // Configure P2.6 as analog input (tank2)
0056 750006     578            mov     _InitPinADC_PARM_2,#0x06
0059 758202     579            mov     dpl,#0x02
005C 120100     580            lcall   _InitPinADC
005F            581   ;        robot.c:44: InitADC();  
005F 120100     582            lcall   _InitADC
0062            583   ;        robot.c:47: while (1) {         
0062            584   L002045?:
0062            585   ;        robot.c:50: currentcmd = readData(); 
0062 120100     586            lcall   _readData
0065 858230     587            mov     _currentcmd,dpl
0068            588   ;        robot.c:53: printf("frontL %f frontR %f backL %f backR %f command %1d, state %1d left0 %3d left1 %3d right0 %3d right1 %3d\r", Volts_at_Pin(TANK_FL),Volts_at_Pin(TANK_FR),Volts_at_Pin(TANK_RL),Volts_at_Pin(TANK_RR), currentcmd, currentstate, pwm_Left0, pwm_Left1, pwm_Right0, pwm_Right1);
0068 85B0E8     589            mov     _main_sloc5_1_0,_pwm_Right1
006B E5B0       590            mov     a,_pwm_Right1
006D 33         591            rlc     a
006E 95E0       592            subb    a,acc
0070 F5E9       593            mov     (_main_sloc5_1_0 + 1),a
0072 85F0A8     594            mov     _main_sloc4_1_0,_pwm_Right0
0075 E5F0       595            mov     a,_pwm_Right0
0077 33         596            rlc     a
0078 95E0       597            subb    a,acc
007A F5A9       598            mov     (_main_sloc4_1_0 + 1),a
007C 853068     599            mov     _main_sloc3_1_0,_pwm_Left1
007F E530       600            mov     a,_pwm_Left1
0081 33         601            rlc     a
0082 95E0       602            subb    a,acc
0084 F569       603            mov     (_main_sloc3_1_0 + 1),a
0086 8570A8     604            mov     _main_sloc0_1_0,_pwm_Left0
0089 E570       605            mov     a,_pwm_Left0
008B 33         606            rlc     a
008C 95E0       607            subb    a,acc
008E F5A9       608            mov     (_main_sloc0_1_0 + 1),a
0090 85F0E8     609            mov     _main_sloc1_1_0,_currentstate
0093 E5F0       610            mov     a,_currentstate
0095 33         611            rlc     a
0096 95E0       612            subb    a,acc
0098 F5E9       613            mov     (_main_sloc1_1_0 + 1),a
009A 853028     614            mov     _main_sloc2_1_0,_currentcmd
009D E530       615            mov     a,_currentcmd
009F 33         616            rlc     a
00A0 95E0       617            subb    a,acc
00A2 F529       618            mov     (_main_sloc2_1_0 + 1),a
00A4 75820E     619            mov     dpl,#0x0E
00A7 120100     620            lcall   _Volts_at_Pin
00AA A882       621            mov     r0,dpl
00AC A983       622            mov     r1,dph
00AE AEF0       623            mov     r6,b
00B0 FF         624            mov     r7,a
00B1 75820D     625            mov     dpl,#0x0D
00B4 C006       626            push    ar6
00B6 C007       627            push    ar7
00B8 C000       628            push    ar0
00BA C001       629            push    ar1
00BC 120100     630            lcall   _Volts_at_Pin
00BF 858228     631            mov     _main_sloc6_1_0,dpl
00C2 858329     632            mov     (_main_sloc6_1_0 + 1),dph
00C5 85F02A     633            mov     (_main_sloc6_1_0 + 2),b
00C8 F52B       634            mov     (_main_sloc6_1_0 + 3),a
00CA 75820C     635            mov     dpl,#0x0C
00CD 120100     636            lcall   _Volts_at_Pin
00D0 858268     637            mov     _main_sloc7_1_0,dpl
00D3 858369     638            mov     (_main_sloc7_1_0 + 1),dph
00D6 85F06A     639            mov     (_main_sloc7_1_0 + 2),b
00D9 F56B       640            mov     (_main_sloc7_1_0 + 3),a
00DB 75820B     641            mov     dpl,#0x0B
00DE 120100     642            lcall   _Volts_at_Pin
00E1 AA82       643            mov     r2,dpl
00E3 AB83       644            mov     r3,dph
00E5 ACF0       645            mov     r4,b
00E7 FD         646            mov     r5,a
00E8 D001       647            pop     ar1
00EA D000       648            pop     ar0
00EC D007       649            pop     ar7
00EE D006       650            pop     ar6
00F0 C0E8       651            push    _main_sloc5_1_0
00F2 C0E9       652            push    (_main_sloc5_1_0 + 1)
00F4 C0A8       653            push    _main_sloc4_1_0
00F6 C0A9       654            push    (_main_sloc4_1_0 + 1)
00F8 C068       655            push    _main_sloc3_1_0
00FA C069       656            push    (_main_sloc3_1_0 + 1)
00FC C0A8       657            push    _main_sloc0_1_0
00FE C0A9       658            push    (_main_sloc0_1_0 + 1)
0100 C0E8       659            push    _main_sloc1_1_0
0102 C0E9       660            push    (_main_sloc1_1_0 + 1)
0104 C028       661            push    _main_sloc2_1_0
0106 C029       662            push    (_main_sloc2_1_0 + 1)
0108 C000       663            push    ar0
010A C001       664            push    ar1
010C C006       665            push    ar6
010E C007       666            push    ar7
0110 C028       667            push    _main_sloc6_1_0
0112 C029       668            push    (_main_sloc6_1_0 + 1)
0114 C02A       669            push    (_main_sloc6_1_0 + 2)
0116 C02B       670            push    (_main_sloc6_1_0 + 3)
0118 C068       671            push    _main_sloc7_1_0
011A C069       672            push    (_main_sloc7_1_0 + 1)
011C C06A       673            push    (_main_sloc7_1_0 + 2)
011E C06B       674            push    (_main_sloc7_1_0 + 3)
0120 C002       675            push    ar2
0122 C003       676            push    ar3
0124 C004       677            push    ar4
0126 C005       678            push    ar5
0128 74F8       679            mov     a,#__str_1
012A C0E0       680            push    acc
012C 7499       681            mov     a,#(__str_1 >> 8)
012E C0E0       682            push    acc
0130 7480       683            mov     a,#0x80
0132 C0E0       684            push    acc
0134 120100     685            lcall   _printf
0137 E581       686            mov     a,sp
0139 24E1       687            add     a,#0xe1
013B F581       688            mov     sp,a
013D            689   ;        robot.c:56: if (currentcmd == CMD_LEFT) mxDirection(0);
013D 7401       690            mov     a,#0x01
013F B53038     691            cjne    a,_currentcmd,L002010?
0142 758200     692            mov     dpl,#0x00
0145 120100     693            lcall   _mxDirection
0148 8001       694            sjmp    L002011?
014A            695   L002010?:
014A            696   ;        robot.c:57: else if (currentcmd == CMD_RIGHT) mxDirection(1);
014A 7402       697            mov     a,#0x02
014C B530F8     698            cjne    a,_currentcmd,L002007?
014F 758201     699            mov     dpl,#0x01
0152 120100     700            lcall   _mxDirection
0155 8001       701            sjmp    L002011?
0157            702   L002007?:
0157            703   ;        robot.c:58: else if (currentcmd == CMD_STOP) mxStop();
0157 7405       704            mov     a,#0x05
0159 B53038     705            cjne    a,_currentcmd,L002004?
015C 120100     706            lcall   _mxStop
015F 8001       707            sjmp    L002011?
0161            708   L002004?:
0161            709   ;        robot.c:59: else if (currentcmd == CMD_UTURN) mxUTurn();
0161 7406       710            mov     a,#0x06
0163 B530B8     711            cjne    a,_currentcmd,L002011?
0166 120100     712            lcall   _mxUTurn
0169            713   L002011?:
0169            714   ;        robot.c:62: switch (currentstate) {
0169 AAF0       715            mov     r2,_currentstate
016B BA01F8     716            cjne    r2,#0x01,L002087?
016E 8001       717            sjmp    L002012?
0170            718   L002087?:
0170 BA0278     719            cjne    r2,#0x02,L002088?
0173 8001       720            sjmp    L002013?
0175            721   L002088?:
0175            722   ;        robot.c:63: case FORWARD_STATE:
0175 BA03F8     723            cjne    r2,#0x03,L002015?
0178 8001       724            sjmp    L002014?
017A            725   L002012?:
017A            726   ;        robot.c:64: linetrack(0);       // forwards
017A 900000     727            mov     dptr,#0x0000
017D 120100     728            lcall   _linetrack
0180            729   ;        robot.c:66: v1 = Volts_at_Pin(TANK_FL);
0180 75820B     730            mov     dpl,#0x0B
0183 120100     731            lcall   _Volts_at_Pin
0186 858228     732            mov     _main_v1_1_70,dpl
0189 858329     733            mov     (_main_v1_1_70 + 1),dph
018C 85F02A     734            mov     (_main_v1_1_70 + 2),b
018F F52B       735            mov     (_main_v1_1_70 + 3),a
0191            736   ;        robot.c:67: v2 = Volts_at_Pin(TANK_FR);
0191 75820C     737            mov     dpl,#0x0C
0194 120100     738            lcall   _Volts_at_Pin
0197 858268     739            mov     _main_v2_1_70,dpl
019A 858369     740            mov     (_main_v2_1_70 + 1),dph
019D 85F06A     741            mov     (_main_v2_1_70 + 2),b
01A0 F56B       742            mov     (_main_v2_1_70 + 3),a
01A2            743   ;        robot.c:68: break;
01A2            744   ;        robot.c:69: case REVERSE_STATE:
01A2 8001       745            sjmp    L002015?
01A4            746   L002013?:
01A4            747   ;        robot.c:70: linetrack(1);       // backwards
01A4 900001     748            mov     dptr,#0x0001
01A7 120100     749            lcall   _linetrack
01AA            750   ;        robot.c:72: v2 = Volts_at_Pin(TANK_RL);
01AA 75820D     751            mov     dpl,#0x0D
01AD 120100     752            lcall   _Volts_at_Pin
01B0 858268     753            mov     _main_v2_1_70,dpl
01B3 858369     754            mov     (_main_v2_1_70 + 1),dph
01B6 85F06A     755            mov     (_main_v2_1_70 + 2),b
01B9 F56B       756            mov     (_main_v2_1_70 + 3),a
01BB            757   ;        robot.c:73: v1 = Volts_at_Pin(TANK_RR);
01BB 75820E     758            mov     dpl,#0x0E
01BE 120100     759            lcall   _Volts_at_Pin
01C1 858228     760            mov     _main_v1_1_70,dpl
01C4 858329     761            mov     (_main_v1_1_70 + 1),dph
01C7 85F02A     762            mov     (_main_v1_1_70 + 2),b
01CA F52B       763            mov     (_main_v1_1_70 + 3),a
01CC            764   ;        robot.c:74: break;
01CC            765   ;        robot.c:75: case STOP_STATE:
01CC 8001       766            sjmp    L002015?
01CE            767   L002014?:
01CE            768   ;        robot.c:76: stopcar();          // stop car
01CE 120100     769            lcall   _stopcar
01D1            770   ;        robot.c:78: }
01D1            771   L002015?:
01D1            772   ;        robot.c:81: switch (currentcmd) {
01D1 E530       773            mov     a,_currentcmd
01D3 FA         774            mov     r2,a
01D4 30E778     775            jnb     acc.7,L002090?
01D7 020100     776            ljmp    L002042?
01DA            777   L002090?:
01DA C3         778            clr     c
01DB 7486       779            mov     a,#(0x06 ^ 0x80)
01DD 8AF0       780            mov     b,r2
01DF 63F080     781            xrl     b,#0x80
01E2 95F0       782            subb    a,b
01E4 5001       783            jnc     L002091?
01E6 020100     784            ljmp    L002042?
01E9            785   L002091?:
01E9 EA         786            mov     a,r2
01EA 2A         787            add     a,r2
01EB 2A         788            add     a,r2
01EC 909E38     789            mov     dptr,#L002092?
01EF 73         790            jmp     @a+dptr
01F0            791   L002092?:
01F0 020100     792            ljmp    L002016?
01F3 020100     793            ljmp    L002030?
01F6 020100     794            ljmp    L002034?
01F9 020100     795            ljmp    L002038?
01FC 020100     796            ljmp    L002039?
01FF 020100     797            ljmp    L002040?
0202 020100     798            ljmp    L002041?
0205            799   ;        robot.c:83: case CMD_NONE:
0205            800   L002016?:
0205            801   ;        robot.c:85: if ((currentstate-1) ? 
0205 AAF0       802            mov     r2,_currentstate
0207 E5F0       803            mov     a,_currentstate
0209 33         804            rlc     a
020A 95E0       805            subb    a,acc
020C FB         806            mov     r3,a
020D 1A         807            dec     r2
020E BAFF40     808            cjne    r2,#0xff,L002093?
0211 1B         809            dec     r3
0212            810   L002093?:
0212 EA         811            mov     a,r2
0213 4B         812            orl     a,r3
0214 6001       813            jz      L002049?
0216            814   ;        robot.c:86: (v1 > 1.2 && v2 > 1.2) :
0216 749A       815            mov     a,#0x9A
0218 C0E0       816            push    acc
021A 7499       817            mov     a,#0x99
021C C0E0       818            push    acc
021E C0E0       819            push    acc
0220 743F       820            mov     a,#0x3F
0222 C0E0       821            push    acc
0224 852882     822            mov     dpl,_main_v1_1_70
0227 852983     823            mov     dph,(_main_v1_1_70 + 1)
022A 852AF0     824            mov     b,(_main_v1_1_70 + 2)
022D E52B       825            mov     a,(_main_v1_1_70 + 3)
022F 120100     826            lcall   ___fsgt
0232 AA82       827            mov     r2,dpl
0234 E581       828            mov     a,sp
0236 24FC       829            add     a,#0xfc
0238 F581       830            mov     sp,a
023A EA         831            mov     a,r2
023B 6001       832            jz      L002051?
023D 749A       833            mov     a,#0x9A
023F C0E0       834            push    acc
0241 7499       835            mov     a,#0x99
0243 C0E0       836            push    acc
0245 C0E0       837            push    acc
0247 743F       838            mov     a,#0x3F
0249 C0E0       839            push    acc
024B 856882     840            mov     dpl,_main_v2_1_70
024E 856983     841            mov     dph,(_main_v2_1_70 + 1)
0251 856AF0     842            mov     b,(_main_v2_1_70 + 2)
0254 E56B       843            mov     a,(_main_v2_1_70 + 3)
0256 120100     844            lcall   ___fsgt
0259 AA82       845            mov     r2,dpl
025B E581       846            mov     a,sp
025D 24FC       847            add     a,#0xfc
025F F581       848            mov     sp,a
0261 EA         849            mov     a,r2
0262 7001       850            jnz     L002052?
0264            851   L002051?:
0264 7A00       852            mov     r2,#0x00
0266 8001       853            sjmp    L002053?
0268            854   L002052?:
0268 7A01       855            mov     r2,#0x01
026A            856   L002053?:
026A EA         857            mov     a,r2
026B 24FF       858            add     a,#0xff
026D 9218       859            mov     _main_sloc8_1_0,c
026F 8001       860            sjmp    L002050?
0271            861   L002049?:
0271            862   ;        robot.c:87: (v1 > 0.7 && v2 > 1)) {
0271 7433       863            mov     a,#0x33
0273 C0E0       864            push    acc
0275 C0E0       865            push    acc
0277 C0E0       866            push    acc
0279 743F       867            mov     a,#0x3F
027B C0E0       868            push    acc
027D 852882     869            mov     dpl,_main_v1_1_70
0280 852983     870            mov     dph,(_main_v1_1_70 + 1)
0283 852AF0     871            mov     b,(_main_v1_1_70 + 2)
0286 E52B       872            mov     a,(_main_v1_1_70 + 3)
0288 120100     873            lcall   ___fsgt
028B AA82       874            mov     r2,dpl
028D E581       875            mov     a,sp
028F 24FC       876            add     a,#0xfc
0291 F581       877            mov     sp,a
0293 EA         878            mov     a,r2
0294 6001       879            jz      L002054?
0296 E4         880            clr     a
0297 C0E0       881            push    acc
0299 C0E0       882            push    acc
029B 7480       883            mov     a,#0x80
029D C0E0       884            push    acc
029F 743F       885            mov     a,#0x3F
02A1 C0E0       886            push    acc
02A3 856882     887            mov     dpl,_main_v2_1_70
02A6 856983     888            mov     dph,(_main_v2_1_70 + 1)
02A9 856AF0     889            mov     b,(_main_v2_1_70 + 2)
02AC E56B       890            mov     a,(_main_v2_1_70 + 3)
02AE 120100     891            lcall   ___fsgt
02B1 AA82       892            mov     r2,dpl
02B3 E581       893            mov     a,sp
02B5 24FC       894            add     a,#0xfc
02B7 F581       895            mov     sp,a
02B9 EA         896            mov     a,r2
02BA 7001       897            jnz     L002055?
02BC            898   L002054?:
02BC 7A00       899            mov     r2,#0x00
02BE 8001       900            sjmp    L002056?
02C0            901   L002055?:
02C0 7A01       902            mov     r2,#0x01
02C2            903   L002056?:
02C2 EA         904            mov     a,r2
02C3 24FF       905            add     a,#0xff
02C5 9218       906            mov     _main_sloc8_1_0,c
02C7            907   L002050?:
02C7 2018C0     908            jb      _main_sloc8_1_0,L002099?
02CA 020100     909            ljmp    L002045?
02CD            910   L002099?:
02CD            911   ;        robot.c:88: printf("\nINTERSECTION\n");
02CD 7400       912            mov     a,#__str_2
02CF C0E0       913            push    acc
02D1 74A3       914            mov     a,#(__str_2 >> 8)
02D3 C0E0       915            push    acc
02D5 7480       916            mov     a,#0x80
02D7 C0E0       917            push    acc
02D9 120100     918            lcall   _printf
02DC 1581       919            dec     sp
02DE 1581       920            dec     sp
02E0 1581       921            dec     sp
02E2            922   ;        robot.c:90: if (currentstate == 1) {
02E2 7401       923            mov     a,#0x01
02E4 B5F040     924            cjne    a,_currentstate,L002026?
02E7            925   ;        robot.c:91: if (Volts_at_Pin(TANK_RL)>Volts_at_Pin(TANK_RR)) {
02E7 75820D     926            mov     dpl,#0x0D
02EA 120100     927            lcall   _Volts_at_Pin
02ED AA82       928            mov     r2,dpl
02EF AB83       929            mov     r3,dph
02F1 ACF0       930            mov     r4,b
02F3 FD         931            mov     r5,a
02F4 75820E     932            mov     dpl,#0x0E
02F7 C002       933            push    ar2
02F9 C003       934            push    ar3
02FB C004       935            push    ar4
02FD C005       936            push    ar5
02FF 120100     937            lcall   _Volts_at_Pin
0302 AE82       938            mov     r6,dpl
0304 AF83       939            mov     r7,dph
0306 A8F0       940            mov     r0,b
0308 F9         941            mov     r1,a
0309 D005       942            pop     ar5
030B D004       943            pop     ar4
030D D003       944            pop     ar3
030F D002       945            pop     ar2
0311 C006       946            push    ar6
0313 C007       947            push    ar7
0315 C000       948            push    ar0
0317 C001       949            push    ar1
0319 8A82       950            mov     dpl,r2
031B 8B83       951            mov     dph,r3
031D 8CF0       952            mov     b,r4
031F ED         953            mov     a,r5
0320 120100     954            lcall   ___fsgt
0323 AA82       955            mov     r2,dpl
0325 E581       956            mov     a,sp
0327 24FC       957            add     a,#0xfc
0329 F581       958            mov     sp,a
032B EA         959            mov     a,r2
032C 6001       960            jz      L002018?
032E            961   ;        robot.c:92: pwm_Left1 = 50;
032E 753032     962            mov     _pwm_Left1,#0x32
0331            963   ;        robot.c:93: pwm_Left0 = -1;
0331 7570FF     964            mov     _pwm_Left0,#0xFF
0334            965   ;        robot.c:94: pwm_Right0 = 30;
0334 75F01E     966            mov     _pwm_Right0,#0x1E
0337            967   ;        robot.c:95: pwm_Right1 = -1;
0337 75B0FF     968            mov     _pwm_Right1,#0xFF
033A 8001       969            sjmp    L002027?
033C            970   L002018?:
033C            971   ;        robot.c:98: pwm_Left1 = 30;
033C 75301E     972            mov     _pwm_Left1,#0x1E
033F            973   ;        robot.c:99: pwm_Left0 = -1;
033F 7570FF     974            mov     _pwm_Left0,#0xFF
0342            975   ;        robot.c:100: pwm_Right0 = 50;
0342 75F032     976            mov     _pwm_Right0,#0x32
0345            977   ;        robot.c:101: pwm_Right1 = -1;
0345 75B0FF     978            mov     _pwm_Right1,#0xFF
0348 8001       979            sjmp    L002027?
034A            980   L002026?:
034A            981   ;        robot.c:103: } else if (currentstate == 2) {
034A 7402       982            mov     a,#0x02
034C B5F0C0     983            cjne    a,_currentstate,L002027?
034F            984   ;        robot.c:104: if (Volts_at_Pin(TANK_FL)>Volts_at_Pin(TANK_FR)) {
034F 75820B     985            mov     dpl,#0x0B
0352 120100     986            lcall   _Volts_at_Pin
0355 AA82       987            mov     r2,dpl
0357 AB83       988            mov     r3,dph
0359 ACF0       989            mov     r4,b
035B FD         990            mov     r5,a
035C 75820C     991            mov     dpl,#0x0C
035F C002       992            push    ar2
0361 C003       993            push    ar3
0363 C004       994            push    ar4
0365 C005       995            push    ar5
0367 120100     996            lcall   _Volts_at_Pin
036A AE82       997            mov     r6,dpl
036C AF83       998            mov     r7,dph
036E A8F0       999            mov     r0,b
0370 F9        1000            mov     r1,a
0371 D005      1001            pop     ar5
0373 D004      1002            pop     ar4
0375 D003      1003            pop     ar3
0377 D002      1004            pop     ar2
0379 C006      1005            push    ar6
037B C007      1006            push    ar7
037D C000      1007            push    ar0
037F C001      1008            push    ar1
0381 8A82      1009            mov     dpl,r2
0383 8B83      1010            mov     dph,r3
0385 8CF0      1011            mov     b,r4
0387 ED        1012            mov     a,r5
0388 120100    1013            lcall   ___fsgt
038B AA82      1014            mov     r2,dpl
038D E581      1015            mov     a,sp
038F 24FC      1016            add     a,#0xfc
0391 F581      1017            mov     sp,a
0393 EA        1018            mov     a,r2
0394 6001      1019            jz      L002021?
0396           1020   ;        robot.c:105: pwm_Left0 = 50;
0396 757032    1021            mov     _pwm_Left0,#0x32
0399           1022   ;        robot.c:106: pwm_Left1 = -1;
0399 7530FF    1023            mov     _pwm_Left1,#0xFF
039C           1024   ;        robot.c:107: pwm_Right0 = -1;
039C 75F0FF    1025            mov     _pwm_Right0,#0xFF
039F           1026   ;        robot.c:108: pwm_Right1 = 30;
039F 75B01E    1027            mov     _pwm_Right1,#0x1E
03A2 8001      1028            sjmp    L002027?
03A4           1029   L002021?:
03A4           1030   ;        robot.c:111: pwm_Left0 = 30;
03A4 75701E    1031            mov     _pwm_Left0,#0x1E
03A7           1032   ;        robot.c:112: pwm_Left1 = -1;
03A7 7530FF    1033            mov     _pwm_Left1,#0xFF
03AA           1034   ;        robot.c:113: pwm_Right0 = -1;
03AA 75F0FF    1035            mov     _pwm_Right0,#0xFF
03AD           1036   ;        robot.c:114: pwm_Right1 = 50;
03AD 75B032    1037            mov     _pwm_Right1,#0x32
03B0           1038   L002027?:
03B0           1039   ;        robot.c:118: waitms(1500);
03B0 9005DC    1040            mov     dptr,#0x05DC
03B3 120100    1041            lcall   _waitms
03B6           1042   ;        robot.c:120: break;
03B6 020100    1043            ljmp    L002045?
03B9           1044   ;        robot.c:122: case CMD_LEFT:
03B9           1045   L002030?:
03B9           1046   ;        robot.c:124: printf("Turn left at the next intersection\n");
03B9 7480      1047            mov     a,#__str_3
03BB C0E0      1048            push    acc
03BD 74A4      1049            mov     a,#(__str_3 >> 8)
03BF C0E0      1050            push    acc
03C1 7480      1051            mov     a,#0x80
03C3 C0E0      1052            push    acc
03C5 120100    1053            lcall   _printf
03C8 1581      1054            dec     sp
03CA 1581      1055            dec     sp
03CC 1581      1056            dec     sp
03CE           1057   ;        robot.c:125: if (v1 > 0.7 && v2 >1)  {
03CE 7433      1058            mov     a,#0x33
03D0 C0E0      1059            push    acc
03D2 C0E0      1060            push    acc
03D4 C0E0      1061            push    acc
03D6 743F      1062            mov     a,#0x3F
03D8 C0E0      1063            push    acc
03DA 852882    1064            mov     dpl,_main_v1_1_70
03DD 852983    1065            mov     dph,(_main_v1_1_70 + 1)
03E0 852AF0    1066            mov     b,(_main_v1_1_70 + 2)
03E3 E52B      1067            mov     a,(_main_v1_1_70 + 3)
03E5 120100    1068            lcall   ___fsgt
03E8 AA82      1069            mov     r2,dpl
03EA E581      1070            mov     a,sp
03EC 24FC      1071            add     a,#0xfc
03EE F581      1072            mov     sp,a
03F0 EA        1073            mov     a,r2
03F1 7001      1074            jnz     L002106?
03F3 020100    1075            ljmp    L002045?
03F6           1076   L002106?:
03F6 E4        1077            clr     a
03F7 C0E0      1078            push    acc
03F9 C0E0      1079            push    acc
03FB 7480      1080            mov     a,#0x80
03FD C0E0      1081            push    acc
03FF 743F      1082            mov     a,#0x3F
0401 C0E0      1083            push    acc
0403 856882    1084            mov     dpl,_main_v2_1_70
0406 856983    1085            mov     dph,(_main_v2_1_70 + 1)
0409 856AF0    1086            mov     b,(_main_v2_1_70 + 2)
040C E56B      1087            mov     a,(_main_v2_1_70 + 3)
040E 120100    1088            lcall   ___fsgt
0411 AA82      1089            mov     r2,dpl
0413 E581      1090            mov     a,sp
0415 24FC      1091            add     a,#0xfc
0417 F581      1092            mov     sp,a
0419 EA        1093            mov     a,r2
041A 7001      1094            jnz     L002107?
041C 020100    1095            ljmp    L002045?
041F           1096   L002107?:
041F           1097   ;        robot.c:126: printf("\n\r INTERSECTION\n");
041F 7440      1098            mov     a,#__str_4
0421 C0E0      1099            push    acc
0423 74A5      1100            mov     a,#(__str_4 >> 8)
0425 C0E0      1101            push    acc
0427 7480      1102            mov     a,#0x80
0429 C0E0      1103            push    acc
042B 120100    1104            lcall   _printf
042E 1581      1105            dec     sp
0430 1581      1106            dec     sp
0432 1581      1107            dec     sp
0434           1108   ;        robot.c:131: turncar(currentstate);
0434 AAF0      1109            mov     r2,_currentstate
0436 E5F0      1110            mov     a,_currentstate
0438 33        1111            rlc     a
0439 95E0      1112            subb    a,acc
043B FB        1113            mov     r3,a
043C 8A82      1114            mov     dpl,r2
043E 8B83      1115            mov     dph,r3
0440 120100    1116            lcall   _turncar
0443           1117   ;        robot.c:132: currentcmd = 0;
0443 753000    1118            mov     _currentcmd,#0x00
0446           1119   ;        robot.c:134: break;
0446 020100    1120            ljmp    L002045?
0449           1121   ;        robot.c:137: case CMD_RIGHT:
0449           1122   L002034?:
0449           1123   ;        robot.c:139: printf("Turn right at the next intersection\n");
0449 7480      1124            mov     a,#__str_5
044B C0E0      1125            push    acc
044D 74A5      1126            mov     a,#(__str_5 >> 8)
044F C0E0      1127            push    acc
0451 7480      1128            mov     a,#0x80
0453 C0E0      1129            push    acc
0455 120100    1130            lcall   _printf
0458 1581      1131            dec     sp
045A 1581      1132            dec     sp
045C 1581      1133            dec     sp
045E           1134   ;        robot.c:140: if (v1 > 0.7 && v2 >1) {
045E 7433      1135            mov     a,#0x33
0460 C0E0      1136            push    acc
0462 C0E0      1137            push    acc
0464 C0E0      1138            push    acc
0466 743F      1139            mov     a,#0x3F
0468 C0E0      1140            push    acc
046A 852882    1141            mov     dpl,_main_v1_1_70
046D 852983    1142            mov     dph,(_main_v1_1_70 + 1)
0470 852AF0    1143            mov     b,(_main_v1_1_70 + 2)
0473 E52B      1144            mov     a,(_main_v1_1_70 + 3)
0475 120100    1145            lcall   ___fsgt
0478 AA82      1146            mov     r2,dpl
047A E581      1147            mov     a,sp
047C 24FC      1148            add     a,#0xfc
047E F581      1149            mov     sp,a
0480 EA        1150            mov     a,r2
0481 7001      1151            jnz     L002108?
0483 020100    1152            ljmp    L002045?
0486           1153   L002108?:
0486 E4        1154            clr     a
0487 C0E0      1155            push    acc
0489 C0E0      1156            push    acc
048B 7480      1157            mov     a,#0x80
048D C0E0      1158            push    acc
048F 743F      1159            mov     a,#0x3F
0491 C0E0      1160            push    acc
0493 856882    1161            mov     dpl,_main_v2_1_70
0496 856983    1162            mov     dph,(_main_v2_1_70 + 1)
0499 856AF0    1163            mov     b,(_main_v2_1_70 + 2)
049C E56B      1164            mov     a,(_main_v2_1_70 + 3)
049E 120100    1165            lcall   ___fsgt
04A1 AA82      1166            mov     r2,dpl
04A3 E581      1167            mov     a,sp
04A5 24FC      1168            add     a,#0xfc
04A7 F581      1169            mov     sp,a
04A9 EA        1170            mov     a,r2
04AA 7001      1171            jnz     L002109?
04AC 020100    1172            ljmp    L002045?
04AF           1173   L002109?:
04AF           1174   ;        robot.c:141: printf("\n\r INTERSECTION\n");
04AF 7440      1175            mov     a,#__str_4
04B1 C0E0      1176            push    acc
04B3 74A5      1177            mov     a,#(__str_4 >> 8)
04B5 C0E0      1178            push    acc
04B7 7480      1179            mov     a,#0x80
04B9 C0E0      1180            push    acc
04BB 120100    1181            lcall   _printf
04BE 1581      1182            dec     sp
04C0 1581      1183            dec     sp
04C2 1581      1184            dec     sp
04C4           1185   ;        robot.c:143: turncar(currentstate + 2); //1 = right
04C4 AAF0      1186            mov     r2,_currentstate
04C6 E5F0      1187            mov     a,_currentstate
04C8 33        1188            rlc     a
04C9 95E0      1189            subb    a,acc
04CB FB        1190            mov     r3,a
04CC 8A82      1191            mov     dpl,r2
04CE 8B83      1192            mov     dph,r3
04D0 A3        1193            inc     dptr
04D1 A3        1194            inc     dptr
04D2 120100    1195            lcall   _turncar
04D5           1196   ;        robot.c:144: currentcmd = 0;
04D5 753000    1197            mov     _currentcmd,#0x00
04D8           1198   ;        robot.c:146: break;
04D8 020100    1199            ljmp    L002045?
04DB           1200   ;        robot.c:149: case CMD_FORWARD:
04DB           1201   L002038?:
04DB           1202   ;        robot.c:151: printf("GO!\n");
04DB 7440      1203            mov     a,#__str_6
04DD C0E0      1204            push    acc
04DF 74A6      1205            mov     a,#(__str_6 >> 8)
04E1 C0E0      1206            push    acc
04E3 7480      1207            mov     a,#0x80
04E5 C0E0      1208            push    acc
04E7 120100    1209            lcall   _printf
04EA 1581      1210            dec     sp
04EC 1581      1211            dec     sp
04EE 1581      1212            dec     sp
04F0           1213   ;        robot.c:152: currentstate = 1;
04F0 75F001    1214            mov     _currentstate,#0x01
04F3           1215   ;        robot.c:153: currentcmd = 0;
04F3 753000    1216            mov     _currentcmd,#0x00
04F6           1217   ;        robot.c:154: break;
04F6 020100    1218            ljmp    L002045?
04F9           1219   ;        robot.c:157: case CMD_REVERSE:
04F9           1220   L002039?:
04F9           1221   ;        robot.c:159: printf("Reverse Reverse!\n");
04F9 7480      1222            mov     a,#__str_7
04FB C0E0      1223            push    acc
04FD 74A6      1224            mov     a,#(__str_7 >> 8)
04FF C0E0      1225            push    acc
0501 7480      1226            mov     a,#0x80
0503 C0E0      1227            push    acc
0505 120100    1228            lcall   _printf
0508 1581      1229            dec     sp
050A 1581      1230            dec     sp
050C 1581      1231            dec     sp
050E           1232   ;        robot.c:160: currentstate = 2;
050E 75F002    1233            mov     _currentstate,#0x02
0511           1234   ;        robot.c:161: currentcmd = 0;
0511 753000    1235            mov     _currentcmd,#0x00
0514           1236   ;        robot.c:162: break;
0514 020100    1237            ljmp    L002045?
0517           1238   ;        robot.c:165: case CMD_STOP:
0517           1239   L002040?:
0517           1240   ;        robot.c:167: printf("HALT peasants!\n");
0517 74C0      1241            mov     a,#__str_8
0519 C0E0      1242            push    acc
051B 74A6      1243            mov     a,#(__str_8 >> 8)
051D C0E0      1244            push    acc
051F 7480      1245            mov     a,#0x80
0521 C0E0      1246            push    acc
0523 120100    1247            lcall   _printf
0526 1581      1248            dec     sp
0528 1581      1249            dec     sp
052A 1581      1250            dec     sp
052C           1251   ;        robot.c:168: currentstate = 3;
052C 75F003    1252            mov     _currentstate,#0x03
052F           1253   ;        robot.c:169: currentcmd = 0;
052F 753000    1254            mov     _currentcmd,#0x00
0532           1255   ;        robot.c:170: break;
0532 020100    1256            ljmp    L002045?
0535           1257   ;        robot.c:173: case CMD_UTURN:
0535           1258   L002041?:
0535           1259   ;        robot.c:174: uturn();
0535 120100    1260            lcall   _uturn
0538           1261   ;        robot.c:175: printf("UTURN\n");
0538 7400      1262            mov     a,#__str_9
053A C0E0      1263            push    acc
053C 74A7      1264            mov     a,#(__str_9 >> 8)
053E C0E0      1265            push    acc
0540 7480      1266            mov     a,#0x80
0542 C0E0      1267            push    acc
0544 120100    1268            lcall   _printf
0547 1581      1269            dec     sp
0549 1581      1270            dec     sp
054B 1581      1271            dec     sp
054D           1272   ;        robot.c:176: currentcmd = 0;
054D 753000    1273            mov     _currentcmd,#0x00
0550           1274   ;        robot.c:177: break;
0550 020100    1275            ljmp    L002045?
0553           1276   ;        robot.c:180: default: 
0553           1277   L002042?:
0553           1278   ;        robot.c:181: currentstate = 1;
0553 75F001    1279            mov     _currentstate,#0x01
0556           1280   ;        robot.c:182: }
0556 020100    1281            ljmp    L002045?
0559           1282   ;------------------------------------------------------------
0559           1283   ;Allocation info for local variables in function 'Timer2_ISR'
0559           1284   ;------------------------------------------------------------
0559           1285   ;------------------------------------------------------------
0559           1286   ;        robot.c:186: void Timer2_ISR (void) interrupt 5 {
0559           1287   ;        -----------------------------------------
0559           1288   ;         function Timer2_ISR
0559           1289   ;        -----------------------------------------
0559           1290   _Timer2_ISR:
0559 C0E0      1291            push    acc
055B C0F0      1292            push    b
055D C0D0      1293            push    psw
055F 75D000    1294            mov     psw,#0x00
0562           1295   ;        robot.c:187: TF2H = 0; // Clear Timer2 interrupt flag
0562 C2CF      1296            clr     _TF2H
0564           1297   ;        robot.c:189: pwm_count++;
0564 0520      1298            inc     _pwm_count
0566           1299   ;        robot.c:190: if(pwm_count>100) pwm_count=0;
0566 C3        1300            clr     c
0567 74E4      1301            mov     a,#(0x64 ^ 0x80)
0569 8520F0    1302            mov     b,_pwm_count
056C 63F080    1303            xrl     b,#0x80
056F 95F0      1304            subb    a,b
0571 5001      1305            jnc     L003002?
0573 752000    1306            mov     _pwm_count,#0x00
0576           1307   L003002?:
0576           1308   ;        robot.c:193: MOTOR_LEFT0 = pwm_count > pwm_Left0 ? 0 : 1; //p1.5
0576 C3        1309            clr     c
0577 E570      1310            mov     a,_pwm_Left0
0579 6480      1311            xrl     a,#0x80
057B 8520F0    1312            mov     b,_pwm_count
057E 63F080    1313            xrl     b,#0x80
0581 95F0      1314            subb    a,b
0583 9268      1315            mov  _Timer2_ISR_sloc0_1_0,c
0585 B3        1316            cpl     c
0586 9295      1317            mov     _P1_5,c
0588           1318   ;        robot.c:194: MOTOR_LEFT1 = pwm_count > pwm_Left1 ? 0 : 1; //p1.6
0588 C3        1319            clr     c
0589 E530      1320            mov     a,_pwm_Left1
058B 6480      1321            xrl     a,#0x80
058D 8520F0    1322            mov     b,_pwm_count
0590 63F080    1323            xrl     b,#0x80
0593 95F0      1324            subb    a,b
0595 9268      1325            mov  _Timer2_ISR_sloc0_1_0,c
0597 B3        1326            cpl     c
0598 9296      1327            mov     _P1_6,c
059A           1328   ;        robot.c:195: MOTOR_RIGHT0 = pwm_count > pwm_Right0 ? 0 : 1; //p2.0
059A C3        1329            clr     c
059B E5F0      1330            mov     a,_pwm_Right0
059D 6480      1331            xrl     a,#0x80
059F 8520F0    1332            mov     b,_pwm_count
05A2 63F080    1333            xrl     b,#0x80
05A5 95F0      1334            subb    a,b
05A7 9268      1335            mov  _Timer2_ISR_sloc0_1_0,c
05A9 B3        1336            cpl     c
05AA 92A0      1337            mov     _P2_0,c
05AC           1338   ;        robot.c:196: MOTOR_RIGHT1 = pwm_count > pwm_Right1 ? 0 : 1; //p2.1
05AC C3        1339            clr     c
05AD E5B0      1340            mov     a,_pwm_Right1
05AF 6480      1341            xrl     a,#0x80
05B1 8520F0    1342            mov     b,_pwm_count
05B4 63F080    1343            xrl     b,#0x80
05B7 95F0      1344            subb    a,b
05B9 9268      1345            mov  _Timer2_ISR_sloc0_1_0,c
05BB B3        1346            cpl     c
05BC 92A1      1347            mov     _P2_1,c
05BE D0D0      1348            pop     psw
05C0 D0F0      1349            pop     b
05C2 D0E0      1350            pop     acc
05C4 32        1351            reti
05C5           1352   ;        eliminated unneeded push/pop dpl
05C5           1353   ;        eliminated unneeded push/pop dph
05C5           1354   ;------------------------------------------------------------
05C5           1355   ;Allocation info for local variables in function 'readData'
05C5           1356   ;------------------------------------------------------------
05C5           1357   ;command                   Allocated to registers r2 
05C5           1358   ;------------------------------------------------------------
05C5           1359   ;        robot.c:289: unsigned char readData(void) {
05C5           1360   ;        -----------------------------------------
05C5           1361   ;         function readData
05C5           1362   ;        -----------------------------------------
05C5           1363   _readData:
05C5           1364   ;        robot.c:290: unsigned char command = 0;
05C5 7A00      1365            mov     r2,#0x00
05C7           1366   ;        robot.c:291: if (!COMMAND_PIN) {
05C7 3091C0    1367            jnb     _P1_1,L004024?
05CA 020100    1368            ljmp    L004008?
05CD           1369   L004024?:
05CD           1370   ;        robot.c:292: while (!COMMAND_PIN);
05CD           1371   L004001?:
05CD 309140    1372            jnb     _P1_1,L004001?
05D0           1373   ;        robot.c:293: P1_4 = 1;
05D0 D294      1374            setb    _P1_4
05D2           1375   ;        robot.c:294: waitms((int)(CMDFRQ + CMDFRQ/2));
05D2 900060    1376            mov     dptr,#0x0060
05D5 120100    1377            lcall   _waitms
05D8           1378   ;        robot.c:295: P1_4 = 0;
05D8 C294      1379            clr     _P1_4
05DA           1380   ;        robot.c:296: command |= COMMAND_PIN<<2;
05DA A291      1381            mov     c,_P1_1
05DC E4        1382            clr     a
05DD 33        1383            rlc     a
05DE 25E0      1384            add     a,acc
05E0 25E0      1385            add     a,acc
05E2 FA        1386            mov     r2,a
05E3           1387   ;        robot.c:297: waitms(CMDFRQ);
05E3 900040    1388            mov     dptr,#0x0040
05E6 C002      1389            push    ar2
05E8 120100    1390            lcall   _waitms
05EB D002      1391            pop     ar2
05ED           1392   ;        robot.c:298: P1_4 = 1;
05ED D294      1393            setb    _P1_4
05EF           1394   ;        robot.c:299: command |= COMMAND_PIN<<1;
05EF A291      1395            mov     c,_P1_1
05F1 E4        1396            clr     a
05F2 33        1397            rlc     a
05F3 25E0      1398            add     a,acc
05F5 4202      1399            orl     ar2,a
05F7           1400   ;        robot.c:300: waitms(CMDFRQ);
05F7 900040    1401            mov     dptr,#0x0040
05FA C002      1402            push    ar2
05FC 120100    1403            lcall   _waitms
05FF D002      1404            pop     ar2
0601           1405   ;        robot.c:301: P1_4 = 0;
0601 C294      1406            clr     _P1_4
0603           1407   ;        robot.c:302: command |= COMMAND_PIN;
0603 A291      1408            mov     c,_P1_1
0605 E4        1409            clr     a
0606 33        1410            rlc     a
0607 FB        1411            mov     r3,a
0608 4202      1412            orl     ar2,a
060A           1413   ;        robot.c:303: while (!COMMAND_PIN);
060A           1414   L004004?:
060A 309180    1415            jnb     _P1_1,L004004?
060D           1416   ;        robot.c:307: (command & 0x01) ? '1' : '0');
060D EA        1417            mov     a,r2
060E 30E0C0    1418            jnb     acc.0,L004011?
0611 7B31      1419            mov     r3,#0x31
0613 8001      1420            sjmp    L004012?
0615           1421   L004011?:
0615 7B30      1422            mov     r3,#0x30
0617           1423   L004012?:
0617 EB        1424            mov     a,r3
0618 33        1425            rlc     a
0619 95E0      1426            subb    a,acc
061B FC        1427            mov     r4,a
061C           1428   ;        robot.c:306: (command & 0x02) ? '1' : '0',
061C EA        1429            mov     a,r2
061D 30E140    1430            jnb     acc.1,L004013?
0620 7D31      1431            mov     r5,#0x31
0622 8001      1432            sjmp    L004014?
0624           1433   L004013?:
0624 7D30      1434            mov     r5,#0x30
0626           1435   L004014?:
0626 ED        1436            mov     a,r5
0627 33        1437            rlc     a
0628 95E0      1438            subb    a,acc
062A FE        1439            mov     r6,a
062B           1440   ;        robot.c:305: (command & 0x04) ? '1' : '0',
062B EA        1441            mov     a,r2
062C 30E2C0    1442            jnb     acc.2,L004015?
062F 7F31      1443            mov     r7,#0x31
0631 8001      1444            sjmp    L004016?
0633           1445   L004015?:
0633 7F30      1446            mov     r7,#0x30
0635           1447   L004016?:
0635 EF        1448            mov     a,r7
0636 33        1449            rlc     a
0637 95E0      1450            subb    a,acc
0639 F8        1451            mov     r0,a
063A           1452   ;        robot.c:304: printf("\nCommand received: 0b_0%c%c%c\n", 
063A C002      1453            push    ar2
063C C003      1454            push    ar3
063E C004      1455            push    ar4
0640 C005      1456            push    ar5
0642 C006      1457            push    ar6
0644 C007      1458            push    ar7
0646 C000      1459            push    ar0
0648 7440      1460            mov     a,#__str_10
064A C0E0      1461            push    acc
064C 74AA      1462            mov     a,#(__str_10 >> 8)
064E C0E0      1463            push    acc
0650 7480      1464            mov     a,#0x80
0652 C0E0      1465            push    acc
0654 120100    1466            lcall   _printf
0657 E581      1467            mov     a,sp
0659 24F7      1468            add     a,#0xf7
065B F581      1469            mov     sp,a
065D D002      1470            pop     ar2
065F           1471   L004008?:
065F           1472   ;        robot.c:309: return command;
065F 8A82      1473            mov     dpl,r2
0661 22        1474            ret
0662           1475   ;------------------------------------------------------------
0662           1476   ;Allocation info for local variables in function 'linetrack'
0662           1477   ;------------------------------------------------------------
0662           1478   ;forwardbackward           Allocated to registers r2 r3 
0662           1479   ;vleft                     Allocated with name '_linetrack_vleft_1_89'
0662           1480   ;vright                    Allocated with name '_linetrack_vright_1_89'
0662           1481   ;sloc0                     Allocated with name '_linetrack_sloc0_1_0'
0662           1482   ;sloc1                     Allocated with name '_linetrack_sloc1_1_0'
0662           1483   ;------------------------------------------------------------
0662           1484   ;        robot.c:316: void linetrack (int forwardbackward) {
0662           1485   ;        -----------------------------------------
0662           1486   ;         function linetrack
0662           1487   ;        -----------------------------------------
0662           1488   _linetrack:
0662 AA82      1489            mov     r2,dpl
0664 AB83      1490            mov     r3,dph
0666           1491   ;        robot.c:324: if (forwardbackward == 0) {
0666 EA        1492            mov     a,r2
0667 4B        1493            orl     a,r3
0668 6001      1494            jz      L005010?
066A 020100    1495            ljmp    L005004?
066D           1496   L005010?:
066D           1497   ;        robot.c:325: vleft=Volts_at_Pin(TANK_FL);
066D 75820B    1498            mov     dpl,#0x0B
0670 120100    1499            lcall   _Volts_at_Pin
0673 8582B8    1500            mov     _linetrack_vleft_1_89,dpl
0676 8583B9    1501            mov     (_linetrack_vleft_1_89 + 1),dph
0679 85F0BA    1502            mov     (_linetrack_vleft_1_89 + 2),b
067C F5BB      1503            mov     (_linetrack_vleft_1_89 + 3),a
067E           1504   ;        robot.c:326: vright=Volts_at_Pin(TANK_FR);
067E 75820C    1505            mov     dpl,#0x0C
0681 120100    1506            lcall   _Volts_at_Pin
0684 858208    1507            mov     _linetrack_vright_1_89,dpl
0687 858309    1508            mov     (_linetrack_vright_1_89 + 1),dph
068A 85F00A    1509            mov     (_linetrack_vright_1_89 + 2),b
068D F50B      1510            mov     (_linetrack_vright_1_89 + 3),a
068F           1511   ;        robot.c:329: pwm_Left0 = -1;
068F 7570FF    1512            mov     _pwm_Left0,#0xFF
0692           1513   ;        robot.c:330: pwm_Left1 = vright*vright*75/(vright*vright+vleft*vleft);
0692 C008      1514            push    _linetrack_vright_1_89
0694 C009      1515            push    (_linetrack_vright_1_89 + 1)
0696 C00A      1516            push    (_linetrack_vright_1_89 + 2)
0698 C00B      1517            push    (_linetrack_vright_1_89 + 3)
069A 850882    1518            mov     dpl,_linetrack_vright_1_89
069D 850983    1519            mov     dph,(_linetrack_vright_1_89 + 1)
06A0 850AF0    1520            mov     b,(_linetrack_vright_1_89 + 2)
06A3 E50B      1521            mov     a,(_linetrack_vright_1_89 + 3)
06A5 120100    1522            lcall   ___fsmul
06A8 AC82      1523            mov     r4,dpl
06AA AD83      1524            mov     r5,dph
06AC AEF0      1525            mov     r6,b
06AE FF        1526            mov     r7,a
06AF E581      1527            mov     a,sp
06B1 24FC      1528            add     a,#0xfc
06B3 F581      1529            mov     sp,a
06B5 C004      1530            push    ar4
06B7 C005      1531            push    ar5
06B9 C006      1532            push    ar6
06BB C007      1533            push    ar7
06BD 900000    1534            mov     dptr,#0x0000
06C0 75F096    1535            mov     b,#0x96
06C3 7442      1536            mov     a,#0x42
06C5 120100    1537            lcall   ___fsmul
06C8 858258    1538            mov     _linetrack_sloc0_1_0,dpl
06CB 858359    1539            mov     (_linetrack_sloc0_1_0 + 1),dph
06CE 85F05A    1540            mov     (_linetrack_sloc0_1_0 + 2),b
06D1 F55B      1541            mov     (_linetrack_sloc0_1_0 + 3),a
06D3 E581      1542            mov     a,sp
06D5 24FC      1543            add     a,#0xfc
06D7 F581      1544            mov     sp,a
06D9 C008      1545            push    _linetrack_vright_1_89
06DB C009      1546            push    (_linetrack_vright_1_89 + 1)
06DD C00A      1547            push    (_linetrack_vright_1_89 + 2)
06DF C00B      1548            push    (_linetrack_vright_1_89 + 3)
06E1 850882    1549            mov     dpl,_linetrack_vright_1_89
06E4 850983    1550            mov     dph,(_linetrack_vright_1_89 + 1)
06E7 850AF0    1551            mov     b,(_linetrack_vright_1_89 + 2)
06EA E50B      1552            mov     a,(_linetrack_vright_1_89 + 3)
06EC 120100    1553            lcall   ___fsmul
06EF 8582A8    1554            mov     _linetrack_sloc1_1_0,dpl
06F2 8583A9    1555            mov     (_linetrack_sloc1_1_0 + 1),dph
06F5 85F0AA    1556            mov     (_linetrack_sloc1_1_0 + 2),b
06F8 F5AB      1557            mov     (_linetrack_sloc1_1_0 + 3),a
06FA E581      1558            mov     a,sp
06FC 24FC      1559            add     a,#0xfc
06FE F581      1560            mov     sp,a
0700 C0B8      1561            push    _linetrack_vleft_1_89
0702 C0B9      1562            push    (_linetrack_vleft_1_89 + 1)
0704 C0BA      1563            push    (_linetrack_vleft_1_89 + 2)
0706 C0BB      1564            push    (_linetrack_vleft_1_89 + 3)
0708 85B882    1565            mov     dpl,_linetrack_vleft_1_89
070B 85B983    1566            mov     dph,(_linetrack_vleft_1_89 + 1)
070E 85BAF0    1567            mov     b,(_linetrack_vleft_1_89 + 2)
0711 E5BB      1568            mov     a,(_linetrack_vleft_1_89 + 3)
0713 120100    1569            lcall   ___fsmul
0716 AE82      1570            mov     r6,dpl
0718 AF83      1571            mov     r7,dph
071A ACF0      1572            mov     r4,b
071C FD        1573            mov     r5,a
071D E581      1574            mov     a,sp
071F 24FC      1575            add     a,#0xfc
0721 F581      1576            mov     sp,a
0723 C006      1577            push    ar6
0725 C007      1578            push    ar7
0727 C004      1579            push    ar4
0729 C005      1580            push    ar5
072B 85A882    1581            mov     dpl,_linetrack_sloc1_1_0
072E 85A983    1582            mov     dph,(_linetrack_sloc1_1_0 + 1)
0731 85AAF0    1583            mov     b,(_linetrack_sloc1_1_0 + 2)
0734 E5AB      1584            mov     a,(_linetrack_sloc1_1_0 + 3)
0736 120100    1585            lcall   ___fsadd
0739 AC82      1586            mov     r4,dpl
073B AD83      1587            mov     r5,dph
073D AEF0      1588            mov     r6,b
073F FF        1589            mov     r7,a
0740 E581      1590            mov     a,sp
0742 24FC      1591            add     a,#0xfc
0744 F581      1592            mov     sp,a
0746 C004      1593            push    ar4
0748 C005      1594            push    ar5
074A C006      1595            push    ar6
074C C007      1596            push    ar7
074E 855882    1597            mov     dpl,_linetrack_sloc0_1_0
0751 855983    1598            mov     dph,(_linetrack_sloc0_1_0 + 1)
0754 855AF0    1599            mov     b,(_linetrack_sloc0_1_0 + 2)
0757 E55B      1600            mov     a,(_linetrack_sloc0_1_0 + 3)
0759 120100    1601            lcall   ___fsdiv
075C AC82      1602            mov     r4,dpl
075E AD83      1603            mov     r5,dph
0760 AEF0      1604            mov     r6,b
0762 FF        1605            mov     r7,a
0763 E581      1606            mov     a,sp
0765 24FC      1607            add     a,#0xfc
0767 F581      1608            mov     sp,a
0769 8C82      1609            mov     dpl,r4
076B 8D83      1610            mov     dph,r5
076D 8EF0      1611            mov     b,r6
076F EF        1612            mov     a,r7
0770 120100    1613            lcall   ___fs2schar
0773 858230    1614            mov     _pwm_Left1,dpl
0776           1615   ;        robot.c:331: pwm_Right1 = -1;
0776 75B0FF    1616            mov     _pwm_Right1,#0xFF
0779           1617   ;        robot.c:332: pwm_Right0 = vleft*vleft*75/(vright*vright+vleft*vleft);
0779 C0B8      1618            push    _linetrack_vleft_1_89
077B C0B9      1619            push    (_linetrack_vleft_1_89 + 1)
077D C0BA      1620            push    (_linetrack_vleft_1_89 + 2)
077F C0BB      1621            push    (_linetrack_vleft_1_89 + 3)
0781 85B882    1622            mov     dpl,_linetrack_vleft_1_89
0784 85B983    1623            mov     dph,(_linetrack_vleft_1_89 + 1)
0787 85BAF0    1624            mov     b,(_linetrack_vleft_1_89 + 2)
078A E5BB      1625            mov     a,(_linetrack_vleft_1_89 + 3)
078C 120100    1626            lcall   ___fsmul
078F AC82      1627            mov     r4,dpl
0791 AD83      1628            mov     r5,dph
0793 AEF0      1629            mov     r6,b
0795 FF        1630            mov     r7,a
0796 E581      1631            mov     a,sp
0798 24FC      1632            add     a,#0xfc
079A F581      1633            mov     sp,a
079C C004      1634            push    ar4
079E C005      1635            push    ar5
07A0 C006      1636            push    ar6
07A2 C007      1637            push    ar7
07A4 900000    1638            mov     dptr,#0x0000
07A7 75F096    1639            mov     b,#0x96
07AA 7442      1640            mov     a,#0x42
07AC 120100    1641            lcall   ___fsmul
07AF 8582A8    1642            mov     _linetrack_sloc1_1_0,dpl
07B2 8583A9    1643            mov     (_linetrack_sloc1_1_0 + 1),dph
07B5 85F0AA    1644            mov     (_linetrack_sloc1_1_0 + 2),b
07B8 F5AB      1645            mov     (_linetrack_sloc1_1_0 + 3),a
07BA E581      1646            mov     a,sp
07BC 24FC      1647            add     a,#0xfc
07BE F581      1648            mov     sp,a
07C0 C008      1649            push    _linetrack_vright_1_89
07C2 C009      1650            push    (_linetrack_vright_1_89 + 1)
07C4 C00A      1651            push    (_linetrack_vright_1_89 + 2)
07C6 C00B      1652            push    (_linetrack_vright_1_89 + 3)
07C8 850882    1653            mov     dpl,_linetrack_vright_1_89
07CB 850983    1654            mov     dph,(_linetrack_vright_1_89 + 1)
07CE 850AF0    1655            mov     b,(_linetrack_vright_1_89 + 2)
07D1 E50B      1656            mov     a,(_linetrack_vright_1_89 + 3)
07D3 120100    1657            lcall   ___fsmul
07D6 858258    1658            mov     _linetrack_sloc0_1_0,dpl
07D9 858359    1659            mov     (_linetrack_sloc0_1_0 + 1),dph
07DC 85F05A    1660            mov     (_linetrack_sloc0_1_0 + 2),b
07DF F55B      1661            mov     (_linetrack_sloc0_1_0 + 3),a
07E1 E581      1662            mov     a,sp
07E3 24FC      1663            add     a,#0xfc
07E5 F581      1664            mov     sp,a
07E7 C0B8      1665            push    _linetrack_vleft_1_89
07E9 C0B9      1666            push    (_linetrack_vleft_1_89 + 1)
07EB C0BA      1667            push    (_linetrack_vleft_1_89 + 2)
07ED C0BB      1668            push    (_linetrack_vleft_1_89 + 3)
07EF 85B882    1669            mov     dpl,_linetrack_vleft_1_89
07F2 85B983    1670            mov     dph,(_linetrack_vleft_1_89 + 1)
07F5 85BAF0    1671            mov     b,(_linetrack_vleft_1_89 + 2)
07F8 E5BB      1672            mov     a,(_linetrack_vleft_1_89 + 3)
07FA 120100    1673            lcall   ___fsmul
07FD AE82      1674            mov     r6,dpl
07FF AF83      1675            mov     r7,dph
0801 ACF0      1676            mov     r4,b
0803 FD        1677            mov     r5,a
0804 E581      1678            mov     a,sp
0806 24FC      1679            add     a,#0xfc
0808 F581      1680            mov     sp,a
080A C006      1681            push    ar6
080C C007      1682            push    ar7
080E C004      1683            push    ar4
0810 C005      1684            push    ar5
0812 855882    1685            mov     dpl,_linetrack_sloc0_1_0
0815 855983    1686            mov     dph,(_linetrack_sloc0_1_0 + 1)
0818 855AF0    1687            mov     b,(_linetrack_sloc0_1_0 + 2)
081B E55B      1688            mov     a,(_linetrack_sloc0_1_0 + 3)
081D 120100    1689            lcall   ___fsadd
0820 AC82      1690            mov     r4,dpl
0822 AD83      1691            mov     r5,dph
0824 AEF0      1692            mov     r6,b
0826 FF        1693            mov     r7,a
0827 E581      1694            mov     a,sp
0829 24FC      1695            add     a,#0xfc
082B F581      1696            mov     sp,a
082D C004      1697            push    ar4
082F C005      1698            push    ar5
0831 C006      1699            push    ar6
0833 C007      1700            push    ar7
0835 85A882    1701            mov     dpl,_linetrack_sloc1_1_0
0838 85A983    1702            mov     dph,(_linetrack_sloc1_1_0 + 1)
083B 85AAF0    1703            mov     b,(_linetrack_sloc1_1_0 + 2)
083E E5AB      1704            mov     a,(_linetrack_sloc1_1_0 + 3)
0840 120100    1705            lcall   ___fsdiv
0843 AC82      1706            mov     r4,dpl
0845 AD83      1707            mov     r5,dph
0847 AEF0      1708            mov     r6,b
0849 FF        1709            mov     r7,a
084A E581      1710            mov     a,sp
084C 24FC      1711            add     a,#0xfc
084E F581      1712            mov     sp,a
0850 8C82      1713            mov     dpl,r4
0852 8D83      1714            mov     dph,r5
0854 8EF0      1715            mov     b,r6
0856 EF        1716            mov     a,r7
0857 120100    1717            lcall   ___fs2schar
085A 8582F0    1718            mov     _pwm_Right0,dpl
085D 22        1719            ret
085E           1720   L005004?:
085E           1721   ;        robot.c:333: } else if (forwardbackward == 1) {
085E BA0100    1722            cjne    r2,#0x01,L005011?
0861 BB0000    1723            cjne    r3,#0x00,L005011?
0864 8001      1724            sjmp    L005012?
0866           1725   L005011?:
0866 22        1726            ret
0867           1727   L005012?:
0867           1728   ;        robot.c:336: vleft=Volts_at_Pin(TANK_RL);
0867 75820D    1729            mov     dpl,#0x0D
086A 120100    1730            lcall   _Volts_at_Pin
086D 8582B8    1731            mov     _linetrack_vleft_1_89,dpl
0870 8583B9    1732            mov     (_linetrack_vleft_1_89 + 1),dph
0873 85F0BA    1733            mov     (_linetrack_vleft_1_89 + 2),b
0876 F5BB      1734            mov     (_linetrack_vleft_1_89 + 3),a
0878           1735   ;        robot.c:337: vright=Volts_at_Pin(TANK_RR);
0878 75820E    1736            mov     dpl,#0x0E
087B 120100    1737            lcall   _Volts_at_Pin
087E 858208    1738            mov     _linetrack_vright_1_89,dpl
0881 858309    1739            mov     (_linetrack_vright_1_89 + 1),dph
0884 85F00A    1740            mov     (_linetrack_vright_1_89 + 2),b
0887 F50B      1741            mov     (_linetrack_vright_1_89 + 3),a
0889           1742   ;        robot.c:340: pwm_Left1 = -1;
0889 7530FF    1743            mov     _pwm_Left1,#0xFF
088C           1744   ;        robot.c:341: pwm_Left0 = vright*vright*75/(vright*vright+vleft*vleft);
088C C008      1745            push    _linetrack_vright_1_89
088E C009      1746            push    (_linetrack_vright_1_89 + 1)
0890 C00A      1747            push    (_linetrack_vright_1_89 + 2)
0892 C00B      1748            push    (_linetrack_vright_1_89 + 3)
0894 850882    1749            mov     dpl,_linetrack_vright_1_89
0897 850983    1750            mov     dph,(_linetrack_vright_1_89 + 1)
089A 850AF0    1751            mov     b,(_linetrack_vright_1_89 + 2)
089D E50B      1752            mov     a,(_linetrack_vright_1_89 + 3)
089F 120100    1753            lcall   ___fsmul
08A2 AA82      1754            mov     r2,dpl
08A4 AB83      1755            mov     r3,dph
08A6 ACF0      1756            mov     r4,b
08A8 FD        1757            mov     r5,a
08A9 E581      1758            mov     a,sp
08AB 24FC      1759            add     a,#0xfc
08AD F581      1760            mov     sp,a
08AF C002      1761            push    ar2
08B1 C003      1762            push    ar3
08B3 C004      1763            push    ar4
08B5 C005      1764            push    ar5
08B7 900000    1765            mov     dptr,#0x0000
08BA 75F096    1766            mov     b,#0x96
08BD 7442      1767            mov     a,#0x42
08BF 120100    1768            lcall   ___fsmul
08C2 AA82      1769            mov     r2,dpl
08C4 AB83      1770            mov     r3,dph
08C6 ACF0      1771            mov     r4,b
08C8 FD        1772            mov     r5,a
08C9 E581      1773            mov     a,sp
08CB 24FC      1774            add     a,#0xfc
08CD F581      1775            mov     sp,a
08CF C002      1776            push    ar2
08D1 C003      1777            push    ar3
08D3 C004      1778            push    ar4
08D5 C005      1779            push    ar5
08D7 C008      1780            push    _linetrack_vright_1_89
08D9 C009      1781            push    (_linetrack_vright_1_89 + 1)
08DB C00A      1782            push    (_linetrack_vright_1_89 + 2)
08DD C00B      1783            push    (_linetrack_vright_1_89 + 3)
08DF 850882    1784            mov     dpl,_linetrack_vright_1_89
08E2 850983    1785            mov     dph,(_linetrack_vright_1_89 + 1)
08E5 850AF0    1786            mov     b,(_linetrack_vright_1_89 + 2)
08E8 E50B      1787            mov     a,(_linetrack_vright_1_89 + 3)
08EA 120100    1788            lcall   ___fsmul
08ED 8582A8    1789            mov     _linetrack_sloc1_1_0,dpl
08F0 8583A9    1790            mov     (_linetrack_sloc1_1_0 + 1),dph
08F3 85F0AA    1791            mov     (_linetrack_sloc1_1_0 + 2),b
08F6 F5AB      1792            mov     (_linetrack_sloc1_1_0 + 3),a
08F8 E581      1793            mov     a,sp
08FA 24FC      1794            add     a,#0xfc
08FC F581      1795            mov     sp,a
08FE C0B8      1796            push    _linetrack_vleft_1_89
0900 C0B9      1797            push    (_linetrack_vleft_1_89 + 1)
0902 C0BA      1798            push    (_linetrack_vleft_1_89 + 2)
0904 C0BB      1799            push    (_linetrack_vleft_1_89 + 3)
0906 85B882    1800            mov     dpl,_linetrack_vleft_1_89
0909 85B983    1801            mov     dph,(_linetrack_vleft_1_89 + 1)
090C 85BAF0    1802            mov     b,(_linetrack_vleft_1_89 + 2)
090F E5BB      1803            mov     a,(_linetrack_vleft_1_89 + 3)
0911 120100    1804            lcall   ___fsmul
0914 AE82      1805            mov     r6,dpl
0916 AF83      1806            mov     r7,dph
0918 A8F0      1807            mov     r0,b
091A F9        1808            mov     r1,a
091B E581      1809            mov     a,sp
091D 24FC      1810            add     a,#0xfc
091F F581      1811            mov     sp,a
0921 C006      1812            push    ar6
0923 C007      1813            push    ar7
0925 C000      1814            push    ar0
0927 C001      1815            push    ar1
0929 85A882    1816            mov     dpl,_linetrack_sloc1_1_0
092C 85A983    1817            mov     dph,(_linetrack_sloc1_1_0 + 1)
092F 85AAF0    1818            mov     b,(_linetrack_sloc1_1_0 + 2)
0932 E5AB      1819            mov     a,(_linetrack_sloc1_1_0 + 3)
0934 120100    1820            lcall   ___fsadd
0937 AE82      1821            mov     r6,dpl
0939 AF83      1822            mov     r7,dph
093B A8F0      1823            mov     r0,b
093D F9        1824            mov     r1,a
093E E581      1825            mov     a,sp
0940 24FC      1826            add     a,#0xfc
0942 F581      1827            mov     sp,a
0944 D005      1828            pop     ar5
0946 D004      1829            pop     ar4
0948 D003      1830            pop     ar3
094A D002      1831            pop     ar2
094C C006      1832            push    ar6
094E C007      1833            push    ar7
0950 C000      1834            push    ar0
0952 C001      1835            push    ar1
0954 8A82      1836            mov     dpl,r2
0956 8B83      1837            mov     dph,r3
0958 8CF0      1838            mov     b,r4
095A ED        1839            mov     a,r5
095B 120100    1840            lcall   ___fsdiv
095E AA82      1841            mov     r2,dpl
0960 AB83      1842            mov     r3,dph
0962 ACF0      1843            mov     r4,b
0964 FD        1844            mov     r5,a
0965 E581      1845            mov     a,sp
0967 24FC      1846            add     a,#0xfc
0969 F581      1847            mov     sp,a
096B 8A82      1848            mov     dpl,r2
096D 8B83      1849            mov     dph,r3
096F 8CF0      1850            mov     b,r4
0971 ED        1851            mov     a,r5
0972 120100    1852            lcall   ___fs2schar
0975 858270    1853            mov     _pwm_Left0,dpl
0978           1854   ;        robot.c:342: pwm_Right0 = -1;
0978 75F0FF    1855            mov     _pwm_Right0,#0xFF
097B           1856   ;        robot.c:343: pwm_Right1 = vleft*vleft*75/(vright*vright+vleft*vleft);
097B C0B8      1857            push    _linetrack_vleft_1_89
097D C0B9      1858            push    (_linetrack_vleft_1_89 + 1)
097F C0BA      1859            push    (_linetrack_vleft_1_89 + 2)
0981 C0BB      1860            push    (_linetrack_vleft_1_89 + 3)
0983 85B882    1861            mov     dpl,_linetrack_vleft_1_89
0986 85B983    1862            mov     dph,(_linetrack_vleft_1_89 + 1)
0989 85BAF0    1863            mov     b,(_linetrack_vleft_1_89 + 2)
098C E5BB      1864            mov     a,(_linetrack_vleft_1_89 + 3)
098E 120100    1865            lcall   ___fsmul
0991 AA82      1866            mov     r2,dpl
0993 AB83      1867            mov     r3,dph
0995 ACF0      1868            mov     r4,b
0997 FD        1869            mov     r5,a
0998 E581      1870            mov     a,sp
099A 24FC      1871            add     a,#0xfc
099C F581      1872            mov     sp,a
099E C002      1873            push    ar2
09A0 C003      1874            push    ar3
09A2 C004      1875            push    ar4
09A4 C005      1876            push    ar5
09A6 900000    1877            mov     dptr,#0x0000
09A9 75F096    1878            mov     b,#0x96
09AC 7442      1879            mov     a,#0x42
09AE 120100    1880            lcall   ___fsmul
09B1 AA82      1881            mov     r2,dpl
09B3 AB83      1882            mov     r3,dph
09B5 ACF0      1883            mov     r4,b
09B7 FD        1884            mov     r5,a
09B8 E581      1885            mov     a,sp
09BA 24FC      1886            add     a,#0xfc
09BC F581      1887            mov     sp,a
09BE C002      1888            push    ar2
09C0 C003      1889            push    ar3
09C2 C004      1890            push    ar4
09C4 C005      1891            push    ar5
09C6 C008      1892            push    _linetrack_vright_1_89
09C8 C009      1893            push    (_linetrack_vright_1_89 + 1)
09CA C00A      1894            push    (_linetrack_vright_1_89 + 2)
09CC C00B      1895            push    (_linetrack_vright_1_89 + 3)
09CE 850882    1896            mov     dpl,_linetrack_vright_1_89
09D1 850983    1897            mov     dph,(_linetrack_vright_1_89 + 1)
09D4 850AF0    1898            mov     b,(_linetrack_vright_1_89 + 2)
09D7 E50B      1899            mov     a,(_linetrack_vright_1_89 + 3)
09D9 120100    1900            lcall   ___fsmul
09DC 8582A8    1901            mov     _linetrack_sloc1_1_0,dpl
09DF 8583A9    1902            mov     (_linetrack_sloc1_1_0 + 1),dph
09E2 85F0AA    1903            mov     (_linetrack_sloc1_1_0 + 2),b
09E5 F5AB      1904            mov     (_linetrack_sloc1_1_0 + 3),a
09E7 E581      1905            mov     a,sp
09E9 24FC      1906            add     a,#0xfc
09EB F581      1907            mov     sp,a
09ED C0B8      1908            push    _linetrack_vleft_1_89
09EF C0B9      1909            push    (_linetrack_vleft_1_89 + 1)
09F1 C0BA      1910            push    (_linetrack_vleft_1_89 + 2)
09F3 C0BB      1911            push    (_linetrack_vleft_1_89 + 3)
09F5 85B882    1912            mov     dpl,_linetrack_vleft_1_89
09F8 85B983    1913            mov     dph,(_linetrack_vleft_1_89 + 1)
09FB 85BAF0    1914            mov     b,(_linetrack_vleft_1_89 + 2)
09FE E5BB      1915            mov     a,(_linetrack_vleft_1_89 + 3)
0A00 120100    1916            lcall   ___fsmul
0A03 AE82      1917            mov     r6,dpl
0A05 AF83      1918            mov     r7,dph
0A07 A8F0      1919            mov     r0,b
0A09 F9        1920            mov     r1,a
0A0A E581      1921            mov     a,sp
0A0C 24FC      1922            add     a,#0xfc
0A0E F581      1923            mov     sp,a
0A10 C006      1924            push    ar6
0A12 C007      1925            push    ar7
0A14 C000      1926            push    ar0
0A16 C001      1927            push    ar1
0A18 85A882    1928            mov     dpl,_linetrack_sloc1_1_0
0A1B 85A983    1929            mov     dph,(_linetrack_sloc1_1_0 + 1)
0A1E 85AAF0    1930            mov     b,(_linetrack_sloc1_1_0 + 2)
0A21 E5AB      1931            mov     a,(_linetrack_sloc1_1_0 + 3)
0A23 120100    1932            lcall   ___fsadd
0A26 AE82      1933            mov     r6,dpl
0A28 AF83      1934            mov     r7,dph
0A2A A8F0      1935            mov     r0,b
0A2C F9        1936            mov     r1,a
0A2D E581      1937            mov     a,sp
0A2F 24FC      1938            add     a,#0xfc
0A31 F581      1939            mov     sp,a
0A33 D005      1940            pop     ar5
0A35 D004      1941            pop     ar4
0A37 D003      1942            pop     ar3
0A39 D002      1943            pop     ar2
0A3B C006      1944            push    ar6
0A3D C007      1945            push    ar7
0A3F C000      1946            push    ar0
0A41 C001      1947            push    ar1
0A43 8A82      1948            mov     dpl,r2
0A45 8B83      1949            mov     dph,r3
0A47 8CF0      1950            mov     b,r4
0A49 ED        1951            mov     a,r5
0A4A 120100    1952            lcall   ___fsdiv
0A4D AA82      1953            mov     r2,dpl
0A4F AB83      1954            mov     r3,dph
0A51 ACF0      1955            mov     r4,b
0A53 FD        1956            mov     r5,a
0A54 E581      1957            mov     a,sp
0A56 24FC      1958            add     a,#0xfc
0A58 F581      1959            mov     sp,a
0A5A 8A82      1960            mov     dpl,r2
0A5C 8B83      1961            mov     dph,r3
0A5E 8CF0      1962            mov     b,r4
0A60 ED        1963            mov     a,r5
0A61 120100    1964            lcall   ___fs2schar
0A64 8582B0    1965            mov     _pwm_Right1,dpl
0A67 22        1966            ret
0A68           1967   ;------------------------------------------------------------
0A68           1968   ;Allocation info for local variables in function 'stopcar'
0A68           1969   ;------------------------------------------------------------
0A68           1970   ;------------------------------------------------------------
0A68           1971   ;        robot.c:351: void stopcar(void) {
0A68           1972   ;        -----------------------------------------
0A68           1973   ;         function stopcar
0A68           1974   ;        -----------------------------------------
0A68           1975   _stopcar:
0A68           1976   ;        robot.c:353: pwm_Left1 = -1;
0A68 7530FF    1977            mov     _pwm_Left1,#0xFF
0A6B           1978   ;        robot.c:354: pwm_Right1 = -1;
0A6B 75B0FF    1979            mov     _pwm_Right1,#0xFF
0A6E           1980   ;        robot.c:355: pwm_Left0 = -1;
0A6E 7570FF    1981            mov     _pwm_Left0,#0xFF
0A71           1982   ;        robot.c:356: pwm_Right0 = -1;
0A71 75F0FF    1983            mov     _pwm_Right0,#0xFF
0A74 22        1984            ret
0A75           1985   ;------------------------------------------------------------
0A75           1986   ;Allocation info for local variables in function 'turncar'
0A75           1987   ;------------------------------------------------------------
0A75           1988   ;leftright                 Allocated to registers r2 r3 
0A75           1989   ;v                         Allocated with name '_turncar_v_1_95'
0A75           1990   ;direction                 Allocated with name '_turncar_direction_1_95'
0A75           1991   ;------------------------------------------------------------
0A75           1992   ;        robot.c:362: void turncar (int leftright) {
0A75           1993   ;        -----------------------------------------
0A75           1994   ;         function turncar
0A75           1995   ;        -----------------------------------------
0A75           1996   _turncar:
0A75 AA82      1997            mov     r2,dpl
0A77 AB83      1998            mov     r3,dph
0A79           1999   ;        robot.c:371: pwm_Left0 = -1;
0A79 7570FF    2000            mov     _pwm_Left0,#0xFF
0A7C           2001   ;        robot.c:372: pwm_Left1 = -1;
0A7C 7530FF    2002            mov     _pwm_Left1,#0xFF
0A7F           2003   ;        robot.c:373: pwm_Right0 = -1;
0A7F 75F0FF    2004            mov     _pwm_Right0,#0xFF
0A82           2005   ;        robot.c:374: pwm_Right1 = -1;
0A82 75B0FF    2006            mov     _pwm_Right1,#0xFF
0A85           2007   ;        robot.c:376: direction = currentstate - 1;
0A85 E5F0      2008            mov     a,_currentstate
0A87 14        2009            dec     a
0A88 F538      2010            mov     _turncar_direction_1_95,a
0A8A           2011   ;        robot.c:379: if (leftright == 1) {
0A8A BA0180    2012            cjne    r2,#0x01,L007062?
0A8D BB0080    2013            cjne    r3,#0x00,L007062?
0A90 8001      2014            sjmp    L007063?
0A92           2015   L007062?:
0A92 020100    2016            ljmp    L007022?
0A95           2017   L007063?:
0A95           2018   ;        robot.c:381: pwm_Right0 = 100;
0A95 75F064    2019            mov     _pwm_Right0,#0x64
0A98           2020   ;        robot.c:384: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0A98 E538      2021            mov     a,_turncar_direction_1_95
0A9A 6001      2022            jz      L007026?
0A9C 75820C    2023            mov     dpl,#0x0C
0A9F 120100    2024            lcall   _Volts_at_Pin
0AA2 AC82      2025            mov     r4,dpl
0AA4 AD83      2026            mov     r5,dph
0AA6 AEF0      2027            mov     r6,b
0AA8 FF        2028            mov     r7,a
0AA9 8001      2029            sjmp    L007027?
0AAB           2030   L007026?:
0AAB 75820E    2031            mov     dpl,#0x0E
0AAE 120100    2032            lcall   _Volts_at_Pin
0AB1 AC82      2033            mov     r4,dpl
0AB3 AD83      2034            mov     r5,dph
0AB5 AEF0      2035            mov     r6,b
0AB7 FF        2036            mov     r7,a
0AB8           2037   L007027?:
0AB8 8CE8      2038            mov     _turncar_v_1_95,r4
0ABA 8DE9      2039            mov     (_turncar_v_1_95 + 1),r5
0ABC 8EEA      2040            mov     (_turncar_v_1_95 + 2),r6
0ABE 8FEB      2041            mov     (_turncar_v_1_95 + 3),r7
0AC0           2042   ;        robot.c:386: while (v < 1.3) {
0AC0           2043   L007001?:
0AC0 7466      2044            mov     a,#0x66
0AC2 C0E0      2045            push    acc
0AC4 C0E0      2046            push    acc
0AC6 74A6      2047            mov     a,#0xA6
0AC8 C0E0      2048            push    acc
0ACA 743F      2049            mov     a,#0x3F
0ACC C0E0      2050            push    acc
0ACE 85E882    2051            mov     dpl,_turncar_v_1_95
0AD1 85E983    2052            mov     dph,(_turncar_v_1_95 + 1)
0AD4 85EAF0    2053            mov     b,(_turncar_v_1_95 + 2)
0AD7 E5EB      2054            mov     a,(_turncar_v_1_95 + 3)
0AD9 120100    2055            lcall   ___fslt
0ADC AC82      2056            mov     r4,dpl
0ADE E581      2057            mov     a,sp
0AE0 24FC      2058            add     a,#0xfc
0AE2 F581      2059            mov     sp,a
0AE4 EC        2060            mov     a,r4
0AE5 6001      2061            jz      L007003?
0AE7           2062   ;        robot.c:388: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0AE7 E538      2063            mov     a,_turncar_direction_1_95
0AE9 6001      2064            jz      L007028?
0AEB 75820C    2065            mov     dpl,#0x0C
0AEE 120100    2066            lcall   _Volts_at_Pin
0AF1 AC82      2067            mov     r4,dpl
0AF3 AD83      2068            mov     r5,dph
0AF5 AEF0      2069            mov     r6,b
0AF7 FF        2070            mov     r7,a
0AF8 8001      2071            sjmp    L007029?
0AFA           2072   L007028?:
0AFA 75820E    2073            mov     dpl,#0x0E
0AFD 120100    2074            lcall   _Volts_at_Pin
0B00 AC82      2075            mov     r4,dpl
0B02 AD83      2076            mov     r5,dph
0B04 AEF0      2077            mov     r6,b
0B06 FF        2078            mov     r7,a
0B07           2079   L007029?:
0B07 8CE8      2080            mov     _turncar_v_1_95,r4
0B09 8DE9      2081            mov     (_turncar_v_1_95 + 1),r5
0B0B 8EEA      2082            mov     (_turncar_v_1_95 + 2),r6
0B0D 8FEB      2083            mov     (_turncar_v_1_95 + 3),r7
0B0F 8001      2084            sjmp    L007001?
0B11           2085   L007003?:
0B11           2086   ;        robot.c:392: waitms(300);
0B11 90012C    2087            mov     dptr,#0x012C
0B14 120100    2088            lcall   _waitms
0B17           2089   ;        robot.c:395: pwm_Right0 = -1; 
0B17 75F0FF    2090            mov     _pwm_Right0,#0xFF
0B1A 22        2091            ret
0B1B           2092   L007022?:
0B1B           2093   ;        robot.c:399: else if (leftright == 3) {
0B1B BA0300    2094            cjne    r2,#0x03,L007067?
0B1E BB0000    2095            cjne    r3,#0x00,L007067?
0B21 8001      2096            sjmp    L007068?
0B23           2097   L007067?:
0B23 020100    2098            ljmp    L007019?
0B26           2099   L007068?:
0B26           2100   ;        robot.c:401: pwm_Left1 = 75;
0B26 75304B    2101            mov     _pwm_Left1,#0x4B
0B29           2102   ;        robot.c:402: waitms(200);
0B29 9000C8    2103            mov     dptr,#0x00C8
0B2C 120100    2104            lcall   _waitms
0B2F           2105   ;        robot.c:405: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0B2F E538      2106            mov     a,_turncar_direction_1_95
0B31 6001      2107            jz      L007030?
0B33 75820B    2108            mov     dpl,#0x0B
0B36 120100    2109            lcall   _Volts_at_Pin
0B39 AC82      2110            mov     r4,dpl
0B3B AD83      2111            mov     r5,dph
0B3D AEF0      2112            mov     r6,b
0B3F FF        2113            mov     r7,a
0B40 8001      2114            sjmp    L007031?
0B42           2115   L007030?:
0B42 75820D    2116            mov     dpl,#0x0D
0B45 120100    2117            lcall   _Volts_at_Pin
0B48 AC82      2118            mov     r4,dpl
0B4A AD83      2119            mov     r5,dph
0B4C AEF0      2120            mov     r6,b
0B4E FF        2121            mov     r7,a
0B4F           2122   L007031?:
0B4F 8CE8      2123            mov     _turncar_v_1_95,r4
0B51 8DE9      2124            mov     (_turncar_v_1_95 + 1),r5
0B53 8EEA      2125            mov     (_turncar_v_1_95 + 2),r6
0B55 8FEB      2126            mov     (_turncar_v_1_95 + 3),r7
0B57           2127   ;        robot.c:407: while (v < 1.3) {
0B57           2128   L007004?:
0B57 7466      2129            mov     a,#0x66
0B59 C0E0      2130            push    acc
0B5B C0E0      2131            push    acc
0B5D 74A6      2132            mov     a,#0xA6
0B5F C0E0      2133            push    acc
0B61 743F      2134            mov     a,#0x3F
0B63 C0E0      2135            push    acc
0B65 85E882    2136            mov     dpl,_turncar_v_1_95
0B68 85E983    2137            mov     dph,(_turncar_v_1_95 + 1)
0B6B 85EAF0    2138            mov     b,(_turncar_v_1_95 + 2)
0B6E E5EB      2139            mov     a,(_turncar_v_1_95 + 3)
0B70 120100    2140            lcall   ___fslt
0B73 AC82      2141            mov     r4,dpl
0B75 E581      2142            mov     a,sp
0B77 24FC      2143            add     a,#0xfc
0B79 F581      2144            mov     sp,a
0B7B EC        2145            mov     a,r4
0B7C 6001      2146            jz      L007006?
0B7E           2147   ;        robot.c:409: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0B7E E538      2148            mov     a,_turncar_direction_1_95
0B80 6001      2149            jz      L007032?
0B82 75820B    2150            mov     dpl,#0x0B
0B85 120100    2151            lcall   _Volts_at_Pin
0B88 AC82      2152            mov     r4,dpl
0B8A AD83      2153            mov     r5,dph
0B8C AEF0      2154            mov     r6,b
0B8E FF        2155            mov     r7,a
0B8F 8001      2156            sjmp    L007033?
0B91           2157   L007032?:
0B91 75820D    2158            mov     dpl,#0x0D
0B94 120100    2159            lcall   _Volts_at_Pin
0B97 AC82      2160            mov     r4,dpl
0B99 AD83      2161            mov     r5,dph
0B9B AEF0      2162            mov     r6,b
0B9D FF        2163            mov     r7,a
0B9E           2164   L007033?:
0B9E 8CE8      2165            mov     _turncar_v_1_95,r4
0BA0 8DE9      2166            mov     (_turncar_v_1_95 + 1),r5
0BA2 8EEA      2167            mov     (_turncar_v_1_95 + 2),r6
0BA4 8FEB      2168            mov     (_turncar_v_1_95 + 3),r7
0BA6 8001      2169            sjmp    L007004?
0BA8           2170   L007006?:
0BA8           2171   ;        robot.c:413: pwm_Left1 = -1; 
0BA8 7530FF    2172            mov     _pwm_Left1,#0xFF
0BAB 22        2173            ret
0BAC           2174   L007019?:
0BAC           2175   ;        robot.c:417: else if (leftright == 2) {
0BAC BA0240    2176            cjne    r2,#0x02,L007072?
0BAF BB0040    2177            cjne    r3,#0x00,L007072?
0BB2 8001      2178            sjmp    L007073?
0BB4           2179   L007072?:
0BB4 020100    2180            ljmp    L007016?
0BB7           2181   L007073?:
0BB7           2182   ;        robot.c:419: pwm_Right1 = 100;
0BB7 75B064    2183            mov     _pwm_Right1,#0x64
0BBA           2184   ;        robot.c:422: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0BBA E538      2185            mov     a,_turncar_direction_1_95
0BBC 6001      2186            jz      L007034?
0BBE 75820C    2187            mov     dpl,#0x0C
0BC1 120100    2188            lcall   _Volts_at_Pin
0BC4 AC82      2189            mov     r4,dpl
0BC6 AD83      2190            mov     r5,dph
0BC8 AEF0      2191            mov     r6,b
0BCA FF        2192            mov     r7,a
0BCB 8001      2193            sjmp    L007035?
0BCD           2194   L007034?:
0BCD 75820E    2195            mov     dpl,#0x0E
0BD0 120100    2196            lcall   _Volts_at_Pin
0BD3 AC82      2197            mov     r4,dpl
0BD5 AD83      2198            mov     r5,dph
0BD7 AEF0      2199            mov     r6,b
0BD9 FF        2200            mov     r7,a
0BDA           2201   L007035?:
0BDA 8CE8      2202            mov     _turncar_v_1_95,r4
0BDC 8DE9      2203            mov     (_turncar_v_1_95 + 1),r5
0BDE 8EEA      2204            mov     (_turncar_v_1_95 + 2),r6
0BE0 8FEB      2205            mov     (_turncar_v_1_95 + 3),r7
0BE2           2206   ;        robot.c:424: while (v < 0.9) {
0BE2           2207   L007007?:
0BE2 7466      2208            mov     a,#0x66
0BE4 C0E0      2209            push    acc
0BE6 C0E0      2210            push    acc
0BE8 C0E0      2211            push    acc
0BEA 743F      2212            mov     a,#0x3F
0BEC C0E0      2213            push    acc
0BEE 85E882    2214            mov     dpl,_turncar_v_1_95
0BF1 85E983    2215            mov     dph,(_turncar_v_1_95 + 1)
0BF4 85EAF0    2216            mov     b,(_turncar_v_1_95 + 2)
0BF7 E5EB      2217            mov     a,(_turncar_v_1_95 + 3)
0BF9 120100    2218            lcall   ___fslt
0BFC AC82      2219            mov     r4,dpl
0BFE E581      2220            mov     a,sp
0C00 24FC      2221            add     a,#0xfc
0C02 F581      2222            mov     sp,a
0C04 EC        2223            mov     a,r4
0C05 6001      2224            jz      L007009?
0C07           2225   ;        robot.c:426: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0C07 E538      2226            mov     a,_turncar_direction_1_95
0C09 6001      2227            jz      L007036?
0C0B 75820C    2228            mov     dpl,#0x0C
0C0E 120100    2229            lcall   _Volts_at_Pin
0C11 AC82      2230            mov     r4,dpl
0C13 AD83      2231            mov     r5,dph
0C15 AEF0      2232            mov     r6,b
0C17 FF        2233            mov     r7,a
0C18 8001      2234            sjmp    L007037?
0C1A           2235   L007036?:
0C1A 75820E    2236            mov     dpl,#0x0E
0C1D 120100    2237            lcall   _Volts_at_Pin
0C20 AC82      2238            mov     r4,dpl
0C22 AD83      2239            mov     r5,dph
0C24 AEF0      2240            mov     r6,b
0C26 FF        2241            mov     r7,a
0C27           2242   L007037?:
0C27 8CE8      2243            mov     _turncar_v_1_95,r4
0C29 8DE9      2244            mov     (_turncar_v_1_95 + 1),r5
0C2B 8EEA      2245            mov     (_turncar_v_1_95 + 2),r6
0C2D 8FEB      2246            mov     (_turncar_v_1_95 + 3),r7
0C2F 8001      2247            sjmp    L007007?
0C31           2248   L007009?:
0C31           2249   ;        robot.c:430: waitms(300);
0C31 90012C    2250            mov     dptr,#0x012C
0C34 120100    2251            lcall   _waitms
0C37           2252   ;        robot.c:433: pwm_Right1 = -1; 
0C37 75B0FF    2253            mov     _pwm_Right1,#0xFF
0C3A 22        2254            ret
0C3B           2255   L007016?:
0C3B           2256   ;        robot.c:437: else if (leftright == 4) {
0C3B BA0480    2257            cjne    r2,#0x04,L007077?
0C3E BB0080    2258            cjne    r3,#0x00,L007077?
0C41 8001      2259            sjmp    L007078?
0C43           2260   L007077?:
0C43 22        2261            ret
0C44           2262   L007078?:
0C44           2263   ;        robot.c:439: pwm_Left0 = 75;
0C44 75704B    2264            mov     _pwm_Left0,#0x4B
0C47           2265   ;        robot.c:440: waitms(200);
0C47 9000C8    2266            mov     dptr,#0x00C8
0C4A 120100    2267            lcall   _waitms
0C4D           2268   ;        robot.c:443: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0C4D E538      2269            mov     a,_turncar_direction_1_95
0C4F 6001      2270            jz      L007038?
0C51 75820B    2271            mov     dpl,#0x0B
0C54 120100    2272            lcall   _Volts_at_Pin
0C57 AA82      2273            mov     r2,dpl
0C59 AB83      2274            mov     r3,dph
0C5B ACF0      2275            mov     r4,b
0C5D FD        2276            mov     r5,a
0C5E 8001      2277            sjmp    L007039?
0C60           2278   L007038?:
0C60 75820D    2279            mov     dpl,#0x0D
0C63 120100    2280            lcall   _Volts_at_Pin
0C66 AA82      2281            mov     r2,dpl
0C68 AB83      2282            mov     r3,dph
0C6A ACF0      2283            mov     r4,b
0C6C FD        2284            mov     r5,a
0C6D           2285   L007039?:
0C6D 8AE8      2286            mov     _turncar_v_1_95,r2
0C6F 8BE9      2287            mov     (_turncar_v_1_95 + 1),r3
0C71 8CEA      2288            mov     (_turncar_v_1_95 + 2),r4
0C73 8DEB      2289            mov     (_turncar_v_1_95 + 3),r5
0C75           2290   ;        robot.c:445: while (v < 0.9) {
0C75           2291   L007010?:
0C75 7466      2292            mov     a,#0x66
0C77 C0E0      2293            push    acc
0C79 C0E0      2294            push    acc
0C7B C0E0      2295            push    acc
0C7D 743F      2296            mov     a,#0x3F
0C7F C0E0      2297            push    acc
0C81 85E882    2298            mov     dpl,_turncar_v_1_95
0C84 85E983    2299            mov     dph,(_turncar_v_1_95 + 1)
0C87 85EAF0    2300            mov     b,(_turncar_v_1_95 + 2)
0C8A E5EB      2301            mov     a,(_turncar_v_1_95 + 3)
0C8C 120100    2302            lcall   ___fslt
0C8F AA82      2303            mov     r2,dpl
0C91 E581      2304            mov     a,sp
0C93 24FC      2305            add     a,#0xfc
0C95 F581      2306            mov     sp,a
0C97 EA        2307            mov     a,r2
0C98 6001      2308            jz      L007012?
0C9A           2309   ;        robot.c:447: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0C9A E538      2310            mov     a,_turncar_direction_1_95
0C9C 6001      2311            jz      L007040?
0C9E 75820B    2312            mov     dpl,#0x0B
0CA1 120100    2313            lcall   _Volts_at_Pin
0CA4 AA82      2314            mov     r2,dpl
0CA6 AB83      2315            mov     r3,dph
0CA8 ACF0      2316            mov     r4,b
0CAA FD        2317            mov     r5,a
0CAB 8001      2318            sjmp    L007041?
0CAD           2319   L007040?:
0CAD 75820D    2320            mov     dpl,#0x0D
0CB0 120100    2321            lcall   _Volts_at_Pin
0CB3 AA82      2322            mov     r2,dpl
0CB5 AB83      2323            mov     r3,dph
0CB7 ACF0      2324            mov     r4,b
0CB9 FD        2325            mov     r5,a
0CBA           2326   L007041?:
0CBA 8AE8      2327            mov     _turncar_v_1_95,r2
0CBC 8BE9      2328            mov     (_turncar_v_1_95 + 1),r3
0CBE 8CEA      2329            mov     (_turncar_v_1_95 + 2),r4
0CC0 8DEB      2330            mov     (_turncar_v_1_95 + 3),r5
0CC2 8001      2331            sjmp    L007010?
0CC4           2332   L007012?:
0CC4           2333   ;        robot.c:451: pwm_Left0 = -1; 
0CC4 7570FF    2334            mov     _pwm_Left0,#0xFF
0CC7 22        2335            ret
0CC8           2336   ;------------------------------------------------------------
0CC8           2337   ;Allocation info for local variables in function 'uturn'
0CC8           2338   ;------------------------------------------------------------
0CC8           2339   ;vleft                     Allocated with name '_uturn_vleft_1_105'
0CC8           2340   ;vright                    Allocated with name '_uturn_vright_1_105'
0CC8           2341   ;------------------------------------------------------------
0CC8           2342   ;        robot.c:458: void uturn(void) {
0CC8           2343   ;        -----------------------------------------
0CC8           2344   ;         function uturn
0CC8           2345   ;        -----------------------------------------
0CC8           2346   _uturn:
0CC8           2347   ;        robot.c:462: vleft = Volts_at_Pin(TANK_FL);
0CC8 75820B    2348            mov     dpl,#0x0B
0CCB 120100    2349            lcall   _Volts_at_Pin
0CCE 858288    2350            mov     _uturn_vleft_1_105,dpl
0CD1 858389    2351            mov     (_uturn_vleft_1_105 + 1),dph
0CD4 85F08A    2352            mov     (_uturn_vleft_1_105 + 2),b
0CD7 F58B      2353            mov     (_uturn_vleft_1_105 + 3),a
0CD9           2354   ;        robot.c:463: vright = Volts_at_Pin(TANK_FR);
0CD9 75820C    2355            mov     dpl,#0x0C
0CDC 120100    2356            lcall   _Volts_at_Pin
0CDF 8582D8    2357            mov     _uturn_vright_1_105,dpl
0CE2 8583D9    2358            mov     (_uturn_vright_1_105 + 1),dph
0CE5 85F0DA    2359            mov     (_uturn_vright_1_105 + 2),b
0CE8 F5DB      2360            mov     (_uturn_vright_1_105 + 3),a
0CEA           2361   ;        robot.c:466: pwm_Left0 = -1;
0CEA 7570FF    2362            mov     _pwm_Left0,#0xFF
0CED           2363   ;        robot.c:467: pwm_Left1 = 50;
0CED 753032    2364            mov     _pwm_Left1,#0x32
0CF0           2365   ;        robot.c:468: pwm_Right0 = -1;
0CF0 75F0FF    2366            mov     _pwm_Right0,#0xFF
0CF3           2367   ;        robot.c:469: pwm_Right1 = 50;
0CF3 75B032    2368            mov     _pwm_Right1,#0x32
0CF6           2369   ;        robot.c:472: waitms(3000);
0CF6 900BB8    2370            mov     dptr,#0x0BB8
0CF9 120100    2371            lcall   _waitms
0CFC           2372   ;        robot.c:474: while ((Volts_at_Pin(TANK_FL)-Volts_at_Pin(TANK_FR))<-0.3 || (Volts_at_Pin(TANK_FL)-Volts_at_Pin(TANK_FR))>0.3);
0CFC           2373   L008002?:
0CFC 75820B    2374            mov     dpl,#0x0B
0CFF 120100    2375            lcall   _Volts_at_Pin
0D02 AA82      2376            mov     r2,dpl
0D04 AB83      2377            mov     r3,dph
0D06 ACF0      2378            mov     r4,b
0D08 FD        2379            mov     r5,a
0D09 75820C    2380            mov     dpl,#0x0C
0D0C C002      2381            push    ar2
0D0E C003      2382            push    ar3
0D10 C004      2383            push    ar4
0D12 C005      2384            push    ar5
0D14 120100    2385            lcall   _Volts_at_Pin
0D17 AE82      2386            mov     r6,dpl
0D19 AF83      2387            mov     r7,dph
0D1B A8F0      2388            mov     r0,b
0D1D F9        2389            mov     r1,a
0D1E D005      2390            pop     ar5
0D20 D004      2391            pop     ar4
0D22 D003      2392            pop     ar3
0D24 D002      2393            pop     ar2
0D26 C006      2394            push    ar6
0D28 C007      2395            push    ar7
0D2A C000      2396            push    ar0
0D2C C001      2397            push    ar1
0D2E 8A82      2398            mov     dpl,r2
0D30 8B83      2399            mov     dph,r3
0D32 8CF0      2400            mov     b,r4
0D34 ED        2401            mov     a,r5
0D35 120100    2402            lcall   ___fssub
0D38 AA82      2403            mov     r2,dpl
0D3A AB83      2404            mov     r3,dph
0D3C ACF0      2405            mov     r4,b
0D3E FD        2406            mov     r5,a
0D3F E581      2407            mov     a,sp
0D41 24FC      2408            add     a,#0xfc
0D43 F581      2409            mov     sp,a
0D45 749A      2410            mov     a,#0x9A
0D47 C0E0      2411            push    acc
0D49 7499      2412            mov     a,#0x99
0D4B C0E0      2413            push    acc
0D4D C0E0      2414            push    acc
0D4F 74BE      2415            mov     a,#0xBE
0D51 C0E0      2416            push    acc
0D53 8A82      2417            mov     dpl,r2
0D55 8B83      2418            mov     dph,r3
0D57 8CF0      2419            mov     b,r4
0D59 ED        2420            mov     a,r5
0D5A 120100    2421            lcall   ___fslt
0D5D AA82      2422            mov     r2,dpl
0D5F E581      2423            mov     a,sp
0D61 24FC      2424            add     a,#0xfc
0D63 F581      2425            mov     sp,a
0D65 EA        2426            mov     a,r2
0D66 7001      2427            jnz     L008002?
0D68 75820B    2428            mov     dpl,#0x0B
0D6B 120100    2429            lcall   _Volts_at_Pin
0D6E AA82      2430            mov     r2,dpl
0D70 AB83      2431            mov     r3,dph
0D72 ACF0      2432            mov     r4,b
0D74 FD        2433            mov     r5,a
0D75 75820C    2434            mov     dpl,#0x0C
0D78 C002      2435            push    ar2
0D7A C003      2436            push    ar3
0D7C C004      2437            push    ar4
0D7E C005      2438            push    ar5
0D80 120100    2439            lcall   _Volts_at_Pin
0D83 AE82      2440            mov     r6,dpl
0D85 AF83      2441            mov     r7,dph
0D87 A8F0      2442            mov     r0,b
0D89 F9        2443            mov     r1,a
0D8A D005      2444            pop     ar5
0D8C D004      2445            pop     ar4
0D8E D003      2446            pop     ar3
0D90 D002      2447            pop     ar2
0D92 C006      2448            push    ar6
0D94 C007      2449            push    ar7
0D96 C000      2450            push    ar0
0D98 C001      2451            push    ar1
0D9A 8A82      2452            mov     dpl,r2
0D9C 8B83      2453            mov     dph,r3
0D9E 8CF0      2454            mov     b,r4
0DA0 ED        2455            mov     a,r5
0DA1 120100    2456            lcall   ___fssub
0DA4 AA82      2457            mov     r2,dpl
0DA6 AB83      2458            mov     r3,dph
0DA8 ACF0      2459            mov     r4,b
0DAA FD        2460            mov     r5,a
0DAB E581      2461            mov     a,sp
0DAD 24FC      2462            add     a,#0xfc
0DAF F581      2463            mov     sp,a
0DB1 749A      2464            mov     a,#0x9A
0DB3 C0E0      2465            push    acc
0DB5 7499      2466            mov     a,#0x99
0DB7 C0E0      2467            push    acc
0DB9 C0E0      2468            push    acc
0DBB 743E      2469            mov     a,#0x3E
0DBD C0E0      2470            push    acc
0DBF 8A82      2471            mov     dpl,r2
0DC1 8B83      2472            mov     dph,r3
0DC3 8CF0      2473            mov     b,r4
0DC5 ED        2474            mov     a,r5
0DC6 120100    2475            lcall   ___fsgt
0DC9 AA82      2476            mov     r2,dpl
0DCB E581      2477            mov     a,sp
0DCD 24FC      2478            add     a,#0xfc
0DCF F581      2479            mov     sp,a
0DD1 EA        2480            mov     a,r2
0DD2 6001      2481            jz      L008010?
0DD4 020100    2482            ljmp    L008002?
0DD7           2483   L008010?:
0DD7 22        2484            ret
0DD8           2485            rseg R_CSEG
0DD8           2486   
0000           2487            rseg R_XINIT
0000           2488   
0000           2489            rseg R_CONST
0000           2490   __str_0:
0000 1B        2491            db 0x1B
0001 5B324A    2492            db '[2J'
0004 00        2493            db 0x00
0005           2494   __str_1:
0005 66726F6E  2495            db 'frontL %f frontR %f backL %f backR %f command %1d, state %1d'
     744C2025
     66206672
     6F6E7452
     20256620
     6261636B
     4C202566
     20626163
     6B522025
     6620636F
     6D6D616E
     64202531
     642C2073
     74617465
     20253164
0041 206C6566  2496            db ' left0 %3d left1 %3d right0 %3d right1 %3d'
     74302025
     3364206C
     65667431
     20253364
     20726967
     68743020
     25336420
     72696768
     74312025
     3364
006B 0D        2497            db 0x0D
006C 00        2498            db 0x00
006D           2499   __str_2:
006D 0A        2500            db 0x0A
006E 494E5445  2501            db 'INTERSECTION'
     52534543
     54494F4E
007A 0A        2502            db 0x0A
007B 00        2503            db 0x00
007C           2504   __str_3:
007C 5475726E  2505            db 'Turn left at the next intersection'
     206C6566
     74206174
     20746865
     206E6578
     7420696E
     74657273
     65637469
     6F6E
009E 0A        2506            db 0x0A
009F 00        2507            db 0x00
00A0           2508   __str_4:
00A0 0A        2509            db 0x0A
00A1 0D        2510            db 0x0D
00A2 20494E54  2511            db ' INTERSECTION'
     45525345
     4354494F
     4E
00AF 0A        2512            db 0x0A
00B0 00        2513            db 0x00
00B1           2514   __str_5:
00B1 5475726E  2515            db 'Turn right at the next intersection'
     20726967
     68742061
     74207468
     65206E65
     78742069
     6E746572
     73656374
     696F6E
00D4 0A        2516            db 0x0A
00D5 00        2517            db 0x00
00D6           2518   __str_6:
00D6 474F21    2519            db 'GO!'
00D9 0A        2520            db 0x0A
00DA 00        2521            db 0x00
00DB           2522   __str_7:
00DB 52657665  2523            db 'Reverse Reverse!'
     72736520
     52657665
     72736521
00EB 0A        2524            db 0x0A
00EC 00        2525            db 0x00
00ED           2526   __str_8:
00ED 48414C54  2527            db 'HALT peasants!'
     20706561
     73616E74
     7321
00FB 0A        2528            db 0x0A
00FC 00        2529            db 0x00
00FD           2530   __str_9:
00FD 55545552  2531            db 'UTURN'
     4E
0102 0A        2532            db 0x0A
0103 00        2533            db 0x00
0104           2534   __str_10:
0104 0A        2535            db 0x0A
0105 436F6D6D  2536            db 'Command received: 0b_0%c%c%c'
     616E6420
     72656365
     69766564
     3A203062
     5F302563
     25632563
0121 0A        2537            db 0x0A
0122 00        2538            db 0x00
0123           2539   
002E           2540            CSEG
002E           2541   
002E           2542   end
