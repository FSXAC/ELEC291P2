0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Sun Apr 02 21:23:14 2017
0000              5   ;--------------------------------------------------------
                  5   $name robot
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _movecar_PARM_2
0000             28            public _Timer2_ISR
0000             29            public _main
0000             30            public _currentstate
0000             31            public _currentcmd
0000             32            public _direction
0000             33            public _pwm_Right1
0000             34            public _pwm_Right0
0000             35            public _pwm_Left1
0000             36            public _pwm_Left0
0000             37            public _pwm_both
0000             38            public _mode
0000             39            public _pwm_count
0000             40            public _forward_backward
0000             41            public _readData
0000             42            public _linetrack
0000             43            public _stopcar
0000             44            public _turncar
0000             45            public _uturn
0000             46            public _movecar
0000             47   ;--------------------------------------------------------
0000             48   ; Special Function Registers
0000             49   ;--------------------------------------------------------
0000             50   _P0             DATA 0x80
0000             51   _SP             DATA 0x81
0000             52   _DPL            DATA 0x82
0000             53   _DPH            DATA 0x83
0000             54   _EMI0TC         DATA 0x84
0000             55   _EMI0CF         DATA 0x85
0000             56   _OSCLCN         DATA 0x86
0000             57   _PCON           DATA 0x87
0000             58   _TCON           DATA 0x88
0000             59   _TMOD           DATA 0x89
0000             60   _TL0            DATA 0x8a
0000             61   _TL1            DATA 0x8b
0000             62   _TH0            DATA 0x8c
0000             63   _TH1            DATA 0x8d
0000             64   _CKCON          DATA 0x8e
0000             65   _PSCTL          DATA 0x8f
0000             66   _P1             DATA 0x90
0000             67   _TMR3CN         DATA 0x91
0000             68   _TMR4CN         DATA 0x91
0000             69   _TMR3RLL        DATA 0x92
0000             70   _TMR4RLL        DATA 0x92
0000             71   _TMR3RLH        DATA 0x93
0000             72   _TMR4RLH        DATA 0x93
0000             73   _TMR3L          DATA 0x94
0000             74   _TMR4L          DATA 0x94
0000             75   _TMR3H          DATA 0x95
0000             76   _TMR4H          DATA 0x95
0000             77   _USB0ADR        DATA 0x96
0000             78   _USB0DAT        DATA 0x97
0000             79   _SCON           DATA 0x98
0000             80   _SCON0          DATA 0x98
0000             81   _SBUF           DATA 0x99
0000             82   _SBUF0          DATA 0x99
0000             83   _CPT1CN         DATA 0x9a
0000             84   _CPT0CN         DATA 0x9b
0000             85   _CPT1MD         DATA 0x9c
0000             86   _CPT0MD         DATA 0x9d
0000             87   _CPT1MX         DATA 0x9e
0000             88   _CPT0MX         DATA 0x9f
0000             89   _P2             DATA 0xa0
0000             90   _SPI0CFG        DATA 0xa1
0000             91   _SPI0CKR        DATA 0xa2
0000             92   _SPI0DAT        DATA 0xa3
0000             93   _P0MDOUT        DATA 0xa4
0000             94   _P1MDOUT        DATA 0xa5
0000             95   _P2MDOUT        DATA 0xa6
0000             96   _P3MDOUT        DATA 0xa7
0000             97   _IE             DATA 0xa8
0000             98   _CLKSEL         DATA 0xa9
0000             99   _EMI0CN         DATA 0xaa
0000            100   __XPAGE         DATA 0xaa
0000            101   _SBCON1         DATA 0xac
0000            102   _P4MDOUT        DATA 0xae
0000            103   _PFE0CN         DATA 0xaf
0000            104   _P3             DATA 0xb0
0000            105   _OSCXCN         DATA 0xb1
0000            106   _OSCICN         DATA 0xb2
0000            107   _OSCICL         DATA 0xb3
0000            108   _SBRLL1         DATA 0xb4
0000            109   _SBRLH1         DATA 0xb5
0000            110   _FLSCL          DATA 0xb6
0000            111   _FLKEY          DATA 0xb7
0000            112   _IP             DATA 0xb8
0000            113   _CLKMUL         DATA 0xb9
0000            114   _SMBTC          DATA 0xb9
0000            115   _AMX0N          DATA 0xba
0000            116   _AMX0P          DATA 0xbb
0000            117   _ADC0CF         DATA 0xbc
0000            118   _ADC0L          DATA 0xbd
0000            119   _ADC0H          DATA 0xbe
0000            120   _SFRPAGE        DATA 0xbf
0000            121   _SMB0CN         DATA 0xc0
0000            122   _SMB1CN         DATA 0xc0
0000            123   _SMB0CF         DATA 0xc1
0000            124   _SMB1CF         DATA 0xc1
0000            125   _SMB0DAT        DATA 0xc2
0000            126   _SMB1DAT        DATA 0xc2
0000            127   _ADC0GTL        DATA 0xc3
0000            128   _ADC0GTH        DATA 0xc4
0000            129   _ADC0LTL        DATA 0xc5
0000            130   _ADC0LTH        DATA 0xc6
0000            131   _P4             DATA 0xc7
0000            132   _TMR2CN         DATA 0xc8
0000            133   _TMR5CN         DATA 0xc8
0000            134   _REG01CN        DATA 0xc9
0000            135   _TMR2RLL        DATA 0xca
0000            136   _TMR5RLL        DATA 0xca
0000            137   _TMR2RLH        DATA 0xcb
0000            138   _TMR5RLH        DATA 0xcb
0000            139   _TMR2L          DATA 0xcc
0000            140   _TMR5L          DATA 0xcc
0000            141   _TMR2H          DATA 0xcd
0000            142   _TMR5H          DATA 0xcd
0000            143   _SMB0ADM        DATA 0xce
0000            144   _SMB1ADM        DATA 0xce
0000            145   _SMB0ADR        DATA 0xcf
0000            146   _SMB1ADR        DATA 0xcf
0000            147   _PSW            DATA 0xd0
0000            148   _REF0CN         DATA 0xd1
0000            149   _SCON1          DATA 0xd2
0000            150   _SBUF1          DATA 0xd3
0000            151   _P0SKIP         DATA 0xd4
0000            152   _P1SKIP         DATA 0xd5
0000            153   _P2SKIP         DATA 0xd6
0000            154   _USB0XCN        DATA 0xd7
0000            155   _PCA0CN         DATA 0xd8
0000            156   _PCA0MD         DATA 0xd9
0000            157   _PCA0CPM0       DATA 0xda
0000            158   _PCA0CPM1       DATA 0xdb
0000            159   _PCA0CPM2       DATA 0xdc
0000            160   _PCA0CPM3       DATA 0xdd
0000            161   _PCA0CPM4       DATA 0xde
0000            162   _P3SKIP         DATA 0xdf
0000            163   _ACC            DATA 0xe0
0000            164   _XBR0           DATA 0xe1
0000            165   _XBR1           DATA 0xe2
0000            166   _XBR2           DATA 0xe3
0000            167   _IT01CF         DATA 0xe4
0000            168   _CKCON1         DATA 0xe4
0000            169   _SMOD1          DATA 0xe5
0000            170   _EIE1           DATA 0xe6
0000            171   _EIE2           DATA 0xe7
0000            172   _ADC0CN         DATA 0xe8
0000            173   _PCA0CPL1       DATA 0xe9
0000            174   _PCA0CPH1       DATA 0xea
0000            175   _PCA0CPL2       DATA 0xeb
0000            176   _PCA0CPH2       DATA 0xec
0000            177   _PCA0CPL3       DATA 0xed
0000            178   _PCA0CPH3       DATA 0xee
0000            179   _RSTSRC         DATA 0xef
0000            180   _B              DATA 0xf0
0000            181   _P0MDIN         DATA 0xf1
0000            182   _P1MDIN         DATA 0xf2
0000            183   _P2MDIN         DATA 0xf3
0000            184   _P3MDIN         DATA 0xf4
0000            185   _P4MDIN         DATA 0xf5
0000            186   _EIP1           DATA 0xf6
0000            187   _EIP2           DATA 0xf7
0000            188   _SPI0CN         DATA 0xf8
0000            189   _PCA0L          DATA 0xf9
0000            190   _PCA0H          DATA 0xfa
0000            191   _PCA0CPL0       DATA 0xfb
0000            192   _PCA0CPH0       DATA 0xfc
0000            193   _PCA0CPL4       DATA 0xfd
0000            194   _PCA0CPH4       DATA 0xfe
0000            195   _VDM0CN         DATA 0xff
0000            196   _DPTR           DATA 0x8382
0000            197   _TMR2RL         DATA 0xcbca
0000            198   _TMR3RL         DATA 0x9392
0000            199   _TMR4RL         DATA 0x9392
0000            200   _TMR5RL         DATA 0xcbca
0000            201   _TMR2           DATA 0xcdcc
0000            202   _TMR3           DATA 0x9594
0000            203   _TMR4           DATA 0x9594
0000            204   _TMR5           DATA 0xcdcc
0000            205   _SBRL1          DATA 0xb5b4
0000            206   _ADC0           DATA 0xbebd
0000            207   _ADC0GT         DATA 0xc4c3
0000            208   _ADC0LT         DATA 0xc6c5
0000            209   _PCA0           DATA 0xfaf9
0000            210   _PCA0CP1        DATA 0xeae9
0000            211   _PCA0CP2        DATA 0xeceb
0000            212   _PCA0CP3        DATA 0xeeed
0000            213   _PCA0CP0        DATA 0xfcfb
0000            214   _PCA0CP4        DATA 0xfefd
0000            215   ;--------------------------------------------------------
0000            216   ; special function bits
0000            217   ;--------------------------------------------------------
0000            218   _P0_0           BIT 0x80
0000            219   _P0_1           BIT 0x81
0000            220   _P0_2           BIT 0x82
0000            221   _P0_3           BIT 0x83
0000            222   _P0_4           BIT 0x84
0000            223   _P0_5           BIT 0x85
0000            224   _P0_6           BIT 0x86
0000            225   _P0_7           BIT 0x87
0000            226   _TF1            BIT 0x8f
0000            227   _TR1            BIT 0x8e
0000            228   _TF0            BIT 0x8d
0000            229   _TR0            BIT 0x8c
0000            230   _IE1            BIT 0x8b
0000            231   _IT1            BIT 0x8a
0000            232   _IE0            BIT 0x89
0000            233   _IT0            BIT 0x88
0000            234   _P1_0           BIT 0x90
0000            235   _P1_1           BIT 0x91
0000            236   _P1_2           BIT 0x92
0000            237   _P1_3           BIT 0x93
0000            238   _P1_4           BIT 0x94
0000            239   _P1_5           BIT 0x95
0000            240   _P1_6           BIT 0x96
0000            241   _P1_7           BIT 0x97
0000            242   _S0MODE         BIT 0x9f
0000            243   _SCON0_6        BIT 0x9e
0000            244   _MCE0           BIT 0x9d
0000            245   _REN0           BIT 0x9c
0000            246   _TB80           BIT 0x9b
0000            247   _RB80           BIT 0x9a
0000            248   _TI0            BIT 0x99
0000            249   _RI0            BIT 0x98
0000            250   _SCON_6         BIT 0x9e
0000            251   _MCE            BIT 0x9d
0000            252   _REN            BIT 0x9c
0000            253   _TB8            BIT 0x9b
0000            254   _RB8            BIT 0x9a
0000            255   _TI             BIT 0x99
0000            256   _RI             BIT 0x98
0000            257   _P2_0           BIT 0xa0
0000            258   _P2_1           BIT 0xa1
0000            259   _P2_2           BIT 0xa2
0000            260   _P2_3           BIT 0xa3
0000            261   _P2_4           BIT 0xa4
0000            262   _P2_5           BIT 0xa5
0000            263   _P2_6           BIT 0xa6
0000            264   _P2_7           BIT 0xa7
0000            265   _EA             BIT 0xaf
0000            266   _ESPI0          BIT 0xae
0000            267   _ET2            BIT 0xad
0000            268   _ES0            BIT 0xac
0000            269   _ET1            BIT 0xab
0000            270   _EX1            BIT 0xaa
0000            271   _ET0            BIT 0xa9
0000            272   _EX0            BIT 0xa8
0000            273   _P3_0           BIT 0xb0
0000            274   _P3_1           BIT 0xb1
0000            275   _P3_2           BIT 0xb2
0000            276   _P3_3           BIT 0xb3
0000            277   _P3_4           BIT 0xb4
0000            278   _P3_5           BIT 0xb5
0000            279   _P3_6           BIT 0xb6
0000            280   _P3_7           BIT 0xb7
0000            281   _IP_7           BIT 0xbf
0000            282   _PSPI0          BIT 0xbe
0000            283   _PT2            BIT 0xbd
0000            284   _PS0            BIT 0xbc
0000            285   _PT1            BIT 0xbb
0000            286   _PX1            BIT 0xba
0000            287   _PT0            BIT 0xb9
0000            288   _PX0            BIT 0xb8
0000            289   _MASTER0        BIT 0xc7
0000            290   _TXMODE0        BIT 0xc6
0000            291   _STA0           BIT 0xc5
0000            292   _STO0           BIT 0xc4
0000            293   _ACKRQ0         BIT 0xc3
0000            294   _ARBLOST0       BIT 0xc2
0000            295   _ACK0           BIT 0xc1
0000            296   _SI0            BIT 0xc0
0000            297   _MASTER1        BIT 0xc7
0000            298   _TXMODE1        BIT 0xc6
0000            299   _STA1           BIT 0xc5
0000            300   _STO1           BIT 0xc4
0000            301   _ACKRQ1         BIT 0xc3
0000            302   _ARBLOST1       BIT 0xc2
0000            303   _ACK1           BIT 0xc1
0000            304   _SI1            BIT 0xc0
0000            305   _TF2            BIT 0xcf
0000            306   _TF2H           BIT 0xcf
0000            307   _TF2L           BIT 0xce
0000            308   _TF2LEN         BIT 0xcd
0000            309   _TF2CEN         BIT 0xcc
0000            310   _T2SPLIT        BIT 0xcb
0000            311   _TR2            BIT 0xca
0000            312   _T2CSS          BIT 0xc9
0000            313   _T2XCLK         BIT 0xc8
0000            314   _TF5H           BIT 0xcf
0000            315   _TF5L           BIT 0xce
0000            316   _TF5LEN         BIT 0xcd
0000            317   _TMR5CN_4       BIT 0xcc
0000            318   _T5SPLIT        BIT 0xcb
0000            319   _TR5            BIT 0xca
0000            320   _TMR5CN_1       BIT 0xc9
0000            321   _T5XCLK         BIT 0xc8
0000            322   _CY             BIT 0xd7
0000            323   _AC             BIT 0xd6
0000            324   _F0             BIT 0xd5
0000            325   _RS1            BIT 0xd4
0000            326   _RS0            BIT 0xd3
0000            327   _OV             BIT 0xd2
0000            328   _F1             BIT 0xd1
0000            329   _PARITY         BIT 0xd0
0000            330   _CF             BIT 0xdf
0000            331   _CR             BIT 0xde
0000            332   _PCA0CN_5       BIT 0xde
0000            333   _CCF4           BIT 0xdc
0000            334   _CCF3           BIT 0xdb
0000            335   _CCF2           BIT 0xda
0000            336   _CCF1           BIT 0xd9
0000            337   _CCF0           BIT 0xd8
0000            338   _ACC_7          BIT 0xe7
0000            339   _ACC_6          BIT 0xe6
0000            340   _ACC_5          BIT 0xe5
0000            341   _ACC_4          BIT 0xe4
0000            342   _ACC_3          BIT 0xe3
0000            343   _ACC_2          BIT 0xe2
0000            344   _ACC_1          BIT 0xe1
0000            345   _ACC_0          BIT 0xe0
0000            346   _AD0EN          BIT 0xef
0000            347   _AD0TM          BIT 0xee
0000            348   _AD0INT         BIT 0xed
0000            349   _AD0BUSY        BIT 0xec
0000            350   _AD0WINT        BIT 0xeb
0000            351   _AD0CM2         BIT 0xea
0000            352   _AD0CM1         BIT 0xe9
0000            353   _AD0CM0         BIT 0xe8
0000            354   _B_7            BIT 0xf7
0000            355   _B_6            BIT 0xf6
0000            356   _B_5            BIT 0xf5
0000            357   _B_4            BIT 0xf4
0000            358   _B_3            BIT 0xf3
0000            359   _B_2            BIT 0xf2
0000            360   _B_1            BIT 0xf1
0000            361   _B_0            BIT 0xf0
0000            362   _SPIF           BIT 0xff
0000            363   _WCOL           BIT 0xfe
0000            364   _MODF           BIT 0xfd
0000            365   _RXOVRN         BIT 0xfc
0000            366   _NSSMD1         BIT 0xfb
0000            367   _NSSMD0         BIT 0xfa
0000            368   _TXBMT          BIT 0xf9
0000            369   _SPIEN          BIT 0xf8
0000            370   ;--------------------------------------------------------
0000            371   ; overlayable register banks
0000            372   ;--------------------------------------------------------
0000            373            rbank0 segment data overlay
0000            374   ;--------------------------------------------------------
0000            375   ; internal ram data
0000            376   ;--------------------------------------------------------
0000            377            rseg R_DSEG
0000            378   _pwm_count:
0000            379            ds 1
0001            380   _mode:
0001            381            ds 1
0002            382   _pwm_both:
0002            383            ds 1
0003            384   _pwm_Left0:
0003            385            ds 1
0004            386   _pwm_Left1:
0004            387            ds 1
0005            388   _pwm_Right0:
0005            389            ds 1
0006            390   _pwm_Right1:
0006            391            ds 1
0007            392   _direction:
0007            393            ds 1
0008            394   _currentcmd:
0008            395            ds 1
0009            396   _currentstate:
0009            397            ds 1
000A            398   _main_v1_1_57:
000A            399            ds 4
000E            400   _main_v2_1_57:
000E            401            ds 4
0012            402   _linetrack_forwardbackward_1_81:
0012            403            ds 2
0014            404   _linetrack_vleft_1_82:
0014            405            ds 4
0018            406   _linetrack_vright_1_82:
0018            407            ds 4
001C            408   _linetrack_sloc0_1_0:
001C            409            ds 4
0020            410   _linetrack_sloc1_1_0:
0020            411            ds 2
0022            412   _turncar_vleft_1_87:
0022            413            ds 4
0026            414   _turncar_vright_1_87:
0026            415            ds 4
002A            416   _turncar_direction_1_87:
002A            417            ds 1
002B            418   _uturn_vleft_1_93:
002B            419            ds 4
002F            420   _uturn_vright_1_93:
002F            421            ds 4
0033            422   ;--------------------------------------------------------
0033            423   ; overlayable items in internal ram 
0033            424   ;--------------------------------------------------------
0000            425            rseg    R_OSEG
0000            426            rseg    R_OSEG
0000            427   _movecar_PARM_2:
0000            428            ds 2
0002            429   ;--------------------------------------------------------
0002            430   ; indirectly addressable internal ram data
0002            431   ;--------------------------------------------------------
0000            432            rseg R_ISEG
0000            433   ;--------------------------------------------------------
0000            434   ; absolute internal ram data
0000            435   ;--------------------------------------------------------
0000            436            DSEG
0000            437   ;--------------------------------------------------------
0000            438   ; bit data
0000            439   ;--------------------------------------------------------
0000            440            rseg R_BSEG
0000            441   _Timer2_ISR_sloc0_1_0:
0000            442            DBIT    1
0001            443   ;--------------------------------------------------------
0001            444   ; paged external ram data
0001            445   ;--------------------------------------------------------
0000            446            rseg R_PSEG
0000            447   ;--------------------------------------------------------
0000            448   ; external ram data
0000            449   ;--------------------------------------------------------
0000            450            rseg R_XSEG
0000            451   ;--------------------------------------------------------
0000            452   ; absolute external ram data
0000            453   ;--------------------------------------------------------
0000            454            XSEG
0000            455   ;--------------------------------------------------------
0000            456   ; external initialized ram data
0000            457   ;--------------------------------------------------------
0000            458            rseg R_IXSEG
0000            459            rseg R_HOME
0000            460            rseg R_GSINIT
0000            461            rseg R_CSEG
0000            462   ;--------------------------------------------------------
0000            463   ; Reset entry point and interrupt vectors
0000            464   ;--------------------------------------------------------
0000            465            CSEG at 0x0000
0000 020100     466            ljmp    _crt0
002B            467            CSEG at 0x002b
002B 020100     468            ljmp    _Timer2_ISR
002E            469   ;--------------------------------------------------------
002E            470   ; global & static initialisations
002E            471   ;--------------------------------------------------------
0000            472            rseg R_HOME
0000            473            rseg R_GSINIT
0000            474            rseg R_GSINIT
0000            475   ;--------------------------------------------------------
0000            476   ; data variables initialization
0000            477   ;--------------------------------------------------------
0000            478            rseg R_DINIT
0000            479   ;        robot.c:10: volatile  char pwm_count=0;
0000 755800     480            mov     _pwm_count,#0x00
0003            481   ;        robot.c:11: volatile  char mode = 0;
0003 751800     482            mov     _mode,#0x00
0006            483   ;        robot.c:12: volatile  char pwm_both =0;
0006 75D800     484            mov     _pwm_both,#0x00
0009            485   ;        robot.c:13: volatile  char pwm_Left0 = 0; //p1.5
0009 759800     486            mov     _pwm_Left0,#0x00
000C            487   ;        robot.c:14: volatile  char pwm_Left1 = 0; //p1.6
000C 755800     488            mov     _pwm_Left1,#0x00
000F            489   ;        robot.c:15: volatile  char pwm_Right0 = 0; //p2.0
000F 751800     490            mov     _pwm_Right0,#0x00
0012            491   ;        robot.c:16: volatile  char pwm_Right1 = 0; //p2.1
0012 75D800     492            mov     _pwm_Right1,#0x00
0015            493   ;        robot.c:17: volatile  char direction = 0; // 1 for back 0 for forward
0015 759800     494            mov     _direction,#0x00
0018            495   ;        robot.c:19: volatile  char currentcmd = 0;
0018 755800     496            mov     _currentcmd,#0x00
001B            497   ;        robot.c:20: volatile  char currentstate = 1;
001B 751801     498            mov     _currentstate,#0x01
001E            499            ; The linker places a 'ret' at the end of segment R_DINIT.
001E            500   ;--------------------------------------------------------
001E            501   ; code
001E            502   ;--------------------------------------------------------
0000            503            rseg R_CSEG
0000            504   ;------------------------------------------------------------
0000            505   ;Allocation info for local variables in function 'main'
0000            506   ;------------------------------------------------------------
0000            507   ;v1                        Allocated with name '_main_v1_1_57'
0000            508   ;v2                        Allocated with name '_main_v2_1_57'
0000            509   ;------------------------------------------------------------
0000            510   ;        robot.c:22: void main(void) {
0000            511   ;        -----------------------------------------
0000            512   ;         function main
0000            513   ;        -----------------------------------------
0000            514   _main:
0000            515            using   0
0000            516   ;        robot.c:24: volatile float v1 = 0;
0000 75E800     517            mov     _main_v1_1_57,#0x00
0003 75E900     518            mov     (_main_v1_1_57 + 1),#0x00
0006 75EA00     519            mov     (_main_v1_1_57 + 2),#0x00
0009 75EB00     520            mov     (_main_v1_1_57 + 3),#0x00
000C            521   ;        robot.c:25: volatile float v2 = 0;
000C 752800     522            mov     _main_v2_1_57,#0x00
000F 752900     523            mov     (_main_v2_1_57 + 1),#0x00
0012 752A00     524            mov     (_main_v2_1_57 + 2),#0x00
0015 752B00     525            mov     (_main_v2_1_57 + 3),#0x00
0018            526   ;        robot.c:27: MOTOR_LEFT0 =0;
0018 C295       527            clr     _P1_5
001A            528   ;        robot.c:28: MOTOR_LEFT1 =0;
001A C296       529            clr     _P1_6
001C            530   ;        robot.c:29: MOTOR_RIGHT0 =0;
001C C2A0       531            clr     _P2_0
001E            532   ;        robot.c:30: MOTOR_RIGHT1 =0;
001E C2A1       533            clr     _P2_1
0020            534   ;        robot.c:33: currentstate = 2;           //1-FORWARD, 2-BACKWARDS, 3-STOPPED, 4-DEBUGGER
0020 751802     535            mov     _currentstate,#0x02
0023            536   ;        robot.c:34: currentcmd = 1;             //0-NO COMMAND, 1-TURN LEFT, 2-TURN RIGHT, 3-FORWARDS, 4-BACKWARDS, 5-STOP, 6-UTURN
0023 755801     537            mov     _currentcmd,#0x01
0026            538   ;        robot.c:37: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0026 7418       539            mov     a,#__str_0
0028 C0E0       540            push    acc
002A 749A       541            mov     a,#(__str_0 >> 8)
002C C0E0       542            push    acc
002E 7480       543            mov     a,#0x80
0030 C0E0       544            push    acc
0032 120100     545            lcall   _printf
0035 1581       546            dec     sp
0037 1581       547            dec     sp
0039 1581       548            dec     sp
003B            549   ;        robot.c:40: InitPinADC(2, 3); // Configure P2.3 as analog input (tank1)
003B 750003     550            mov     _InitPinADC_PARM_2,#0x03
003E 758202     551            mov     dpl,#0x02
0041 120100     552            lcall   _InitPinADC
0044            553   ;        robot.c:41: InitPinADC(2, 4); // Configure P2.4 as analog input         (tank1)
0044 750004     554            mov     _InitPinADC_PARM_2,#0x04
0047 758202     555            mov     dpl,#0x02
004A 120100     556            lcall   _InitPinADC
004D            557   ;        robot.c:42: InitPinADC(2, 5); // Configure P2.5 as analog input (tank2)
004D 750005     558            mov     _InitPinADC_PARM_2,#0x05
0050 758202     559            mov     dpl,#0x02
0053 120100     560            lcall   _InitPinADC
0056            561   ;        robot.c:43: InitPinADC(2, 6); // Configure P2.6 as analog input (tank2)
0056 750006     562            mov     _InitPinADC_PARM_2,#0x06
0059 758202     563            mov     dpl,#0x02
005C 120100     564            lcall   _InitPinADC
005F            565   ;        robot.c:49: InitADC();
005F 120100     566            lcall   _InitADC
0062            567   ;        robot.c:53: while(1)
0062            568   L002024?:
0062            569   ;        robot.c:56: readData(); 
0062 120100     570            lcall   _readData
0065            571   ;        robot.c:61: switch (currentstate) {
0065 AA18       572            mov     r2,_currentstate
0067 BA0168     573            cjne    r2,#0x01,L002040?
006A 8001       574            sjmp    L002001?
006C            575   L002040?:
006C BA02E8     576            cjne    r2,#0x02,L002041?
006F 8001       577            sjmp    L002002?
0071            578   L002041?:
0071            579   ;        robot.c:62: case 1:
0071 BA0368     580            cjne    r2,#0x03,L002004?
0074 8001       581            sjmp    L002003?
0076            582   L002001?:
0076            583   ;        robot.c:63: linetrack(0);       //forwards
0076 900000     584            mov     dptr,#0x0000
0079 120100     585            lcall   _linetrack
007C            586   ;        robot.c:65: v1 = Volts_at_Pin(LQFP32_MUX_P2_3);
007C 75820B     587            mov     dpl,#0x0B
007F 120100     588            lcall   _Volts_at_Pin
0082 8582E8     589            mov     _main_v1_1_57,dpl
0085 8583E9     590            mov     (_main_v1_1_57 + 1),dph
0088 85F0EA     591            mov     (_main_v1_1_57 + 2),b
008B F5EB       592            mov     (_main_v1_1_57 + 3),a
008D            593   ;        robot.c:66: v2 = Volts_at_Pin(LQFP32_MUX_P2_4);
008D 75820C     594            mov     dpl,#0x0C
0090 120100     595            lcall   _Volts_at_Pin
0093 858228     596            mov     _main_v2_1_57,dpl
0096 858329     597            mov     (_main_v2_1_57 + 1),dph
0099 85F02A     598            mov     (_main_v2_1_57 + 2),b
009C F52B       599            mov     (_main_v2_1_57 + 3),a
009E            600   ;        robot.c:67: break;
009E            601   ;        robot.c:68: case 2:
009E 8001       602            sjmp    L002004?
00A0            603   L002002?:
00A0            604   ;        robot.c:69: linetrack(1);       //backwards
00A0 900001     605            mov     dptr,#0x0001
00A3 120100     606            lcall   _linetrack
00A6            607   ;        robot.c:71: v2 = Volts_at_Pin(LQFP32_MUX_P2_5);
00A6 75820D     608            mov     dpl,#0x0D
00A9 120100     609            lcall   _Volts_at_Pin
00AC 858228     610            mov     _main_v2_1_57,dpl
00AF 858329     611            mov     (_main_v2_1_57 + 1),dph
00B2 85F02A     612            mov     (_main_v2_1_57 + 2),b
00B5 F52B       613            mov     (_main_v2_1_57 + 3),a
00B7            614   ;        robot.c:72: v1 = Volts_at_Pin(LQFP32_MUX_P2_6);
00B7 75820E     615            mov     dpl,#0x0E
00BA 120100     616            lcall   _Volts_at_Pin
00BD 8582E8     617            mov     _main_v1_1_57,dpl
00C0 8583E9     618            mov     (_main_v1_1_57 + 1),dph
00C3 85F0EA     619            mov     (_main_v1_1_57 + 2),b
00C6 F5EB       620            mov     (_main_v1_1_57 + 3),a
00C8            621   ;        robot.c:73: break;
00C8            622   ;        robot.c:74: case 3:
00C8 8001       623            sjmp    L002004?
00CA            624   L002003?:
00CA            625   ;        robot.c:75: stopcar();          //stop car
00CA 120100     626            lcall   _stopcar
00CD            627   ;        robot.c:77: }
00CD            628   L002004?:
00CD            629   ;        robot.c:80: switch (currentcmd) {
00CD E558       630            mov     a,_currentcmd
00CF FA         631            mov     r2,a
00D0 30E7A8     632            jnb     acc.7,L002043?
00D3 020100     633            ljmp    L002021?
00D6            634   L002043?:
00D6 C3         635            clr     c
00D7 7486       636            mov     a,#(0x06 ^ 0x80)
00D9 8AF0       637            mov     b,r2
00DB 63F080     638            xrl     b,#0x80
00DE 95F0       639            subb    a,b
00E0 5001       640            jnc     L002044?
00E2 020100     641            ljmp    L002021?
00E5            642   L002044?:
00E5 EA         643            mov     a,r2
00E6 2A         644            add     a,r2
00E7 2A         645            add     a,r2
00E8 909F68     646            mov     dptr,#L002045?
00EB 73         647            jmp     @a+dptr
00EC            648   L002045?:
00EC 020100     649            ljmp    L002005?
00EF 020100     650            ljmp    L002009?
00F2 020100     651            ljmp    L002013?
00F5 020100     652            ljmp    L002017?
00F8 020100     653            ljmp    L002018?
00FB 020100     654            ljmp    L002019?
00FE 020100     655            ljmp    L002020?
0101            656   ;        robot.c:82: case 0 :
0101            657   L002005?:
0101            658   ;        robot.c:84: if (v1 > 0.9 && v2 >1.2) {
0101 7466       659            mov     a,#0x66
0103 C0E0       660            push    acc
0105 C0E0       661            push    acc
0107 C0E0       662            push    acc
0109 743F       663            mov     a,#0x3F
010B C0E0       664            push    acc
010D 85E882     665            mov     dpl,_main_v1_1_57
0110 85E983     666            mov     dph,(_main_v1_1_57 + 1)
0113 85EAF0     667            mov     b,(_main_v1_1_57 + 2)
0116 E5EB       668            mov     a,(_main_v1_1_57 + 3)
0118 120100     669            lcall   ___fsgt
011B AA82       670            mov     r2,dpl
011D E581       671            mov     a,sp
011F 24FC       672            add     a,#0xfc
0121 F581       673            mov     sp,a
0123 EA         674            mov     a,r2
0124 7001       675            jnz     L002046?
0126 020100     676            ljmp    L002024?
0129            677   L002046?:
0129 749A       678            mov     a,#0x9A
012B C0E0       679            push    acc
012D 7499       680            mov     a,#0x99
012F C0E0       681            push    acc
0131 C0E0       682            push    acc
0133 743F       683            mov     a,#0x3F
0135 C0E0       684            push    acc
0137 852882     685            mov     dpl,_main_v2_1_57
013A 852983     686            mov     dph,(_main_v2_1_57 + 1)
013D 852AF0     687            mov     b,(_main_v2_1_57 + 2)
0140 E52B       688            mov     a,(_main_v2_1_57 + 3)
0142 120100     689            lcall   ___fsgt
0145 AA82       690            mov     r2,dpl
0147 E581       691            mov     a,sp
0149 24FC       692            add     a,#0xfc
014B F581       693            mov     sp,a
014D EA         694            mov     a,r2
014E 7001       695            jnz     L002047?
0150 020100     696            ljmp    L002024?
0153            697   L002047?:
0153            698   ;        robot.c:85: printf("\nINTERSECTION\n"); 
0153 7428       699            mov     a,#__str_1
0155 C0E0       700            push    acc
0157 74A2       701            mov     a,#(__str_1 >> 8)
0159 C0E0       702            push    acc
015B 7480       703            mov     a,#0x80
015D C0E0       704            push    acc
015F 120100     705            lcall   _printf
0162 1581       706            dec     sp
0164 1581       707            dec     sp
0166 1581       708            dec     sp
0168            709   ;        robot.c:86: movecar(currentstate, 35);
0168 AA18       710            mov     r2,_currentstate
016A E518       711            mov     a,_currentstate
016C 33         712            rlc     a
016D 95E0       713            subb    a,acc
016F FB         714            mov     r3,a
0170 755823     715            mov     _movecar_PARM_2,#0x23
0173 E4         716            clr     a
0174 F559       717            mov     (_movecar_PARM_2 + 1),a
0176 8A82       718            mov     dpl,r2
0178 8B83       719            mov     dph,r3
017A 120100     720            lcall   _movecar
017D            721   ;        robot.c:87: waitms(1500);
017D 9005DC     722            mov     dptr,#0x05DC
0180 120100     723            lcall   _waitms
0183            724   ;        robot.c:89: break;
0183 020100     725            ljmp    L002024?
0186            726   ;        robot.c:91: case 1 :
0186            727   L002009?:
0186            728   ;        robot.c:93: if (v1 > 0.9 && v2 >1.2)  {
0186 7466       729            mov     a,#0x66
0188 C0E0       730            push    acc
018A C0E0       731            push    acc
018C C0E0       732            push    acc
018E 743F       733            mov     a,#0x3F
0190 C0E0       734            push    acc
0192 85E882     735            mov     dpl,_main_v1_1_57
0195 85E983     736            mov     dph,(_main_v1_1_57 + 1)
0198 85EAF0     737            mov     b,(_main_v1_1_57 + 2)
019B E5EB       738            mov     a,(_main_v1_1_57 + 3)
019D 120100     739            lcall   ___fsgt
01A0 AA82       740            mov     r2,dpl
01A2 E581       741            mov     a,sp
01A4 24FC       742            add     a,#0xfc
01A6 F581       743            mov     sp,a
01A8 EA         744            mov     a,r2
01A9 7001       745            jnz     L002048?
01AB 020100     746            ljmp    L002024?
01AE            747   L002048?:
01AE 749A       748            mov     a,#0x9A
01B0 C0E0       749            push    acc
01B2 7499       750            mov     a,#0x99
01B4 C0E0       751            push    acc
01B6 C0E0       752            push    acc
01B8 743F       753            mov     a,#0x3F
01BA C0E0       754            push    acc
01BC 852882     755            mov     dpl,_main_v2_1_57
01BF 852983     756            mov     dph,(_main_v2_1_57 + 1)
01C2 852AF0     757            mov     b,(_main_v2_1_57 + 2)
01C5 E52B       758            mov     a,(_main_v2_1_57 + 3)
01C7 120100     759            lcall   ___fsgt
01CA AA82       760            mov     r2,dpl
01CC E581       761            mov     a,sp
01CE 24FC       762            add     a,#0xfc
01D0 F581       763            mov     sp,a
01D2 EA         764            mov     a,r2
01D3 7001       765            jnz     L002049?
01D5 020100     766            ljmp    L002024?
01D8            767   L002049?:
01D8            768   ;        robot.c:94: printf("\n\r INTERSECTION\n");
01D8 7428       769            mov     a,#__str_2
01DA C0E0       770            push    acc
01DC 74A3       771            mov     a,#(__str_2 >> 8)
01DE C0E0       772            push    acc
01E0 7480       773            mov     a,#0x80
01E2 C0E0       774            push    acc
01E4 120100     775            lcall   _printf
01E7 1581       776            dec     sp
01E9 1581       777            dec     sp
01EB 1581       778            dec     sp
01ED            779   ;        robot.c:96: movecar(currentstate, 35);                                          
01ED AA18       780            mov     r2,_currentstate
01EF E518       781            mov     a,_currentstate
01F1 33         782            rlc     a
01F2 95E0       783            subb    a,acc
01F4 FB         784            mov     r3,a
01F5 755823     785            mov     _movecar_PARM_2,#0x23
01F8 E4         786            clr     a
01F9 F559       787            mov     (_movecar_PARM_2 + 1),a
01FB 8A82       788            mov     dpl,r2
01FD 8B83       789            mov     dph,r3
01FF 120100     790            lcall   _movecar
0202            791   ;        robot.c:97: waitms(1500);
0202 9005DC     792            mov     dptr,#0x05DC
0205 120100     793            lcall   _waitms
0208            794   ;        robot.c:100: turncar(0); //0 = left
0208 900000     795            mov     dptr,#0x0000
020B 120100     796            lcall   _turncar
020E            797   ;        robot.c:101: currentcmd = 0;
020E 755800     798            mov     _currentcmd,#0x00
0211            799   ;        robot.c:103: break;
0211 020100     800            ljmp    L002024?
0214            801   ;        robot.c:106: case 2 :
0214            802   L002013?:
0214            803   ;        robot.c:108: if (v1 > 0.9 && v2 >1.2) {
0214 7466       804            mov     a,#0x66
0216 C0E0       805            push    acc
0218 C0E0       806            push    acc
021A C0E0       807            push    acc
021C 743F       808            mov     a,#0x3F
021E C0E0       809            push    acc
0220 85E882     810            mov     dpl,_main_v1_1_57
0223 85E983     811            mov     dph,(_main_v1_1_57 + 1)
0226 85EAF0     812            mov     b,(_main_v1_1_57 + 2)
0229 E5EB       813            mov     a,(_main_v1_1_57 + 3)
022B 120100     814            lcall   ___fsgt
022E AA82       815            mov     r2,dpl
0230 E581       816            mov     a,sp
0232 24FC       817            add     a,#0xfc
0234 F581       818            mov     sp,a
0236 EA         819            mov     a,r2
0237 7001       820            jnz     L002050?
0239 020100     821            ljmp    L002024?
023C            822   L002050?:
023C 749A       823            mov     a,#0x9A
023E C0E0       824            push    acc
0240 7499       825            mov     a,#0x99
0242 C0E0       826            push    acc
0244 C0E0       827            push    acc
0246 743F       828            mov     a,#0x3F
0248 C0E0       829            push    acc
024A 852882     830            mov     dpl,_main_v2_1_57
024D 852983     831            mov     dph,(_main_v2_1_57 + 1)
0250 852AF0     832            mov     b,(_main_v2_1_57 + 2)
0253 E52B       833            mov     a,(_main_v2_1_57 + 3)
0255 120100     834            lcall   ___fsgt
0258 AA82       835            mov     r2,dpl
025A E581       836            mov     a,sp
025C 24FC       837            add     a,#0xfc
025E F581       838            mov     sp,a
0260 EA         839            mov     a,r2
0261 7001       840            jnz     L002051?
0263 020100     841            ljmp    L002024?
0266            842   L002051?:
0266            843   ;        robot.c:109: printf("\n\r INTERSECTION\n");
0266 7428       844            mov     a,#__str_2
0268 C0E0       845            push    acc
026A 74A3       846            mov     a,#(__str_2 >> 8)
026C C0E0       847            push    acc
026E 7480       848            mov     a,#0x80
0270 C0E0       849            push    acc
0272 120100     850            lcall   _printf
0275 1581       851            dec     sp
0277 1581       852            dec     sp
0279 1581       853            dec     sp
027B            854   ;        robot.c:111: movecar(currentstate, 35);
027B AA18       855            mov     r2,_currentstate
027D E518       856            mov     a,_currentstate
027F 33         857            rlc     a
0280 95E0       858            subb    a,acc
0282 FB         859            mov     r3,a
0283 755823     860            mov     _movecar_PARM_2,#0x23
0286 E4         861            clr     a
0287 F559       862            mov     (_movecar_PARM_2 + 1),a
0289 8A82       863            mov     dpl,r2
028B 8B83       864            mov     dph,r3
028D 120100     865            lcall   _movecar
0290            866   ;        robot.c:112: waitms(1500);
0290 9005DC     867            mov     dptr,#0x05DC
0293 120100     868            lcall   _waitms
0296            869   ;        robot.c:115: turncar(1); //1 = right
0296 900001     870            mov     dptr,#0x0001
0299 120100     871            lcall   _turncar
029C            872   ;        robot.c:116: currentcmd = 0;
029C 755800     873            mov     _currentcmd,#0x00
029F            874   ;        robot.c:118: break;
029F 020100     875            ljmp    L002024?
02A2            876   ;        robot.c:121: case 3 :
02A2            877   L002017?:
02A2            878   ;        robot.c:123: currentstate = 1;
02A2 751801     879            mov     _currentstate,#0x01
02A5            880   ;        robot.c:124: currentcmd = 0;
02A5 755800     881            mov     _currentcmd,#0x00
02A8            882   ;        robot.c:125: break;
02A8 020100     883            ljmp    L002024?
02AB            884   ;        robot.c:128: case 4 :
02AB            885   L002018?:
02AB            886   ;        robot.c:130: currentstate = 2;
02AB 751802     887            mov     _currentstate,#0x02
02AE            888   ;        robot.c:131: currentcmd = 0;
02AE 755800     889            mov     _currentcmd,#0x00
02B1            890   ;        robot.c:132: break;
02B1 020100     891            ljmp    L002024?
02B4            892   ;        robot.c:135: case 5 :
02B4            893   L002019?:
02B4            894   ;        robot.c:137: currentstate = 3;
02B4 751803     895            mov     _currentstate,#0x03
02B7            896   ;        robot.c:138: currentcmd = 0;
02B7 755800     897            mov     _currentcmd,#0x00
02BA            898   ;        robot.c:139: break;
02BA 020100     899            ljmp    L002024?
02BD            900   ;        robot.c:142: case 6 :
02BD            901   L002020?:
02BD            902   ;        robot.c:143: uturn();
02BD 120100     903            lcall   _uturn
02C0            904   ;        robot.c:144: currentcmd = 0;
02C0 755800     905            mov     _currentcmd,#0x00
02C3            906   ;        robot.c:145: break;
02C3 020100     907            ljmp    L002024?
02C6            908   ;        robot.c:148: default: 
02C6            909   L002021?:
02C6            910   ;        robot.c:149: currentstate = 1;
02C6 751801     911            mov     _currentstate,#0x01
02C9            912   ;        robot.c:150: }
02C9 020100     913            ljmp    L002024?
02CC            914   ;------------------------------------------------------------
02CC            915   ;Allocation info for local variables in function 'Timer2_ISR'
02CC            916   ;------------------------------------------------------------
02CC            917   ;------------------------------------------------------------
02CC            918   ;        robot.c:154: void Timer2_ISR (void) interrupt 5 {
02CC            919   ;        -----------------------------------------
02CC            920   ;         function Timer2_ISR
02CC            921   ;        -----------------------------------------
02CC            922   _Timer2_ISR:
02CC C0E0       923            push    acc
02CE C0F0       924            push    b
02D0 C0D0       925            push    psw
02D2 75D000     926            mov     psw,#0x00
02D5            927   ;        robot.c:155: TF2H = 0; // Clear Timer2 interrupt flag
02D5 C2CF       928            clr     _TF2H
02D7            929   ;        robot.c:157: pwm_count++;
02D7 0558       930            inc     _pwm_count
02D9            931   ;        robot.c:158: if(pwm_count>100) pwm_count=0;
02D9 C3         932            clr     c
02DA 74E4       933            mov     a,#(0x64 ^ 0x80)
02DC 8558F0     934            mov     b,_pwm_count
02DF 63F080     935            xrl     b,#0x80
02E2 95F0       936            subb    a,b
02E4 5001       937            jnc     L003002?
02E6 755800     938            mov     _pwm_count,#0x00
02E9            939   L003002?:
02E9            940   ;        robot.c:161: MOTOR_LEFT0 = pwm_count > pwm_Left0 ? 0 : 1; //p1.5
02E9 C3         941            clr     c
02EA E598       942            mov     a,_pwm_Left0
02EC 6480       943            xrl     a,#0x80
02EE 8558F0     944            mov     b,_pwm_count
02F1 63F080     945            xrl     b,#0x80
02F4 95F0       946            subb    a,b
02F6 9298       947            mov  _Timer2_ISR_sloc0_1_0,c
02F8 B3         948            cpl     c
02F9 9295       949            mov     _P1_5,c
02FB            950   ;        robot.c:162: MOTOR_LEFT1 = pwm_count > pwm_Left1 ? 0 : 1; //p1.6
02FB C3         951            clr     c
02FC E558       952            mov     a,_pwm_Left1
02FE 6480       953            xrl     a,#0x80
0300 8558F0     954            mov     b,_pwm_count
0303 63F080     955            xrl     b,#0x80
0306 95F0       956            subb    a,b
0308 9298       957            mov  _Timer2_ISR_sloc0_1_0,c
030A B3         958            cpl     c
030B 9296       959            mov     _P1_6,c
030D            960   ;        robot.c:163: MOTOR_RIGHT0 = pwm_count > pwm_Right0 ? 0 : 1; //p2.0
030D C3         961            clr     c
030E E518       962            mov     a,_pwm_Right0
0310 6480       963            xrl     a,#0x80
0312 8558F0     964            mov     b,_pwm_count
0315 63F080     965            xrl     b,#0x80
0318 95F0       966            subb    a,b
031A 9298       967            mov  _Timer2_ISR_sloc0_1_0,c
031C B3         968            cpl     c
031D 92A0       969            mov     _P2_0,c
031F            970   ;        robot.c:164: MOTOR_RIGHT1 = pwm_count > pwm_Right1 ? 0 : 1; //p2.1
031F C3         971            clr     c
0320 E5D8       972            mov     a,_pwm_Right1
0322 6480       973            xrl     a,#0x80
0324 8558F0     974            mov     b,_pwm_count
0327 63F080     975            xrl     b,#0x80
032A 95F0       976            subb    a,b
032C 9298       977            mov  _Timer2_ISR_sloc0_1_0,c
032E B3         978            cpl     c
032F 92A1       979            mov     _P2_1,c
0331 D0D0       980            pop     psw
0333 D0F0       981            pop     b
0335 D0E0       982            pop     acc
0337 32         983            reti
0338            984   ;        eliminated unneeded push/pop dpl
0338            985   ;        eliminated unneeded push/pop dph
0338            986   ;------------------------------------------------------------
0338            987   ;Allocation info for local variables in function 'forward_backward'
0338            988   ;------------------------------------------------------------
0338            989   ;direction                 Allocated to registers r2 
0338            990   ;------------------------------------------------------------
0338            991   ;        robot.c:171: void forward_backward(unsigned char direction) {
0338            992   ;        -----------------------------------------
0338            993   ;         function forward_backward
0338            994   ;        -----------------------------------------
0338            995   _forward_backward:
0338            996   ;        robot.c:172: if (direction == 0) { //p2.1,1.6 on
0338 E582       997            mov     a,dpl
033A FA         998            mov     r2,a
033B 7001       999            jnz     L004004?
033D           1000   ;        robot.c:173: pwm_Left0 = pwm_Right0 = -1;
033D 7518FF    1001            mov     _pwm_Right0,#0xFF
0340 7598FF    1002            mov     _pwm_Left0,#0xFF
0343           1003   ;        robot.c:174: pwm_Left1 = pwm_Right1 = pwm_both;  //MOTOR_LEFT1 = MOTOR_RIGHT1 = pwm_both;
0343 85D8D8    1004            mov     _pwm_Right1,_pwm_both
0346 85D858    1005            mov     _pwm_Left1,_pwm_both
0349 22        1006            ret
034A           1007   L004004?:
034A           1008   ;        robot.c:177: else if (direction == 1) { //p2.0,1.5 on
034A BA01A8    1009            cjne    r2,#0x01,L004006?
034D           1010   ;        robot.c:178: pwm_Left1 = pwm_Right1 = -1;
034D 75D8FF    1011            mov     _pwm_Right1,#0xFF
0350 7558FF    1012            mov     _pwm_Left1,#0xFF
0353           1013   ;        robot.c:179: pwm_Left0 = pwm_Right0 = pwm_both; 
0353 85D818    1014            mov     _pwm_Right0,_pwm_both
0356 85D898    1015            mov     _pwm_Left0,_pwm_both
0359           1016   L004006?:
0359 22        1017            ret
035A           1018   ;------------------------------------------------------------
035A           1019   ;Allocation info for local variables in function 'readData'
035A           1020   ;------------------------------------------------------------
035A           1021   ;commandflag               Allocated to registers r2 r3 
035A           1022   ;------------------------------------------------------------
035A           1023   ;        robot.c:190: void readData (void) {
035A           1024   ;        -----------------------------------------
035A           1025   ;         function readData
035A           1026   ;        -----------------------------------------
035A           1027   _readData:
035A           1028   ;        robot.c:191: int commandflag = 0;                                       //determines if there's a real command coming in or not
035A 7A00      1029            mov     r2,#0x00
035C 7B00      1030            mov     r3,#0x00
035E           1031   ;        robot.c:194: if (COMMAND_PIN == 0) {                                    //0---
035E 3090E8    1032            jnb     _P1_0,L005039?
0361 020100    1033            ljmp    L005022?
0364           1034   L005039?:
0364           1035   ;        robot.c:195: waitms(CMDFRQ*1.5);
0364 900069    1036            mov     dptr,#0x0069
0367 C002      1037            push    ar2
0369 C003      1038            push    ar3
036B 120100    1039            lcall   _waitms
036E D003      1040            pop     ar3
0370 D002      1041            pop     ar2
0372           1042   ;        robot.c:196: if (COMMAND_PIN == 1) {                            //01--
0372 309068    1043            jnb     _P1_0,L005019?
0375           1044   ;        robot.c:197: waitms(CMDFRQ);
0375 900046    1045            mov     dptr,#0x0046
0378 C002      1046            push    ar2
037A C003      1047            push    ar3
037C 120100    1048            lcall   _waitms
037F D003      1049            pop     ar3
0381 D002      1050            pop     ar2
0383           1051   ;        robot.c:198: if (COMMAND_PIN == 0) {                    //010-
0383 2090A8    1052            jb      _P1_0,L005007?
0386           1053   ;        robot.c:199: waitms(CMDFRQ);
0386 900046    1054            mov     dptr,#0x0046
0389 C002      1055            push    ar2
038B C003      1056            push    ar3
038D 120100    1057            lcall   _waitms
0390 D003      1058            pop     ar3
0392 D002      1059            pop     ar2
0394           1060   ;        robot.c:200: if (COMMAND_PIN == 0)      currentcmd = 4;         //0100  
0394 2090E8    1061            jb      _P1_0,L005002?
0397 755804    1062            mov     _currentcmd,#0x04
039A 8001      1063            sjmp    L005022?
039C           1064   L005002?:
039C           1065   ;        robot.c:201: else                                       currentcmd = 5;         //0101
039C 755805    1066            mov     _currentcmd,#0x05
039F 8001      1067            sjmp    L005022?
03A1           1068   L005007?:
03A1           1069   ;        robot.c:204: waitms(CMDFRQ);
03A1 900046    1070            mov     dptr,#0x0046
03A4 C002      1071            push    ar2
03A6 C003      1072            push    ar3
03A8 120100    1073            lcall   _waitms
03AB D003      1074            pop     ar3
03AD D002      1075            pop     ar2
03AF           1076   ;        robot.c:205: if (COMMAND_PIN == 0)      currentcmd = 6;         //0110
03AF 209028    1077            jb      _P1_0,L005022?
03B2 755806    1078            mov     _currentcmd,#0x06
03B5 8001      1079            sjmp    L005022?
03B7           1080   L005019?:
03B7           1081   ;        robot.c:209: waitms(CMDFRQ);
03B7 900046    1082            mov     dptr,#0x0046
03BA C002      1083            push    ar2
03BC C003      1084            push    ar3
03BE 120100    1085            lcall   _waitms
03C1 D003      1086            pop     ar3
03C3 D002      1087            pop     ar2
03C5           1088   ;        robot.c:210: if (COMMAND_PIN == 1) {                    //001-
03C5 309028    1089            jnb     _P1_0,L005016?
03C8           1090   ;        robot.c:211: waitms(CMDFRQ);
03C8 900046    1091            mov     dptr,#0x0046
03CB C002      1092            push    ar2
03CD C003      1093            push    ar3
03CF 120100    1094            lcall   _waitms
03D2 D003      1095            pop     ar3
03D4 D002      1096            pop     ar2
03D6           1097   ;        robot.c:212: if (COMMAND_PIN == 1)      currentcmd = 3;         //0011
03D6 309068    1098            jnb     _P1_0,L005010?
03D9 755803    1099            mov     _currentcmd,#0x03
03DC 8001      1100            sjmp    L005022?
03DE           1101   L005010?:
03DE           1102   ;        robot.c:213: else                                       currentcmd = 2;         //0010
03DE 755802    1103            mov     _currentcmd,#0x02
03E1 8001      1104            sjmp    L005022?
03E3           1105   L005016?:
03E3           1106   ;        robot.c:216: waitms(CMDFRQ);
03E3 900046    1107            mov     dptr,#0x0046
03E6 C002      1108            push    ar2
03E8 C003      1109            push    ar3
03EA 120100    1110            lcall   _waitms
03ED D003      1111            pop     ar3
03EF D002      1112            pop     ar2
03F1           1113   ;        robot.c:217: if (COMMAND_PIN == 1)      currentcmd = 1; //0001
03F1 3090A8    1114            jnb     _P1_0,L005013?
03F4 755801    1115            mov     _currentcmd,#0x01
03F7 8001      1116            sjmp    L005022?
03F9           1117   L005013?:
03F9           1118   ;        robot.c:219: commandflag = 1;
03F9 7A01      1119            mov     r2,#0x01
03FB 7B00      1120            mov     r3,#0x00
03FD           1121   L005022?:
03FD           1122   ;        robot.c:226: if (commandflag == 0)      {while (COMMAND_PIN == 0);} 
03FD EA        1123            mov     a,r2
03FE 4B        1124            orl     a,r3
03FF 7001      1125            jnz     L005028?
0401           1126   L005023?:
0401 309028    1127            jnb     _P1_0,L005023?
0404           1128   L005028?:
0404 22        1129            ret
0405           1130   ;------------------------------------------------------------
0405           1131   ;Allocation info for local variables in function 'linetrack'
0405           1132   ;------------------------------------------------------------
0405           1133   ;forwardbackward           Allocated with name '_linetrack_forwardbackward_1_81'
0405           1134   ;vleft                     Allocated with name '_linetrack_vleft_1_82'
0405           1135   ;vright                    Allocated with name '_linetrack_vright_1_82'
0405           1136   ;sloc0                     Allocated with name '_linetrack_sloc0_1_0'
0405           1137   ;sloc1                     Allocated with name '_linetrack_sloc1_1_0'
0405           1138   ;------------------------------------------------------------
0405           1139   ;        robot.c:236: void linetrack (int forwardbackward) {
0405           1140   ;        -----------------------------------------
0405           1141   ;         function linetrack
0405           1142   ;        -----------------------------------------
0405           1143   _linetrack:
0405 858278    1144            mov     _linetrack_forwardbackward_1_81,dpl
0408 858379    1145            mov     (_linetrack_forwardbackward_1_81 + 1),dph
040B           1146   ;        robot.c:241: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
040B 75820B    1147            mov     dpl,#0x0B
040E 120100    1148            lcall   _Volts_at_Pin
0411 8582C8    1149            mov     _linetrack_vleft_1_82,dpl
0414 8583C9    1150            mov     (_linetrack_vleft_1_82 + 1),dph
0417 85F0CA    1151            mov     (_linetrack_vleft_1_82 + 2),b
041A F5CB      1152            mov     (_linetrack_vleft_1_82 + 3),a
041C           1153   ;        robot.c:242: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
041C 75820C    1154            mov     dpl,#0x0C
041F 120100    1155            lcall   _Volts_at_Pin
0422 858218    1156            mov     _linetrack_vright_1_82,dpl
0425 858319    1157            mov     (_linetrack_vright_1_82 + 1),dph
0428 85F01A    1158            mov     (_linetrack_vright_1_82 + 2),b
042B F51B      1159            mov     (_linetrack_vright_1_82 + 3),a
042D           1160   ;        robot.c:245: pwm_Left0 = -1;
042D 7598FF    1161            mov     _pwm_Left0,#0xFF
0430           1162   ;        robot.c:246: pwm_Left1 = vright*vright*75/(vright*vright+vleft*vleft);
0430 C018      1163            push    _linetrack_vright_1_82
0432 C019      1164            push    (_linetrack_vright_1_82 + 1)
0434 C01A      1165            push    (_linetrack_vright_1_82 + 2)
0436 C01B      1166            push    (_linetrack_vright_1_82 + 3)
0438 851882    1167            mov     dpl,_linetrack_vright_1_82
043B 851983    1168            mov     dph,(_linetrack_vright_1_82 + 1)
043E 851AF0    1169            mov     b,(_linetrack_vright_1_82 + 2)
0441 E51B      1170            mov     a,(_linetrack_vright_1_82 + 3)
0443 120100    1171            lcall   ___fsmul
0446 AC82      1172            mov     r4,dpl
0448 AD83      1173            mov     r5,dph
044A AEF0      1174            mov     r6,b
044C FF        1175            mov     r7,a
044D E581      1176            mov     a,sp
044F 24FC      1177            add     a,#0xfc
0451 F581      1178            mov     sp,a
0453 C004      1179            push    ar4
0455 C005      1180            push    ar5
0457 C006      1181            push    ar6
0459 C007      1182            push    ar7
045B 900000    1183            mov     dptr,#0x0000
045E 75F096    1184            mov     b,#0x96
0461 7442      1185            mov     a,#0x42
0463 120100    1186            lcall   ___fsmul
0466 AC82      1187            mov     r4,dpl
0468 AD83      1188            mov     r5,dph
046A AEF0      1189            mov     r6,b
046C FF        1190            mov     r7,a
046D E581      1191            mov     a,sp
046F 24FC      1192            add     a,#0xfc
0471 F581      1193            mov     sp,a
0473 C004      1194            push    ar4
0475 C005      1195            push    ar5
0477 C006      1196            push    ar6
0479 C007      1197            push    ar7
047B C018      1198            push    _linetrack_vright_1_82
047D C019      1199            push    (_linetrack_vright_1_82 + 1)
047F C01A      1200            push    (_linetrack_vright_1_82 + 2)
0481 C01B      1201            push    (_linetrack_vright_1_82 + 3)
0483 851882    1202            mov     dpl,_linetrack_vright_1_82
0486 851983    1203            mov     dph,(_linetrack_vright_1_82 + 1)
0489 851AF0    1204            mov     b,(_linetrack_vright_1_82 + 2)
048C E51B      1205            mov     a,(_linetrack_vright_1_82 + 3)
048E 120100    1206            lcall   ___fsmul
0491 858268    1207            mov     _linetrack_sloc0_1_0,dpl
0494 858369    1208            mov     (_linetrack_sloc0_1_0 + 1),dph
0497 85F06A    1209            mov     (_linetrack_sloc0_1_0 + 2),b
049A F56B      1210            mov     (_linetrack_sloc0_1_0 + 3),a
049C E581      1211            mov     a,sp
049E 24FC      1212            add     a,#0xfc
04A0 F581      1213            mov     sp,a
04A2 C0C8      1214            push    _linetrack_vleft_1_82
04A4 C0C9      1215            push    (_linetrack_vleft_1_82 + 1)
04A6 C0CA      1216            push    (_linetrack_vleft_1_82 + 2)
04A8 C0CB      1217            push    (_linetrack_vleft_1_82 + 3)
04AA 85C882    1218            mov     dpl,_linetrack_vleft_1_82
04AD 85C983    1219            mov     dph,(_linetrack_vleft_1_82 + 1)
04B0 85CAF0    1220            mov     b,(_linetrack_vleft_1_82 + 2)
04B3 E5CB      1221            mov     a,(_linetrack_vleft_1_82 + 3)
04B5 120100    1222            lcall   ___fsmul
04B8 AA82      1223            mov     r2,dpl
04BA AB83      1224            mov     r3,dph
04BC A8F0      1225            mov     r0,b
04BE F9        1226            mov     r1,a
04BF E581      1227            mov     a,sp
04C1 24FC      1228            add     a,#0xfc
04C3 F581      1229            mov     sp,a
04C5 C002      1230            push    ar2
04C7 C003      1231            push    ar3
04C9 C000      1232            push    ar0
04CB C001      1233            push    ar1
04CD 856882    1234            mov     dpl,_linetrack_sloc0_1_0
04D0 856983    1235            mov     dph,(_linetrack_sloc0_1_0 + 1)
04D3 856AF0    1236            mov     b,(_linetrack_sloc0_1_0 + 2)
04D6 E56B      1237            mov     a,(_linetrack_sloc0_1_0 + 3)
04D8 120100    1238            lcall   ___fsadd
04DB AA82      1239            mov     r2,dpl
04DD AB83      1240            mov     r3,dph
04DF A8F0      1241            mov     r0,b
04E1 F9        1242            mov     r1,a
04E2 E581      1243            mov     a,sp
04E4 24FC      1244            add     a,#0xfc
04E6 F581      1245            mov     sp,a
04E8 D007      1246            pop     ar7
04EA D006      1247            pop     ar6
04EC D005      1248            pop     ar5
04EE D004      1249            pop     ar4
04F0 C002      1250            push    ar2
04F2 C003      1251            push    ar3
04F4 C000      1252            push    ar0
04F6 C001      1253            push    ar1
04F8 8C82      1254            mov     dpl,r4
04FA 8D83      1255            mov     dph,r5
04FC 8EF0      1256            mov     b,r6
04FE EF        1257            mov     a,r7
04FF 120100    1258            lcall   ___fsdiv
0502 AA82      1259            mov     r2,dpl
0504 AB83      1260            mov     r3,dph
0506 ACF0      1261            mov     r4,b
0508 FD        1262            mov     r5,a
0509 E581      1263            mov     a,sp
050B 24FC      1264            add     a,#0xfc
050D F581      1265            mov     sp,a
050F 8A82      1266            mov     dpl,r2
0511 8B83      1267            mov     dph,r3
0513 8CF0      1268            mov     b,r4
0515 ED        1269            mov     a,r5
0516 120100    1270            lcall   ___fs2schar
0519 858258    1271            mov     _pwm_Left1,dpl
051C           1272   ;        robot.c:247: pwm_Right1 = -1;
051C 75D8FF    1273            mov     _pwm_Right1,#0xFF
051F           1274   ;        robot.c:248: pwm_Right0 = vleft*vleft*75/(vright*vright+vleft*vleft);
051F C0C8      1275            push    _linetrack_vleft_1_82
0521 C0C9      1276            push    (_linetrack_vleft_1_82 + 1)
0523 C0CA      1277            push    (_linetrack_vleft_1_82 + 2)
0525 C0CB      1278            push    (_linetrack_vleft_1_82 + 3)
0527 85C882    1279            mov     dpl,_linetrack_vleft_1_82
052A 85C983    1280            mov     dph,(_linetrack_vleft_1_82 + 1)
052D 85CAF0    1281            mov     b,(_linetrack_vleft_1_82 + 2)
0530 E5CB      1282            mov     a,(_linetrack_vleft_1_82 + 3)
0532 120100    1283            lcall   ___fsmul
0535 AA82      1284            mov     r2,dpl
0537 AB83      1285            mov     r3,dph
0539 ACF0      1286            mov     r4,b
053B FD        1287            mov     r5,a
053C E581      1288            mov     a,sp
053E 24FC      1289            add     a,#0xfc
0540 F581      1290            mov     sp,a
0542 C002      1291            push    ar2
0544 C003      1292            push    ar3
0546 C004      1293            push    ar4
0548 C005      1294            push    ar5
054A 900000    1295            mov     dptr,#0x0000
054D 75F096    1296            mov     b,#0x96
0550 7442      1297            mov     a,#0x42
0552 120100    1298            lcall   ___fsmul
0555 AA82      1299            mov     r2,dpl
0557 AB83      1300            mov     r3,dph
0559 ACF0      1301            mov     r4,b
055B FD        1302            mov     r5,a
055C E581      1303            mov     a,sp
055E 24FC      1304            add     a,#0xfc
0560 F581      1305            mov     sp,a
0562 C002      1306            push    ar2
0564 C003      1307            push    ar3
0566 C004      1308            push    ar4
0568 C005      1309            push    ar5
056A C018      1310            push    _linetrack_vright_1_82
056C C019      1311            push    (_linetrack_vright_1_82 + 1)
056E C01A      1312            push    (_linetrack_vright_1_82 + 2)
0570 C01B      1313            push    (_linetrack_vright_1_82 + 3)
0572 851882    1314            mov     dpl,_linetrack_vright_1_82
0575 851983    1315            mov     dph,(_linetrack_vright_1_82 + 1)
0578 851AF0    1316            mov     b,(_linetrack_vright_1_82 + 2)
057B E51B      1317            mov     a,(_linetrack_vright_1_82 + 3)
057D 120100    1318            lcall   ___fsmul
0580 858268    1319            mov     _linetrack_sloc0_1_0,dpl
0583 858369    1320            mov     (_linetrack_sloc0_1_0 + 1),dph
0586 85F06A    1321            mov     (_linetrack_sloc0_1_0 + 2),b
0589 F56B      1322            mov     (_linetrack_sloc0_1_0 + 3),a
058B E581      1323            mov     a,sp
058D 24FC      1324            add     a,#0xfc
058F F581      1325            mov     sp,a
0591 C0C8      1326            push    _linetrack_vleft_1_82
0593 C0C9      1327            push    (_linetrack_vleft_1_82 + 1)
0595 C0CA      1328            push    (_linetrack_vleft_1_82 + 2)
0597 C0CB      1329            push    (_linetrack_vleft_1_82 + 3)
0599 85C882    1330            mov     dpl,_linetrack_vleft_1_82
059C 85C983    1331            mov     dph,(_linetrack_vleft_1_82 + 1)
059F 85CAF0    1332            mov     b,(_linetrack_vleft_1_82 + 2)
05A2 E5CB      1333            mov     a,(_linetrack_vleft_1_82 + 3)
05A4 120100    1334            lcall   ___fsmul
05A7 AE82      1335            mov     r6,dpl
05A9 AF83      1336            mov     r7,dph
05AB A8F0      1337            mov     r0,b
05AD F9        1338            mov     r1,a
05AE E581      1339            mov     a,sp
05B0 24FC      1340            add     a,#0xfc
05B2 F581      1341            mov     sp,a
05B4 C006      1342            push    ar6
05B6 C007      1343            push    ar7
05B8 C000      1344            push    ar0
05BA C001      1345            push    ar1
05BC 856882    1346            mov     dpl,_linetrack_sloc0_1_0
05BF 856983    1347            mov     dph,(_linetrack_sloc0_1_0 + 1)
05C2 856AF0    1348            mov     b,(_linetrack_sloc0_1_0 + 2)
05C5 E56B      1349            mov     a,(_linetrack_sloc0_1_0 + 3)
05C7 120100    1350            lcall   ___fsadd
05CA AE82      1351            mov     r6,dpl
05CC AF83      1352            mov     r7,dph
05CE A8F0      1353            mov     r0,b
05D0 F9        1354            mov     r1,a
05D1 E581      1355            mov     a,sp
05D3 24FC      1356            add     a,#0xfc
05D5 F581      1357            mov     sp,a
05D7 D005      1358            pop     ar5
05D9 D004      1359            pop     ar4
05DB D003      1360            pop     ar3
05DD D002      1361            pop     ar2
05DF C006      1362            push    ar6
05E1 C007      1363            push    ar7
05E3 C000      1364            push    ar0
05E5 C001      1365            push    ar1
05E7 8A82      1366            mov     dpl,r2
05E9 8B83      1367            mov     dph,r3
05EB 8CF0      1368            mov     b,r4
05ED ED        1369            mov     a,r5
05EE 120100    1370            lcall   ___fsdiv
05F1 AA82      1371            mov     r2,dpl
05F3 AB83      1372            mov     r3,dph
05F5 ACF0      1373            mov     r4,b
05F7 FD        1374            mov     r5,a
05F8 E581      1375            mov     a,sp
05FA 24FC      1376            add     a,#0xfc
05FC F581      1377            mov     sp,a
05FE 8A82      1378            mov     dpl,r2
0600 8B83      1379            mov     dph,r3
0602 8CF0      1380            mov     b,r4
0604 ED        1381            mov     a,r5
0605 120100    1382            lcall   ___fs2schar
0608 858218    1383            mov     _pwm_Right0,dpl
060B           1384   ;        robot.c:252: if (forwardbackward) {
060B E578      1385            mov     a,_linetrack_forwardbackward_1_81
060D 4579      1386            orl     a,(_linetrack_forwardbackward_1_81 + 1)
060F 7001      1387            jnz     L006006?
0611 020100    1388            ljmp    L006002?
0614           1389   L006006?:
0614           1390   ;        robot.c:254: vleft=Volts_at_Pin(LQFP32_MUX_P2_5);
0614 75820D    1391            mov     dpl,#0x0D
0617 120100    1392            lcall   _Volts_at_Pin
061A 8582C8    1393            mov     _linetrack_vleft_1_82,dpl
061D 8583C9    1394            mov     (_linetrack_vleft_1_82 + 1),dph
0620 85F0CA    1395            mov     (_linetrack_vleft_1_82 + 2),b
0623 F5CB      1396            mov     (_linetrack_vleft_1_82 + 3),a
0625           1397   ;        robot.c:255: vright=Volts_at_Pin(LQFP32_MUX_P2_6);
0625 75820E    1398            mov     dpl,#0x0E
0628 120100    1399            lcall   _Volts_at_Pin
062B 858218    1400            mov     _linetrack_vright_1_82,dpl
062E 858319    1401            mov     (_linetrack_vright_1_82 + 1),dph
0631 85F01A    1402            mov     (_linetrack_vright_1_82 + 2),b
0634 F51B      1403            mov     (_linetrack_vright_1_82 + 3),a
0636           1404   ;        robot.c:258: pwm_Left1 = -1;
0636 7558FF    1405            mov     _pwm_Left1,#0xFF
0639           1406   ;        robot.c:259: pwm_Left0 = vright*vright*75/(vright*vright+vleft*vleft);
0639 C018      1407            push    _linetrack_vright_1_82
063B C019      1408            push    (_linetrack_vright_1_82 + 1)
063D C01A      1409            push    (_linetrack_vright_1_82 + 2)
063F C01B      1410            push    (_linetrack_vright_1_82 + 3)
0641 851882    1411            mov     dpl,_linetrack_vright_1_82
0644 851983    1412            mov     dph,(_linetrack_vright_1_82 + 1)
0647 851AF0    1413            mov     b,(_linetrack_vright_1_82 + 2)
064A E51B      1414            mov     a,(_linetrack_vright_1_82 + 3)
064C 120100    1415            lcall   ___fsmul
064F AA82      1416            mov     r2,dpl
0651 AB83      1417            mov     r3,dph
0653 ACF0      1418            mov     r4,b
0655 FD        1419            mov     r5,a
0656 E581      1420            mov     a,sp
0658 24FC      1421            add     a,#0xfc
065A F581      1422            mov     sp,a
065C C002      1423            push    ar2
065E C003      1424            push    ar3
0660 C004      1425            push    ar4
0662 C005      1426            push    ar5
0664 900000    1427            mov     dptr,#0x0000
0667 75F096    1428            mov     b,#0x96
066A 7442      1429            mov     a,#0x42
066C 120100    1430            lcall   ___fsmul
066F AA82      1431            mov     r2,dpl
0671 AB83      1432            mov     r3,dph
0673 ACF0      1433            mov     r4,b
0675 FD        1434            mov     r5,a
0676 E581      1435            mov     a,sp
0678 24FC      1436            add     a,#0xfc
067A F581      1437            mov     sp,a
067C C002      1438            push    ar2
067E C003      1439            push    ar3
0680 C004      1440            push    ar4
0682 C005      1441            push    ar5
0684 C018      1442            push    _linetrack_vright_1_82
0686 C019      1443            push    (_linetrack_vright_1_82 + 1)
0688 C01A      1444            push    (_linetrack_vright_1_82 + 2)
068A C01B      1445            push    (_linetrack_vright_1_82 + 3)
068C 851882    1446            mov     dpl,_linetrack_vright_1_82
068F 851983    1447            mov     dph,(_linetrack_vright_1_82 + 1)
0692 851AF0    1448            mov     b,(_linetrack_vright_1_82 + 2)
0695 E51B      1449            mov     a,(_linetrack_vright_1_82 + 3)
0697 120100    1450            lcall   ___fsmul
069A 858268    1451            mov     _linetrack_sloc0_1_0,dpl
069D 858369    1452            mov     (_linetrack_sloc0_1_0 + 1),dph
06A0 85F06A    1453            mov     (_linetrack_sloc0_1_0 + 2),b
06A3 F56B      1454            mov     (_linetrack_sloc0_1_0 + 3),a
06A5 E581      1455            mov     a,sp
06A7 24FC      1456            add     a,#0xfc
06A9 F581      1457            mov     sp,a
06AB C0C8      1458            push    _linetrack_vleft_1_82
06AD C0C9      1459            push    (_linetrack_vleft_1_82 + 1)
06AF C0CA      1460            push    (_linetrack_vleft_1_82 + 2)
06B1 C0CB      1461            push    (_linetrack_vleft_1_82 + 3)
06B3 85C882    1462            mov     dpl,_linetrack_vleft_1_82
06B6 85C983    1463            mov     dph,(_linetrack_vleft_1_82 + 1)
06B9 85CAF0    1464            mov     b,(_linetrack_vleft_1_82 + 2)
06BC E5CB      1465            mov     a,(_linetrack_vleft_1_82 + 3)
06BE 120100    1466            lcall   ___fsmul
06C1 AE82      1467            mov     r6,dpl
06C3 AF83      1468            mov     r7,dph
06C5 A8F0      1469            mov     r0,b
06C7 F9        1470            mov     r1,a
06C8 E581      1471            mov     a,sp
06CA 24FC      1472            add     a,#0xfc
06CC F581      1473            mov     sp,a
06CE C006      1474            push    ar6
06D0 C007      1475            push    ar7
06D2 C000      1476            push    ar0
06D4 C001      1477            push    ar1
06D6 856882    1478            mov     dpl,_linetrack_sloc0_1_0
06D9 856983    1479            mov     dph,(_linetrack_sloc0_1_0 + 1)
06DC 856AF0    1480            mov     b,(_linetrack_sloc0_1_0 + 2)
06DF E56B      1481            mov     a,(_linetrack_sloc0_1_0 + 3)
06E1 120100    1482            lcall   ___fsadd
06E4 AE82      1483            mov     r6,dpl
06E6 AF83      1484            mov     r7,dph
06E8 A8F0      1485            mov     r0,b
06EA F9        1486            mov     r1,a
06EB E581      1487            mov     a,sp
06ED 24FC      1488            add     a,#0xfc
06EF F581      1489            mov     sp,a
06F1 D005      1490            pop     ar5
06F3 D004      1491            pop     ar4
06F5 D003      1492            pop     ar3
06F7 D002      1493            pop     ar2
06F9 C006      1494            push    ar6
06FB C007      1495            push    ar7
06FD C000      1496            push    ar0
06FF C001      1497            push    ar1
0701 8A82      1498            mov     dpl,r2
0703 8B83      1499            mov     dph,r3
0705 8CF0      1500            mov     b,r4
0707 ED        1501            mov     a,r5
0708 120100    1502            lcall   ___fsdiv
070B AA82      1503            mov     r2,dpl
070D AB83      1504            mov     r3,dph
070F ACF0      1505            mov     r4,b
0711 FD        1506            mov     r5,a
0712 E581      1507            mov     a,sp
0714 24FC      1508            add     a,#0xfc
0716 F581      1509            mov     sp,a
0718 8A82      1510            mov     dpl,r2
071A 8B83      1511            mov     dph,r3
071C 8CF0      1512            mov     b,r4
071E ED        1513            mov     a,r5
071F 120100    1514            lcall   ___fs2schar
0722 858298    1515            mov     _pwm_Left0,dpl
0725           1516   ;        robot.c:260: pwm_Right0 = -1;
0725 7518FF    1517            mov     _pwm_Right0,#0xFF
0728           1518   ;        robot.c:261: pwm_Right1 = vleft*vleft*75/(vright*vright+vleft*vleft);
0728 C0C8      1519            push    _linetrack_vleft_1_82
072A C0C9      1520            push    (_linetrack_vleft_1_82 + 1)
072C C0CA      1521            push    (_linetrack_vleft_1_82 + 2)
072E C0CB      1522            push    (_linetrack_vleft_1_82 + 3)
0730 85C882    1523            mov     dpl,_linetrack_vleft_1_82
0733 85C983    1524            mov     dph,(_linetrack_vleft_1_82 + 1)
0736 85CAF0    1525            mov     b,(_linetrack_vleft_1_82 + 2)
0739 E5CB      1526            mov     a,(_linetrack_vleft_1_82 + 3)
073B 120100    1527            lcall   ___fsmul
073E AA82      1528            mov     r2,dpl
0740 AB83      1529            mov     r3,dph
0742 ACF0      1530            mov     r4,b
0744 FD        1531            mov     r5,a
0745 E581      1532            mov     a,sp
0747 24FC      1533            add     a,#0xfc
0749 F581      1534            mov     sp,a
074B C002      1535            push    ar2
074D C003      1536            push    ar3
074F C004      1537            push    ar4
0751 C005      1538            push    ar5
0753 900000    1539            mov     dptr,#0x0000
0756 75F096    1540            mov     b,#0x96
0759 7442      1541            mov     a,#0x42
075B 120100    1542            lcall   ___fsmul
075E AA82      1543            mov     r2,dpl
0760 AB83      1544            mov     r3,dph
0762 ACF0      1545            mov     r4,b
0764 FD        1546            mov     r5,a
0765 E581      1547            mov     a,sp
0767 24FC      1548            add     a,#0xfc
0769 F581      1549            mov     sp,a
076B C002      1550            push    ar2
076D C003      1551            push    ar3
076F C004      1552            push    ar4
0771 C005      1553            push    ar5
0773 C018      1554            push    _linetrack_vright_1_82
0775 C019      1555            push    (_linetrack_vright_1_82 + 1)
0777 C01A      1556            push    (_linetrack_vright_1_82 + 2)
0779 C01B      1557            push    (_linetrack_vright_1_82 + 3)
077B 851882    1558            mov     dpl,_linetrack_vright_1_82
077E 851983    1559            mov     dph,(_linetrack_vright_1_82 + 1)
0781 851AF0    1560            mov     b,(_linetrack_vright_1_82 + 2)
0784 E51B      1561            mov     a,(_linetrack_vright_1_82 + 3)
0786 120100    1562            lcall   ___fsmul
0789 858268    1563            mov     _linetrack_sloc0_1_0,dpl
078C 858369    1564            mov     (_linetrack_sloc0_1_0 + 1),dph
078F 85F06A    1565            mov     (_linetrack_sloc0_1_0 + 2),b
0792 F56B      1566            mov     (_linetrack_sloc0_1_0 + 3),a
0794 E581      1567            mov     a,sp
0796 24FC      1568            add     a,#0xfc
0798 F581      1569            mov     sp,a
079A C0C8      1570            push    _linetrack_vleft_1_82
079C C0C9      1571            push    (_linetrack_vleft_1_82 + 1)
079E C0CA      1572            push    (_linetrack_vleft_1_82 + 2)
07A0 C0CB      1573            push    (_linetrack_vleft_1_82 + 3)
07A2 85C882    1574            mov     dpl,_linetrack_vleft_1_82
07A5 85C983    1575            mov     dph,(_linetrack_vleft_1_82 + 1)
07A8 85CAF0    1576            mov     b,(_linetrack_vleft_1_82 + 2)
07AB E5CB      1577            mov     a,(_linetrack_vleft_1_82 + 3)
07AD 120100    1578            lcall   ___fsmul
07B0 AE82      1579            mov     r6,dpl
07B2 AF83      1580            mov     r7,dph
07B4 A8F0      1581            mov     r0,b
07B6 F9        1582            mov     r1,a
07B7 E581      1583            mov     a,sp
07B9 24FC      1584            add     a,#0xfc
07BB F581      1585            mov     sp,a
07BD C006      1586            push    ar6
07BF C007      1587            push    ar7
07C1 C000      1588            push    ar0
07C3 C001      1589            push    ar1
07C5 856882    1590            mov     dpl,_linetrack_sloc0_1_0
07C8 856983    1591            mov     dph,(_linetrack_sloc0_1_0 + 1)
07CB 856AF0    1592            mov     b,(_linetrack_sloc0_1_0 + 2)
07CE E56B      1593            mov     a,(_linetrack_sloc0_1_0 + 3)
07D0 120100    1594            lcall   ___fsadd
07D3 AE82      1595            mov     r6,dpl
07D5 AF83      1596            mov     r7,dph
07D7 A8F0      1597            mov     r0,b
07D9 F9        1598            mov     r1,a
07DA E581      1599            mov     a,sp
07DC 24FC      1600            add     a,#0xfc
07DE F581      1601            mov     sp,a
07E0 D005      1602            pop     ar5
07E2 D004      1603            pop     ar4
07E4 D003      1604            pop     ar3
07E6 D002      1605            pop     ar2
07E8 C006      1606            push    ar6
07EA C007      1607            push    ar7
07EC C000      1608            push    ar0
07EE C001      1609            push    ar1
07F0 8A82      1610            mov     dpl,r2
07F2 8B83      1611            mov     dph,r3
07F4 8CF0      1612            mov     b,r4
07F6 ED        1613            mov     a,r5
07F7 120100    1614            lcall   ___fsdiv
07FA AA82      1615            mov     r2,dpl
07FC AB83      1616            mov     r3,dph
07FE ACF0      1617            mov     r4,b
0800 FD        1618            mov     r5,a
0801 E581      1619            mov     a,sp
0803 24FC      1620            add     a,#0xfc
0805 F581      1621            mov     sp,a
0807 8A82      1622            mov     dpl,r2
0809 8B83      1623            mov     dph,r3
080B 8CF0      1624            mov     b,r4
080D ED        1625            mov     a,r5
080E 120100    1626            lcall   ___fs2schar
0811 8582D8    1627            mov     _pwm_Right1,dpl
0814           1628   L006002?:
0814           1629   ;        robot.c:265: printf("2.3= %f, 2.4= %f, LeftF= %4d, RightF= %4d, LeftB= %4d, RightB= %4d, command:%1d, state:%1d\r", vleft, vright, pwm_Left1, pwm_Right0, pwm_Left0, pwm_Right1, currentcmd, currentstate);
0814 AA18      1630            mov     r2,_currentstate
0816 E518      1631            mov     a,_currentstate
0818 33        1632            rlc     a
0819 95E0      1633            subb    a,acc
081B FB        1634            mov     r3,a
081C AC58      1635            mov     r4,_currentcmd
081E E558      1636            mov     a,_currentcmd
0820 33        1637            rlc     a
0821 95E0      1638            subb    a,acc
0823 FD        1639            mov     r5,a
0824 AED8      1640            mov     r6,_pwm_Right1
0826 E5D8      1641            mov     a,_pwm_Right1
0828 33        1642            rlc     a
0829 95E0      1643            subb    a,acc
082B FF        1644            mov     r7,a
082C 859868    1645            mov     _linetrack_sloc0_1_0,_pwm_Left0
082F E598      1646            mov     a,_pwm_Left0
0831 33        1647            rlc     a
0832 95E0      1648            subb    a,acc
0834 F569      1649            mov     (_linetrack_sloc0_1_0 + 1),a
0836 8518B8    1650            mov     _linetrack_sloc1_1_0,_pwm_Right0
0839 E518      1651            mov     a,_pwm_Right0
083B 33        1652            rlc     a
083C 95E0      1653            subb    a,acc
083E F5B9      1654            mov     (_linetrack_sloc1_1_0 + 1),a
0840 A858      1655            mov     r0,_pwm_Left1
0842 E558      1656            mov     a,_pwm_Left1
0844 33        1657            rlc     a
0845 95E0      1658            subb    a,acc
0847 F9        1659            mov     r1,a
0848 C002      1660            push    ar2
084A C003      1661            push    ar3
084C C004      1662            push    ar4
084E C005      1663            push    ar5
0850 C006      1664            push    ar6
0852 C007      1665            push    ar7
0854 C068      1666            push    _linetrack_sloc0_1_0
0856 C069      1667            push    (_linetrack_sloc0_1_0 + 1)
0858 C0B8      1668            push    _linetrack_sloc1_1_0
085A C0B9      1669            push    (_linetrack_sloc1_1_0 + 1)
085C C000      1670            push    ar0
085E C001      1671            push    ar1
0860 C018      1672            push    _linetrack_vright_1_82
0862 C019      1673            push    (_linetrack_vright_1_82 + 1)
0864 C01A      1674            push    (_linetrack_vright_1_82 + 2)
0866 C01B      1675            push    (_linetrack_vright_1_82 + 3)
0868 C0C8      1676            push    _linetrack_vleft_1_82
086A C0C9      1677            push    (_linetrack_vleft_1_82 + 1)
086C C0CA      1678            push    (_linetrack_vleft_1_82 + 2)
086E C0CB      1679            push    (_linetrack_vleft_1_82 + 3)
0870 74E8      1680            mov     a,#__str_3
0872 C0E0      1681            push    acc
0874 74A8      1682            mov     a,#(__str_3 >> 8)
0876 C0E0      1683            push    acc
0878 7480      1684            mov     a,#0x80
087A C0E0      1685            push    acc
087C 120100    1686            lcall   _printf
087F E581      1687            mov     a,sp
0881 24E9      1688            add     a,#0xe9
0883 F581      1689            mov     sp,a
0885 22        1690            ret
0886           1691   ;------------------------------------------------------------
0886           1692   ;Allocation info for local variables in function 'stopcar'
0886           1693   ;------------------------------------------------------------
0886           1694   ;------------------------------------------------------------
0886           1695   ;        robot.c:273: void stopcar(void) {
0886           1696   ;        -----------------------------------------
0886           1697   ;         function stopcar
0886           1698   ;        -----------------------------------------
0886           1699   _stopcar:
0886           1700   ;        robot.c:275: pwm_Left1 = -1;
0886 7558FF    1701            mov     _pwm_Left1,#0xFF
0889           1702   ;        robot.c:276: pwm_Right1 = -1;
0889 75D8FF    1703            mov     _pwm_Right1,#0xFF
088C           1704   ;        robot.c:277: pwm_Left0 = -1;
088C 7598FF    1705            mov     _pwm_Left0,#0xFF
088F           1706   ;        robot.c:278: pwm_Right0 = -1;
088F 7518FF    1707            mov     _pwm_Right0,#0xFF
0892 22        1708            ret
0893           1709   ;------------------------------------------------------------
0893           1710   ;Allocation info for local variables in function 'turncar'
0893           1711   ;------------------------------------------------------------
0893           1712   ;leftright                 Allocated to registers r2 r3 
0893           1713   ;vleft                     Allocated with name '_turncar_vleft_1_87'
0893           1714   ;vright                    Allocated with name '_turncar_vright_1_87'
0893           1715   ;direction                 Allocated with name '_turncar_direction_1_87'
0893           1716   ;------------------------------------------------------------
0893           1717   ;        robot.c:284: void turncar (int leftright) {
0893           1718   ;        -----------------------------------------
0893           1719   ;         function turncar
0893           1720   ;        -----------------------------------------
0893           1721   _turncar:
0893 AA82      1722            mov     r2,dpl
0895 AB83      1723            mov     r3,dph
0897           1724   ;        robot.c:291: pwm_Left0 = -1;
0897 7598FF    1725            mov     _pwm_Left0,#0xFF
089A           1726   ;        robot.c:292: pwm_Left1 = -1;
089A 7558FF    1727            mov     _pwm_Left1,#0xFF
089D           1728   ;        robot.c:293: pwm_Right0 = -1;
089D 7518FF    1729            mov     _pwm_Right0,#0xFF
08A0           1730   ;        robot.c:294: pwm_Right1 = -1;
08A0 75D8FF    1731            mov     _pwm_Right1,#0xFF
08A3           1732   ;        robot.c:296: direction = currentstate - 1;
08A3 E518      1733            mov     a,_currentstate
08A5 14        1734            dec     a
08A6 F5A8      1735            mov     _turncar_direction_1_87,a
08A8           1736   ;        robot.c:299: if (leftright == 0) {
08A8 EA        1737            mov     a,r2
08A9 4B        1738            orl     a,r3
08AA 6001      1739            jz      L008046?
08AC 020100    1740            ljmp    L008012?
08AF           1741   L008046?:
08AF           1742   ;        robot.c:301: pwm_Right0 = 100;
08AF 751864    1743            mov     _pwm_Right0,#0x64
08B2           1744   ;        robot.c:302: pwm_Left0 = 100;
08B2 759864    1745            mov     _pwm_Left0,#0x64
08B5           1746   ;        robot.c:305: waitms(1200);
08B5 9004B0    1747            mov     dptr,#0x04B0
08B8 120100    1748            lcall   _waitms
08BB           1749   ;        robot.c:308: vleft= direction ? Volts_at_Pin(LQFP32_MUX_P2_5) : Volts_at_Pin(LQFP32_MUX_P2_3);
08BB E5A8      1750            mov     a,_turncar_direction_1_87
08BD 6001      1751            jz      L008016?
08BF 75820D    1752            mov     dpl,#0x0D
08C2 120100    1753            lcall   _Volts_at_Pin
08C5 AC82      1754            mov     r4,dpl
08C7 AD83      1755            mov     r5,dph
08C9 AEF0      1756            mov     r6,b
08CB FF        1757            mov     r7,a
08CC 8001      1758            sjmp    L008017?
08CE           1759   L008016?:
08CE 75820B    1760            mov     dpl,#0x0B
08D1 120100    1761            lcall   _Volts_at_Pin
08D4 AC82      1762            mov     r4,dpl
08D6 AD83      1763            mov     r5,dph
08D8 AEF0      1764            mov     r6,b
08DA FF        1765            mov     r7,a
08DB           1766   L008017?:
08DB 8C08      1767            mov     _turncar_vleft_1_87,r4
08DD 8D09      1768            mov     (_turncar_vleft_1_87 + 1),r5
08DF 8E0A      1769            mov     (_turncar_vleft_1_87 + 2),r6
08E1 8F0B      1770            mov     (_turncar_vleft_1_87 + 3),r7
08E3           1771   ;        robot.c:309: vright=direction ? Volts_at_Pin(LQFP32_MUX_P2_6) : Volts_at_Pin(LQFP32_MUX_P2_4);
08E3 E5A8      1772            mov     a,_turncar_direction_1_87
08E5 6001      1773            jz      L008018?
08E7 75820E    1774            mov     dpl,#0x0E
08EA 120100    1775            lcall   _Volts_at_Pin
08ED AC82      1776            mov     r4,dpl
08EF AD83      1777            mov     r5,dph
08F1 AEF0      1778            mov     r6,b
08F3 FF        1779            mov     r7,a
08F4 8001      1780            sjmp    L008019?
08F6           1781   L008018?:
08F6 75820C    1782            mov     dpl,#0x0C
08F9 120100    1783            lcall   _Volts_at_Pin
08FC AC82      1784            mov     r4,dpl
08FE AD83      1785            mov     r5,dph
0900 AEF0      1786            mov     r6,b
0902 FF        1787            mov     r7,a
0903           1788   L008019?:
0903 8C58      1789            mov     _turncar_vright_1_87,r4
0905 8D59      1790            mov     (_turncar_vright_1_87 + 1),r5
0907 8E5A      1791            mov     (_turncar_vright_1_87 + 2),r6
0909 8F5B      1792            mov     (_turncar_vright_1_87 + 3),r7
090B           1793   ;        robot.c:311: while (((vleft - vright) > 0.2) || ((vleft - vright) < (-0.2))) {
090B           1794   L008002?:
090B C058      1795            push    _turncar_vright_1_87
090D C059      1796            push    (_turncar_vright_1_87 + 1)
090F C05A      1797            push    (_turncar_vright_1_87 + 2)
0911 C05B      1798            push    (_turncar_vright_1_87 + 3)
0913 850882    1799            mov     dpl,_turncar_vleft_1_87
0916 850983    1800            mov     dph,(_turncar_vleft_1_87 + 1)
0919 850AF0    1801            mov     b,(_turncar_vleft_1_87 + 2)
091C E50B      1802            mov     a,(_turncar_vleft_1_87 + 3)
091E 120100    1803            lcall   ___fssub
0921 AC82      1804            mov     r4,dpl
0923 AD83      1805            mov     r5,dph
0925 AEF0      1806            mov     r6,b
0927 FF        1807            mov     r7,a
0928 E581      1808            mov     a,sp
092A 24FC      1809            add     a,#0xfc
092C F581      1810            mov     sp,a
092E 74CD      1811            mov     a,#0xCD
0930 C0E0      1812            push    acc
0932 74CC      1813            mov     a,#0xCC
0934 C0E0      1814            push    acc
0936 744C      1815            mov     a,#0x4C
0938 C0E0      1816            push    acc
093A 743E      1817            mov     a,#0x3E
093C C0E0      1818            push    acc
093E 8C82      1819            mov     dpl,r4
0940 8D83      1820            mov     dph,r5
0942 8EF0      1821            mov     b,r6
0944 EF        1822            mov     a,r7
0945 120100    1823            lcall   ___fsgt
0948 AC82      1824            mov     r4,dpl
094A E581      1825            mov     a,sp
094C 24FC      1826            add     a,#0xfc
094E F581      1827            mov     sp,a
0950 EC        1828            mov     a,r4
0951 7001      1829            jnz     L008003?
0953 C058      1830            push    _turncar_vright_1_87
0955 C059      1831            push    (_turncar_vright_1_87 + 1)
0957 C05A      1832            push    (_turncar_vright_1_87 + 2)
0959 C05B      1833            push    (_turncar_vright_1_87 + 3)
095B 850882    1834            mov     dpl,_turncar_vleft_1_87
095E 850983    1835            mov     dph,(_turncar_vleft_1_87 + 1)
0961 850AF0    1836            mov     b,(_turncar_vleft_1_87 + 2)
0964 E50B      1837            mov     a,(_turncar_vleft_1_87 + 3)
0966 120100    1838            lcall   ___fssub
0969 AC82      1839            mov     r4,dpl
096B AD83      1840            mov     r5,dph
096D AEF0      1841            mov     r6,b
096F FF        1842            mov     r7,a
0970 E581      1843            mov     a,sp
0972 24FC      1844            add     a,#0xfc
0974 F581      1845            mov     sp,a
0976 74CD      1846            mov     a,#0xCD
0978 C0E0      1847            push    acc
097A 74CC      1848            mov     a,#0xCC
097C C0E0      1849            push    acc
097E 744C      1850            mov     a,#0x4C
0980 C0E0      1851            push    acc
0982 74BE      1852            mov     a,#0xBE
0984 C0E0      1853            push    acc
0986 8C82      1854            mov     dpl,r4
0988 8D83      1855            mov     dph,r5
098A 8EF0      1856            mov     b,r6
098C EF        1857            mov     a,r7
098D 120100    1858            lcall   ___fslt
0990 AC82      1859            mov     r4,dpl
0992 E581      1860            mov     a,sp
0994 24FC      1861            add     a,#0xfc
0996 F581      1862            mov     sp,a
0998 EC        1863            mov     a,r4
0999 6001      1864            jz      L008004?
099B           1865   L008003?:
099B           1866   ;        robot.c:313: vleft= direction ? Volts_at_Pin(LQFP32_MUX_P2_5) : Volts_at_Pin(LQFP32_MUX_P2_3);
099B E5A8      1867            mov     a,_turncar_direction_1_87
099D 6001      1868            jz      L008020?
099F 75820D    1869            mov     dpl,#0x0D
09A2 120100    1870            lcall   _Volts_at_Pin
09A5 AC82      1871            mov     r4,dpl
09A7 AD83      1872            mov     r5,dph
09A9 AEF0      1873            mov     r6,b
09AB FF        1874            mov     r7,a
09AC 8001      1875            sjmp    L008021?
09AE           1876   L008020?:
09AE 75820B    1877            mov     dpl,#0x0B
09B1 120100    1878            lcall   _Volts_at_Pin
09B4 AC82      1879            mov     r4,dpl
09B6 AD83      1880            mov     r5,dph
09B8 AEF0      1881            mov     r6,b
09BA FF        1882            mov     r7,a
09BB           1883   L008021?:
09BB 8C08      1884            mov     _turncar_vleft_1_87,r4
09BD 8D09      1885            mov     (_turncar_vleft_1_87 + 1),r5
09BF 8E0A      1886            mov     (_turncar_vleft_1_87 + 2),r6
09C1 8F0B      1887            mov     (_turncar_vleft_1_87 + 3),r7
09C3           1888   ;        robot.c:314: vright=direction ? Volts_at_Pin(LQFP32_MUX_P2_6) : Volts_at_Pin(LQFP32_MUX_P2_4);
09C3 E5A8      1889            mov     a,_turncar_direction_1_87
09C5 6001      1890            jz      L008022?
09C7 75820E    1891            mov     dpl,#0x0E
09CA 120100    1892            lcall   _Volts_at_Pin
09CD AC82      1893            mov     r4,dpl
09CF AD83      1894            mov     r5,dph
09D1 AEF0      1895            mov     r6,b
09D3 FF        1896            mov     r7,a
09D4 8001      1897            sjmp    L008023?
09D6           1898   L008022?:
09D6 75820C    1899            mov     dpl,#0x0C
09D9 120100    1900            lcall   _Volts_at_Pin
09DC AC82      1901            mov     r4,dpl
09DE AD83      1902            mov     r5,dph
09E0 AEF0      1903            mov     r6,b
09E2 FF        1904            mov     r7,a
09E3           1905   L008023?:
09E3 8C58      1906            mov     _turncar_vright_1_87,r4
09E5 8D59      1907            mov     (_turncar_vright_1_87 + 1),r5
09E7 8E5A      1908            mov     (_turncar_vright_1_87 + 2),r6
09E9 8F5B      1909            mov     (_turncar_vright_1_87 + 3),r7
09EB 020100    1910            ljmp    L008002?
09EE           1911   L008004?:
09EE           1912   ;        robot.c:319: pwm_Right0 = -1; 
09EE 7518FF    1913            mov     _pwm_Right0,#0xFF
09F1           1914   ;        robot.c:320: pwm_Left0 = -1;            
09F1 7598FF    1915            mov     _pwm_Left0,#0xFF
09F4 22        1916            ret
09F5           1917   L008012?:
09F5           1918   ;        robot.c:324: else if (leftright == 1) {
09F5 BA01E8    1919            cjne    r2,#0x01,L008053?
09F8 BB00E8    1920            cjne    r3,#0x00,L008053?
09FB 8001      1921            sjmp    L008054?
09FD           1922   L008053?:
09FD 22        1923            ret
09FE           1924   L008054?:
09FE           1925   ;        robot.c:326: pwm_Left1 = 100;
09FE 755864    1926            mov     _pwm_Left1,#0x64
0A01           1927   ;        robot.c:327: pwm_Right1 = 100;
0A01 75D864    1928            mov     _pwm_Right1,#0x64
0A04           1929   ;        robot.c:330: waitms(1200);
0A04 9004B0    1930            mov     dptr,#0x04B0
0A07 120100    1931            lcall   _waitms
0A0A           1932   ;        robot.c:333: vleft= direction ? Volts_at_Pin(LQFP32_MUX_P2_5) : Volts_at_Pin(LQFP32_MUX_P2_3);
0A0A E5A8      1933            mov     a,_turncar_direction_1_87
0A0C 6001      1934            jz      L008024?
0A0E 75820D    1935            mov     dpl,#0x0D
0A11 120100    1936            lcall   _Volts_at_Pin
0A14 AA82      1937            mov     r2,dpl
0A16 AB83      1938            mov     r3,dph
0A18 ACF0      1939            mov     r4,b
0A1A FD        1940            mov     r5,a
0A1B 8001      1941            sjmp    L008025?
0A1D           1942   L008024?:
0A1D 75820B    1943            mov     dpl,#0x0B
0A20 120100    1944            lcall   _Volts_at_Pin
0A23 AA82      1945            mov     r2,dpl
0A25 AB83      1946            mov     r3,dph
0A27 ACF0      1947            mov     r4,b
0A29 FD        1948            mov     r5,a
0A2A           1949   L008025?:
0A2A 8A08      1950            mov     _turncar_vleft_1_87,r2
0A2C 8B09      1951            mov     (_turncar_vleft_1_87 + 1),r3
0A2E 8C0A      1952            mov     (_turncar_vleft_1_87 + 2),r4
0A30 8D0B      1953            mov     (_turncar_vleft_1_87 + 3),r5
0A32           1954   ;        robot.c:334: vright=direction ? Volts_at_Pin(LQFP32_MUX_P2_6) : Volts_at_Pin(LQFP32_MUX_P2_4);
0A32 E5A8      1955            mov     a,_turncar_direction_1_87
0A34 6001      1956            jz      L008026?
0A36 75820E    1957            mov     dpl,#0x0E
0A39 120100    1958            lcall   _Volts_at_Pin
0A3C AA82      1959            mov     r2,dpl
0A3E AB83      1960            mov     r3,dph
0A40 ACF0      1961            mov     r4,b
0A42 FD        1962            mov     r5,a
0A43 8001      1963            sjmp    L008027?
0A45           1964   L008026?:
0A45 75820C    1965            mov     dpl,#0x0C
0A48 120100    1966            lcall   _Volts_at_Pin
0A4B AA82      1967            mov     r2,dpl
0A4D AB83      1968            mov     r3,dph
0A4F ACF0      1969            mov     r4,b
0A51 FD        1970            mov     r5,a
0A52           1971   L008027?:
0A52 8A58      1972            mov     _turncar_vright_1_87,r2
0A54 8B59      1973            mov     (_turncar_vright_1_87 + 1),r3
0A56 8C5A      1974            mov     (_turncar_vright_1_87 + 2),r4
0A58 8D5B      1975            mov     (_turncar_vright_1_87 + 3),r5
0A5A           1976   ;        robot.c:336: while (((vleft - vright) > 0.2) || ((vleft - vright) < (-0.2))) {
0A5A           1977   L008006?:
0A5A C058      1978            push    _turncar_vright_1_87
0A5C C059      1979            push    (_turncar_vright_1_87 + 1)
0A5E C05A      1980            push    (_turncar_vright_1_87 + 2)
0A60 C05B      1981            push    (_turncar_vright_1_87 + 3)
0A62 850882    1982            mov     dpl,_turncar_vleft_1_87
0A65 850983    1983            mov     dph,(_turncar_vleft_1_87 + 1)
0A68 850AF0    1984            mov     b,(_turncar_vleft_1_87 + 2)
0A6B E50B      1985            mov     a,(_turncar_vleft_1_87 + 3)
0A6D 120100    1986            lcall   ___fssub
0A70 AA82      1987            mov     r2,dpl
0A72 AB83      1988            mov     r3,dph
0A74 ACF0      1989            mov     r4,b
0A76 FD        1990            mov     r5,a
0A77 E581      1991            mov     a,sp
0A79 24FC      1992            add     a,#0xfc
0A7B F581      1993            mov     sp,a
0A7D 74CD      1994            mov     a,#0xCD
0A7F C0E0      1995            push    acc
0A81 74CC      1996            mov     a,#0xCC
0A83 C0E0      1997            push    acc
0A85 744C      1998            mov     a,#0x4C
0A87 C0E0      1999            push    acc
0A89 743E      2000            mov     a,#0x3E
0A8B C0E0      2001            push    acc
0A8D 8A82      2002            mov     dpl,r2
0A8F 8B83      2003            mov     dph,r3
0A91 8CF0      2004            mov     b,r4
0A93 ED        2005            mov     a,r5
0A94 120100    2006            lcall   ___fsgt
0A97 AA82      2007            mov     r2,dpl
0A99 E581      2008            mov     a,sp
0A9B 24FC      2009            add     a,#0xfc
0A9D F581      2010            mov     sp,a
0A9F EA        2011            mov     a,r2
0AA0 7001      2012            jnz     L008007?
0AA2 C058      2013            push    _turncar_vright_1_87
0AA4 C059      2014            push    (_turncar_vright_1_87 + 1)
0AA6 C05A      2015            push    (_turncar_vright_1_87 + 2)
0AA8 C05B      2016            push    (_turncar_vright_1_87 + 3)
0AAA 850882    2017            mov     dpl,_turncar_vleft_1_87
0AAD 850983    2018            mov     dph,(_turncar_vleft_1_87 + 1)
0AB0 850AF0    2019            mov     b,(_turncar_vleft_1_87 + 2)
0AB3 E50B      2020            mov     a,(_turncar_vleft_1_87 + 3)
0AB5 120100    2021            lcall   ___fssub
0AB8 AA82      2022            mov     r2,dpl
0ABA AB83      2023            mov     r3,dph
0ABC ACF0      2024            mov     r4,b
0ABE FD        2025            mov     r5,a
0ABF E581      2026            mov     a,sp
0AC1 24FC      2027            add     a,#0xfc
0AC3 F581      2028            mov     sp,a
0AC5 74CD      2029            mov     a,#0xCD
0AC7 C0E0      2030            push    acc
0AC9 74CC      2031            mov     a,#0xCC
0ACB C0E0      2032            push    acc
0ACD 744C      2033            mov     a,#0x4C
0ACF C0E0      2034            push    acc
0AD1 74BE      2035            mov     a,#0xBE
0AD3 C0E0      2036            push    acc
0AD5 8A82      2037            mov     dpl,r2
0AD7 8B83      2038            mov     dph,r3
0AD9 8CF0      2039            mov     b,r4
0ADB ED        2040            mov     a,r5
0ADC 120100    2041            lcall   ___fslt
0ADF AA82      2042            mov     r2,dpl
0AE1 E581      2043            mov     a,sp
0AE3 24FC      2044            add     a,#0xfc
0AE5 F581      2045            mov     sp,a
0AE7 EA        2046            mov     a,r2
0AE8 6001      2047            jz      L008008?
0AEA           2048   L008007?:
0AEA           2049   ;        robot.c:338: vleft= direction ? Volts_at_Pin(LQFP32_MUX_P2_5) : Volts_at_Pin(LQFP32_MUX_P2_3);
0AEA E5A8      2050            mov     a,_turncar_direction_1_87
0AEC 6001      2051            jz      L008028?
0AEE 75820D    2052            mov     dpl,#0x0D
0AF1 120100    2053            lcall   _Volts_at_Pin
0AF4 AA82      2054            mov     r2,dpl
0AF6 AB83      2055            mov     r3,dph
0AF8 ACF0      2056            mov     r4,b
0AFA FD        2057            mov     r5,a
0AFB 8001      2058            sjmp    L008029?
0AFD           2059   L008028?:
0AFD 75820B    2060            mov     dpl,#0x0B
0B00 120100    2061            lcall   _Volts_at_Pin
0B03 AA82      2062            mov     r2,dpl
0B05 AB83      2063            mov     r3,dph
0B07 ACF0      2064            mov     r4,b
0B09 FD        2065            mov     r5,a
0B0A           2066   L008029?:
0B0A 8A08      2067            mov     _turncar_vleft_1_87,r2
0B0C 8B09      2068            mov     (_turncar_vleft_1_87 + 1),r3
0B0E 8C0A      2069            mov     (_turncar_vleft_1_87 + 2),r4
0B10 8D0B      2070            mov     (_turncar_vleft_1_87 + 3),r5
0B12           2071   ;        robot.c:339: vright=direction ? Volts_at_Pin(LQFP32_MUX_P2_6) : Volts_at_Pin(LQFP32_MUX_P2_4);
0B12 E5A8      2072            mov     a,_turncar_direction_1_87
0B14 6001      2073            jz      L008030?
0B16 75820E    2074            mov     dpl,#0x0E
0B19 120100    2075            lcall   _Volts_at_Pin
0B1C AA82      2076            mov     r2,dpl
0B1E AB83      2077            mov     r3,dph
0B20 ACF0      2078            mov     r4,b
0B22 FD        2079            mov     r5,a
0B23 8001      2080            sjmp    L008031?
0B25           2081   L008030?:
0B25 75820C    2082            mov     dpl,#0x0C
0B28 120100    2083            lcall   _Volts_at_Pin
0B2B AA82      2084            mov     r2,dpl
0B2D AB83      2085            mov     r3,dph
0B2F ACF0      2086            mov     r4,b
0B31 FD        2087            mov     r5,a
0B32           2088   L008031?:
0B32 8A58      2089            mov     _turncar_vright_1_87,r2
0B34 8B59      2090            mov     (_turncar_vright_1_87 + 1),r3
0B36 8C5A      2091            mov     (_turncar_vright_1_87 + 2),r4
0B38 8D5B      2092            mov     (_turncar_vright_1_87 + 3),r5
0B3A 020100    2093            ljmp    L008006?
0B3D           2094   L008008?:
0B3D           2095   ;        robot.c:344: pwm_Left1 = -1; 
0B3D 7558FF    2096            mov     _pwm_Left1,#0xFF
0B40           2097   ;        robot.c:345: pwm_Right1 = -1; 
0B40 75D8FF    2098            mov     _pwm_Right1,#0xFF
0B43 22        2099            ret
0B44           2100   ;------------------------------------------------------------
0B44           2101   ;Allocation info for local variables in function 'uturn'
0B44           2102   ;------------------------------------------------------------
0B44           2103   ;vleft                     Allocated with name '_uturn_vleft_1_93'
0B44           2104   ;vright                    Allocated with name '_uturn_vright_1_93'
0B44           2105   ;------------------------------------------------------------
0B44           2106   ;        robot.c:353: void uturn(void) {
0B44           2107   ;        -----------------------------------------
0B44           2108   ;         function uturn
0B44           2109   ;        -----------------------------------------
0B44           2110   _uturn:
0B44           2111   ;        robot.c:357: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0B44 75820B    2112            mov     dpl,#0x0B
0B47 120100    2113            lcall   _Volts_at_Pin
0B4A 8582F8    2114            mov     _uturn_vleft_1_93,dpl
0B4D 8583F9    2115            mov     (_uturn_vleft_1_93 + 1),dph
0B50 85F0FA    2116            mov     (_uturn_vleft_1_93 + 2),b
0B53 F5FB      2117            mov     (_uturn_vleft_1_93 + 3),a
0B55           2118   ;        robot.c:358: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0B55 75820C    2119            mov     dpl,#0x0C
0B58 120100    2120            lcall   _Volts_at_Pin
0B5B 858248    2121            mov     _uturn_vright_1_93,dpl
0B5E 858349    2122            mov     (_uturn_vright_1_93 + 1),dph
0B61 85F04A    2123            mov     (_uturn_vright_1_93 + 2),b
0B64 F54B      2124            mov     (_uturn_vright_1_93 + 3),a
0B66           2125   ;        robot.c:361: pwm_Left0 = -1;
0B66 7598FF    2126            mov     _pwm_Left0,#0xFF
0B69           2127   ;        robot.c:362: pwm_Left1 = 50;
0B69 755832    2128            mov     _pwm_Left1,#0x32
0B6C           2129   ;        robot.c:363: pwm_Right0 = -1;
0B6C 7518FF    2130            mov     _pwm_Right0,#0xFF
0B6F           2131   ;        robot.c:364: pwm_Right1 = 50;
0B6F 75D832    2132            mov     _pwm_Right1,#0x32
0B72           2133   ;        robot.c:367: waitms(4000);
0B72 900FA0    2134            mov     dptr,#0x0FA0
0B75 120100    2135            lcall   _waitms
0B78           2136   ;        robot.c:370: while (((vleft - vright) > 0.2) || ((vleft - vright) < (-0.2))) {
0B78           2137   L009002?:
0B78 C048      2138            push    _uturn_vright_1_93
0B7A C049      2139            push    (_uturn_vright_1_93 + 1)
0B7C C04A      2140            push    (_uturn_vright_1_93 + 2)
0B7E C04B      2141            push    (_uturn_vright_1_93 + 3)
0B80 85F882    2142            mov     dpl,_uturn_vleft_1_93
0B83 85F983    2143            mov     dph,(_uturn_vleft_1_93 + 1)
0B86 85FAF0    2144            mov     b,(_uturn_vleft_1_93 + 2)
0B89 E5FB      2145            mov     a,(_uturn_vleft_1_93 + 3)
0B8B 120100    2146            lcall   ___fssub
0B8E AA82      2147            mov     r2,dpl
0B90 AB83      2148            mov     r3,dph
0B92 ACF0      2149            mov     r4,b
0B94 FD        2150            mov     r5,a
0B95 E581      2151            mov     a,sp
0B97 24FC      2152            add     a,#0xfc
0B99 F581      2153            mov     sp,a
0B9B 74CD      2154            mov     a,#0xCD
0B9D C0E0      2155            push    acc
0B9F 74CC      2156            mov     a,#0xCC
0BA1 C0E0      2157            push    acc
0BA3 744C      2158            mov     a,#0x4C
0BA5 C0E0      2159            push    acc
0BA7 743E      2160            mov     a,#0x3E
0BA9 C0E0      2161            push    acc
0BAB 8A82      2162            mov     dpl,r2
0BAD 8B83      2163            mov     dph,r3
0BAF 8CF0      2164            mov     b,r4
0BB1 ED        2165            mov     a,r5
0BB2 120100    2166            lcall   ___fsgt
0BB5 AA82      2167            mov     r2,dpl
0BB7 E581      2168            mov     a,sp
0BB9 24FC      2169            add     a,#0xfc
0BBB F581      2170            mov     sp,a
0BBD EA        2171            mov     a,r2
0BBE 7001      2172            jnz     L009003?
0BC0 C048      2173            push    _uturn_vright_1_93
0BC2 C049      2174            push    (_uturn_vright_1_93 + 1)
0BC4 C04A      2175            push    (_uturn_vright_1_93 + 2)
0BC6 C04B      2176            push    (_uturn_vright_1_93 + 3)
0BC8 85F882    2177            mov     dpl,_uturn_vleft_1_93
0BCB 85F983    2178            mov     dph,(_uturn_vleft_1_93 + 1)
0BCE 85FAF0    2179            mov     b,(_uturn_vleft_1_93 + 2)
0BD1 E5FB      2180            mov     a,(_uturn_vleft_1_93 + 3)
0BD3 120100    2181            lcall   ___fssub
0BD6 AA82      2182            mov     r2,dpl
0BD8 AB83      2183            mov     r3,dph
0BDA ACF0      2184            mov     r4,b
0BDC FD        2185            mov     r5,a
0BDD E581      2186            mov     a,sp
0BDF 24FC      2187            add     a,#0xfc
0BE1 F581      2188            mov     sp,a
0BE3 74CD      2189            mov     a,#0xCD
0BE5 C0E0      2190            push    acc
0BE7 74CC      2191            mov     a,#0xCC
0BE9 C0E0      2192            push    acc
0BEB 744C      2193            mov     a,#0x4C
0BED C0E0      2194            push    acc
0BEF 74BE      2195            mov     a,#0xBE
0BF1 C0E0      2196            push    acc
0BF3 8A82      2197            mov     dpl,r2
0BF5 8B83      2198            mov     dph,r3
0BF7 8CF0      2199            mov     b,r4
0BF9 ED        2200            mov     a,r5
0BFA 120100    2201            lcall   ___fslt
0BFD AA82      2202            mov     r2,dpl
0BFF E581      2203            mov     a,sp
0C01 24FC      2204            add     a,#0xfc
0C03 F581      2205            mov     sp,a
0C05 EA        2206            mov     a,r2
0C06 6001      2207            jz      L009005?
0C08           2208   L009003?:
0C08           2209   ;        robot.c:372: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0C08 75820B    2210            mov     dpl,#0x0B
0C0B 120100    2211            lcall   _Volts_at_Pin
0C0E 8582F8    2212            mov     _uturn_vleft_1_93,dpl
0C11 8583F9    2213            mov     (_uturn_vleft_1_93 + 1),dph
0C14 85F0FA    2214            mov     (_uturn_vleft_1_93 + 2),b
0C17 F5FB      2215            mov     (_uturn_vleft_1_93 + 3),a
0C19           2216   ;        robot.c:373: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0C19 75820C    2217            mov     dpl,#0x0C
0C1C 120100    2218            lcall   _Volts_at_Pin
0C1F 858248    2219            mov     _uturn_vright_1_93,dpl
0C22 858349    2220            mov     (_uturn_vright_1_93 + 1),dph
0C25 85F04A    2221            mov     (_uturn_vright_1_93 + 2),b
0C28 F54B      2222            mov     (_uturn_vright_1_93 + 3),a
0C2A 020100    2223            ljmp    L009002?
0C2D           2224   L009005?:
0C2D 22        2225            ret
0C2E           2226   ;------------------------------------------------------------
0C2E           2227   ;Allocation info for local variables in function 'movecar'
0C2E           2228   ;------------------------------------------------------------
0C2E           2229   ;power                     Allocated with name '_movecar_PARM_2'
0C2E           2230   ;forback                   Allocated to registers r2 r3 
0C2E           2231   ;------------------------------------------------------------
0C2E           2232   ;        robot.c:380: void movecar (int forback, int power) {
0C2E           2233   ;        -----------------------------------------
0C2E           2234   ;         function movecar
0C2E           2235   ;        -----------------------------------------
0C2E           2236   _movecar:
0C2E AA82      2237            mov     r2,dpl
0C30 AB83      2238            mov     r3,dph
0C32           2239   ;        robot.c:382: if (forback == 1) {
0C32 BA01E8    2240            cjne    r2,#0x01,L010004?
0C35 BB00E8    2241            cjne    r3,#0x00,L010004?
0C38           2242   ;        robot.c:383: pwm_Left1 = power;
0C38 AC58      2243            mov     r4,_movecar_PARM_2
0C3A 8C58      2244            mov     _pwm_Left1,r4
0C3C           2245   ;        robot.c:384: pwm_Left0 = -1;
0C3C 7598FF    2246            mov     _pwm_Left0,#0xFF
0C3F           2247   ;        robot.c:385: pwm_Right0 = power;
0C3F 8C18      2248            mov     _pwm_Right0,r4
0C41           2249   ;        robot.c:386: pwm_Right1 = -1;
0C41 75D8FF    2250            mov     _pwm_Right1,#0xFF
0C44 22        2251            ret
0C45           2252   L010004?:
0C45           2253   ;        robot.c:388: else if (forback == 2) {
0C45 BA0228    2254            cjne    r2,#0x02,L010006?
0C48 BB0028    2255            cjne    r3,#0x00,L010006?
0C4B           2256   ;        robot.c:389: pwm_Left0 = power;
0C4B AA58      2257            mov     r2,_movecar_PARM_2
0C4D 8A98      2258            mov     _pwm_Left0,r2
0C4F           2259   ;        robot.c:390: pwm_Left1 = -1;
0C4F 7558FF    2260            mov     _pwm_Left1,#0xFF
0C52           2261   ;        robot.c:391: pwm_Right1 = power;
0C52 8AD8      2262            mov     _pwm_Right1,r2
0C54           2263   ;        robot.c:392: pwm_Right0 = -1;
0C54 7518FF    2264            mov     _pwm_Right0,#0xFF
0C57           2265   L010006?:
0C57 22        2266            ret
0C58           2267            rseg R_CSEG
0C58           2268   
0000           2269            rseg R_XINIT
0000           2270   
0000           2271            rseg R_CONST
0000           2272   __str_0:
0000 1B        2273            db 0x1B
0001 5B324A    2274            db '[2J'
0004 00        2275            db 0x00
0005           2276   __str_1:
0005 0A        2277            db 0x0A
0006 494E5445  2278            db 'INTERSECTION'
     52534543
     54494F4E
0012 0A        2279            db 0x0A
0013 00        2280            db 0x00
0014           2281   __str_2:
0014 0A        2282            db 0x0A
0015 0D        2283            db 0x0D
0016 20494E54  2284            db ' INTERSECTION'
     45525345
     4354494F
     4E
0023 0A        2285            db 0x0A
0024 00        2286            db 0x00
0025           2287   __str_3:
0025 322E333D  2288            db '2.3= %f, 2.4= %f, LeftF= %4d, RightF= %4d, LeftB= %4d, Right'
     2025662C
     20322E34
     3D202566
     2C204C65
     6674463D
     20253464
     2C205269
     67687446
     3D202534
     642C204C
     65667442
     3D202534
     642C2052
     69676874
0061 423D2025  2289            db 'B= %4d, command:%1d, state:%1d'
     34642C20
     636F6D6D
     616E643A
     2531642C
     20737461
     74653A25
     3164
007F 0D        2290            db 0x0D
0080 00        2291            db 0x00
0081           2292   
002E           2293            CSEG
002E           2294   
002E           2295   end
