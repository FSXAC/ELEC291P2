0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Mon Apr 03 22:41:33 2017
0000              5   ;--------------------------------------------------------
                  5   $name robot
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _Timer2_ISR
0000             28            public _main
0000             29            public _currentstate
0000             30            public _currentcmd
0000             31            public _direction
0000             32            public _pwm_Right1
0000             33            public _pwm_Right0
0000             34            public _pwm_Left1
0000             35            public _pwm_Left0
0000             36            public _pwm_both
0000             37            public _mode
0000             38            public _pwm_count
0000             39            public _readData
0000             40            public _linetrack
0000             41            public _stopcar
0000             42            public _turncar
0000             43            public _uturn
0000             44   ;--------------------------------------------------------
0000             45   ; Special Function Registers
0000             46   ;--------------------------------------------------------
0000             47   _P0             DATA 0x80
0000             48   _SP             DATA 0x81
0000             49   _DPL            DATA 0x82
0000             50   _DPH            DATA 0x83
0000             51   _EMI0TC         DATA 0x84
0000             52   _EMI0CF         DATA 0x85
0000             53   _OSCLCN         DATA 0x86
0000             54   _PCON           DATA 0x87
0000             55   _TCON           DATA 0x88
0000             56   _TMOD           DATA 0x89
0000             57   _TL0            DATA 0x8a
0000             58   _TL1            DATA 0x8b
0000             59   _TH0            DATA 0x8c
0000             60   _TH1            DATA 0x8d
0000             61   _CKCON          DATA 0x8e
0000             62   _PSCTL          DATA 0x8f
0000             63   _P1             DATA 0x90
0000             64   _TMR3CN         DATA 0x91
0000             65   _TMR4CN         DATA 0x91
0000             66   _TMR3RLL        DATA 0x92
0000             67   _TMR4RLL        DATA 0x92
0000             68   _TMR3RLH        DATA 0x93
0000             69   _TMR4RLH        DATA 0x93
0000             70   _TMR3L          DATA 0x94
0000             71   _TMR4L          DATA 0x94
0000             72   _TMR3H          DATA 0x95
0000             73   _TMR4H          DATA 0x95
0000             74   _USB0ADR        DATA 0x96
0000             75   _USB0DAT        DATA 0x97
0000             76   _SCON           DATA 0x98
0000             77   _SCON0          DATA 0x98
0000             78   _SBUF           DATA 0x99
0000             79   _SBUF0          DATA 0x99
0000             80   _CPT1CN         DATA 0x9a
0000             81   _CPT0CN         DATA 0x9b
0000             82   _CPT1MD         DATA 0x9c
0000             83   _CPT0MD         DATA 0x9d
0000             84   _CPT1MX         DATA 0x9e
0000             85   _CPT0MX         DATA 0x9f
0000             86   _P2             DATA 0xa0
0000             87   _SPI0CFG        DATA 0xa1
0000             88   _SPI0CKR        DATA 0xa2
0000             89   _SPI0DAT        DATA 0xa3
0000             90   _P0MDOUT        DATA 0xa4
0000             91   _P1MDOUT        DATA 0xa5
0000             92   _P2MDOUT        DATA 0xa6
0000             93   _P3MDOUT        DATA 0xa7
0000             94   _IE             DATA 0xa8
0000             95   _CLKSEL         DATA 0xa9
0000             96   _EMI0CN         DATA 0xaa
0000             97   __XPAGE         DATA 0xaa
0000             98   _SBCON1         DATA 0xac
0000             99   _P4MDOUT        DATA 0xae
0000            100   _PFE0CN         DATA 0xaf
0000            101   _P3             DATA 0xb0
0000            102   _OSCXCN         DATA 0xb1
0000            103   _OSCICN         DATA 0xb2
0000            104   _OSCICL         DATA 0xb3
0000            105   _SBRLL1         DATA 0xb4
0000            106   _SBRLH1         DATA 0xb5
0000            107   _FLSCL          DATA 0xb6
0000            108   _FLKEY          DATA 0xb7
0000            109   _IP             DATA 0xb8
0000            110   _CLKMUL         DATA 0xb9
0000            111   _SMBTC          DATA 0xb9
0000            112   _AMX0N          DATA 0xba
0000            113   _AMX0P          DATA 0xbb
0000            114   _ADC0CF         DATA 0xbc
0000            115   _ADC0L          DATA 0xbd
0000            116   _ADC0H          DATA 0xbe
0000            117   _SFRPAGE        DATA 0xbf
0000            118   _SMB0CN         DATA 0xc0
0000            119   _SMB1CN         DATA 0xc0
0000            120   _SMB0CF         DATA 0xc1
0000            121   _SMB1CF         DATA 0xc1
0000            122   _SMB0DAT        DATA 0xc2
0000            123   _SMB1DAT        DATA 0xc2
0000            124   _ADC0GTL        DATA 0xc3
0000            125   _ADC0GTH        DATA 0xc4
0000            126   _ADC0LTL        DATA 0xc5
0000            127   _ADC0LTH        DATA 0xc6
0000            128   _P4             DATA 0xc7
0000            129   _TMR2CN         DATA 0xc8
0000            130   _TMR5CN         DATA 0xc8
0000            131   _REG01CN        DATA 0xc9
0000            132   _TMR2RLL        DATA 0xca
0000            133   _TMR5RLL        DATA 0xca
0000            134   _TMR2RLH        DATA 0xcb
0000            135   _TMR5RLH        DATA 0xcb
0000            136   _TMR2L          DATA 0xcc
0000            137   _TMR5L          DATA 0xcc
0000            138   _TMR2H          DATA 0xcd
0000            139   _TMR5H          DATA 0xcd
0000            140   _SMB0ADM        DATA 0xce
0000            141   _SMB1ADM        DATA 0xce
0000            142   _SMB0ADR        DATA 0xcf
0000            143   _SMB1ADR        DATA 0xcf
0000            144   _PSW            DATA 0xd0
0000            145   _REF0CN         DATA 0xd1
0000            146   _SCON1          DATA 0xd2
0000            147   _SBUF1          DATA 0xd3
0000            148   _P0SKIP         DATA 0xd4
0000            149   _P1SKIP         DATA 0xd5
0000            150   _P2SKIP         DATA 0xd6
0000            151   _USB0XCN        DATA 0xd7
0000            152   _PCA0CN         DATA 0xd8
0000            153   _PCA0MD         DATA 0xd9
0000            154   _PCA0CPM0       DATA 0xda
0000            155   _PCA0CPM1       DATA 0xdb
0000            156   _PCA0CPM2       DATA 0xdc
0000            157   _PCA0CPM3       DATA 0xdd
0000            158   _PCA0CPM4       DATA 0xde
0000            159   _P3SKIP         DATA 0xdf
0000            160   _ACC            DATA 0xe0
0000            161   _XBR0           DATA 0xe1
0000            162   _XBR1           DATA 0xe2
0000            163   _XBR2           DATA 0xe3
0000            164   _IT01CF         DATA 0xe4
0000            165   _CKCON1         DATA 0xe4
0000            166   _SMOD1          DATA 0xe5
0000            167   _EIE1           DATA 0xe6
0000            168   _EIE2           DATA 0xe7
0000            169   _ADC0CN         DATA 0xe8
0000            170   _PCA0CPL1       DATA 0xe9
0000            171   _PCA0CPH1       DATA 0xea
0000            172   _PCA0CPL2       DATA 0xeb
0000            173   _PCA0CPH2       DATA 0xec
0000            174   _PCA0CPL3       DATA 0xed
0000            175   _PCA0CPH3       DATA 0xee
0000            176   _RSTSRC         DATA 0xef
0000            177   _B              DATA 0xf0
0000            178   _P0MDIN         DATA 0xf1
0000            179   _P1MDIN         DATA 0xf2
0000            180   _P2MDIN         DATA 0xf3
0000            181   _P3MDIN         DATA 0xf4
0000            182   _P4MDIN         DATA 0xf5
0000            183   _EIP1           DATA 0xf6
0000            184   _EIP2           DATA 0xf7
0000            185   _SPI0CN         DATA 0xf8
0000            186   _PCA0L          DATA 0xf9
0000            187   _PCA0H          DATA 0xfa
0000            188   _PCA0CPL0       DATA 0xfb
0000            189   _PCA0CPH0       DATA 0xfc
0000            190   _PCA0CPL4       DATA 0xfd
0000            191   _PCA0CPH4       DATA 0xfe
0000            192   _VDM0CN         DATA 0xff
0000            193   _DPTR           DATA 0x8382
0000            194   _TMR2RL         DATA 0xcbca
0000            195   _TMR3RL         DATA 0x9392
0000            196   _TMR4RL         DATA 0x9392
0000            197   _TMR5RL         DATA 0xcbca
0000            198   _TMR2           DATA 0xcdcc
0000            199   _TMR3           DATA 0x9594
0000            200   _TMR4           DATA 0x9594
0000            201   _TMR5           DATA 0xcdcc
0000            202   _SBRL1          DATA 0xb5b4
0000            203   _ADC0           DATA 0xbebd
0000            204   _ADC0GT         DATA 0xc4c3
0000            205   _ADC0LT         DATA 0xc6c5
0000            206   _PCA0           DATA 0xfaf9
0000            207   _PCA0CP1        DATA 0xeae9
0000            208   _PCA0CP2        DATA 0xeceb
0000            209   _PCA0CP3        DATA 0xeeed
0000            210   _PCA0CP0        DATA 0xfcfb
0000            211   _PCA0CP4        DATA 0xfefd
0000            212   ;--------------------------------------------------------
0000            213   ; special function bits
0000            214   ;--------------------------------------------------------
0000            215   _P0_0           BIT 0x80
0000            216   _P0_1           BIT 0x81
0000            217   _P0_2           BIT 0x82
0000            218   _P0_3           BIT 0x83
0000            219   _P0_4           BIT 0x84
0000            220   _P0_5           BIT 0x85
0000            221   _P0_6           BIT 0x86
0000            222   _P0_7           BIT 0x87
0000            223   _TF1            BIT 0x8f
0000            224   _TR1            BIT 0x8e
0000            225   _TF0            BIT 0x8d
0000            226   _TR0            BIT 0x8c
0000            227   _IE1            BIT 0x8b
0000            228   _IT1            BIT 0x8a
0000            229   _IE0            BIT 0x89
0000            230   _IT0            BIT 0x88
0000            231   _P1_0           BIT 0x90
0000            232   _P1_1           BIT 0x91
0000            233   _P1_2           BIT 0x92
0000            234   _P1_3           BIT 0x93
0000            235   _P1_4           BIT 0x94
0000            236   _P1_5           BIT 0x95
0000            237   _P1_6           BIT 0x96
0000            238   _P1_7           BIT 0x97
0000            239   _S0MODE         BIT 0x9f
0000            240   _SCON0_6        BIT 0x9e
0000            241   _MCE0           BIT 0x9d
0000            242   _REN0           BIT 0x9c
0000            243   _TB80           BIT 0x9b
0000            244   _RB80           BIT 0x9a
0000            245   _TI0            BIT 0x99
0000            246   _RI0            BIT 0x98
0000            247   _SCON_6         BIT 0x9e
0000            248   _MCE            BIT 0x9d
0000            249   _REN            BIT 0x9c
0000            250   _TB8            BIT 0x9b
0000            251   _RB8            BIT 0x9a
0000            252   _TI             BIT 0x99
0000            253   _RI             BIT 0x98
0000            254   _P2_0           BIT 0xa0
0000            255   _P2_1           BIT 0xa1
0000            256   _P2_2           BIT 0xa2
0000            257   _P2_3           BIT 0xa3
0000            258   _P2_4           BIT 0xa4
0000            259   _P2_5           BIT 0xa5
0000            260   _P2_6           BIT 0xa6
0000            261   _P2_7           BIT 0xa7
0000            262   _EA             BIT 0xaf
0000            263   _ESPI0          BIT 0xae
0000            264   _ET2            BIT 0xad
0000            265   _ES0            BIT 0xac
0000            266   _ET1            BIT 0xab
0000            267   _EX1            BIT 0xaa
0000            268   _ET0            BIT 0xa9
0000            269   _EX0            BIT 0xa8
0000            270   _P3_0           BIT 0xb0
0000            271   _P3_1           BIT 0xb1
0000            272   _P3_2           BIT 0xb2
0000            273   _P3_3           BIT 0xb3
0000            274   _P3_4           BIT 0xb4
0000            275   _P3_5           BIT 0xb5
0000            276   _P3_6           BIT 0xb6
0000            277   _P3_7           BIT 0xb7
0000            278   _IP_7           BIT 0xbf
0000            279   _PSPI0          BIT 0xbe
0000            280   _PT2            BIT 0xbd
0000            281   _PS0            BIT 0xbc
0000            282   _PT1            BIT 0xbb
0000            283   _PX1            BIT 0xba
0000            284   _PT0            BIT 0xb9
0000            285   _PX0            BIT 0xb8
0000            286   _MASTER0        BIT 0xc7
0000            287   _TXMODE0        BIT 0xc6
0000            288   _STA0           BIT 0xc5
0000            289   _STO0           BIT 0xc4
0000            290   _ACKRQ0         BIT 0xc3
0000            291   _ARBLOST0       BIT 0xc2
0000            292   _ACK0           BIT 0xc1
0000            293   _SI0            BIT 0xc0
0000            294   _MASTER1        BIT 0xc7
0000            295   _TXMODE1        BIT 0xc6
0000            296   _STA1           BIT 0xc5
0000            297   _STO1           BIT 0xc4
0000            298   _ACKRQ1         BIT 0xc3
0000            299   _ARBLOST1       BIT 0xc2
0000            300   _ACK1           BIT 0xc1
0000            301   _SI1            BIT 0xc0
0000            302   _TF2            BIT 0xcf
0000            303   _TF2H           BIT 0xcf
0000            304   _TF2L           BIT 0xce
0000            305   _TF2LEN         BIT 0xcd
0000            306   _TF2CEN         BIT 0xcc
0000            307   _T2SPLIT        BIT 0xcb
0000            308   _TR2            BIT 0xca
0000            309   _T2CSS          BIT 0xc9
0000            310   _T2XCLK         BIT 0xc8
0000            311   _TF5H           BIT 0xcf
0000            312   _TF5L           BIT 0xce
0000            313   _TF5LEN         BIT 0xcd
0000            314   _TMR5CN_4       BIT 0xcc
0000            315   _T5SPLIT        BIT 0xcb
0000            316   _TR5            BIT 0xca
0000            317   _TMR5CN_1       BIT 0xc9
0000            318   _T5XCLK         BIT 0xc8
0000            319   _CY             BIT 0xd7
0000            320   _AC             BIT 0xd6
0000            321   _F0             BIT 0xd5
0000            322   _RS1            BIT 0xd4
0000            323   _RS0            BIT 0xd3
0000            324   _OV             BIT 0xd2
0000            325   _F1             BIT 0xd1
0000            326   _PARITY         BIT 0xd0
0000            327   _CF             BIT 0xdf
0000            328   _CR             BIT 0xde
0000            329   _PCA0CN_5       BIT 0xde
0000            330   _CCF4           BIT 0xdc
0000            331   _CCF3           BIT 0xdb
0000            332   _CCF2           BIT 0xda
0000            333   _CCF1           BIT 0xd9
0000            334   _CCF0           BIT 0xd8
0000            335   _ACC_7          BIT 0xe7
0000            336   _ACC_6          BIT 0xe6
0000            337   _ACC_5          BIT 0xe5
0000            338   _ACC_4          BIT 0xe4
0000            339   _ACC_3          BIT 0xe3
0000            340   _ACC_2          BIT 0xe2
0000            341   _ACC_1          BIT 0xe1
0000            342   _ACC_0          BIT 0xe0
0000            343   _AD0EN          BIT 0xef
0000            344   _AD0TM          BIT 0xee
0000            345   _AD0INT         BIT 0xed
0000            346   _AD0BUSY        BIT 0xec
0000            347   _AD0WINT        BIT 0xeb
0000            348   _AD0CM2         BIT 0xea
0000            349   _AD0CM1         BIT 0xe9
0000            350   _AD0CM0         BIT 0xe8
0000            351   _B_7            BIT 0xf7
0000            352   _B_6            BIT 0xf6
0000            353   _B_5            BIT 0xf5
0000            354   _B_4            BIT 0xf4
0000            355   _B_3            BIT 0xf3
0000            356   _B_2            BIT 0xf2
0000            357   _B_1            BIT 0xf1
0000            358   _B_0            BIT 0xf0
0000            359   _SPIF           BIT 0xff
0000            360   _WCOL           BIT 0xfe
0000            361   _MODF           BIT 0xfd
0000            362   _RXOVRN         BIT 0xfc
0000            363   _NSSMD1         BIT 0xfb
0000            364   _NSSMD0         BIT 0xfa
0000            365   _TXBMT          BIT 0xf9
0000            366   _SPIEN          BIT 0xf8
0000            367   ;--------------------------------------------------------
0000            368   ; overlayable register banks
0000            369   ;--------------------------------------------------------
0000            370            rbank0 segment data overlay
0000            371   ;--------------------------------------------------------
0000            372   ; internal ram data
0000            373   ;--------------------------------------------------------
0000            374            rseg R_DSEG
0000            375   _pwm_count:
0000            376            ds 1
0001            377   _mode:
0001            378            ds 1
0002            379   _pwm_both:
0002            380            ds 1
0003            381   _pwm_Left0:
0003            382            ds 1
0004            383   _pwm_Left1:
0004            384            ds 1
0005            385   _pwm_Right0:
0005            386            ds 1
0006            387   _pwm_Right1:
0006            388            ds 1
0007            389   _direction:
0007            390            ds 1
0008            391   _currentcmd:
0008            392            ds 1
0009            393   _currentstate:
0009            394            ds 1
000A            395   _main_v1_1_70:
000A            396            ds 4
000E            397   _main_v2_1_70:
000E            398            ds 4
0012            399   _main_sloc0_1_0:
0012            400            ds 2
0014            401   _main_sloc1_1_0:
0014            402            ds 2
0016            403   _main_sloc2_1_0:
0016            404            ds 2
0018            405   _main_sloc3_1_0:
0018            406            ds 2
001A            407   _main_sloc4_1_0:
001A            408            ds 2
001C            409   _main_sloc5_1_0:
001C            410            ds 2
001E            411   _main_sloc6_1_0:
001E            412            ds 4
0022            413   _main_sloc7_1_0:
0022            414            ds 4
0026            415   _linetrack_vleft_1_89:
0026            416            ds 4
002A            417   _linetrack_vright_1_89:
002A            418            ds 4
002E            419   _linetrack_sloc0_1_0:
002E            420            ds 4
0032            421   _linetrack_sloc1_1_0:
0032            422            ds 4
0036            423   _turncar_v_1_95:
0036            424            ds 4
003A            425   _turncar_direction_1_95:
003A            426            ds 1
003B            427   _uturn_vleft_1_105:
003B            428            ds 4
003F            429   _uturn_vright_1_105:
003F            430            ds 4
0043            431   ;--------------------------------------------------------
0043            432   ; overlayable items in internal ram 
0043            433   ;--------------------------------------------------------
0000            434            rseg R_OSEG
0000            435   ;--------------------------------------------------------
0000            436   ; indirectly addressable internal ram data
0000            437   ;--------------------------------------------------------
0000            438            rseg R_ISEG
0000            439   ;--------------------------------------------------------
0000            440   ; absolute internal ram data
0000            441   ;--------------------------------------------------------
0000            442            DSEG
0000            443   ;--------------------------------------------------------
0000            444   ; bit data
0000            445   ;--------------------------------------------------------
0000            446            rseg R_BSEG
0000            447   _main_sloc8_1_0:
0000            448            DBIT    1
0001            449   _Timer2_ISR_sloc0_1_0:
0001            450            DBIT    1
0002            451   ;--------------------------------------------------------
0002            452   ; paged external ram data
0002            453   ;--------------------------------------------------------
0000            454            rseg R_PSEG
0000            455   ;--------------------------------------------------------
0000            456   ; external ram data
0000            457   ;--------------------------------------------------------
0000            458            rseg R_XSEG
0000            459   ;--------------------------------------------------------
0000            460   ; absolute external ram data
0000            461   ;--------------------------------------------------------
0000            462            XSEG
0000            463   ;--------------------------------------------------------
0000            464   ; external initialized ram data
0000            465   ;--------------------------------------------------------
0000            466            rseg R_IXSEG
0000            467            rseg R_HOME
0000            468            rseg R_GSINIT
0000            469            rseg R_CSEG
0000            470   ;--------------------------------------------------------
0000            471   ; Reset entry point and interrupt vectors
0000            472   ;--------------------------------------------------------
0000            473            CSEG at 0x0000
0000 020100     474            ljmp    _crt0
002B            475            CSEG at 0x002b
002B 020100     476            ljmp    _Timer2_ISR
002E            477   ;--------------------------------------------------------
002E            478   ; global & static initialisations
002E            479   ;--------------------------------------------------------
0000            480            rseg R_HOME
0000            481            rseg R_GSINIT
0000            482            rseg R_GSINIT
0000            483   ;--------------------------------------------------------
0000            484   ; data variables initialization
0000            485   ;--------------------------------------------------------
0000            486            rseg R_DINIT
0000            487   ;        robot.c:8: volatile  char pwm_count=0;
0000 752000     488            mov     _pwm_count,#0x00
0003            489   ;        robot.c:9: volatile  char mode = 0;
0003 75F000     490            mov     _mode,#0x00
0006            491   ;        robot.c:10: volatile  char pwm_both =0;
0006 75B000     492            mov     _pwm_both,#0x00
0009            493   ;        robot.c:11: volatile  char pwm_Left0 = 0; //p1.5
0009 757000     494            mov     _pwm_Left0,#0x00
000C            495   ;        robot.c:12: volatile  char pwm_Left1 = 0; //p1.6
000C 753000     496            mov     _pwm_Left1,#0x00
000F            497   ;        robot.c:13: volatile  char pwm_Right0 = 0; //p2.0
000F 75F000     498            mov     _pwm_Right0,#0x00
0012            499   ;        robot.c:14: volatile  char pwm_Right1 = 0; //p2.1
0012 75B000     500            mov     _pwm_Right1,#0x00
0015            501   ;        robot.c:15: volatile  char direction = 0; // 1 for back 0 for forward
0015 757000     502            mov     _direction,#0x00
0018            503   ;        robot.c:17: volatile  char currentcmd = 0;
0018 753000     504            mov     _currentcmd,#0x00
001B            505   ;        robot.c:18: volatile  char currentstate = 1;
001B 75F001     506            mov     _currentstate,#0x01
001E            507            ; The linker places a 'ret' at the end of segment R_DINIT.
001E            508   ;--------------------------------------------------------
001E            509   ; code
001E            510   ;--------------------------------------------------------
0000            511            rseg R_CSEG
0000            512   ;------------------------------------------------------------
0000            513   ;Allocation info for local variables in function 'main'
0000            514   ;------------------------------------------------------------
0000            515   ;v1                        Allocated with name '_main_v1_1_70'
0000            516   ;v2                        Allocated with name '_main_v2_1_70'
0000            517   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0000            518   ;sloc1                     Allocated with name '_main_sloc1_1_0'
0000            519   ;sloc2                     Allocated with name '_main_sloc2_1_0'
0000            520   ;sloc3                     Allocated with name '_main_sloc3_1_0'
0000            521   ;sloc4                     Allocated with name '_main_sloc4_1_0'
0000            522   ;sloc5                     Allocated with name '_main_sloc5_1_0'
0000            523   ;sloc6                     Allocated with name '_main_sloc6_1_0'
0000            524   ;sloc7                     Allocated with name '_main_sloc7_1_0'
0000            525   ;------------------------------------------------------------
0000            526   ;        robot.c:20: void main(void) {
0000            527   ;        -----------------------------------------
0000            528   ;         function main
0000            529   ;        -----------------------------------------
0000            530   _main:
0000            531            using   0
0000            532   ;        robot.c:22: volatile float v1 = 0;
0000 752800     533            mov     _main_v1_1_70,#0x00
0003 752900     534            mov     (_main_v1_1_70 + 1),#0x00
0006 752A00     535            mov     (_main_v1_1_70 + 2),#0x00
0009 752B00     536            mov     (_main_v1_1_70 + 3),#0x00
000C            537   ;        robot.c:23: volatile float v2 = 0;
000C 756800     538            mov     _main_v2_1_70,#0x00
000F 756900     539            mov     (_main_v2_1_70 + 1),#0x00
0012 756A00     540            mov     (_main_v2_1_70 + 2),#0x00
0015 756B00     541            mov     (_main_v2_1_70 + 3),#0x00
0018            542   ;        robot.c:25: MOTOR_LEFT0 = 0;
0018 C295       543            clr     _P1_5
001A            544   ;        robot.c:26: MOTOR_LEFT1 = 0;
001A C296       545            clr     _P1_6
001C            546   ;        robot.c:27: MOTOR_RIGHT0 = 0;
001C C2A0       547            clr     _P2_0
001E            548   ;        robot.c:28: MOTOR_RIGHT1 = 0;
001E C2A1       549            clr     _P2_1
0020            550   ;        robot.c:31: currentstate = 1;           //1-FORWARD, 2-BACKWARDS, 3-STOPPED, 4-DEBUGGER
0020 75F001     551            mov     _currentstate,#0x01
0023            552   ;        robot.c:32: currentcmd = 0;             //0-NO COMMAND, 1-TURN LEFT, 2-TURN RIGHT, 3-FORWARDS, 4-BACKWARDS, 5-STOP, 6-UTURN
0023 753000     553            mov     _currentcmd,#0x00
0026            554   ;        robot.c:35: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0026 74E8       555            mov     a,#__str_0
0028 C0E0       556            push    acc
002A 7496       557            mov     a,#(__str_0 >> 8)
002C C0E0       558            push    acc
002E 7480       559            mov     a,#0x80
0030 C0E0       560            push    acc
0032 120100     561            lcall   _printf
0035 1581       562            dec     sp
0037 1581       563            dec     sp
0039 1581       564            dec     sp
003B            565   ;        robot.c:38: InitPinADC(2, 3); // Configure P2.3 as analog input (tank1)
003B 750003     566            mov     _InitPinADC_PARM_2,#0x03
003E 758202     567            mov     dpl,#0x02
0041 120100     568            lcall   _InitPinADC
0044            569   ;        robot.c:39: InitPinADC(2, 4); // Configure P2.4 as analog input         (tank1)
0044 750004     570            mov     _InitPinADC_PARM_2,#0x04
0047 758202     571            mov     dpl,#0x02
004A 120100     572            lcall   _InitPinADC
004D            573   ;        robot.c:40: InitPinADC(2, 5); // Configure P2.5 as analog input (tank2)
004D 750005     574            mov     _InitPinADC_PARM_2,#0x05
0050 758202     575            mov     dpl,#0x02
0053 120100     576            lcall   _InitPinADC
0056            577   ;        robot.c:41: InitPinADC(2, 6); // Configure P2.6 as analog input (tank2)
0056 750006     578            mov     _InitPinADC_PARM_2,#0x06
0059 758202     579            mov     dpl,#0x02
005C 120100     580            lcall   _InitPinADC
005F            581   ;        robot.c:44: InitADC();
005F 120100     582            lcall   _InitADC
0062            583   ;        robot.c:47: mxInit();
0062 120100     584            lcall   _mxInit
0065            585   ;        robot.c:50: while (1) {         
0065            586   L002045?:
0065            587   ;        robot.c:53: currentcmd = readData(); 
0065 120100     588            lcall   _readData
0068 858230     589            mov     _currentcmd,dpl
006B            590   ;        robot.c:56: printf("frontL %f frontR %f backL %f backR %f command %1d, state %1d left0 %3d left1 %3d right0 %3d right1 %3d\r", Volts_at_Pin(TANK_FL),Volts_at_Pin(TANK_FR),Volts_at_Pin(TANK_RL),Volts_at_Pin(TANK_RR), currentcmd, currentstate, pwm_Left0, pwm_Left1, pwm_Right0, pwm_Right1);
006B 85B0E8     591            mov     _main_sloc5_1_0,_pwm_Right1
006E E5B0       592            mov     a,_pwm_Right1
0070 33         593            rlc     a
0071 95E0       594            subb    a,acc
0073 F5E9       595            mov     (_main_sloc5_1_0 + 1),a
0075 85F0A8     596            mov     _main_sloc4_1_0,_pwm_Right0
0078 E5F0       597            mov     a,_pwm_Right0
007A 33         598            rlc     a
007B 95E0       599            subb    a,acc
007D F5A9       600            mov     (_main_sloc4_1_0 + 1),a
007F 853068     601            mov     _main_sloc3_1_0,_pwm_Left1
0082 E530       602            mov     a,_pwm_Left1
0084 33         603            rlc     a
0085 95E0       604            subb    a,acc
0087 F569       605            mov     (_main_sloc3_1_0 + 1),a
0089 8570A8     606            mov     _main_sloc0_1_0,_pwm_Left0
008C E570       607            mov     a,_pwm_Left0
008E 33         608            rlc     a
008F 95E0       609            subb    a,acc
0091 F5A9       610            mov     (_main_sloc0_1_0 + 1),a
0093 85F0E8     611            mov     _main_sloc1_1_0,_currentstate
0096 E5F0       612            mov     a,_currentstate
0098 33         613            rlc     a
0099 95E0       614            subb    a,acc
009B F5E9       615            mov     (_main_sloc1_1_0 + 1),a
009D 853028     616            mov     _main_sloc2_1_0,_currentcmd
00A0 E530       617            mov     a,_currentcmd
00A2 33         618            rlc     a
00A3 95E0       619            subb    a,acc
00A5 F529       620            mov     (_main_sloc2_1_0 + 1),a
00A7 75820E     621            mov     dpl,#0x0E
00AA 120100     622            lcall   _Volts_at_Pin
00AD A882       623            mov     r0,dpl
00AF A983       624            mov     r1,dph
00B1 AEF0       625            mov     r6,b
00B3 FF         626            mov     r7,a
00B4 75820D     627            mov     dpl,#0x0D
00B7 C006       628            push    ar6
00B9 C007       629            push    ar7
00BB C000       630            push    ar0
00BD C001       631            push    ar1
00BF 120100     632            lcall   _Volts_at_Pin
00C2 858228     633            mov     _main_sloc6_1_0,dpl
00C5 858329     634            mov     (_main_sloc6_1_0 + 1),dph
00C8 85F02A     635            mov     (_main_sloc6_1_0 + 2),b
00CB F52B       636            mov     (_main_sloc6_1_0 + 3),a
00CD 75820C     637            mov     dpl,#0x0C
00D0 120100     638            lcall   _Volts_at_Pin
00D3 858268     639            mov     _main_sloc7_1_0,dpl
00D6 858369     640            mov     (_main_sloc7_1_0 + 1),dph
00D9 85F06A     641            mov     (_main_sloc7_1_0 + 2),b
00DC F56B       642            mov     (_main_sloc7_1_0 + 3),a
00DE 75820B     643            mov     dpl,#0x0B
00E1 120100     644            lcall   _Volts_at_Pin
00E4 AA82       645            mov     r2,dpl
00E6 AB83       646            mov     r3,dph
00E8 ACF0       647            mov     r4,b
00EA FD         648            mov     r5,a
00EB D001       649            pop     ar1
00ED D000       650            pop     ar0
00EF D007       651            pop     ar7
00F1 D006       652            pop     ar6
00F3 C0E8       653            push    _main_sloc5_1_0
00F5 C0E9       654            push    (_main_sloc5_1_0 + 1)
00F7 C0A8       655            push    _main_sloc4_1_0
00F9 C0A9       656            push    (_main_sloc4_1_0 + 1)
00FB C068       657            push    _main_sloc3_1_0
00FD C069       658            push    (_main_sloc3_1_0 + 1)
00FF C0A8       659            push    _main_sloc0_1_0
0101 C0A9       660            push    (_main_sloc0_1_0 + 1)
0103 C0E8       661            push    _main_sloc1_1_0
0105 C0E9       662            push    (_main_sloc1_1_0 + 1)
0107 C028       663            push    _main_sloc2_1_0
0109 C029       664            push    (_main_sloc2_1_0 + 1)
010B C000       665            push    ar0
010D C001       666            push    ar1
010F C006       667            push    ar6
0111 C007       668            push    ar7
0113 C028       669            push    _main_sloc6_1_0
0115 C029       670            push    (_main_sloc6_1_0 + 1)
0117 C02A       671            push    (_main_sloc6_1_0 + 2)
0119 C02B       672            push    (_main_sloc6_1_0 + 3)
011B C068       673            push    _main_sloc7_1_0
011D C069       674            push    (_main_sloc7_1_0 + 1)
011F C06A       675            push    (_main_sloc7_1_0 + 2)
0121 C06B       676            push    (_main_sloc7_1_0 + 3)
0123 C002       677            push    ar2
0125 C003       678            push    ar3
0127 C004       679            push    ar4
0129 C005       680            push    ar5
012B 7438       681            mov     a,#__str_1
012D C0E0       682            push    acc
012F 749A       683            mov     a,#(__str_1 >> 8)
0131 C0E0       684            push    acc
0133 7480       685            mov     a,#0x80
0135 C0E0       686            push    acc
0137 120100     687            lcall   _printf
013A E581       688            mov     a,sp
013C 24E1       689            add     a,#0xe1
013E F581       690            mov     sp,a
0140            691   ;        robot.c:59: if (currentcmd == CMD_LEFT) mxDirection(0);
0140 7401       692            mov     a,#0x01
0142 B53078     693            cjne    a,_currentcmd,L002010?
0145 758200     694            mov     dpl,#0x00
0148 120100     695            lcall   _mxDirection
014B 8001       696            sjmp    L002011?
014D            697   L002010?:
014D            698   ;        robot.c:60: else if (currentcmd == CMD_RIGHT) mxDirection(1);
014D 7402       699            mov     a,#0x02
014F B53038     700            cjne    a,_currentcmd,L002007?
0152 758201     701            mov     dpl,#0x01
0155 120100     702            lcall   _mxDirection
0158 8001       703            sjmp    L002011?
015A            704   L002007?:
015A            705   ;        robot.c:61: else if (currentcmd == CMD_STOP) mxStop();
015A 7405       706            mov     a,#0x05
015C B53078     707            cjne    a,_currentcmd,L002004?
015F 120100     708            lcall   _mxStop
0162 8001       709            sjmp    L002011?
0164            710   L002004?:
0164            711   ;        robot.c:62: else if (currentcmd == CMD_UTURN) mxUTurn();
0164 7406       712            mov     a,#0x06
0166 B530F8     713            cjne    a,_currentcmd,L002011?
0169 120100     714            lcall   _mxUTurn
016C            715   L002011?:
016C            716   ;        robot.c:65: switch (currentstate) {
016C AAF0       717            mov     r2,_currentstate
016E BA0138     718            cjne    r2,#0x01,L002087?
0171 8001       719            sjmp    L002012?
0173            720   L002087?:
0173 BA02B8     721            cjne    r2,#0x02,L002088?
0176 8001       722            sjmp    L002013?
0178            723   L002088?:
0178            724   ;        robot.c:66: case FORWARD_STATE:
0178 BA0338     725            cjne    r2,#0x03,L002015?
017B 8001       726            sjmp    L002014?
017D            727   L002012?:
017D            728   ;        robot.c:67: linetrack(0);       // forwards
017D 900000     729            mov     dptr,#0x0000
0180 120100     730            lcall   _linetrack
0183            731   ;        robot.c:69: v1 = Volts_at_Pin(TANK_FL);
0183 75820B     732            mov     dpl,#0x0B
0186 120100     733            lcall   _Volts_at_Pin
0189 858228     734            mov     _main_v1_1_70,dpl
018C 858329     735            mov     (_main_v1_1_70 + 1),dph
018F 85F02A     736            mov     (_main_v1_1_70 + 2),b
0192 F52B       737            mov     (_main_v1_1_70 + 3),a
0194            738   ;        robot.c:70: v2 = Volts_at_Pin(TANK_FR);
0194 75820C     739            mov     dpl,#0x0C
0197 120100     740            lcall   _Volts_at_Pin
019A 858268     741            mov     _main_v2_1_70,dpl
019D 858369     742            mov     (_main_v2_1_70 + 1),dph
01A0 85F06A     743            mov     (_main_v2_1_70 + 2),b
01A3 F56B       744            mov     (_main_v2_1_70 + 3),a
01A5            745   ;        robot.c:71: break;
01A5            746   ;        robot.c:72: case REVERSE_STATE:
01A5 8001       747            sjmp    L002015?
01A7            748   L002013?:
01A7            749   ;        robot.c:73: linetrack(1);       // backwards
01A7 900001     750            mov     dptr,#0x0001
01AA 120100     751            lcall   _linetrack
01AD            752   ;        robot.c:75: v2 = Volts_at_Pin(TANK_RL);
01AD 75820D     753            mov     dpl,#0x0D
01B0 120100     754            lcall   _Volts_at_Pin
01B3 858268     755            mov     _main_v2_1_70,dpl
01B6 858369     756            mov     (_main_v2_1_70 + 1),dph
01B9 85F06A     757            mov     (_main_v2_1_70 + 2),b
01BC F56B       758            mov     (_main_v2_1_70 + 3),a
01BE            759   ;        robot.c:76: v1 = Volts_at_Pin(TANK_RR);
01BE 75820E     760            mov     dpl,#0x0E
01C1 120100     761            lcall   _Volts_at_Pin
01C4 858228     762            mov     _main_v1_1_70,dpl
01C7 858329     763            mov     (_main_v1_1_70 + 1),dph
01CA 85F02A     764            mov     (_main_v1_1_70 + 2),b
01CD F52B       765            mov     (_main_v1_1_70 + 3),a
01CF            766   ;        robot.c:77: break;
01CF            767   ;        robot.c:78: case STOP_STATE:
01CF 8001       768            sjmp    L002015?
01D1            769   L002014?:
01D1            770   ;        robot.c:79: stopcar();          // stop car
01D1 120100     771            lcall   _stopcar
01D4            772   ;        robot.c:81: }
01D4            773   L002015?:
01D4            774   ;        robot.c:84: switch (currentcmd) {
01D4 E530       775            mov     a,_currentcmd
01D6 FA         776            mov     r2,a
01D7 30E7B8     777            jnb     acc.7,L002090?
01DA 020100     778            ljmp    L002042?
01DD            779   L002090?:
01DD C3         780            clr     c
01DE 7486       781            mov     a,#(0x06 ^ 0x80)
01E0 8AF0       782            mov     b,r2
01E2 63F080     783            xrl     b,#0x80
01E5 95F0       784            subb    a,b
01E7 5001       785            jnc     L002091?
01E9 020100     786            ljmp    L002042?
01EC            787   L002091?:
01EC EA         788            mov     a,r2
01ED 2A         789            add     a,r2
01EE 2A         790            add     a,r2
01EF 909E78     791            mov     dptr,#L002092?
01F2 73         792            jmp     @a+dptr
01F3            793   L002092?:
01F3 020100     794            ljmp    L002016?
01F6 020100     795            ljmp    L002030?
01F9 020100     796            ljmp    L002034?
01FC 020100     797            ljmp    L002038?
01FF 020100     798            ljmp    L002039?
0202 020100     799            ljmp    L002040?
0205 020100     800            ljmp    L002041?
0208            801   ;        robot.c:86: case CMD_NONE:
0208            802   L002016?:
0208            803   ;        robot.c:88: if ((currentstate-1) ? 
0208 AAF0       804            mov     r2,_currentstate
020A E5F0       805            mov     a,_currentstate
020C 33         806            rlc     a
020D 95E0       807            subb    a,acc
020F FB         808            mov     r3,a
0210 1A         809            dec     r2
0211 BAFF80     810            cjne    r2,#0xff,L002093?
0214 1B         811            dec     r3
0215            812   L002093?:
0215 EA         813            mov     a,r2
0216 4B         814            orl     a,r3
0217 6001       815            jz      L002049?
0219            816   ;        robot.c:89: (v1 > 1.2 && v2 > 1.2) :
0219 749A       817            mov     a,#0x9A
021B C0E0       818            push    acc
021D 7499       819            mov     a,#0x99
021F C0E0       820            push    acc
0221 C0E0       821            push    acc
0223 743F       822            mov     a,#0x3F
0225 C0E0       823            push    acc
0227 852882     824            mov     dpl,_main_v1_1_70
022A 852983     825            mov     dph,(_main_v1_1_70 + 1)
022D 852AF0     826            mov     b,(_main_v1_1_70 + 2)
0230 E52B       827            mov     a,(_main_v1_1_70 + 3)
0232 120100     828            lcall   ___fsgt
0235 AA82       829            mov     r2,dpl
0237 E581       830            mov     a,sp
0239 24FC       831            add     a,#0xfc
023B F581       832            mov     sp,a
023D EA         833            mov     a,r2
023E 6001       834            jz      L002051?
0240 749A       835            mov     a,#0x9A
0242 C0E0       836            push    acc
0244 7499       837            mov     a,#0x99
0246 C0E0       838            push    acc
0248 C0E0       839            push    acc
024A 743F       840            mov     a,#0x3F
024C C0E0       841            push    acc
024E 856882     842            mov     dpl,_main_v2_1_70
0251 856983     843            mov     dph,(_main_v2_1_70 + 1)
0254 856AF0     844            mov     b,(_main_v2_1_70 + 2)
0257 E56B       845            mov     a,(_main_v2_1_70 + 3)
0259 120100     846            lcall   ___fsgt
025C AA82       847            mov     r2,dpl
025E E581       848            mov     a,sp
0260 24FC       849            add     a,#0xfc
0262 F581       850            mov     sp,a
0264 EA         851            mov     a,r2
0265 7001       852            jnz     L002052?
0267            853   L002051?:
0267 7A00       854            mov     r2,#0x00
0269 8001       855            sjmp    L002053?
026B            856   L002052?:
026B 7A01       857            mov     r2,#0x01
026D            858   L002053?:
026D EA         859            mov     a,r2
026E 24FF       860            add     a,#0xff
0270 9218       861            mov     _main_sloc8_1_0,c
0272 8001       862            sjmp    L002050?
0274            863   L002049?:
0274            864   ;        robot.c:90: (v1 > 0.7 && v2 > 1)) {
0274 7433       865            mov     a,#0x33
0276 C0E0       866            push    acc
0278 C0E0       867            push    acc
027A C0E0       868            push    acc
027C 743F       869            mov     a,#0x3F
027E C0E0       870            push    acc
0280 852882     871            mov     dpl,_main_v1_1_70
0283 852983     872            mov     dph,(_main_v1_1_70 + 1)
0286 852AF0     873            mov     b,(_main_v1_1_70 + 2)
0289 E52B       874            mov     a,(_main_v1_1_70 + 3)
028B 120100     875            lcall   ___fsgt
028E AA82       876            mov     r2,dpl
0290 E581       877            mov     a,sp
0292 24FC       878            add     a,#0xfc
0294 F581       879            mov     sp,a
0296 EA         880            mov     a,r2
0297 6001       881            jz      L002054?
0299 E4         882            clr     a
029A C0E0       883            push    acc
029C C0E0       884            push    acc
029E 7480       885            mov     a,#0x80
02A0 C0E0       886            push    acc
02A2 743F       887            mov     a,#0x3F
02A4 C0E0       888            push    acc
02A6 856882     889            mov     dpl,_main_v2_1_70
02A9 856983     890            mov     dph,(_main_v2_1_70 + 1)
02AC 856AF0     891            mov     b,(_main_v2_1_70 + 2)
02AF E56B       892            mov     a,(_main_v2_1_70 + 3)
02B1 120100     893            lcall   ___fsgt
02B4 AA82       894            mov     r2,dpl
02B6 E581       895            mov     a,sp
02B8 24FC       896            add     a,#0xfc
02BA F581       897            mov     sp,a
02BC EA         898            mov     a,r2
02BD 7001       899            jnz     L002055?
02BF            900   L002054?:
02BF 7A00       901            mov     r2,#0x00
02C1 8001       902            sjmp    L002056?
02C3            903   L002055?:
02C3 7A01       904            mov     r2,#0x01
02C5            905   L002056?:
02C5 EA         906            mov     a,r2
02C6 24FF       907            add     a,#0xff
02C8 9218       908            mov     _main_sloc8_1_0,c
02CA            909   L002050?:
02CA 201800     910            jb      _main_sloc8_1_0,L002099?
02CD 020100     911            ljmp    L002045?
02D0            912   L002099?:
02D0            913   ;        robot.c:91: printf("\nINTERSECTION\n");
02D0 7440       914            mov     a,#__str_2
02D2 C0E0       915            push    acc
02D4 74A3       916            mov     a,#(__str_2 >> 8)
02D6 C0E0       917            push    acc
02D8 7480       918            mov     a,#0x80
02DA C0E0       919            push    acc
02DC 120100     920            lcall   _printf
02DF 1581       921            dec     sp
02E1 1581       922            dec     sp
02E3 1581       923            dec     sp
02E5            924   ;        robot.c:93: if (currentstate == 1) {
02E5 7401       925            mov     a,#0x01
02E7 B5F080     926            cjne    a,_currentstate,L002026?
02EA            927   ;        robot.c:94: if (Volts_at_Pin(TANK_RL)>Volts_at_Pin(TANK_RR)) {
02EA 75820D     928            mov     dpl,#0x0D
02ED 120100     929            lcall   _Volts_at_Pin
02F0 AA82       930            mov     r2,dpl
02F2 AB83       931            mov     r3,dph
02F4 ACF0       932            mov     r4,b
02F6 FD         933            mov     r5,a
02F7 75820E     934            mov     dpl,#0x0E
02FA C002       935            push    ar2
02FC C003       936            push    ar3
02FE C004       937            push    ar4
0300 C005       938            push    ar5
0302 120100     939            lcall   _Volts_at_Pin
0305 AE82       940            mov     r6,dpl
0307 AF83       941            mov     r7,dph
0309 A8F0       942            mov     r0,b
030B F9         943            mov     r1,a
030C D005       944            pop     ar5
030E D004       945            pop     ar4
0310 D003       946            pop     ar3
0312 D002       947            pop     ar2
0314 C006       948            push    ar6
0316 C007       949            push    ar7
0318 C000       950            push    ar0
031A C001       951            push    ar1
031C 8A82       952            mov     dpl,r2
031E 8B83       953            mov     dph,r3
0320 8CF0       954            mov     b,r4
0322 ED         955            mov     a,r5
0323 120100     956            lcall   ___fsgt
0326 AA82       957            mov     r2,dpl
0328 E581       958            mov     a,sp
032A 24FC       959            add     a,#0xfc
032C F581       960            mov     sp,a
032E EA         961            mov     a,r2
032F 6001       962            jz      L002018?
0331            963   ;        robot.c:95: pwm_Left1 = 50;
0331 753032     964            mov     _pwm_Left1,#0x32
0334            965   ;        robot.c:96: pwm_Left0 = -1;
0334 7570FF     966            mov     _pwm_Left0,#0xFF
0337            967   ;        robot.c:97: pwm_Right0 = 30;
0337 75F01E     968            mov     _pwm_Right0,#0x1E
033A            969   ;        robot.c:98: pwm_Right1 = -1;
033A 75B0FF     970            mov     _pwm_Right1,#0xFF
033D 8001       971            sjmp    L002027?
033F            972   L002018?:
033F            973   ;        robot.c:101: pwm_Left1 = 30;
033F 75301E     974            mov     _pwm_Left1,#0x1E
0342            975   ;        robot.c:102: pwm_Left0 = -1;
0342 7570FF     976            mov     _pwm_Left0,#0xFF
0345            977   ;        robot.c:103: pwm_Right0 = 50;
0345 75F032     978            mov     _pwm_Right0,#0x32
0348            979   ;        robot.c:104: pwm_Right1 = -1;
0348 75B0FF     980            mov     _pwm_Right1,#0xFF
034B 8001       981            sjmp    L002027?
034D            982   L002026?:
034D            983   ;        robot.c:106: } else if (currentstate == 2) {
034D 7402       984            mov     a,#0x02
034F B5F000     985            cjne    a,_currentstate,L002027?
0352            986   ;        robot.c:107: if (Volts_at_Pin(TANK_FL)>Volts_at_Pin(TANK_FR)) {
0352 75820B     987            mov     dpl,#0x0B
0355 120100     988            lcall   _Volts_at_Pin
0358 AA82       989            mov     r2,dpl
035A AB83       990            mov     r3,dph
035C ACF0       991            mov     r4,b
035E FD         992            mov     r5,a
035F 75820C     993            mov     dpl,#0x0C
0362 C002       994            push    ar2
0364 C003       995            push    ar3
0366 C004       996            push    ar4
0368 C005       997            push    ar5
036A 120100     998            lcall   _Volts_at_Pin
036D AE82       999            mov     r6,dpl
036F AF83      1000            mov     r7,dph
0371 A8F0      1001            mov     r0,b
0373 F9        1002            mov     r1,a
0374 D005      1003            pop     ar5
0376 D004      1004            pop     ar4
0378 D003      1005            pop     ar3
037A D002      1006            pop     ar2
037C C006      1007            push    ar6
037E C007      1008            push    ar7
0380 C000      1009            push    ar0
0382 C001      1010            push    ar1
0384 8A82      1011            mov     dpl,r2
0386 8B83      1012            mov     dph,r3
0388 8CF0      1013            mov     b,r4
038A ED        1014            mov     a,r5
038B 120100    1015            lcall   ___fsgt
038E AA82      1016            mov     r2,dpl
0390 E581      1017            mov     a,sp
0392 24FC      1018            add     a,#0xfc
0394 F581      1019            mov     sp,a
0396 EA        1020            mov     a,r2
0397 6001      1021            jz      L002021?
0399           1022   ;        robot.c:108: pwm_Left0 = 50;
0399 757032    1023            mov     _pwm_Left0,#0x32
039C           1024   ;        robot.c:109: pwm_Left1 = -1;
039C 7530FF    1025            mov     _pwm_Left1,#0xFF
039F           1026   ;        robot.c:110: pwm_Right0 = -1;
039F 75F0FF    1027            mov     _pwm_Right0,#0xFF
03A2           1028   ;        robot.c:111: pwm_Right1 = 30;
03A2 75B01E    1029            mov     _pwm_Right1,#0x1E
03A5 8001      1030            sjmp    L002027?
03A7           1031   L002021?:
03A7           1032   ;        robot.c:114: pwm_Left0 = 30;
03A7 75701E    1033            mov     _pwm_Left0,#0x1E
03AA           1034   ;        robot.c:115: pwm_Left1 = -1;
03AA 7530FF    1035            mov     _pwm_Left1,#0xFF
03AD           1036   ;        robot.c:116: pwm_Right0 = -1;
03AD 75F0FF    1037            mov     _pwm_Right0,#0xFF
03B0           1038   ;        robot.c:117: pwm_Right1 = 50;
03B0 75B032    1039            mov     _pwm_Right1,#0x32
03B3           1040   L002027?:
03B3           1041   ;        robot.c:121: waitms(1500);
03B3 9005DC    1042            mov     dptr,#0x05DC
03B6 120100    1043            lcall   _waitms
03B9           1044   ;        robot.c:123: break;
03B9 020100    1045            ljmp    L002045?
03BC           1046   ;        robot.c:125: case CMD_LEFT:
03BC           1047   L002030?:
03BC           1048   ;        robot.c:127: printf("Turn left at the next intersection\n");
03BC 74C0      1049            mov     a,#__str_3
03BE C0E0      1050            push    acc
03C0 74A4      1051            mov     a,#(__str_3 >> 8)
03C2 C0E0      1052            push    acc
03C4 7480      1053            mov     a,#0x80
03C6 C0E0      1054            push    acc
03C8 120100    1055            lcall   _printf
03CB 1581      1056            dec     sp
03CD 1581      1057            dec     sp
03CF 1581      1058            dec     sp
03D1           1059   ;        robot.c:128: if (v1 > 0.7 && v2 >1)  {
03D1 7433      1060            mov     a,#0x33
03D3 C0E0      1061            push    acc
03D5 C0E0      1062            push    acc
03D7 C0E0      1063            push    acc
03D9 743F      1064            mov     a,#0x3F
03DB C0E0      1065            push    acc
03DD 852882    1066            mov     dpl,_main_v1_1_70
03E0 852983    1067            mov     dph,(_main_v1_1_70 + 1)
03E3 852AF0    1068            mov     b,(_main_v1_1_70 + 2)
03E6 E52B      1069            mov     a,(_main_v1_1_70 + 3)
03E8 120100    1070            lcall   ___fsgt
03EB AA82      1071            mov     r2,dpl
03ED E581      1072            mov     a,sp
03EF 24FC      1073            add     a,#0xfc
03F1 F581      1074            mov     sp,a
03F3 EA        1075            mov     a,r2
03F4 7001      1076            jnz     L002106?
03F6 020100    1077            ljmp    L002045?
03F9           1078   L002106?:
03F9 E4        1079            clr     a
03FA C0E0      1080            push    acc
03FC C0E0      1081            push    acc
03FE 7480      1082            mov     a,#0x80
0400 C0E0      1083            push    acc
0402 743F      1084            mov     a,#0x3F
0404 C0E0      1085            push    acc
0406 856882    1086            mov     dpl,_main_v2_1_70
0409 856983    1087            mov     dph,(_main_v2_1_70 + 1)
040C 856AF0    1088            mov     b,(_main_v2_1_70 + 2)
040F E56B      1089            mov     a,(_main_v2_1_70 + 3)
0411 120100    1090            lcall   ___fsgt
0414 AA82      1091            mov     r2,dpl
0416 E581      1092            mov     a,sp
0418 24FC      1093            add     a,#0xfc
041A F581      1094            mov     sp,a
041C EA        1095            mov     a,r2
041D 7001      1096            jnz     L002107?
041F 020100    1097            ljmp    L002045?
0422           1098   L002107?:
0422           1099   ;        robot.c:129: printf("\n\r INTERSECTION\n");
0422 7480      1100            mov     a,#__str_4
0424 C0E0      1101            push    acc
0426 74A5      1102            mov     a,#(__str_4 >> 8)
0428 C0E0      1103            push    acc
042A 7480      1104            mov     a,#0x80
042C C0E0      1105            push    acc
042E 120100    1106            lcall   _printf
0431 1581      1107            dec     sp
0433 1581      1108            dec     sp
0435 1581      1109            dec     sp
0437           1110   ;        robot.c:134: turncar(currentstate);
0437 AAF0      1111            mov     r2,_currentstate
0439 E5F0      1112            mov     a,_currentstate
043B 33        1113            rlc     a
043C 95E0      1114            subb    a,acc
043E FB        1115            mov     r3,a
043F 8A82      1116            mov     dpl,r2
0441 8B83      1117            mov     dph,r3
0443 120100    1118            lcall   _turncar
0446           1119   ;        robot.c:135: currentcmd = 0;
0446 753000    1120            mov     _currentcmd,#0x00
0449           1121   ;        robot.c:137: break;
0449 020100    1122            ljmp    L002045?
044C           1123   ;        robot.c:140: case CMD_RIGHT:
044C           1124   L002034?:
044C           1125   ;        robot.c:142: printf("Turn right at the next intersection\n");
044C 74C0      1126            mov     a,#__str_5
044E C0E0      1127            push    acc
0450 74A5      1128            mov     a,#(__str_5 >> 8)
0452 C0E0      1129            push    acc
0454 7480      1130            mov     a,#0x80
0456 C0E0      1131            push    acc
0458 120100    1132            lcall   _printf
045B 1581      1133            dec     sp
045D 1581      1134            dec     sp
045F 1581      1135            dec     sp
0461           1136   ;        robot.c:143: if (v1 > 0.7 && v2 >1) {
0461 7433      1137            mov     a,#0x33
0463 C0E0      1138            push    acc
0465 C0E0      1139            push    acc
0467 C0E0      1140            push    acc
0469 743F      1141            mov     a,#0x3F
046B C0E0      1142            push    acc
046D 852882    1143            mov     dpl,_main_v1_1_70
0470 852983    1144            mov     dph,(_main_v1_1_70 + 1)
0473 852AF0    1145            mov     b,(_main_v1_1_70 + 2)
0476 E52B      1146            mov     a,(_main_v1_1_70 + 3)
0478 120100    1147            lcall   ___fsgt
047B AA82      1148            mov     r2,dpl
047D E581      1149            mov     a,sp
047F 24FC      1150            add     a,#0xfc
0481 F581      1151            mov     sp,a
0483 EA        1152            mov     a,r2
0484 7001      1153            jnz     L002108?
0486 020100    1154            ljmp    L002045?
0489           1155   L002108?:
0489 E4        1156            clr     a
048A C0E0      1157            push    acc
048C C0E0      1158            push    acc
048E 7480      1159            mov     a,#0x80
0490 C0E0      1160            push    acc
0492 743F      1161            mov     a,#0x3F
0494 C0E0      1162            push    acc
0496 856882    1163            mov     dpl,_main_v2_1_70
0499 856983    1164            mov     dph,(_main_v2_1_70 + 1)
049C 856AF0    1165            mov     b,(_main_v2_1_70 + 2)
049F E56B      1166            mov     a,(_main_v2_1_70 + 3)
04A1 120100    1167            lcall   ___fsgt
04A4 AA82      1168            mov     r2,dpl
04A6 E581      1169            mov     a,sp
04A8 24FC      1170            add     a,#0xfc
04AA F581      1171            mov     sp,a
04AC EA        1172            mov     a,r2
04AD 7001      1173            jnz     L002109?
04AF 020100    1174            ljmp    L002045?
04B2           1175   L002109?:
04B2           1176   ;        robot.c:144: printf("\n\r INTERSECTION\n");
04B2 7480      1177            mov     a,#__str_4
04B4 C0E0      1178            push    acc
04B6 74A5      1179            mov     a,#(__str_4 >> 8)
04B8 C0E0      1180            push    acc
04BA 7480      1181            mov     a,#0x80
04BC C0E0      1182            push    acc
04BE 120100    1183            lcall   _printf
04C1 1581      1184            dec     sp
04C3 1581      1185            dec     sp
04C5 1581      1186            dec     sp
04C7           1187   ;        robot.c:146: turncar(currentstate + 2); //1 = right
04C7 AAF0      1188            mov     r2,_currentstate
04C9 E5F0      1189            mov     a,_currentstate
04CB 33        1190            rlc     a
04CC 95E0      1191            subb    a,acc
04CE FB        1192            mov     r3,a
04CF 8A82      1193            mov     dpl,r2
04D1 8B83      1194            mov     dph,r3
04D3 A3        1195            inc     dptr
04D4 A3        1196            inc     dptr
04D5 120100    1197            lcall   _turncar
04D8           1198   ;        robot.c:147: currentcmd = 0;
04D8 753000    1199            mov     _currentcmd,#0x00
04DB           1200   ;        robot.c:149: break;
04DB 020100    1201            ljmp    L002045?
04DE           1202   ;        robot.c:152: case CMD_FORWARD:
04DE           1203   L002038?:
04DE           1204   ;        robot.c:154: printf("GO!\n");
04DE 7480      1205            mov     a,#__str_6
04E0 C0E0      1206            push    acc
04E2 74A6      1207            mov     a,#(__str_6 >> 8)
04E4 C0E0      1208            push    acc
04E6 7480      1209            mov     a,#0x80
04E8 C0E0      1210            push    acc
04EA 120100    1211            lcall   _printf
04ED 1581      1212            dec     sp
04EF 1581      1213            dec     sp
04F1 1581      1214            dec     sp
04F3           1215   ;        robot.c:155: currentstate = 1;
04F3 75F001    1216            mov     _currentstate,#0x01
04F6           1217   ;        robot.c:156: currentcmd = 0;
04F6 753000    1218            mov     _currentcmd,#0x00
04F9           1219   ;        robot.c:157: break;
04F9 020100    1220            ljmp    L002045?
04FC           1221   ;        robot.c:160: case CMD_REVERSE:
04FC           1222   L002039?:
04FC           1223   ;        robot.c:162: printf("Reverse Reverse!\n");
04FC 74C0      1224            mov     a,#__str_7
04FE C0E0      1225            push    acc
0500 74A6      1226            mov     a,#(__str_7 >> 8)
0502 C0E0      1227            push    acc
0504 7480      1228            mov     a,#0x80
0506 C0E0      1229            push    acc
0508 120100    1230            lcall   _printf
050B 1581      1231            dec     sp
050D 1581      1232            dec     sp
050F 1581      1233            dec     sp
0511           1234   ;        robot.c:163: currentstate = 2;
0511 75F002    1235            mov     _currentstate,#0x02
0514           1236   ;        robot.c:164: currentcmd = 0;
0514 753000    1237            mov     _currentcmd,#0x00
0517           1238   ;        robot.c:165: break;
0517 020100    1239            ljmp    L002045?
051A           1240   ;        robot.c:168: case CMD_STOP:
051A           1241   L002040?:
051A           1242   ;        robot.c:170: printf("HALT peasants!\n");
051A 7400      1243            mov     a,#__str_8
051C C0E0      1244            push    acc
051E 74A7      1245            mov     a,#(__str_8 >> 8)
0520 C0E0      1246            push    acc
0522 7480      1247            mov     a,#0x80
0524 C0E0      1248            push    acc
0526 120100    1249            lcall   _printf
0529 1581      1250            dec     sp
052B 1581      1251            dec     sp
052D 1581      1252            dec     sp
052F           1253   ;        robot.c:171: currentstate = 3;
052F 75F003    1254            mov     _currentstate,#0x03
0532           1255   ;        robot.c:172: currentcmd = 0;
0532 753000    1256            mov     _currentcmd,#0x00
0535           1257   ;        robot.c:173: break;
0535 020100    1258            ljmp    L002045?
0538           1259   ;        robot.c:176: case CMD_UTURN:
0538           1260   L002041?:
0538           1261   ;        robot.c:177: uturn();
0538 120100    1262            lcall   _uturn
053B           1263   ;        robot.c:178: printf("UTURN\n");
053B 7440      1264            mov     a,#__str_9
053D C0E0      1265            push    acc
053F 74A7      1266            mov     a,#(__str_9 >> 8)
0541 C0E0      1267            push    acc
0543 7480      1268            mov     a,#0x80
0545 C0E0      1269            push    acc
0547 120100    1270            lcall   _printf
054A 1581      1271            dec     sp
054C 1581      1272            dec     sp
054E 1581      1273            dec     sp
0550           1274   ;        robot.c:179: currentcmd = 0;
0550 753000    1275            mov     _currentcmd,#0x00
0553           1276   ;        robot.c:180: break;
0553 020100    1277            ljmp    L002045?
0556           1278   ;        robot.c:183: default: 
0556           1279   L002042?:
0556           1280   ;        robot.c:184: currentstate = 1;
0556 75F001    1281            mov     _currentstate,#0x01
0559           1282   ;        robot.c:185: }
0559 020100    1283            ljmp    L002045?
055C           1284   ;------------------------------------------------------------
055C           1285   ;Allocation info for local variables in function 'Timer2_ISR'
055C           1286   ;------------------------------------------------------------
055C           1287   ;------------------------------------------------------------
055C           1288   ;        robot.c:189: void Timer2_ISR (void) interrupt 5 {
055C           1289   ;        -----------------------------------------
055C           1290   ;         function Timer2_ISR
055C           1291   ;        -----------------------------------------
055C           1292   _Timer2_ISR:
055C C0E0      1293            push    acc
055E C0F0      1294            push    b
0560 C0D0      1295            push    psw
0562 75D000    1296            mov     psw,#0x00
0565           1297   ;        robot.c:190: TF2H = 0; // Clear Timer2 interrupt flag
0565 C2CF      1298            clr     _TF2H
0567           1299   ;        robot.c:192: pwm_count++;
0567 0520      1300            inc     _pwm_count
0569           1301   ;        robot.c:193: if(pwm_count>100) pwm_count=0;
0569 C3        1302            clr     c
056A 74E4      1303            mov     a,#(0x64 ^ 0x80)
056C 8520F0    1304            mov     b,_pwm_count
056F 63F080    1305            xrl     b,#0x80
0572 95F0      1306            subb    a,b
0574 5001      1307            jnc     L003002?
0576 752000    1308            mov     _pwm_count,#0x00
0579           1309   L003002?:
0579           1310   ;        robot.c:196: MOTOR_LEFT0 = pwm_count > pwm_Left0 ? 0 : 1; //p1.5
0579 C3        1311            clr     c
057A E570      1312            mov     a,_pwm_Left0
057C 6480      1313            xrl     a,#0x80
057E 8520F0    1314            mov     b,_pwm_count
0581 63F080    1315            xrl     b,#0x80
0584 95F0      1316            subb    a,b
0586 9268      1317            mov  _Timer2_ISR_sloc0_1_0,c
0588 B3        1318            cpl     c
0589 9295      1319            mov     _P1_5,c
058B           1320   ;        robot.c:197: MOTOR_LEFT1 = pwm_count > pwm_Left1 ? 0 : 1; //p1.6
058B C3        1321            clr     c
058C E530      1322            mov     a,_pwm_Left1
058E 6480      1323            xrl     a,#0x80
0590 8520F0    1324            mov     b,_pwm_count
0593 63F080    1325            xrl     b,#0x80
0596 95F0      1326            subb    a,b
0598 9268      1327            mov  _Timer2_ISR_sloc0_1_0,c
059A B3        1328            cpl     c
059B 9296      1329            mov     _P1_6,c
059D           1330   ;        robot.c:198: MOTOR_RIGHT0 = pwm_count > pwm_Right0 ? 0 : 1; //p2.0
059D C3        1331            clr     c
059E E5F0      1332            mov     a,_pwm_Right0
05A0 6480      1333            xrl     a,#0x80
05A2 8520F0    1334            mov     b,_pwm_count
05A5 63F080    1335            xrl     b,#0x80
05A8 95F0      1336            subb    a,b
05AA 9268      1337            mov  _Timer2_ISR_sloc0_1_0,c
05AC B3        1338            cpl     c
05AD 92A0      1339            mov     _P2_0,c
05AF           1340   ;        robot.c:199: MOTOR_RIGHT1 = pwm_count > pwm_Right1 ? 0 : 1; //p2.1
05AF C3        1341            clr     c
05B0 E5B0      1342            mov     a,_pwm_Right1
05B2 6480      1343            xrl     a,#0x80
05B4 8520F0    1344            mov     b,_pwm_count
05B7 63F080    1345            xrl     b,#0x80
05BA 95F0      1346            subb    a,b
05BC 9268      1347            mov  _Timer2_ISR_sloc0_1_0,c
05BE B3        1348            cpl     c
05BF 92A1      1349            mov     _P2_1,c
05C1 D0D0      1350            pop     psw
05C3 D0F0      1351            pop     b
05C5 D0E0      1352            pop     acc
05C7 32        1353            reti
05C8           1354   ;        eliminated unneeded push/pop dpl
05C8           1355   ;        eliminated unneeded push/pop dph
05C8           1356   ;------------------------------------------------------------
05C8           1357   ;Allocation info for local variables in function 'readData'
05C8           1358   ;------------------------------------------------------------
05C8           1359   ;command                   Allocated to registers r2 
05C8           1360   ;------------------------------------------------------------
05C8           1361   ;        robot.c:292: unsigned char readData(void) {
05C8           1362   ;        -----------------------------------------
05C8           1363   ;         function readData
05C8           1364   ;        -----------------------------------------
05C8           1365   _readData:
05C8           1366   ;        robot.c:293: unsigned char command = 0;
05C8 7A00      1367            mov     r2,#0x00
05CA           1368   ;        robot.c:294: if (!COMMAND_PIN) {
05CA 309100    1369            jnb     _P1_1,L004024?
05CD 020100    1370            ljmp    L004008?
05D0           1371   L004024?:
05D0           1372   ;        robot.c:295: while (!COMMAND_PIN);
05D0           1373   L004001?:
05D0 309180    1374            jnb     _P1_1,L004001?
05D3           1375   ;        robot.c:296: P1_4 = 1;
05D3 D294      1376            setb    _P1_4
05D5           1377   ;        robot.c:297: waitms((int)(CMDFRQ + CMDFRQ/2));
05D5 900060    1378            mov     dptr,#0x0060
05D8 120100    1379            lcall   _waitms
05DB           1380   ;        robot.c:298: P1_4 = 0;
05DB C294      1381            clr     _P1_4
05DD           1382   ;        robot.c:299: command |= COMMAND_PIN<<2;
05DD A291      1383            mov     c,_P1_1
05DF E4        1384            clr     a
05E0 33        1385            rlc     a
05E1 25E0      1386            add     a,acc
05E3 25E0      1387            add     a,acc
05E5 FA        1388            mov     r2,a
05E6           1389   ;        robot.c:300: waitms(CMDFRQ);
05E6 900040    1390            mov     dptr,#0x0040
05E9 C002      1391            push    ar2
05EB 120100    1392            lcall   _waitms
05EE D002      1393            pop     ar2
05F0           1394   ;        robot.c:301: P1_4 = 1;
05F0 D294      1395            setb    _P1_4
05F2           1396   ;        robot.c:302: command |= COMMAND_PIN<<1;
05F2 A291      1397            mov     c,_P1_1
05F4 E4        1398            clr     a
05F5 33        1399            rlc     a
05F6 25E0      1400            add     a,acc
05F8 4202      1401            orl     ar2,a
05FA           1402   ;        robot.c:303: waitms(CMDFRQ);
05FA 900040    1403            mov     dptr,#0x0040
05FD C002      1404            push    ar2
05FF 120100    1405            lcall   _waitms
0602 D002      1406            pop     ar2
0604           1407   ;        robot.c:304: P1_4 = 0;
0604 C294      1408            clr     _P1_4
0606           1409   ;        robot.c:305: command |= COMMAND_PIN;
0606 A291      1410            mov     c,_P1_1
0608 E4        1411            clr     a
0609 33        1412            rlc     a
060A FB        1413            mov     r3,a
060B 4202      1414            orl     ar2,a
060D           1415   ;        robot.c:306: while (!COMMAND_PIN);
060D           1416   L004004?:
060D 3091C0    1417            jnb     _P1_1,L004004?
0610           1418   ;        robot.c:310: (command & 0x01) ? '1' : '0');
0610 EA        1419            mov     a,r2
0611 30E000    1420            jnb     acc.0,L004011?
0614 7B31      1421            mov     r3,#0x31
0616 8001      1422            sjmp    L004012?
0618           1423   L004011?:
0618 7B30      1424            mov     r3,#0x30
061A           1425   L004012?:
061A EB        1426            mov     a,r3
061B 33        1427            rlc     a
061C 95E0      1428            subb    a,acc
061E FC        1429            mov     r4,a
061F           1430   ;        robot.c:309: (command & 0x02) ? '1' : '0',
061F EA        1431            mov     a,r2
0620 30E180    1432            jnb     acc.1,L004013?
0623 7D31      1433            mov     r5,#0x31
0625 8001      1434            sjmp    L004014?
0627           1435   L004013?:
0627 7D30      1436            mov     r5,#0x30
0629           1437   L004014?:
0629 ED        1438            mov     a,r5
062A 33        1439            rlc     a
062B 95E0      1440            subb    a,acc
062D FE        1441            mov     r6,a
062E           1442   ;        robot.c:308: (command & 0x04) ? '1' : '0',
062E EA        1443            mov     a,r2
062F 30E200    1444            jnb     acc.2,L004015?
0632 7F31      1445            mov     r7,#0x31
0634 8001      1446            sjmp    L004016?
0636           1447   L004015?:
0636 7F30      1448            mov     r7,#0x30
0638           1449   L004016?:
0638 EF        1450            mov     a,r7
0639 33        1451            rlc     a
063A 95E0      1452            subb    a,acc
063C F8        1453            mov     r0,a
063D           1454   ;        robot.c:307: printf("\nCommand received: 0b_0%c%c%c\n", 
063D C002      1455            push    ar2
063F C003      1456            push    ar3
0641 C004      1457            push    ar4
0643 C005      1458            push    ar5
0645 C006      1459            push    ar6
0647 C007      1460            push    ar7
0649 C000      1461            push    ar0
064B 7480      1462            mov     a,#__str_10
064D C0E0      1463            push    acc
064F 74AA      1464            mov     a,#(__str_10 >> 8)
0651 C0E0      1465            push    acc
0653 7480      1466            mov     a,#0x80
0655 C0E0      1467            push    acc
0657 120100    1468            lcall   _printf
065A E581      1469            mov     a,sp
065C 24F7      1470            add     a,#0xf7
065E F581      1471            mov     sp,a
0660 D002      1472            pop     ar2
0662           1473   L004008?:
0662           1474   ;        robot.c:312: return command;
0662 8A82      1475            mov     dpl,r2
0664 22        1476            ret
0665           1477   ;------------------------------------------------------------
0665           1478   ;Allocation info for local variables in function 'linetrack'
0665           1479   ;------------------------------------------------------------
0665           1480   ;forwardbackward           Allocated to registers r2 r3 
0665           1481   ;vleft                     Allocated with name '_linetrack_vleft_1_89'
0665           1482   ;vright                    Allocated with name '_linetrack_vright_1_89'
0665           1483   ;sloc0                     Allocated with name '_linetrack_sloc0_1_0'
0665           1484   ;sloc1                     Allocated with name '_linetrack_sloc1_1_0'
0665           1485   ;------------------------------------------------------------
0665           1486   ;        robot.c:319: void linetrack (int forwardbackward) {
0665           1487   ;        -----------------------------------------
0665           1488   ;         function linetrack
0665           1489   ;        -----------------------------------------
0665           1490   _linetrack:
0665 AA82      1491            mov     r2,dpl
0667 AB83      1492            mov     r3,dph
0669           1493   ;        robot.c:327: if (forwardbackward == 0) {
0669 EA        1494            mov     a,r2
066A 4B        1495            orl     a,r3
066B 6001      1496            jz      L005010?
066D 020100    1497            ljmp    L005004?
0670           1498   L005010?:
0670           1499   ;        robot.c:328: vleft=Volts_at_Pin(TANK_FL);
0670 75820B    1500            mov     dpl,#0x0B
0673 120100    1501            lcall   _Volts_at_Pin
0676 8582B8    1502            mov     _linetrack_vleft_1_89,dpl
0679 8583B9    1503            mov     (_linetrack_vleft_1_89 + 1),dph
067C 85F0BA    1504            mov     (_linetrack_vleft_1_89 + 2),b
067F F5BB      1505            mov     (_linetrack_vleft_1_89 + 3),a
0681           1506   ;        robot.c:329: vright=Volts_at_Pin(TANK_FR);
0681 75820C    1507            mov     dpl,#0x0C
0684 120100    1508            lcall   _Volts_at_Pin
0687 858208    1509            mov     _linetrack_vright_1_89,dpl
068A 858309    1510            mov     (_linetrack_vright_1_89 + 1),dph
068D 85F00A    1511            mov     (_linetrack_vright_1_89 + 2),b
0690 F50B      1512            mov     (_linetrack_vright_1_89 + 3),a
0692           1513   ;        robot.c:332: pwm_Left0 = -1;
0692 7570FF    1514            mov     _pwm_Left0,#0xFF
0695           1515   ;        robot.c:333: pwm_Left1 = vright*vright*75/(vright*vright+vleft*vleft);
0695 C008      1516            push    _linetrack_vright_1_89
0697 C009      1517            push    (_linetrack_vright_1_89 + 1)
0699 C00A      1518            push    (_linetrack_vright_1_89 + 2)
069B C00B      1519            push    (_linetrack_vright_1_89 + 3)
069D 850882    1520            mov     dpl,_linetrack_vright_1_89
06A0 850983    1521            mov     dph,(_linetrack_vright_1_89 + 1)
06A3 850AF0    1522            mov     b,(_linetrack_vright_1_89 + 2)
06A6 E50B      1523            mov     a,(_linetrack_vright_1_89 + 3)
06A8 120100    1524            lcall   ___fsmul
06AB AC82      1525            mov     r4,dpl
06AD AD83      1526            mov     r5,dph
06AF AEF0      1527            mov     r6,b
06B1 FF        1528            mov     r7,a
06B2 E581      1529            mov     a,sp
06B4 24FC      1530            add     a,#0xfc
06B6 F581      1531            mov     sp,a
06B8 C004      1532            push    ar4
06BA C005      1533            push    ar5
06BC C006      1534            push    ar6
06BE C007      1535            push    ar7
06C0 900000    1536            mov     dptr,#0x0000
06C3 75F096    1537            mov     b,#0x96
06C6 7442      1538            mov     a,#0x42
06C8 120100    1539            lcall   ___fsmul
06CB 858258    1540            mov     _linetrack_sloc0_1_0,dpl
06CE 858359    1541            mov     (_linetrack_sloc0_1_0 + 1),dph
06D1 85F05A    1542            mov     (_linetrack_sloc0_1_0 + 2),b
06D4 F55B      1543            mov     (_linetrack_sloc0_1_0 + 3),a
06D6 E581      1544            mov     a,sp
06D8 24FC      1545            add     a,#0xfc
06DA F581      1546            mov     sp,a
06DC C008      1547            push    _linetrack_vright_1_89
06DE C009      1548            push    (_linetrack_vright_1_89 + 1)
06E0 C00A      1549            push    (_linetrack_vright_1_89 + 2)
06E2 C00B      1550            push    (_linetrack_vright_1_89 + 3)
06E4 850882    1551            mov     dpl,_linetrack_vright_1_89
06E7 850983    1552            mov     dph,(_linetrack_vright_1_89 + 1)
06EA 850AF0    1553            mov     b,(_linetrack_vright_1_89 + 2)
06ED E50B      1554            mov     a,(_linetrack_vright_1_89 + 3)
06EF 120100    1555            lcall   ___fsmul
06F2 8582A8    1556            mov     _linetrack_sloc1_1_0,dpl
06F5 8583A9    1557            mov     (_linetrack_sloc1_1_0 + 1),dph
06F8 85F0AA    1558            mov     (_linetrack_sloc1_1_0 + 2),b
06FB F5AB      1559            mov     (_linetrack_sloc1_1_0 + 3),a
06FD E581      1560            mov     a,sp
06FF 24FC      1561            add     a,#0xfc
0701 F581      1562            mov     sp,a
0703 C0B8      1563            push    _linetrack_vleft_1_89
0705 C0B9      1564            push    (_linetrack_vleft_1_89 + 1)
0707 C0BA      1565            push    (_linetrack_vleft_1_89 + 2)
0709 C0BB      1566            push    (_linetrack_vleft_1_89 + 3)
070B 85B882    1567            mov     dpl,_linetrack_vleft_1_89
070E 85B983    1568            mov     dph,(_linetrack_vleft_1_89 + 1)
0711 85BAF0    1569            mov     b,(_linetrack_vleft_1_89 + 2)
0714 E5BB      1570            mov     a,(_linetrack_vleft_1_89 + 3)
0716 120100    1571            lcall   ___fsmul
0719 AE82      1572            mov     r6,dpl
071B AF83      1573            mov     r7,dph
071D ACF0      1574            mov     r4,b
071F FD        1575            mov     r5,a
0720 E581      1576            mov     a,sp
0722 24FC      1577            add     a,#0xfc
0724 F581      1578            mov     sp,a
0726 C006      1579            push    ar6
0728 C007      1580            push    ar7
072A C004      1581            push    ar4
072C C005      1582            push    ar5
072E 85A882    1583            mov     dpl,_linetrack_sloc1_1_0
0731 85A983    1584            mov     dph,(_linetrack_sloc1_1_0 + 1)
0734 85AAF0    1585            mov     b,(_linetrack_sloc1_1_0 + 2)
0737 E5AB      1586            mov     a,(_linetrack_sloc1_1_0 + 3)
0739 120100    1587            lcall   ___fsadd
073C AC82      1588            mov     r4,dpl
073E AD83      1589            mov     r5,dph
0740 AEF0      1590            mov     r6,b
0742 FF        1591            mov     r7,a
0743 E581      1592            mov     a,sp
0745 24FC      1593            add     a,#0xfc
0747 F581      1594            mov     sp,a
0749 C004      1595            push    ar4
074B C005      1596            push    ar5
074D C006      1597            push    ar6
074F C007      1598            push    ar7
0751 855882    1599            mov     dpl,_linetrack_sloc0_1_0
0754 855983    1600            mov     dph,(_linetrack_sloc0_1_0 + 1)
0757 855AF0    1601            mov     b,(_linetrack_sloc0_1_0 + 2)
075A E55B      1602            mov     a,(_linetrack_sloc0_1_0 + 3)
075C 120100    1603            lcall   ___fsdiv
075F AC82      1604            mov     r4,dpl
0761 AD83      1605            mov     r5,dph
0763 AEF0      1606            mov     r6,b
0765 FF        1607            mov     r7,a
0766 E581      1608            mov     a,sp
0768 24FC      1609            add     a,#0xfc
076A F581      1610            mov     sp,a
076C 8C82      1611            mov     dpl,r4
076E 8D83      1612            mov     dph,r5
0770 8EF0      1613            mov     b,r6
0772 EF        1614            mov     a,r7
0773 120100    1615            lcall   ___fs2schar
0776 858230    1616            mov     _pwm_Left1,dpl
0779           1617   ;        robot.c:334: pwm_Right1 = -1;
0779 75B0FF    1618            mov     _pwm_Right1,#0xFF
077C           1619   ;        robot.c:335: pwm_Right0 = vleft*vleft*75/(vright*vright+vleft*vleft);
077C C0B8      1620            push    _linetrack_vleft_1_89
077E C0B9      1621            push    (_linetrack_vleft_1_89 + 1)
0780 C0BA      1622            push    (_linetrack_vleft_1_89 + 2)
0782 C0BB      1623            push    (_linetrack_vleft_1_89 + 3)
0784 85B882    1624            mov     dpl,_linetrack_vleft_1_89
0787 85B983    1625            mov     dph,(_linetrack_vleft_1_89 + 1)
078A 85BAF0    1626            mov     b,(_linetrack_vleft_1_89 + 2)
078D E5BB      1627            mov     a,(_linetrack_vleft_1_89 + 3)
078F 120100    1628            lcall   ___fsmul
0792 AC82      1629            mov     r4,dpl
0794 AD83      1630            mov     r5,dph
0796 AEF0      1631            mov     r6,b
0798 FF        1632            mov     r7,a
0799 E581      1633            mov     a,sp
079B 24FC      1634            add     a,#0xfc
079D F581      1635            mov     sp,a
079F C004      1636            push    ar4
07A1 C005      1637            push    ar5
07A3 C006      1638            push    ar6
07A5 C007      1639            push    ar7
07A7 900000    1640            mov     dptr,#0x0000
07AA 75F096    1641            mov     b,#0x96
07AD 7442      1642            mov     a,#0x42
07AF 120100    1643            lcall   ___fsmul
07B2 8582A8    1644            mov     _linetrack_sloc1_1_0,dpl
07B5 8583A9    1645            mov     (_linetrack_sloc1_1_0 + 1),dph
07B8 85F0AA    1646            mov     (_linetrack_sloc1_1_0 + 2),b
07BB F5AB      1647            mov     (_linetrack_sloc1_1_0 + 3),a
07BD E581      1648            mov     a,sp
07BF 24FC      1649            add     a,#0xfc
07C1 F581      1650            mov     sp,a
07C3 C008      1651            push    _linetrack_vright_1_89
07C5 C009      1652            push    (_linetrack_vright_1_89 + 1)
07C7 C00A      1653            push    (_linetrack_vright_1_89 + 2)
07C9 C00B      1654            push    (_linetrack_vright_1_89 + 3)
07CB 850882    1655            mov     dpl,_linetrack_vright_1_89
07CE 850983    1656            mov     dph,(_linetrack_vright_1_89 + 1)
07D1 850AF0    1657            mov     b,(_linetrack_vright_1_89 + 2)
07D4 E50B      1658            mov     a,(_linetrack_vright_1_89 + 3)
07D6 120100    1659            lcall   ___fsmul
07D9 858258    1660            mov     _linetrack_sloc0_1_0,dpl
07DC 858359    1661            mov     (_linetrack_sloc0_1_0 + 1),dph
07DF 85F05A    1662            mov     (_linetrack_sloc0_1_0 + 2),b
07E2 F55B      1663            mov     (_linetrack_sloc0_1_0 + 3),a
07E4 E581      1664            mov     a,sp
07E6 24FC      1665            add     a,#0xfc
07E8 F581      1666            mov     sp,a
07EA C0B8      1667            push    _linetrack_vleft_1_89
07EC C0B9      1668            push    (_linetrack_vleft_1_89 + 1)
07EE C0BA      1669            push    (_linetrack_vleft_1_89 + 2)
07F0 C0BB      1670            push    (_linetrack_vleft_1_89 + 3)
07F2 85B882    1671            mov     dpl,_linetrack_vleft_1_89
07F5 85B983    1672            mov     dph,(_linetrack_vleft_1_89 + 1)
07F8 85BAF0    1673            mov     b,(_linetrack_vleft_1_89 + 2)
07FB E5BB      1674            mov     a,(_linetrack_vleft_1_89 + 3)
07FD 120100    1675            lcall   ___fsmul
0800 AE82      1676            mov     r6,dpl
0802 AF83      1677            mov     r7,dph
0804 ACF0      1678            mov     r4,b
0806 FD        1679            mov     r5,a
0807 E581      1680            mov     a,sp
0809 24FC      1681            add     a,#0xfc
080B F581      1682            mov     sp,a
080D C006      1683            push    ar6
080F C007      1684            push    ar7
0811 C004      1685            push    ar4
0813 C005      1686            push    ar5
0815 855882    1687            mov     dpl,_linetrack_sloc0_1_0
0818 855983    1688            mov     dph,(_linetrack_sloc0_1_0 + 1)
081B 855AF0    1689            mov     b,(_linetrack_sloc0_1_0 + 2)
081E E55B      1690            mov     a,(_linetrack_sloc0_1_0 + 3)
0820 120100    1691            lcall   ___fsadd
0823 AC82      1692            mov     r4,dpl
0825 AD83      1693            mov     r5,dph
0827 AEF0      1694            mov     r6,b
0829 FF        1695            mov     r7,a
082A E581      1696            mov     a,sp
082C 24FC      1697            add     a,#0xfc
082E F581      1698            mov     sp,a
0830 C004      1699            push    ar4
0832 C005      1700            push    ar5
0834 C006      1701            push    ar6
0836 C007      1702            push    ar7
0838 85A882    1703            mov     dpl,_linetrack_sloc1_1_0
083B 85A983    1704            mov     dph,(_linetrack_sloc1_1_0 + 1)
083E 85AAF0    1705            mov     b,(_linetrack_sloc1_1_0 + 2)
0841 E5AB      1706            mov     a,(_linetrack_sloc1_1_0 + 3)
0843 120100    1707            lcall   ___fsdiv
0846 AC82      1708            mov     r4,dpl
0848 AD83      1709            mov     r5,dph
084A AEF0      1710            mov     r6,b
084C FF        1711            mov     r7,a
084D E581      1712            mov     a,sp
084F 24FC      1713            add     a,#0xfc
0851 F581      1714            mov     sp,a
0853 8C82      1715            mov     dpl,r4
0855 8D83      1716            mov     dph,r5
0857 8EF0      1717            mov     b,r6
0859 EF        1718            mov     a,r7
085A 120100    1719            lcall   ___fs2schar
085D 8582F0    1720            mov     _pwm_Right0,dpl
0860 22        1721            ret
0861           1722   L005004?:
0861           1723   ;        robot.c:336: } else if (forwardbackward == 1) {
0861 BA0140    1724            cjne    r2,#0x01,L005011?
0864 BB0040    1725            cjne    r3,#0x00,L005011?
0867 8001      1726            sjmp    L005012?
0869           1727   L005011?:
0869 22        1728            ret
086A           1729   L005012?:
086A           1730   ;        robot.c:339: vleft=Volts_at_Pin(TANK_RL);
086A 75820D    1731            mov     dpl,#0x0D
086D 120100    1732            lcall   _Volts_at_Pin
0870 8582B8    1733            mov     _linetrack_vleft_1_89,dpl
0873 8583B9    1734            mov     (_linetrack_vleft_1_89 + 1),dph
0876 85F0BA    1735            mov     (_linetrack_vleft_1_89 + 2),b
0879 F5BB      1736            mov     (_linetrack_vleft_1_89 + 3),a
087B           1737   ;        robot.c:340: vright=Volts_at_Pin(TANK_RR);
087B 75820E    1738            mov     dpl,#0x0E
087E 120100    1739            lcall   _Volts_at_Pin
0881 858208    1740            mov     _linetrack_vright_1_89,dpl
0884 858309    1741            mov     (_linetrack_vright_1_89 + 1),dph
0887 85F00A    1742            mov     (_linetrack_vright_1_89 + 2),b
088A F50B      1743            mov     (_linetrack_vright_1_89 + 3),a
088C           1744   ;        robot.c:343: pwm_Left1 = -1;
088C 7530FF    1745            mov     _pwm_Left1,#0xFF
088F           1746   ;        robot.c:344: pwm_Left0 = vright*vright*75/(vright*vright+vleft*vleft);
088F C008      1747            push    _linetrack_vright_1_89
0891 C009      1748            push    (_linetrack_vright_1_89 + 1)
0893 C00A      1749            push    (_linetrack_vright_1_89 + 2)
0895 C00B      1750            push    (_linetrack_vright_1_89 + 3)
0897 850882    1751            mov     dpl,_linetrack_vright_1_89
089A 850983    1752            mov     dph,(_linetrack_vright_1_89 + 1)
089D 850AF0    1753            mov     b,(_linetrack_vright_1_89 + 2)
08A0 E50B      1754            mov     a,(_linetrack_vright_1_89 + 3)
08A2 120100    1755            lcall   ___fsmul
08A5 AA82      1756            mov     r2,dpl
08A7 AB83      1757            mov     r3,dph
08A9 ACF0      1758            mov     r4,b
08AB FD        1759            mov     r5,a
08AC E581      1760            mov     a,sp
08AE 24FC      1761            add     a,#0xfc
08B0 F581      1762            mov     sp,a
08B2 C002      1763            push    ar2
08B4 C003      1764            push    ar3
08B6 C004      1765            push    ar4
08B8 C005      1766            push    ar5
08BA 900000    1767            mov     dptr,#0x0000
08BD 75F096    1768            mov     b,#0x96
08C0 7442      1769            mov     a,#0x42
08C2 120100    1770            lcall   ___fsmul
08C5 AA82      1771            mov     r2,dpl
08C7 AB83      1772            mov     r3,dph
08C9 ACF0      1773            mov     r4,b
08CB FD        1774            mov     r5,a
08CC E581      1775            mov     a,sp
08CE 24FC      1776            add     a,#0xfc
08D0 F581      1777            mov     sp,a
08D2 C002      1778            push    ar2
08D4 C003      1779            push    ar3
08D6 C004      1780            push    ar4
08D8 C005      1781            push    ar5
08DA C008      1782            push    _linetrack_vright_1_89
08DC C009      1783            push    (_linetrack_vright_1_89 + 1)
08DE C00A      1784            push    (_linetrack_vright_1_89 + 2)
08E0 C00B      1785            push    (_linetrack_vright_1_89 + 3)
08E2 850882    1786            mov     dpl,_linetrack_vright_1_89
08E5 850983    1787            mov     dph,(_linetrack_vright_1_89 + 1)
08E8 850AF0    1788            mov     b,(_linetrack_vright_1_89 + 2)
08EB E50B      1789            mov     a,(_linetrack_vright_1_89 + 3)
08ED 120100    1790            lcall   ___fsmul
08F0 8582A8    1791            mov     _linetrack_sloc1_1_0,dpl
08F3 8583A9    1792            mov     (_linetrack_sloc1_1_0 + 1),dph
08F6 85F0AA    1793            mov     (_linetrack_sloc1_1_0 + 2),b
08F9 F5AB      1794            mov     (_linetrack_sloc1_1_0 + 3),a
08FB E581      1795            mov     a,sp
08FD 24FC      1796            add     a,#0xfc
08FF F581      1797            mov     sp,a
0901 C0B8      1798            push    _linetrack_vleft_1_89
0903 C0B9      1799            push    (_linetrack_vleft_1_89 + 1)
0905 C0BA      1800            push    (_linetrack_vleft_1_89 + 2)
0907 C0BB      1801            push    (_linetrack_vleft_1_89 + 3)
0909 85B882    1802            mov     dpl,_linetrack_vleft_1_89
090C 85B983    1803            mov     dph,(_linetrack_vleft_1_89 + 1)
090F 85BAF0    1804            mov     b,(_linetrack_vleft_1_89 + 2)
0912 E5BB      1805            mov     a,(_linetrack_vleft_1_89 + 3)
0914 120100    1806            lcall   ___fsmul
0917 AE82      1807            mov     r6,dpl
0919 AF83      1808            mov     r7,dph
091B A8F0      1809            mov     r0,b
091D F9        1810            mov     r1,a
091E E581      1811            mov     a,sp
0920 24FC      1812            add     a,#0xfc
0922 F581      1813            mov     sp,a
0924 C006      1814            push    ar6
0926 C007      1815            push    ar7
0928 C000      1816            push    ar0
092A C001      1817            push    ar1
092C 85A882    1818            mov     dpl,_linetrack_sloc1_1_0
092F 85A983    1819            mov     dph,(_linetrack_sloc1_1_0 + 1)
0932 85AAF0    1820            mov     b,(_linetrack_sloc1_1_0 + 2)
0935 E5AB      1821            mov     a,(_linetrack_sloc1_1_0 + 3)
0937 120100    1822            lcall   ___fsadd
093A AE82      1823            mov     r6,dpl
093C AF83      1824            mov     r7,dph
093E A8F0      1825            mov     r0,b
0940 F9        1826            mov     r1,a
0941 E581      1827            mov     a,sp
0943 24FC      1828            add     a,#0xfc
0945 F581      1829            mov     sp,a
0947 D005      1830            pop     ar5
0949 D004      1831            pop     ar4
094B D003      1832            pop     ar3
094D D002      1833            pop     ar2
094F C006      1834            push    ar6
0951 C007      1835            push    ar7
0953 C000      1836            push    ar0
0955 C001      1837            push    ar1
0957 8A82      1838            mov     dpl,r2
0959 8B83      1839            mov     dph,r3
095B 8CF0      1840            mov     b,r4
095D ED        1841            mov     a,r5
095E 120100    1842            lcall   ___fsdiv
0961 AA82      1843            mov     r2,dpl
0963 AB83      1844            mov     r3,dph
0965 ACF0      1845            mov     r4,b
0967 FD        1846            mov     r5,a
0968 E581      1847            mov     a,sp
096A 24FC      1848            add     a,#0xfc
096C F581      1849            mov     sp,a
096E 8A82      1850            mov     dpl,r2
0970 8B83      1851            mov     dph,r3
0972 8CF0      1852            mov     b,r4
0974 ED        1853            mov     a,r5
0975 120100    1854            lcall   ___fs2schar
0978 858270    1855            mov     _pwm_Left0,dpl
097B           1856   ;        robot.c:345: pwm_Right0 = -1;
097B 75F0FF    1857            mov     _pwm_Right0,#0xFF
097E           1858   ;        robot.c:346: pwm_Right1 = vleft*vleft*75/(vright*vright+vleft*vleft);
097E C0B8      1859            push    _linetrack_vleft_1_89
0980 C0B9      1860            push    (_linetrack_vleft_1_89 + 1)
0982 C0BA      1861            push    (_linetrack_vleft_1_89 + 2)
0984 C0BB      1862            push    (_linetrack_vleft_1_89 + 3)
0986 85B882    1863            mov     dpl,_linetrack_vleft_1_89
0989 85B983    1864            mov     dph,(_linetrack_vleft_1_89 + 1)
098C 85BAF0    1865            mov     b,(_linetrack_vleft_1_89 + 2)
098F E5BB      1866            mov     a,(_linetrack_vleft_1_89 + 3)
0991 120100    1867            lcall   ___fsmul
0994 AA82      1868            mov     r2,dpl
0996 AB83      1869            mov     r3,dph
0998 ACF0      1870            mov     r4,b
099A FD        1871            mov     r5,a
099B E581      1872            mov     a,sp
099D 24FC      1873            add     a,#0xfc
099F F581      1874            mov     sp,a
09A1 C002      1875            push    ar2
09A3 C003      1876            push    ar3
09A5 C004      1877            push    ar4
09A7 C005      1878            push    ar5
09A9 900000    1879            mov     dptr,#0x0000
09AC 75F096    1880            mov     b,#0x96
09AF 7442      1881            mov     a,#0x42
09B1 120100    1882            lcall   ___fsmul
09B4 AA82      1883            mov     r2,dpl
09B6 AB83      1884            mov     r3,dph
09B8 ACF0      1885            mov     r4,b
09BA FD        1886            mov     r5,a
09BB E581      1887            mov     a,sp
09BD 24FC      1888            add     a,#0xfc
09BF F581      1889            mov     sp,a
09C1 C002      1890            push    ar2
09C3 C003      1891            push    ar3
09C5 C004      1892            push    ar4
09C7 C005      1893            push    ar5
09C9 C008      1894            push    _linetrack_vright_1_89
09CB C009      1895            push    (_linetrack_vright_1_89 + 1)
09CD C00A      1896            push    (_linetrack_vright_1_89 + 2)
09CF C00B      1897            push    (_linetrack_vright_1_89 + 3)
09D1 850882    1898            mov     dpl,_linetrack_vright_1_89
09D4 850983    1899            mov     dph,(_linetrack_vright_1_89 + 1)
09D7 850AF0    1900            mov     b,(_linetrack_vright_1_89 + 2)
09DA E50B      1901            mov     a,(_linetrack_vright_1_89 + 3)
09DC 120100    1902            lcall   ___fsmul
09DF 8582A8    1903            mov     _linetrack_sloc1_1_0,dpl
09E2 8583A9    1904            mov     (_linetrack_sloc1_1_0 + 1),dph
09E5 85F0AA    1905            mov     (_linetrack_sloc1_1_0 + 2),b
09E8 F5AB      1906            mov     (_linetrack_sloc1_1_0 + 3),a
09EA E581      1907            mov     a,sp
09EC 24FC      1908            add     a,#0xfc
09EE F581      1909            mov     sp,a
09F0 C0B8      1910            push    _linetrack_vleft_1_89
09F2 C0B9      1911            push    (_linetrack_vleft_1_89 + 1)
09F4 C0BA      1912            push    (_linetrack_vleft_1_89 + 2)
09F6 C0BB      1913            push    (_linetrack_vleft_1_89 + 3)
09F8 85B882    1914            mov     dpl,_linetrack_vleft_1_89
09FB 85B983    1915            mov     dph,(_linetrack_vleft_1_89 + 1)
09FE 85BAF0    1916            mov     b,(_linetrack_vleft_1_89 + 2)
0A01 E5BB      1917            mov     a,(_linetrack_vleft_1_89 + 3)
0A03 120100    1918            lcall   ___fsmul
0A06 AE82      1919            mov     r6,dpl
0A08 AF83      1920            mov     r7,dph
0A0A A8F0      1921            mov     r0,b
0A0C F9        1922            mov     r1,a
0A0D E581      1923            mov     a,sp
0A0F 24FC      1924            add     a,#0xfc
0A11 F581      1925            mov     sp,a
0A13 C006      1926            push    ar6
0A15 C007      1927            push    ar7
0A17 C000      1928            push    ar0
0A19 C001      1929            push    ar1
0A1B 85A882    1930            mov     dpl,_linetrack_sloc1_1_0
0A1E 85A983    1931            mov     dph,(_linetrack_sloc1_1_0 + 1)
0A21 85AAF0    1932            mov     b,(_linetrack_sloc1_1_0 + 2)
0A24 E5AB      1933            mov     a,(_linetrack_sloc1_1_0 + 3)
0A26 120100    1934            lcall   ___fsadd
0A29 AE82      1935            mov     r6,dpl
0A2B AF83      1936            mov     r7,dph
0A2D A8F0      1937            mov     r0,b
0A2F F9        1938            mov     r1,a
0A30 E581      1939            mov     a,sp
0A32 24FC      1940            add     a,#0xfc
0A34 F581      1941            mov     sp,a
0A36 D005      1942            pop     ar5
0A38 D004      1943            pop     ar4
0A3A D003      1944            pop     ar3
0A3C D002      1945            pop     ar2
0A3E C006      1946            push    ar6
0A40 C007      1947            push    ar7
0A42 C000      1948            push    ar0
0A44 C001      1949            push    ar1
0A46 8A82      1950            mov     dpl,r2
0A48 8B83      1951            mov     dph,r3
0A4A 8CF0      1952            mov     b,r4
0A4C ED        1953            mov     a,r5
0A4D 120100    1954            lcall   ___fsdiv
0A50 AA82      1955            mov     r2,dpl
0A52 AB83      1956            mov     r3,dph
0A54 ACF0      1957            mov     r4,b
0A56 FD        1958            mov     r5,a
0A57 E581      1959            mov     a,sp
0A59 24FC      1960            add     a,#0xfc
0A5B F581      1961            mov     sp,a
0A5D 8A82      1962            mov     dpl,r2
0A5F 8B83      1963            mov     dph,r3
0A61 8CF0      1964            mov     b,r4
0A63 ED        1965            mov     a,r5
0A64 120100    1966            lcall   ___fs2schar
0A67 8582B0    1967            mov     _pwm_Right1,dpl
0A6A 22        1968            ret
0A6B           1969   ;------------------------------------------------------------
0A6B           1970   ;Allocation info for local variables in function 'stopcar'
0A6B           1971   ;------------------------------------------------------------
0A6B           1972   ;------------------------------------------------------------
0A6B           1973   ;        robot.c:354: void stopcar(void) {
0A6B           1974   ;        -----------------------------------------
0A6B           1975   ;         function stopcar
0A6B           1976   ;        -----------------------------------------
0A6B           1977   _stopcar:
0A6B           1978   ;        robot.c:356: pwm_Left1 = -1;
0A6B 7530FF    1979            mov     _pwm_Left1,#0xFF
0A6E           1980   ;        robot.c:357: pwm_Right1 = -1;
0A6E 75B0FF    1981            mov     _pwm_Right1,#0xFF
0A71           1982   ;        robot.c:358: pwm_Left0 = -1;
0A71 7570FF    1983            mov     _pwm_Left0,#0xFF
0A74           1984   ;        robot.c:359: pwm_Right0 = -1;
0A74 75F0FF    1985            mov     _pwm_Right0,#0xFF
0A77 22        1986            ret
0A78           1987   ;------------------------------------------------------------
0A78           1988   ;Allocation info for local variables in function 'turncar'
0A78           1989   ;------------------------------------------------------------
0A78           1990   ;leftright                 Allocated to registers r2 r3 
0A78           1991   ;v                         Allocated with name '_turncar_v_1_95'
0A78           1992   ;direction                 Allocated with name '_turncar_direction_1_95'
0A78           1993   ;------------------------------------------------------------
0A78           1994   ;        robot.c:365: void turncar (int leftright) {
0A78           1995   ;        -----------------------------------------
0A78           1996   ;         function turncar
0A78           1997   ;        -----------------------------------------
0A78           1998   _turncar:
0A78 AA82      1999            mov     r2,dpl
0A7A AB83      2000            mov     r3,dph
0A7C           2001   ;        robot.c:374: pwm_Left0 = -1;
0A7C 7570FF    2002            mov     _pwm_Left0,#0xFF
0A7F           2003   ;        robot.c:375: pwm_Left1 = -1;
0A7F 7530FF    2004            mov     _pwm_Left1,#0xFF
0A82           2005   ;        robot.c:376: pwm_Right0 = -1;
0A82 75F0FF    2006            mov     _pwm_Right0,#0xFF
0A85           2007   ;        robot.c:377: pwm_Right1 = -1;
0A85 75B0FF    2008            mov     _pwm_Right1,#0xFF
0A88           2009   ;        robot.c:379: direction = currentstate - 1;
0A88 E5F0      2010            mov     a,_currentstate
0A8A 14        2011            dec     a
0A8B F538      2012            mov     _turncar_direction_1_95,a
0A8D           2013   ;        robot.c:382: if (leftright == 1) {
0A8D BA01C0    2014            cjne    r2,#0x01,L007062?
0A90 BB00C0    2015            cjne    r3,#0x00,L007062?
0A93 8001      2016            sjmp    L007063?
0A95           2017   L007062?:
0A95 020100    2018            ljmp    L007022?
0A98           2019   L007063?:
0A98           2020   ;        robot.c:384: pwm_Right0 = 100;
0A98 75F064    2021            mov     _pwm_Right0,#0x64
0A9B           2022   ;        robot.c:387: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0A9B E538      2023            mov     a,_turncar_direction_1_95
0A9D 6001      2024            jz      L007026?
0A9F 75820C    2025            mov     dpl,#0x0C
0AA2 120100    2026            lcall   _Volts_at_Pin
0AA5 AC82      2027            mov     r4,dpl
0AA7 AD83      2028            mov     r5,dph
0AA9 AEF0      2029            mov     r6,b
0AAB FF        2030            mov     r7,a
0AAC 8001      2031            sjmp    L007027?
0AAE           2032   L007026?:
0AAE 75820E    2033            mov     dpl,#0x0E
0AB1 120100    2034            lcall   _Volts_at_Pin
0AB4 AC82      2035            mov     r4,dpl
0AB6 AD83      2036            mov     r5,dph
0AB8 AEF0      2037            mov     r6,b
0ABA FF        2038            mov     r7,a
0ABB           2039   L007027?:
0ABB 8CE8      2040            mov     _turncar_v_1_95,r4
0ABD 8DE9      2041            mov     (_turncar_v_1_95 + 1),r5
0ABF 8EEA      2042            mov     (_turncar_v_1_95 + 2),r6
0AC1 8FEB      2043            mov     (_turncar_v_1_95 + 3),r7
0AC3           2044   ;        robot.c:389: while (v < 1.3) {
0AC3           2045   L007001?:
0AC3 7466      2046            mov     a,#0x66
0AC5 C0E0      2047            push    acc
0AC7 C0E0      2048            push    acc
0AC9 74A6      2049            mov     a,#0xA6
0ACB C0E0      2050            push    acc
0ACD 743F      2051            mov     a,#0x3F
0ACF C0E0      2052            push    acc
0AD1 85E882    2053            mov     dpl,_turncar_v_1_95
0AD4 85E983    2054            mov     dph,(_turncar_v_1_95 + 1)
0AD7 85EAF0    2055            mov     b,(_turncar_v_1_95 + 2)
0ADA E5EB      2056            mov     a,(_turncar_v_1_95 + 3)
0ADC 120100    2057            lcall   ___fslt
0ADF AC82      2058            mov     r4,dpl
0AE1 E581      2059            mov     a,sp
0AE3 24FC      2060            add     a,#0xfc
0AE5 F581      2061            mov     sp,a
0AE7 EC        2062            mov     a,r4
0AE8 6001      2063            jz      L007003?
0AEA           2064   ;        robot.c:391: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0AEA E538      2065            mov     a,_turncar_direction_1_95
0AEC 6001      2066            jz      L007028?
0AEE 75820C    2067            mov     dpl,#0x0C
0AF1 120100    2068            lcall   _Volts_at_Pin
0AF4 AC82      2069            mov     r4,dpl
0AF6 AD83      2070            mov     r5,dph
0AF8 AEF0      2071            mov     r6,b
0AFA FF        2072            mov     r7,a
0AFB 8001      2073            sjmp    L007029?
0AFD           2074   L007028?:
0AFD 75820E    2075            mov     dpl,#0x0E
0B00 120100    2076            lcall   _Volts_at_Pin
0B03 AC82      2077            mov     r4,dpl
0B05 AD83      2078            mov     r5,dph
0B07 AEF0      2079            mov     r6,b
0B09 FF        2080            mov     r7,a
0B0A           2081   L007029?:
0B0A 8CE8      2082            mov     _turncar_v_1_95,r4
0B0C 8DE9      2083            mov     (_turncar_v_1_95 + 1),r5
0B0E 8EEA      2084            mov     (_turncar_v_1_95 + 2),r6
0B10 8FEB      2085            mov     (_turncar_v_1_95 + 3),r7
0B12 8001      2086            sjmp    L007001?
0B14           2087   L007003?:
0B14           2088   ;        robot.c:395: waitms(300);
0B14 90012C    2089            mov     dptr,#0x012C
0B17 120100    2090            lcall   _waitms
0B1A           2091   ;        robot.c:398: pwm_Right0 = -1; 
0B1A 75F0FF    2092            mov     _pwm_Right0,#0xFF
0B1D 22        2093            ret
0B1E           2094   L007022?:
0B1E           2095   ;        robot.c:402: else if (leftright == 3) {
0B1E BA0340    2096            cjne    r2,#0x03,L007067?
0B21 BB0040    2097            cjne    r3,#0x00,L007067?
0B24 8001      2098            sjmp    L007068?
0B26           2099   L007067?:
0B26 020100    2100            ljmp    L007019?
0B29           2101   L007068?:
0B29           2102   ;        robot.c:404: pwm_Left1 = 75;
0B29 75304B    2103            mov     _pwm_Left1,#0x4B
0B2C           2104   ;        robot.c:405: waitms(200);
0B2C 9000C8    2105            mov     dptr,#0x00C8
0B2F 120100    2106            lcall   _waitms
0B32           2107   ;        robot.c:408: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0B32 E538      2108            mov     a,_turncar_direction_1_95
0B34 6001      2109            jz      L007030?
0B36 75820B    2110            mov     dpl,#0x0B
0B39 120100    2111            lcall   _Volts_at_Pin
0B3C AC82      2112            mov     r4,dpl
0B3E AD83      2113            mov     r5,dph
0B40 AEF0      2114            mov     r6,b
0B42 FF        2115            mov     r7,a
0B43 8001      2116            sjmp    L007031?
0B45           2117   L007030?:
0B45 75820D    2118            mov     dpl,#0x0D
0B48 120100    2119            lcall   _Volts_at_Pin
0B4B AC82      2120            mov     r4,dpl
0B4D AD83      2121            mov     r5,dph
0B4F AEF0      2122            mov     r6,b
0B51 FF        2123            mov     r7,a
0B52           2124   L007031?:
0B52 8CE8      2125            mov     _turncar_v_1_95,r4
0B54 8DE9      2126            mov     (_turncar_v_1_95 + 1),r5
0B56 8EEA      2127            mov     (_turncar_v_1_95 + 2),r6
0B58 8FEB      2128            mov     (_turncar_v_1_95 + 3),r7
0B5A           2129   ;        robot.c:410: while (v < 1.3) {
0B5A           2130   L007004?:
0B5A 7466      2131            mov     a,#0x66
0B5C C0E0      2132            push    acc
0B5E C0E0      2133            push    acc
0B60 74A6      2134            mov     a,#0xA6
0B62 C0E0      2135            push    acc
0B64 743F      2136            mov     a,#0x3F
0B66 C0E0      2137            push    acc
0B68 85E882    2138            mov     dpl,_turncar_v_1_95
0B6B 85E983    2139            mov     dph,(_turncar_v_1_95 + 1)
0B6E 85EAF0    2140            mov     b,(_turncar_v_1_95 + 2)
0B71 E5EB      2141            mov     a,(_turncar_v_1_95 + 3)
0B73 120100    2142            lcall   ___fslt
0B76 AC82      2143            mov     r4,dpl
0B78 E581      2144            mov     a,sp
0B7A 24FC      2145            add     a,#0xfc
0B7C F581      2146            mov     sp,a
0B7E EC        2147            mov     a,r4
0B7F 6001      2148            jz      L007006?
0B81           2149   ;        robot.c:412: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0B81 E538      2150            mov     a,_turncar_direction_1_95
0B83 6001      2151            jz      L007032?
0B85 75820B    2152            mov     dpl,#0x0B
0B88 120100    2153            lcall   _Volts_at_Pin
0B8B AC82      2154            mov     r4,dpl
0B8D AD83      2155            mov     r5,dph
0B8F AEF0      2156            mov     r6,b
0B91 FF        2157            mov     r7,a
0B92 8001      2158            sjmp    L007033?
0B94           2159   L007032?:
0B94 75820D    2160            mov     dpl,#0x0D
0B97 120100    2161            lcall   _Volts_at_Pin
0B9A AC82      2162            mov     r4,dpl
0B9C AD83      2163            mov     r5,dph
0B9E AEF0      2164            mov     r6,b
0BA0 FF        2165            mov     r7,a
0BA1           2166   L007033?:
0BA1 8CE8      2167            mov     _turncar_v_1_95,r4
0BA3 8DE9      2168            mov     (_turncar_v_1_95 + 1),r5
0BA5 8EEA      2169            mov     (_turncar_v_1_95 + 2),r6
0BA7 8FEB      2170            mov     (_turncar_v_1_95 + 3),r7
0BA9 8001      2171            sjmp    L007004?
0BAB           2172   L007006?:
0BAB           2173   ;        robot.c:416: pwm_Left1 = -1; 
0BAB 7530FF    2174            mov     _pwm_Left1,#0xFF
0BAE 22        2175            ret
0BAF           2176   L007019?:
0BAF           2177   ;        robot.c:420: else if (leftright == 2) {
0BAF BA0280    2178            cjne    r2,#0x02,L007072?
0BB2 BB0080    2179            cjne    r3,#0x00,L007072?
0BB5 8001      2180            sjmp    L007073?
0BB7           2181   L007072?:
0BB7 020100    2182            ljmp    L007016?
0BBA           2183   L007073?:
0BBA           2184   ;        robot.c:422: pwm_Right1 = 100;
0BBA 75B064    2185            mov     _pwm_Right1,#0x64
0BBD           2186   ;        robot.c:425: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0BBD E538      2187            mov     a,_turncar_direction_1_95
0BBF 6001      2188            jz      L007034?
0BC1 75820C    2189            mov     dpl,#0x0C
0BC4 120100    2190            lcall   _Volts_at_Pin
0BC7 AC82      2191            mov     r4,dpl
0BC9 AD83      2192            mov     r5,dph
0BCB AEF0      2193            mov     r6,b
0BCD FF        2194            mov     r7,a
0BCE 8001      2195            sjmp    L007035?
0BD0           2196   L007034?:
0BD0 75820E    2197            mov     dpl,#0x0E
0BD3 120100    2198            lcall   _Volts_at_Pin
0BD6 AC82      2199            mov     r4,dpl
0BD8 AD83      2200            mov     r5,dph
0BDA AEF0      2201            mov     r6,b
0BDC FF        2202            mov     r7,a
0BDD           2203   L007035?:
0BDD 8CE8      2204            mov     _turncar_v_1_95,r4
0BDF 8DE9      2205            mov     (_turncar_v_1_95 + 1),r5
0BE1 8EEA      2206            mov     (_turncar_v_1_95 + 2),r6
0BE3 8FEB      2207            mov     (_turncar_v_1_95 + 3),r7
0BE5           2208   ;        robot.c:427: while (v < 0.9) {
0BE5           2209   L007007?:
0BE5 7466      2210            mov     a,#0x66
0BE7 C0E0      2211            push    acc
0BE9 C0E0      2212            push    acc
0BEB C0E0      2213            push    acc
0BED 743F      2214            mov     a,#0x3F
0BEF C0E0      2215            push    acc
0BF1 85E882    2216            mov     dpl,_turncar_v_1_95
0BF4 85E983    2217            mov     dph,(_turncar_v_1_95 + 1)
0BF7 85EAF0    2218            mov     b,(_turncar_v_1_95 + 2)
0BFA E5EB      2219            mov     a,(_turncar_v_1_95 + 3)
0BFC 120100    2220            lcall   ___fslt
0BFF AC82      2221            mov     r4,dpl
0C01 E581      2222            mov     a,sp
0C03 24FC      2223            add     a,#0xfc
0C05 F581      2224            mov     sp,a
0C07 EC        2225            mov     a,r4
0C08 6001      2226            jz      L007009?
0C0A           2227   ;        robot.c:429: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0C0A E538      2228            mov     a,_turncar_direction_1_95
0C0C 6001      2229            jz      L007036?
0C0E 75820C    2230            mov     dpl,#0x0C
0C11 120100    2231            lcall   _Volts_at_Pin
0C14 AC82      2232            mov     r4,dpl
0C16 AD83      2233            mov     r5,dph
0C18 AEF0      2234            mov     r6,b
0C1A FF        2235            mov     r7,a
0C1B 8001      2236            sjmp    L007037?
0C1D           2237   L007036?:
0C1D 75820E    2238            mov     dpl,#0x0E
0C20 120100    2239            lcall   _Volts_at_Pin
0C23 AC82      2240            mov     r4,dpl
0C25 AD83      2241            mov     r5,dph
0C27 AEF0      2242            mov     r6,b
0C29 FF        2243            mov     r7,a
0C2A           2244   L007037?:
0C2A 8CE8      2245            mov     _turncar_v_1_95,r4
0C2C 8DE9      2246            mov     (_turncar_v_1_95 + 1),r5
0C2E 8EEA      2247            mov     (_turncar_v_1_95 + 2),r6
0C30 8FEB      2248            mov     (_turncar_v_1_95 + 3),r7
0C32 8001      2249            sjmp    L007007?
0C34           2250   L007009?:
0C34           2251   ;        robot.c:433: waitms(300);
0C34 90012C    2252            mov     dptr,#0x012C
0C37 120100    2253            lcall   _waitms
0C3A           2254   ;        robot.c:436: pwm_Right1 = -1; 
0C3A 75B0FF    2255            mov     _pwm_Right1,#0xFF
0C3D 22        2256            ret
0C3E           2257   L007016?:
0C3E           2258   ;        robot.c:440: else if (leftright == 4) {
0C3E BA04C0    2259            cjne    r2,#0x04,L007077?
0C41 BB00C0    2260            cjne    r3,#0x00,L007077?
0C44 8001      2261            sjmp    L007078?
0C46           2262   L007077?:
0C46 22        2263            ret
0C47           2264   L007078?:
0C47           2265   ;        robot.c:442: pwm_Left0 = 75;
0C47 75704B    2266            mov     _pwm_Left0,#0x4B
0C4A           2267   ;        robot.c:443: waitms(200);
0C4A 9000C8    2268            mov     dptr,#0x00C8
0C4D 120100    2269            lcall   _waitms
0C50           2270   ;        robot.c:446: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0C50 E538      2271            mov     a,_turncar_direction_1_95
0C52 6001      2272            jz      L007038?
0C54 75820B    2273            mov     dpl,#0x0B
0C57 120100    2274            lcall   _Volts_at_Pin
0C5A AA82      2275            mov     r2,dpl
0C5C AB83      2276            mov     r3,dph
0C5E ACF0      2277            mov     r4,b
0C60 FD        2278            mov     r5,a
0C61 8001      2279            sjmp    L007039?
0C63           2280   L007038?:
0C63 75820D    2281            mov     dpl,#0x0D
0C66 120100    2282            lcall   _Volts_at_Pin
0C69 AA82      2283            mov     r2,dpl
0C6B AB83      2284            mov     r3,dph
0C6D ACF0      2285            mov     r4,b
0C6F FD        2286            mov     r5,a
0C70           2287   L007039?:
0C70 8AE8      2288            mov     _turncar_v_1_95,r2
0C72 8BE9      2289            mov     (_turncar_v_1_95 + 1),r3
0C74 8CEA      2290            mov     (_turncar_v_1_95 + 2),r4
0C76 8DEB      2291            mov     (_turncar_v_1_95 + 3),r5
0C78           2292   ;        robot.c:448: while (v < 0.9) {
0C78           2293   L007010?:
0C78 7466      2294            mov     a,#0x66
0C7A C0E0      2295            push    acc
0C7C C0E0      2296            push    acc
0C7E C0E0      2297            push    acc
0C80 743F      2298            mov     a,#0x3F
0C82 C0E0      2299            push    acc
0C84 85E882    2300            mov     dpl,_turncar_v_1_95
0C87 85E983    2301            mov     dph,(_turncar_v_1_95 + 1)
0C8A 85EAF0    2302            mov     b,(_turncar_v_1_95 + 2)
0C8D E5EB      2303            mov     a,(_turncar_v_1_95 + 3)
0C8F 120100    2304            lcall   ___fslt
0C92 AA82      2305            mov     r2,dpl
0C94 E581      2306            mov     a,sp
0C96 24FC      2307            add     a,#0xfc
0C98 F581      2308            mov     sp,a
0C9A EA        2309            mov     a,r2
0C9B 6001      2310            jz      L007012?
0C9D           2311   ;        robot.c:450: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0C9D E538      2312            mov     a,_turncar_direction_1_95
0C9F 6001      2313            jz      L007040?
0CA1 75820B    2314            mov     dpl,#0x0B
0CA4 120100    2315            lcall   _Volts_at_Pin
0CA7 AA82      2316            mov     r2,dpl
0CA9 AB83      2317            mov     r3,dph
0CAB ACF0      2318            mov     r4,b
0CAD FD        2319            mov     r5,a
0CAE 8001      2320            sjmp    L007041?
0CB0           2321   L007040?:
0CB0 75820D    2322            mov     dpl,#0x0D
0CB3 120100    2323            lcall   _Volts_at_Pin
0CB6 AA82      2324            mov     r2,dpl
0CB8 AB83      2325            mov     r3,dph
0CBA ACF0      2326            mov     r4,b
0CBC FD        2327            mov     r5,a
0CBD           2328   L007041?:
0CBD 8AE8      2329            mov     _turncar_v_1_95,r2
0CBF 8BE9      2330            mov     (_turncar_v_1_95 + 1),r3
0CC1 8CEA      2331            mov     (_turncar_v_1_95 + 2),r4
0CC3 8DEB      2332            mov     (_turncar_v_1_95 + 3),r5
0CC5 8001      2333            sjmp    L007010?
0CC7           2334   L007012?:
0CC7           2335   ;        robot.c:454: pwm_Left0 = -1; 
0CC7 7570FF    2336            mov     _pwm_Left0,#0xFF
0CCA 22        2337            ret
0CCB           2338   ;------------------------------------------------------------
0CCB           2339   ;Allocation info for local variables in function 'uturn'
0CCB           2340   ;------------------------------------------------------------
0CCB           2341   ;vleft                     Allocated with name '_uturn_vleft_1_105'
0CCB           2342   ;vright                    Allocated with name '_uturn_vright_1_105'
0CCB           2343   ;------------------------------------------------------------
0CCB           2344   ;        robot.c:461: void uturn(void) {
0CCB           2345   ;        -----------------------------------------
0CCB           2346   ;         function uturn
0CCB           2347   ;        -----------------------------------------
0CCB           2348   _uturn:
0CCB           2349   ;        robot.c:465: vleft = Volts_at_Pin(TANK_FL);
0CCB 75820B    2350            mov     dpl,#0x0B
0CCE 120100    2351            lcall   _Volts_at_Pin
0CD1 858288    2352            mov     _uturn_vleft_1_105,dpl
0CD4 858389    2353            mov     (_uturn_vleft_1_105 + 1),dph
0CD7 85F08A    2354            mov     (_uturn_vleft_1_105 + 2),b
0CDA F58B      2355            mov     (_uturn_vleft_1_105 + 3),a
0CDC           2356   ;        robot.c:466: vright = Volts_at_Pin(TANK_FR);
0CDC 75820C    2357            mov     dpl,#0x0C
0CDF 120100    2358            lcall   _Volts_at_Pin
0CE2 8582D8    2359            mov     _uturn_vright_1_105,dpl
0CE5 8583D9    2360            mov     (_uturn_vright_1_105 + 1),dph
0CE8 85F0DA    2361            mov     (_uturn_vright_1_105 + 2),b
0CEB F5DB      2362            mov     (_uturn_vright_1_105 + 3),a
0CED           2363   ;        robot.c:469: pwm_Left0 = -1;
0CED 7570FF    2364            mov     _pwm_Left0,#0xFF
0CF0           2365   ;        robot.c:470: pwm_Left1 = 50;
0CF0 753032    2366            mov     _pwm_Left1,#0x32
0CF3           2367   ;        robot.c:471: pwm_Right0 = -1;
0CF3 75F0FF    2368            mov     _pwm_Right0,#0xFF
0CF6           2369   ;        robot.c:472: pwm_Right1 = 50;
0CF6 75B032    2370            mov     _pwm_Right1,#0x32
0CF9           2371   ;        robot.c:475: waitms(3000);
0CF9 900BB8    2372            mov     dptr,#0x0BB8
0CFC 120100    2373            lcall   _waitms
0CFF           2374   ;        robot.c:477: while ((Volts_at_Pin(TANK_FL)-Volts_at_Pin(TANK_FR))<-0.3 || (Volts_at_Pin(TANK_FL)-Volts_at_Pin(TANK_FR))>0.3);
0CFF           2375   L008002?:
0CFF 75820B    2376            mov     dpl,#0x0B
0D02 120100    2377            lcall   _Volts_at_Pin
0D05 AA82      2378            mov     r2,dpl
0D07 AB83      2379            mov     r3,dph
0D09 ACF0      2380            mov     r4,b
0D0B FD        2381            mov     r5,a
0D0C 75820C    2382            mov     dpl,#0x0C
0D0F C002      2383            push    ar2
0D11 C003      2384            push    ar3
0D13 C004      2385            push    ar4
0D15 C005      2386            push    ar5
0D17 120100    2387            lcall   _Volts_at_Pin
0D1A AE82      2388            mov     r6,dpl
0D1C AF83      2389            mov     r7,dph
0D1E A8F0      2390            mov     r0,b
0D20 F9        2391            mov     r1,a
0D21 D005      2392            pop     ar5
0D23 D004      2393            pop     ar4
0D25 D003      2394            pop     ar3
0D27 D002      2395            pop     ar2
0D29 C006      2396            push    ar6
0D2B C007      2397            push    ar7
0D2D C000      2398            push    ar0
0D2F C001      2399            push    ar1
0D31 8A82      2400            mov     dpl,r2
0D33 8B83      2401            mov     dph,r3
0D35 8CF0      2402            mov     b,r4
0D37 ED        2403            mov     a,r5
0D38 120100    2404            lcall   ___fssub
0D3B AA82      2405            mov     r2,dpl
0D3D AB83      2406            mov     r3,dph
0D3F ACF0      2407            mov     r4,b
0D41 FD        2408            mov     r5,a
0D42 E581      2409            mov     a,sp
0D44 24FC      2410            add     a,#0xfc
0D46 F581      2411            mov     sp,a
0D48 749A      2412            mov     a,#0x9A
0D4A C0E0      2413            push    acc
0D4C 7499      2414            mov     a,#0x99
0D4E C0E0      2415            push    acc
0D50 C0E0      2416            push    acc
0D52 74BE      2417            mov     a,#0xBE
0D54 C0E0      2418            push    acc
0D56 8A82      2419            mov     dpl,r2
0D58 8B83      2420            mov     dph,r3
0D5A 8CF0      2421            mov     b,r4
0D5C ED        2422            mov     a,r5
0D5D 120100    2423            lcall   ___fslt
0D60 AA82      2424            mov     r2,dpl
0D62 E581      2425            mov     a,sp
0D64 24FC      2426            add     a,#0xfc
0D66 F581      2427            mov     sp,a
0D68 EA        2428            mov     a,r2
0D69 7001      2429            jnz     L008002?
0D6B 75820B    2430            mov     dpl,#0x0B
0D6E 120100    2431            lcall   _Volts_at_Pin
0D71 AA82      2432            mov     r2,dpl
0D73 AB83      2433            mov     r3,dph
0D75 ACF0      2434            mov     r4,b
0D77 FD        2435            mov     r5,a
0D78 75820C    2436            mov     dpl,#0x0C
0D7B C002      2437            push    ar2
0D7D C003      2438            push    ar3
0D7F C004      2439            push    ar4
0D81 C005      2440            push    ar5
0D83 120100    2441            lcall   _Volts_at_Pin
0D86 AE82      2442            mov     r6,dpl
0D88 AF83      2443            mov     r7,dph
0D8A A8F0      2444            mov     r0,b
0D8C F9        2445            mov     r1,a
0D8D D005      2446            pop     ar5
0D8F D004      2447            pop     ar4
0D91 D003      2448            pop     ar3
0D93 D002      2449            pop     ar2
0D95 C006      2450            push    ar6
0D97 C007      2451            push    ar7
0D99 C000      2452            push    ar0
0D9B C001      2453            push    ar1
0D9D 8A82      2454            mov     dpl,r2
0D9F 8B83      2455            mov     dph,r3
0DA1 8CF0      2456            mov     b,r4
0DA3 ED        2457            mov     a,r5
0DA4 120100    2458            lcall   ___fssub
0DA7 AA82      2459            mov     r2,dpl
0DA9 AB83      2460            mov     r3,dph
0DAB ACF0      2461            mov     r4,b
0DAD FD        2462            mov     r5,a
0DAE E581      2463            mov     a,sp
0DB0 24FC      2464            add     a,#0xfc
0DB2 F581      2465            mov     sp,a
0DB4 749A      2466            mov     a,#0x9A
0DB6 C0E0      2467            push    acc
0DB8 7499      2468            mov     a,#0x99
0DBA C0E0      2469            push    acc
0DBC C0E0      2470            push    acc
0DBE 743E      2471            mov     a,#0x3E
0DC0 C0E0      2472            push    acc
0DC2 8A82      2473            mov     dpl,r2
0DC4 8B83      2474            mov     dph,r3
0DC6 8CF0      2475            mov     b,r4
0DC8 ED        2476            mov     a,r5
0DC9 120100    2477            lcall   ___fsgt
0DCC AA82      2478            mov     r2,dpl
0DCE E581      2479            mov     a,sp
0DD0 24FC      2480            add     a,#0xfc
0DD2 F581      2481            mov     sp,a
0DD4 EA        2482            mov     a,r2
0DD5 6001      2483            jz      L008010?
0DD7 020100    2484            ljmp    L008002?
0DDA           2485   L008010?:
0DDA 22        2486            ret
0DDB           2487            rseg R_CSEG
0DDB           2488   
0000           2489            rseg R_XINIT
0000           2490   
0000           2491            rseg R_CONST
0000           2492   __str_0:
0000 1B        2493            db 0x1B
0001 5B324A    2494            db '[2J'
0004 00        2495            db 0x00
0005           2496   __str_1:
0005 66726F6E  2497            db 'frontL %f frontR %f backL %f backR %f command %1d, state %1d'
     744C2025
     66206672
     6F6E7452
     20256620
     6261636B
     4C202566
     20626163
     6B522025
     6620636F
     6D6D616E
     64202531
     642C2073
     74617465
     20253164
0041 206C6566  2498            db ' left0 %3d left1 %3d right0 %3d right1 %3d'
     74302025
     3364206C
     65667431
     20253364
     20726967
     68743020
     25336420
     72696768
     74312025
     3364
006B 0D        2499            db 0x0D
006C 00        2500            db 0x00
006D           2501   __str_2:
006D 0A        2502            db 0x0A
006E 494E5445  2503            db 'INTERSECTION'
     52534543
     54494F4E
007A 0A        2504            db 0x0A
007B 00        2505            db 0x00
007C           2506   __str_3:
007C 5475726E  2507            db 'Turn left at the next intersection'
     206C6566
     74206174
     20746865
     206E6578
     7420696E
     74657273
     65637469
     6F6E
009E 0A        2508            db 0x0A
009F 00        2509            db 0x00
00A0           2510   __str_4:
00A0 0A        2511            db 0x0A
00A1 0D        2512            db 0x0D
00A2 20494E54  2513            db ' INTERSECTION'
     45525345
     4354494F
     4E
00AF 0A        2514            db 0x0A
00B0 00        2515            db 0x00
00B1           2516   __str_5:
00B1 5475726E  2517            db 'Turn right at the next intersection'
     20726967
     68742061
     74207468
     65206E65
     78742069
     6E746572
     73656374
     696F6E
00D4 0A        2518            db 0x0A
00D5 00        2519            db 0x00
00D6           2520   __str_6:
00D6 474F21    2521            db 'GO!'
00D9 0A        2522            db 0x0A
00DA 00        2523            db 0x00
00DB           2524   __str_7:
00DB 52657665  2525            db 'Reverse Reverse!'
     72736520
     52657665
     72736521
00EB 0A        2526            db 0x0A
00EC 00        2527            db 0x00
00ED           2528   __str_8:
00ED 48414C54  2529            db 'HALT peasants!'
     20706561
     73616E74
     7321
00FB 0A        2530            db 0x0A
00FC 00        2531            db 0x00
00FD           2532   __str_9:
00FD 55545552  2533            db 'UTURN'
     4E
0102 0A        2534            db 0x0A
0103 00        2535            db 0x00
0104           2536   __str_10:
0104 0A        2537            db 0x0A
0105 436F6D6D  2538            db 'Command received: 0b_0%c%c%c'
     616E6420
     72656365
     69766564
     3A203062
     5F302563
     25632563
0121 0A        2539            db 0x0A
0122 00        2540            db 0x00
0123           2541   
002E           2542            CSEG
002E           2543   
002E           2544   end
