0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Sun Apr 02 19:45:17 2017
0000              5   ;--------------------------------------------------------
                  5   $name robot
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _movecar_PARM_2
0000             28            public _Timer2_ISR
0000             29            public _main
0000             30            public _currentstate
0000             31            public _currentcmd
0000             32            public _direction
0000             33            public _pwm_Right1
0000             34            public _pwm_Right0
0000             35            public _pwm_Left1
0000             36            public _pwm_Left0
0000             37            public _pwm_both
0000             38            public _mode
0000             39            public _pwm_count
0000             40            public _forward_backward
0000             41            public _readData
0000             42            public _linetrack
0000             43            public _stopcar
0000             44            public _turncar
0000             45            public _uturn
0000             46            public _movecar
0000             47   ;--------------------------------------------------------
0000             48   ; Special Function Registers
0000             49   ;--------------------------------------------------------
0000             50   _P0             DATA 0x80
0000             51   _SP             DATA 0x81
0000             52   _DPL            DATA 0x82
0000             53   _DPH            DATA 0x83
0000             54   _EMI0TC         DATA 0x84
0000             55   _EMI0CF         DATA 0x85
0000             56   _OSCLCN         DATA 0x86
0000             57   _PCON           DATA 0x87
0000             58   _TCON           DATA 0x88
0000             59   _TMOD           DATA 0x89
0000             60   _TL0            DATA 0x8a
0000             61   _TL1            DATA 0x8b
0000             62   _TH0            DATA 0x8c
0000             63   _TH1            DATA 0x8d
0000             64   _CKCON          DATA 0x8e
0000             65   _PSCTL          DATA 0x8f
0000             66   _P1             DATA 0x90
0000             67   _TMR3CN         DATA 0x91
0000             68   _TMR4CN         DATA 0x91
0000             69   _TMR3RLL        DATA 0x92
0000             70   _TMR4RLL        DATA 0x92
0000             71   _TMR3RLH        DATA 0x93
0000             72   _TMR4RLH        DATA 0x93
0000             73   _TMR3L          DATA 0x94
0000             74   _TMR4L          DATA 0x94
0000             75   _TMR3H          DATA 0x95
0000             76   _TMR4H          DATA 0x95
0000             77   _USB0ADR        DATA 0x96
0000             78   _USB0DAT        DATA 0x97
0000             79   _SCON           DATA 0x98
0000             80   _SCON0          DATA 0x98
0000             81   _SBUF           DATA 0x99
0000             82   _SBUF0          DATA 0x99
0000             83   _CPT1CN         DATA 0x9a
0000             84   _CPT0CN         DATA 0x9b
0000             85   _CPT1MD         DATA 0x9c
0000             86   _CPT0MD         DATA 0x9d
0000             87   _CPT1MX         DATA 0x9e
0000             88   _CPT0MX         DATA 0x9f
0000             89   _P2             DATA 0xa0
0000             90   _SPI0CFG        DATA 0xa1
0000             91   _SPI0CKR        DATA 0xa2
0000             92   _SPI0DAT        DATA 0xa3
0000             93   _P0MDOUT        DATA 0xa4
0000             94   _P1MDOUT        DATA 0xa5
0000             95   _P2MDOUT        DATA 0xa6
0000             96   _P3MDOUT        DATA 0xa7
0000             97   _IE             DATA 0xa8
0000             98   _CLKSEL         DATA 0xa9
0000             99   _EMI0CN         DATA 0xaa
0000            100   __XPAGE         DATA 0xaa
0000            101   _SBCON1         DATA 0xac
0000            102   _P4MDOUT        DATA 0xae
0000            103   _PFE0CN         DATA 0xaf
0000            104   _P3             DATA 0xb0
0000            105   _OSCXCN         DATA 0xb1
0000            106   _OSCICN         DATA 0xb2
0000            107   _OSCICL         DATA 0xb3
0000            108   _SBRLL1         DATA 0xb4
0000            109   _SBRLH1         DATA 0xb5
0000            110   _FLSCL          DATA 0xb6
0000            111   _FLKEY          DATA 0xb7
0000            112   _IP             DATA 0xb8
0000            113   _CLKMUL         DATA 0xb9
0000            114   _SMBTC          DATA 0xb9
0000            115   _AMX0N          DATA 0xba
0000            116   _AMX0P          DATA 0xbb
0000            117   _ADC0CF         DATA 0xbc
0000            118   _ADC0L          DATA 0xbd
0000            119   _ADC0H          DATA 0xbe
0000            120   _SFRPAGE        DATA 0xbf
0000            121   _SMB0CN         DATA 0xc0
0000            122   _SMB1CN         DATA 0xc0
0000            123   _SMB0CF         DATA 0xc1
0000            124   _SMB1CF         DATA 0xc1
0000            125   _SMB0DAT        DATA 0xc2
0000            126   _SMB1DAT        DATA 0xc2
0000            127   _ADC0GTL        DATA 0xc3
0000            128   _ADC0GTH        DATA 0xc4
0000            129   _ADC0LTL        DATA 0xc5
0000            130   _ADC0LTH        DATA 0xc6
0000            131   _P4             DATA 0xc7
0000            132   _TMR2CN         DATA 0xc8
0000            133   _TMR5CN         DATA 0xc8
0000            134   _REG01CN        DATA 0xc9
0000            135   _TMR2RLL        DATA 0xca
0000            136   _TMR5RLL        DATA 0xca
0000            137   _TMR2RLH        DATA 0xcb
0000            138   _TMR5RLH        DATA 0xcb
0000            139   _TMR2L          DATA 0xcc
0000            140   _TMR5L          DATA 0xcc
0000            141   _TMR2H          DATA 0xcd
0000            142   _TMR5H          DATA 0xcd
0000            143   _SMB0ADM        DATA 0xce
0000            144   _SMB1ADM        DATA 0xce
0000            145   _SMB0ADR        DATA 0xcf
0000            146   _SMB1ADR        DATA 0xcf
0000            147   _PSW            DATA 0xd0
0000            148   _REF0CN         DATA 0xd1
0000            149   _SCON1          DATA 0xd2
0000            150   _SBUF1          DATA 0xd3
0000            151   _P0SKIP         DATA 0xd4
0000            152   _P1SKIP         DATA 0xd5
0000            153   _P2SKIP         DATA 0xd6
0000            154   _USB0XCN        DATA 0xd7
0000            155   _PCA0CN         DATA 0xd8
0000            156   _PCA0MD         DATA 0xd9
0000            157   _PCA0CPM0       DATA 0xda
0000            158   _PCA0CPM1       DATA 0xdb
0000            159   _PCA0CPM2       DATA 0xdc
0000            160   _PCA0CPM3       DATA 0xdd
0000            161   _PCA0CPM4       DATA 0xde
0000            162   _P3SKIP         DATA 0xdf
0000            163   _ACC            DATA 0xe0
0000            164   _XBR0           DATA 0xe1
0000            165   _XBR1           DATA 0xe2
0000            166   _XBR2           DATA 0xe3
0000            167   _IT01CF         DATA 0xe4
0000            168   _CKCON1         DATA 0xe4
0000            169   _SMOD1          DATA 0xe5
0000            170   _EIE1           DATA 0xe6
0000            171   _EIE2           DATA 0xe7
0000            172   _ADC0CN         DATA 0xe8
0000            173   _PCA0CPL1       DATA 0xe9
0000            174   _PCA0CPH1       DATA 0xea
0000            175   _PCA0CPL2       DATA 0xeb
0000            176   _PCA0CPH2       DATA 0xec
0000            177   _PCA0CPL3       DATA 0xed
0000            178   _PCA0CPH3       DATA 0xee
0000            179   _RSTSRC         DATA 0xef
0000            180   _B              DATA 0xf0
0000            181   _P0MDIN         DATA 0xf1
0000            182   _P1MDIN         DATA 0xf2
0000            183   _P2MDIN         DATA 0xf3
0000            184   _P3MDIN         DATA 0xf4
0000            185   _P4MDIN         DATA 0xf5
0000            186   _EIP1           DATA 0xf6
0000            187   _EIP2           DATA 0xf7
0000            188   _SPI0CN         DATA 0xf8
0000            189   _PCA0L          DATA 0xf9
0000            190   _PCA0H          DATA 0xfa
0000            191   _PCA0CPL0       DATA 0xfb
0000            192   _PCA0CPH0       DATA 0xfc
0000            193   _PCA0CPL4       DATA 0xfd
0000            194   _PCA0CPH4       DATA 0xfe
0000            195   _VDM0CN         DATA 0xff
0000            196   _DPTR           DATA 0x8382
0000            197   _TMR2RL         DATA 0xcbca
0000            198   _TMR3RL         DATA 0x9392
0000            199   _TMR4RL         DATA 0x9392
0000            200   _TMR5RL         DATA 0xcbca
0000            201   _TMR2           DATA 0xcdcc
0000            202   _TMR3           DATA 0x9594
0000            203   _TMR4           DATA 0x9594
0000            204   _TMR5           DATA 0xcdcc
0000            205   _SBRL1          DATA 0xb5b4
0000            206   _ADC0           DATA 0xbebd
0000            207   _ADC0GT         DATA 0xc4c3
0000            208   _ADC0LT         DATA 0xc6c5
0000            209   _PCA0           DATA 0xfaf9
0000            210   _PCA0CP1        DATA 0xeae9
0000            211   _PCA0CP2        DATA 0xeceb
0000            212   _PCA0CP3        DATA 0xeeed
0000            213   _PCA0CP0        DATA 0xfcfb
0000            214   _PCA0CP4        DATA 0xfefd
0000            215   ;--------------------------------------------------------
0000            216   ; special function bits
0000            217   ;--------------------------------------------------------
0000            218   _P0_0           BIT 0x80
0000            219   _P0_1           BIT 0x81
0000            220   _P0_2           BIT 0x82
0000            221   _P0_3           BIT 0x83
0000            222   _P0_4           BIT 0x84
0000            223   _P0_5           BIT 0x85
0000            224   _P0_6           BIT 0x86
0000            225   _P0_7           BIT 0x87
0000            226   _TF1            BIT 0x8f
0000            227   _TR1            BIT 0x8e
0000            228   _TF0            BIT 0x8d
0000            229   _TR0            BIT 0x8c
0000            230   _IE1            BIT 0x8b
0000            231   _IT1            BIT 0x8a
0000            232   _IE0            BIT 0x89
0000            233   _IT0            BIT 0x88
0000            234   _P1_0           BIT 0x90
0000            235   _P1_1           BIT 0x91
0000            236   _P1_2           BIT 0x92
0000            237   _P1_3           BIT 0x93
0000            238   _P1_4           BIT 0x94
0000            239   _P1_5           BIT 0x95
0000            240   _P1_6           BIT 0x96
0000            241   _P1_7           BIT 0x97
0000            242   _S0MODE         BIT 0x9f
0000            243   _SCON0_6        BIT 0x9e
0000            244   _MCE0           BIT 0x9d
0000            245   _REN0           BIT 0x9c
0000            246   _TB80           BIT 0x9b
0000            247   _RB80           BIT 0x9a
0000            248   _TI0            BIT 0x99
0000            249   _RI0            BIT 0x98
0000            250   _SCON_6         BIT 0x9e
0000            251   _MCE            BIT 0x9d
0000            252   _REN            BIT 0x9c
0000            253   _TB8            BIT 0x9b
0000            254   _RB8            BIT 0x9a
0000            255   _TI             BIT 0x99
0000            256   _RI             BIT 0x98
0000            257   _P2_0           BIT 0xa0
0000            258   _P2_1           BIT 0xa1
0000            259   _P2_2           BIT 0xa2
0000            260   _P2_3           BIT 0xa3
0000            261   _P2_4           BIT 0xa4
0000            262   _P2_5           BIT 0xa5
0000            263   _P2_6           BIT 0xa6
0000            264   _P2_7           BIT 0xa7
0000            265   _EA             BIT 0xaf
0000            266   _ESPI0          BIT 0xae
0000            267   _ET2            BIT 0xad
0000            268   _ES0            BIT 0xac
0000            269   _ET1            BIT 0xab
0000            270   _EX1            BIT 0xaa
0000            271   _ET0            BIT 0xa9
0000            272   _EX0            BIT 0xa8
0000            273   _P3_0           BIT 0xb0
0000            274   _P3_1           BIT 0xb1
0000            275   _P3_2           BIT 0xb2
0000            276   _P3_3           BIT 0xb3
0000            277   _P3_4           BIT 0xb4
0000            278   _P3_5           BIT 0xb5
0000            279   _P3_6           BIT 0xb6
0000            280   _P3_7           BIT 0xb7
0000            281   _IP_7           BIT 0xbf
0000            282   _PSPI0          BIT 0xbe
0000            283   _PT2            BIT 0xbd
0000            284   _PS0            BIT 0xbc
0000            285   _PT1            BIT 0xbb
0000            286   _PX1            BIT 0xba
0000            287   _PT0            BIT 0xb9
0000            288   _PX0            BIT 0xb8
0000            289   _MASTER0        BIT 0xc7
0000            290   _TXMODE0        BIT 0xc6
0000            291   _STA0           BIT 0xc5
0000            292   _STO0           BIT 0xc4
0000            293   _ACKRQ0         BIT 0xc3
0000            294   _ARBLOST0       BIT 0xc2
0000            295   _ACK0           BIT 0xc1
0000            296   _SI0            BIT 0xc0
0000            297   _MASTER1        BIT 0xc7
0000            298   _TXMODE1        BIT 0xc6
0000            299   _STA1           BIT 0xc5
0000            300   _STO1           BIT 0xc4
0000            301   _ACKRQ1         BIT 0xc3
0000            302   _ARBLOST1       BIT 0xc2
0000            303   _ACK1           BIT 0xc1
0000            304   _SI1            BIT 0xc0
0000            305   _TF2            BIT 0xcf
0000            306   _TF2H           BIT 0xcf
0000            307   _TF2L           BIT 0xce
0000            308   _TF2LEN         BIT 0xcd
0000            309   _TF2CEN         BIT 0xcc
0000            310   _T2SPLIT        BIT 0xcb
0000            311   _TR2            BIT 0xca
0000            312   _T2CSS          BIT 0xc9
0000            313   _T2XCLK         BIT 0xc8
0000            314   _TF5H           BIT 0xcf
0000            315   _TF5L           BIT 0xce
0000            316   _TF5LEN         BIT 0xcd
0000            317   _TMR5CN_4       BIT 0xcc
0000            318   _T5SPLIT        BIT 0xcb
0000            319   _TR5            BIT 0xca
0000            320   _TMR5CN_1       BIT 0xc9
0000            321   _T5XCLK         BIT 0xc8
0000            322   _CY             BIT 0xd7
0000            323   _AC             BIT 0xd6
0000            324   _F0             BIT 0xd5
0000            325   _RS1            BIT 0xd4
0000            326   _RS0            BIT 0xd3
0000            327   _OV             BIT 0xd2
0000            328   _F1             BIT 0xd1
0000            329   _PARITY         BIT 0xd0
0000            330   _CF             BIT 0xdf
0000            331   _CR             BIT 0xde
0000            332   _PCA0CN_5       BIT 0xde
0000            333   _CCF4           BIT 0xdc
0000            334   _CCF3           BIT 0xdb
0000            335   _CCF2           BIT 0xda
0000            336   _CCF1           BIT 0xd9
0000            337   _CCF0           BIT 0xd8
0000            338   _ACC_7          BIT 0xe7
0000            339   _ACC_6          BIT 0xe6
0000            340   _ACC_5          BIT 0xe5
0000            341   _ACC_4          BIT 0xe4
0000            342   _ACC_3          BIT 0xe3
0000            343   _ACC_2          BIT 0xe2
0000            344   _ACC_1          BIT 0xe1
0000            345   _ACC_0          BIT 0xe0
0000            346   _AD0EN          BIT 0xef
0000            347   _AD0TM          BIT 0xee
0000            348   _AD0INT         BIT 0xed
0000            349   _AD0BUSY        BIT 0xec
0000            350   _AD0WINT        BIT 0xeb
0000            351   _AD0CM2         BIT 0xea
0000            352   _AD0CM1         BIT 0xe9
0000            353   _AD0CM0         BIT 0xe8
0000            354   _B_7            BIT 0xf7
0000            355   _B_6            BIT 0xf6
0000            356   _B_5            BIT 0xf5
0000            357   _B_4            BIT 0xf4
0000            358   _B_3            BIT 0xf3
0000            359   _B_2            BIT 0xf2
0000            360   _B_1            BIT 0xf1
0000            361   _B_0            BIT 0xf0
0000            362   _SPIF           BIT 0xff
0000            363   _WCOL           BIT 0xfe
0000            364   _MODF           BIT 0xfd
0000            365   _RXOVRN         BIT 0xfc
0000            366   _NSSMD1         BIT 0xfb
0000            367   _NSSMD0         BIT 0xfa
0000            368   _TXBMT          BIT 0xf9
0000            369   _SPIEN          BIT 0xf8
0000            370   ;--------------------------------------------------------
0000            371   ; overlayable register banks
0000            372   ;--------------------------------------------------------
0000            373            rbank0 segment data overlay
0000            374   ;--------------------------------------------------------
0000            375   ; internal ram data
0000            376   ;--------------------------------------------------------
0000            377            rseg R_DSEG
0000            378   _pwm_count:
0000            379            ds 1
0001            380   _mode:
0001            381            ds 1
0002            382   _pwm_both:
0002            383            ds 1
0003            384   _pwm_Left0:
0003            385            ds 1
0004            386   _pwm_Left1:
0004            387            ds 1
0005            388   _pwm_Right0:
0005            389            ds 1
0006            390   _pwm_Right1:
0006            391            ds 1
0007            392   _direction:
0007            393            ds 1
0008            394   _currentcmd:
0008            395            ds 1
0009            396   _currentstate:
0009            397            ds 1
000A            398   _main_leftv_1_57:
000A            399            ds 4
000E            400   _main_rightv_1_57:
000E            401            ds 4
0012            402   _linetrack_forwardbackward_1_85:
0012            403            ds 2
0014            404   _linetrack_vleft_1_86:
0014            405            ds 4
0018            406   _linetrack_vright_1_86:
0018            407            ds 4
001C            408   _linetrack_sloc0_1_0:
001C            409            ds 4
0020            410   _linetrack_sloc1_1_0:
0020            411            ds 2
0022            412   _turncar_vleft_1_91:
0022            413            ds 4
0026            414   _turncar_vright_1_91:
0026            415            ds 4
002A            416   _uturn_vleft_1_97:
002A            417            ds 4
002E            418   _uturn_vright_1_97:
002E            419            ds 4
0032            420   ;--------------------------------------------------------
0032            421   ; overlayable items in internal ram 
0032            422   ;--------------------------------------------------------
0000            423            rseg    R_OSEG
0000            424            rseg    R_OSEG
0000            425   _movecar_PARM_2:
0000            426            ds 2
0002            427   ;--------------------------------------------------------
0002            428   ; indirectly addressable internal ram data
0002            429   ;--------------------------------------------------------
0000            430            rseg R_ISEG
0000            431   ;--------------------------------------------------------
0000            432   ; absolute internal ram data
0000            433   ;--------------------------------------------------------
0000            434            DSEG
0000            435   ;--------------------------------------------------------
0000            436   ; bit data
0000            437   ;--------------------------------------------------------
0000            438            rseg R_BSEG
0000            439   _Timer2_ISR_sloc0_1_0:
0000            440            DBIT    1
0001            441   ;--------------------------------------------------------
0001            442   ; paged external ram data
0001            443   ;--------------------------------------------------------
0000            444            rseg R_PSEG
0000            445   ;--------------------------------------------------------
0000            446   ; external ram data
0000            447   ;--------------------------------------------------------
0000            448            rseg R_XSEG
0000            449   ;--------------------------------------------------------
0000            450   ; absolute external ram data
0000            451   ;--------------------------------------------------------
0000            452            XSEG
0000            453   ;--------------------------------------------------------
0000            454   ; external initialized ram data
0000            455   ;--------------------------------------------------------
0000            456            rseg R_IXSEG
0000            457            rseg R_HOME
0000            458            rseg R_GSINIT
0000            459            rseg R_CSEG
0000            460   ;--------------------------------------------------------
0000            461   ; Reset entry point and interrupt vectors
0000            462   ;--------------------------------------------------------
0000            463            CSEG at 0x0000
0000 020100     464            ljmp    _crt0
002B            465            CSEG at 0x002b
002B 020100     466            ljmp    _Timer2_ISR
002E            467   ;--------------------------------------------------------
002E            468   ; global & static initialisations
002E            469   ;--------------------------------------------------------
0000            470            rseg R_HOME
0000            471            rseg R_GSINIT
0000            472            rseg R_GSINIT
0000            473   ;--------------------------------------------------------
0000            474   ; data variables initialization
0000            475   ;--------------------------------------------------------
0000            476            rseg R_DINIT
0000            477   ;        robot.c:10: volatile  char pwm_count=0;
0000 755800     478            mov     _pwm_count,#0x00
0003            479   ;        robot.c:11: volatile  char mode = 0;
0003 751800     480            mov     _mode,#0x00
0006            481   ;        robot.c:12: volatile  char pwm_both =0;
0006 75D800     482            mov     _pwm_both,#0x00
0009            483   ;        robot.c:13: volatile  char pwm_Left0 = 0; //p1.5
0009 759800     484            mov     _pwm_Left0,#0x00
000C            485   ;        robot.c:14: volatile  char pwm_Left1 = 0; //p1.6
000C 755800     486            mov     _pwm_Left1,#0x00
000F            487   ;        robot.c:15: volatile  char pwm_Right0 = 0; //p2.0
000F 751800     488            mov     _pwm_Right0,#0x00
0012            489   ;        robot.c:16: volatile  char pwm_Right1 = 0; //p2.1
0012 75D800     490            mov     _pwm_Right1,#0x00
0015            491   ;        robot.c:17: volatile  char direction = 0; // 1 for back 0 for forward
0015 759800     492            mov     _direction,#0x00
0018            493   ;        robot.c:19: volatile  char currentcmd = 0;
0018 755800     494            mov     _currentcmd,#0x00
001B            495   ;        robot.c:20: volatile  char currentstate = 1;
001B 751801     496            mov     _currentstate,#0x01
001E            497            ; The linker places a 'ret' at the end of segment R_DINIT.
001E            498   ;--------------------------------------------------------
001E            499   ; code
001E            500   ;--------------------------------------------------------
0000            501            rseg R_CSEG
0000            502   ;------------------------------------------------------------
0000            503   ;Allocation info for local variables in function 'main'
0000            504   ;------------------------------------------------------------
0000            505   ;leftv                     Allocated with name '_main_leftv_1_57'
0000            506   ;rightv                    Allocated with name '_main_rightv_1_57'
0000            507   ;------------------------------------------------------------
0000            508   ;        robot.c:22: void main(void) {
0000            509   ;        -----------------------------------------
0000            510   ;         function main
0000            511   ;        -----------------------------------------
0000            512   _main:
0000            513            using   0
0000            514   ;        robot.c:24: volatile float leftv = 0;
0000 75F800     515            mov     _main_leftv_1_57,#0x00
0003 75F900     516            mov     (_main_leftv_1_57 + 1),#0x00
0006 75FA00     517            mov     (_main_leftv_1_57 + 2),#0x00
0009 75FB00     518            mov     (_main_leftv_1_57 + 3),#0x00
000C            519   ;        robot.c:25: volatile float rightv = 0;
000C 754800     520            mov     _main_rightv_1_57,#0x00
000F 754900     521            mov     (_main_rightv_1_57 + 1),#0x00
0012 754A00     522            mov     (_main_rightv_1_57 + 2),#0x00
0015 754B00     523            mov     (_main_rightv_1_57 + 3),#0x00
0018            524   ;        robot.c:27: MOTOR_LEFT0 =0;
0018 C295       525            clr     _P1_5
001A            526   ;        robot.c:28: MOTOR_LEFT1 =0;
001A C296       527            clr     _P1_6
001C            528   ;        robot.c:29: MOTOR_RIGHT0 =0;
001C C2A0       529            clr     _P2_0
001E            530   ;        robot.c:30: MOTOR_RIGHT1 =0;
001E C2A1       531            clr     _P2_1
0020            532   ;        robot.c:33: currentstate = 1;           //1-FORWARD, 2-BACKWARDS, 3-STOPPED, 4-DEBUGGER
0020 751801     533            mov     _currentstate,#0x01
0023            534   ;        robot.c:34: currentcmd = 0;             //0-NO COMMAND, 1-TURN LEFT, 2-TURN RIGHT, 3-FORWARDS, 4-BACKWARDS, 5-STOP, 6-UTURN
0023 755800     535            mov     _currentcmd,#0x00
0026            536   ;        robot.c:37: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0026 74E8       537            mov     a,#__str_0
0028 C0E0       538            push    acc
002A 7499       539            mov     a,#(__str_0 >> 8)
002C C0E0       540            push    acc
002E 7480       541            mov     a,#0x80
0030 C0E0       542            push    acc
0032 120100     543            lcall   _printf
0035 1581       544            dec     sp
0037 1581       545            dec     sp
0039 1581       546            dec     sp
003B            547   ;        robot.c:40: InitPinADC(2, 3); // Configure P2.3 as analog input (tank1)
003B 750003     548            mov     _InitPinADC_PARM_2,#0x03
003E 758202     549            mov     dpl,#0x02
0041 120100     550            lcall   _InitPinADC
0044            551   ;        robot.c:41: InitPinADC(2, 4); // Configure P2.4 as analog input         (tank1)
0044 750004     552            mov     _InitPinADC_PARM_2,#0x04
0047 758202     553            mov     dpl,#0x02
004A 120100     554            lcall   _InitPinADC
004D            555   ;        robot.c:42: InitPinADC(2, 5); // Configure P2.5 as analog input (tank2)
004D 750005     556            mov     _InitPinADC_PARM_2,#0x05
0050 758202     557            mov     dpl,#0x02
0053 120100     558            lcall   _InitPinADC
0056            559   ;        robot.c:43: InitPinADC(2, 6); // Configure P2.6 as analog input (tank2)
0056 750006     560            mov     _InitPinADC_PARM_2,#0x06
0059 758202     561            mov     dpl,#0x02
005C 120100     562            lcall   _InitPinADC
005F            563   ;        robot.c:49: InitADC();
005F 120100     564            lcall   _InitADC
0062            565   ;        robot.c:53: while(1)
0062            566   L002034?:
0062            567   ;        robot.c:56: readData(); 
0062 120100     568            lcall   _readData
0065            569   ;        robot.c:61: switch (currentstate) {
0065 AA18       570            mov     r2,_currentstate
0067 BA0138     571            cjne    r2,#0x01,L002055?
006A 8001       572            sjmp    L002001?
006C            573   L002055?:
006C BA02B8     574            cjne    r2,#0x02,L002056?
006F 8001       575            sjmp    L002002?
0071            576   L002056?:
0071            577   ;        robot.c:62: case 1:
0071 BA0338     578            cjne    r2,#0x03,L002004?
0074 8001       579            sjmp    L002003?
0076            580   L002001?:
0076            581   ;        robot.c:63: linetrack(0);       //forwards
0076 900000     582            mov     dptr,#0x0000
0079 120100     583            lcall   _linetrack
007C            584   ;        robot.c:64: leftv = Volts_at_Pin(LQFP32_MUX_P2_3);
007C 75820B     585            mov     dpl,#0x0B
007F 120100     586            lcall   _Volts_at_Pin
0082 8582F8     587            mov     _main_leftv_1_57,dpl
0085 8583F9     588            mov     (_main_leftv_1_57 + 1),dph
0088 85F0FA     589            mov     (_main_leftv_1_57 + 2),b
008B F5FB       590            mov     (_main_leftv_1_57 + 3),a
008D            591   ;        robot.c:65: rightv = Volts_at_Pin(LQFP32_MUX_P2_4);
008D 75820C     592            mov     dpl,#0x0C
0090 120100     593            lcall   _Volts_at_Pin
0093 858248     594            mov     _main_rightv_1_57,dpl
0096 858349     595            mov     (_main_rightv_1_57 + 1),dph
0099 85F04A     596            mov     (_main_rightv_1_57 + 2),b
009C F54B       597            mov     (_main_rightv_1_57 + 3),a
009E            598   ;        robot.c:66: break;
009E            599   ;        robot.c:67: case 2:
009E 8001       600            sjmp    L002004?
00A0            601   L002002?:
00A0            602   ;        robot.c:68: linetrack(1);       //backwards
00A0 900001     603            mov     dptr,#0x0001
00A3 120100     604            lcall   _linetrack
00A6            605   ;        robot.c:69: leftv = Volts_at_Pin(LQFP32_MUX_P2_5);
00A6 75820D     606            mov     dpl,#0x0D
00A9 120100     607            lcall   _Volts_at_Pin
00AC 8582F8     608            mov     _main_leftv_1_57,dpl
00AF 8583F9     609            mov     (_main_leftv_1_57 + 1),dph
00B2 85F0FA     610            mov     (_main_leftv_1_57 + 2),b
00B5 F5FB       611            mov     (_main_leftv_1_57 + 3),a
00B7            612   ;        robot.c:70: rightv = Volts_at_Pin(LQFP32_MUX_P2_6);
00B7 75820E     613            mov     dpl,#0x0E
00BA 120100     614            lcall   _Volts_at_Pin
00BD 858248     615            mov     _main_rightv_1_57,dpl
00C0 858349     616            mov     (_main_rightv_1_57 + 1),dph
00C3 85F04A     617            mov     (_main_rightv_1_57 + 2),b
00C6 F54B       618            mov     (_main_rightv_1_57 + 3),a
00C8            619   ;        robot.c:71: break;
00C8            620   ;        robot.c:72: case 3:
00C8 8001       621            sjmp    L002004?
00CA            622   L002003?:
00CA            623   ;        robot.c:73: stopcar();          //stop car
00CA 120100     624            lcall   _stopcar
00CD            625   ;        robot.c:75: }
00CD            626   L002004?:
00CD            627   ;        robot.c:78: switch (currentcmd) {
00CD E558       628            mov     a,_currentcmd
00CF FA         629            mov     r2,a
00D0 30E778     630            jnb     acc.7,L002058?
00D3 020100     631            ljmp    L002031?
00D6            632   L002058?:
00D6 C3         633            clr     c
00D7 7486       634            mov     a,#(0x06 ^ 0x80)
00D9 8AF0       635            mov     b,r2
00DB 63F080     636            xrl     b,#0x80
00DE 95F0       637            subb    a,b
00E0 5001       638            jnc     L002059?
00E2 020100     639            ljmp    L002031?
00E5            640   L002059?:
00E5 EA         641            mov     a,r2
00E6 2A         642            add     a,r2
00E7 2A         643            add     a,r2
00E8 909F38     644            mov     dptr,#L002060?
00EB 73         645            jmp     @a+dptr
00EC            646   L002060?:
00EC 020100     647            ljmp    L002005?
00EF 020100     648            ljmp    L002019?
00F2 020100     649            ljmp    L002023?
00F5 020100     650            ljmp    L002027?
00F8 020100     651            ljmp    L002028?
00FB 020100     652            ljmp    L002029?
00FE 020100     653            ljmp    L002030?
0101            654   ;        robot.c:80: case 0 :
0101            655   L002005?:
0101            656   ;        robot.c:82: if (leftv > 1 && rightv >1) {
0101 E4         657            clr     a
0102 C0E0       658            push    acc
0104 C0E0       659            push    acc
0106 7480       660            mov     a,#0x80
0108 C0E0       661            push    acc
010A 743F       662            mov     a,#0x3F
010C C0E0       663            push    acc
010E 85F882     664            mov     dpl,_main_leftv_1_57
0111 85F983     665            mov     dph,(_main_leftv_1_57 + 1)
0114 85FAF0     666            mov     b,(_main_leftv_1_57 + 2)
0117 E5FB       667            mov     a,(_main_leftv_1_57 + 3)
0119 120100     668            lcall   ___fsgt
011C AA82       669            mov     r2,dpl
011E E581       670            mov     a,sp
0120 24FC       671            add     a,#0xfc
0122 F581       672            mov     sp,a
0124 EA         673            mov     a,r2
0125 6001       674            jz      L002007?
0127 E4         675            clr     a
0128 C0E0       676            push    acc
012A C0E0       677            push    acc
012C 7480       678            mov     a,#0x80
012E C0E0       679            push    acc
0130 743F       680            mov     a,#0x3F
0132 C0E0       681            push    acc
0134 854882     682            mov     dpl,_main_rightv_1_57
0137 854983     683            mov     dph,(_main_rightv_1_57 + 1)
013A 854AF0     684            mov     b,(_main_rightv_1_57 + 2)
013D E54B       685            mov     a,(_main_rightv_1_57 + 3)
013F 120100     686            lcall   ___fsgt
0142 AA82       687            mov     r2,dpl
0144 E581       688            mov     a,sp
0146 24FC       689            add     a,#0xfc
0148 F581       690            mov     sp,a
014A EA         691            mov     a,r2
014B 6001       692            jz      L002007?
014D            693   ;        robot.c:83: movecar(currentstate, 35);
014D AA18       694            mov     r2,_currentstate
014F E518       695            mov     a,_currentstate
0151 33         696            rlc     a
0152 95E0       697            subb    a,acc
0154 FB         698            mov     r3,a
0155 755823     699            mov     _movecar_PARM_2,#0x23
0158 E4         700            clr     a
0159 F559       701            mov     (_movecar_PARM_2 + 1),a
015B 8A82       702            mov     dpl,r2
015D 8B83       703            mov     dph,r3
015F 120100     704            lcall   _movecar
0162            705   ;        robot.c:84: waitms(1500);
0162 9005DC     706            mov     dptr,#0x05DC
0165 120100     707            lcall   _waitms
0168            708   L002007?:
0168            709   ;        robot.c:87: if (currentstate == 1) {
0168 7401       710            mov     a,#0x01
016A B51800     711            cjne    a,_currentstate,L002013?
016D            712   ;        robot.c:88: if (Volts_at_Pin(LQFP32_MUX_P2_3) > 1 && Volts_at_Pin(LQFP32_MUX_P2_4) > 1) {
016D 75820B     713            mov     dpl,#0x0B
0170 120100     714            lcall   _Volts_at_Pin
0173 AA82       715            mov     r2,dpl
0175 AB83       716            mov     r3,dph
0177 ACF0       717            mov     r4,b
0179 FD         718            mov     r5,a
017A E4         719            clr     a
017B C0E0       720            push    acc
017D C0E0       721            push    acc
017F 7480       722            mov     a,#0x80
0181 C0E0       723            push    acc
0183 743F       724            mov     a,#0x3F
0185 C0E0       725            push    acc
0187 8A82       726            mov     dpl,r2
0189 8B83       727            mov     dph,r3
018B 8CF0       728            mov     b,r4
018D ED         729            mov     a,r5
018E 120100     730            lcall   ___fsgt
0191 AA82       731            mov     r2,dpl
0193 E581       732            mov     a,sp
0195 24FC       733            add     a,#0xfc
0197 F581       734            mov     sp,a
0199 EA         735            mov     a,r2
019A 6001       736            jz      L002013?
019C 75820C     737            mov     dpl,#0x0C
019F 120100     738            lcall   _Volts_at_Pin
01A2 AA82       739            mov     r2,dpl
01A4 AB83       740            mov     r3,dph
01A6 ACF0       741            mov     r4,b
01A8 FD         742            mov     r5,a
01A9 E4         743            clr     a
01AA C0E0       744            push    acc
01AC C0E0       745            push    acc
01AE 7480       746            mov     a,#0x80
01B0 C0E0       747            push    acc
01B2 743F       748            mov     a,#0x3F
01B4 C0E0       749            push    acc
01B6 8A82       750            mov     dpl,r2
01B8 8B83       751            mov     dph,r3
01BA 8CF0       752            mov     b,r4
01BC ED         753            mov     a,r5
01BD 120100     754            lcall   ___fsgt
01C0 AA82       755            mov     r2,dpl
01C2 E581       756            mov     a,sp
01C4 24FC       757            add     a,#0xfc
01C6 F581       758            mov     sp,a
01C8 EA         759            mov     a,r2
01C9 6001       760            jz      L002013?
01CB            761   ;        robot.c:91: pwm_Left1 = 35;
01CB 755823     762            mov     _pwm_Left1,#0x23
01CE            763   ;        robot.c:92: pwm_Left0 = -1;
01CE 7598FF     764            mov     _pwm_Left0,#0xFF
01D1            765   ;        robot.c:93: pwm_Right0 = 35;
01D1 751823     766            mov     _pwm_Right0,#0x23
01D4            767   ;        robot.c:94: pwm_Right1 = -1;            
01D4 75D8FF     768            mov     _pwm_Right1,#0xFF
01D7            769   ;        robot.c:97: waitms(1500);
01D7 9005DC     770            mov     dptr,#0x05DC
01DA 120100     771            lcall   _waitms
01DD            772   L002013?:
01DD            773   ;        robot.c:102: if (currentstate == 2) {
01DD 7402       774            mov     a,#0x02
01DF B51840     775            cjne    a,_currentstate,L002067?
01E2 8001       776            sjmp    L002068?
01E4            777   L002067?:
01E4 020100     778            ljmp    L002034?
01E7            779   L002068?:
01E7            780   ;        robot.c:103: if (Volts_at_Pin(LQFP32_MUX_P2_5) > 1 && Volts_at_Pin(LQFP32_MUX_P2_6) > 1) {
01E7 75820D     781            mov     dpl,#0x0D
01EA 120100     782            lcall   _Volts_at_Pin
01ED AA82       783            mov     r2,dpl
01EF AB83       784            mov     r3,dph
01F1 ACF0       785            mov     r4,b
01F3 FD         786            mov     r5,a
01F4 E4         787            clr     a
01F5 C0E0       788            push    acc
01F7 C0E0       789            push    acc
01F9 7480       790            mov     a,#0x80
01FB C0E0       791            push    acc
01FD 743F       792            mov     a,#0x3F
01FF C0E0       793            push    acc
0201 8A82       794            mov     dpl,r2
0203 8B83       795            mov     dph,r3
0205 8CF0       796            mov     b,r4
0207 ED         797            mov     a,r5
0208 120100     798            lcall   ___fsgt
020B AA82       799            mov     r2,dpl
020D E581       800            mov     a,sp
020F 24FC       801            add     a,#0xfc
0211 F581       802            mov     sp,a
0213 EA         803            mov     a,r2
0214 7001       804            jnz     L002069?
0216 020100     805            ljmp    L002034?
0219            806   L002069?:
0219 75820E     807            mov     dpl,#0x0E
021C 120100     808            lcall   _Volts_at_Pin
021F AA82       809            mov     r2,dpl
0221 AB83       810            mov     r3,dph
0223 ACF0       811            mov     r4,b
0225 FD         812            mov     r5,a
0226 E4         813            clr     a
0227 C0E0       814            push    acc
0229 C0E0       815            push    acc
022B 7480       816            mov     a,#0x80
022D C0E0       817            push    acc
022F 743F       818            mov     a,#0x3F
0231 C0E0       819            push    acc
0233 8A82       820            mov     dpl,r2
0235 8B83       821            mov     dph,r3
0237 8CF0       822            mov     b,r4
0239 ED         823            mov     a,r5
023A 120100     824            lcall   ___fsgt
023D AA82       825            mov     r2,dpl
023F E581       826            mov     a,sp
0241 24FC       827            add     a,#0xfc
0243 F581       828            mov     sp,a
0245 EA         829            mov     a,r2
0246 7001       830            jnz     L002070?
0248 020100     831            ljmp    L002034?
024B            832   L002070?:
024B            833   ;        robot.c:106: pwm_Left0 = 35;
024B 759823     834            mov     _pwm_Left0,#0x23
024E            835   ;        robot.c:107: pwm_Left1 = -1;
024E 7558FF     836            mov     _pwm_Left1,#0xFF
0251            837   ;        robot.c:108: pwm_Right1 = 35;
0251 75D823     838            mov     _pwm_Right1,#0x23
0254            839   ;        robot.c:109: pwm_Right0 = -1;           
0254 7518FF     840            mov     _pwm_Right0,#0xFF
0257            841   ;        robot.c:112: waitms(1500);
0257 9005DC     842            mov     dptr,#0x05DC
025A 120100     843            lcall   _waitms
025D            844   ;        robot.c:115: break;
025D 020100     845            ljmp    L002034?
0260            846   ;        robot.c:117: case 1 :
0260            847   L002019?:
0260            848   ;        robot.c:119: if (Volts_at_Pin(LQFP32_MUX_P2_3) > 1 && Volts_at_Pin(LQFP32_MUX_P2_4) > 1) {
0260 75820B     849            mov     dpl,#0x0B
0263 120100     850            lcall   _Volts_at_Pin
0266 AA82       851            mov     r2,dpl
0268 AB83       852            mov     r3,dph
026A ACF0       853            mov     r4,b
026C FD         854            mov     r5,a
026D E4         855            clr     a
026E C0E0       856            push    acc
0270 C0E0       857            push    acc
0272 7480       858            mov     a,#0x80
0274 C0E0       859            push    acc
0276 743F       860            mov     a,#0x3F
0278 C0E0       861            push    acc
027A 8A82       862            mov     dpl,r2
027C 8B83       863            mov     dph,r3
027E 8CF0       864            mov     b,r4
0280 ED         865            mov     a,r5
0281 120100     866            lcall   ___fsgt
0284 AA82       867            mov     r2,dpl
0286 E581       868            mov     a,sp
0288 24FC       869            add     a,#0xfc
028A F581       870            mov     sp,a
028C EA         871            mov     a,r2
028D 7001       872            jnz     L002071?
028F 020100     873            ljmp    L002034?
0292            874   L002071?:
0292 75820C     875            mov     dpl,#0x0C
0295 120100     876            lcall   _Volts_at_Pin
0298 AA82       877            mov     r2,dpl
029A AB83       878            mov     r3,dph
029C ACF0       879            mov     r4,b
029E FD         880            mov     r5,a
029F E4         881            clr     a
02A0 C0E0       882            push    acc
02A2 C0E0       883            push    acc
02A4 7480       884            mov     a,#0x80
02A6 C0E0       885            push    acc
02A8 743F       886            mov     a,#0x3F
02AA C0E0       887            push    acc
02AC 8A82       888            mov     dpl,r2
02AE 8B83       889            mov     dph,r3
02B0 8CF0       890            mov     b,r4
02B2 ED         891            mov     a,r5
02B3 120100     892            lcall   ___fsgt
02B6 AA82       893            mov     r2,dpl
02B8 E581       894            mov     a,sp
02BA 24FC       895            add     a,#0xfc
02BC F581       896            mov     sp,a
02BE EA         897            mov     a,r2
02BF 7001       898            jnz     L002072?
02C1 020100     899            ljmp    L002034?
02C4            900   L002072?:
02C4            901   ;        robot.c:122: pwm_Left1 = 35;
02C4 755823     902            mov     _pwm_Left1,#0x23
02C7            903   ;        robot.c:123: pwm_Left0 = -1;
02C7 7598FF     904            mov     _pwm_Left0,#0xFF
02CA            905   ;        robot.c:124: pwm_Right0 = 35;
02CA 751823     906            mov     _pwm_Right0,#0x23
02CD            907   ;        robot.c:125: pwm_Right1 = -1;                                           
02CD 75D8FF     908            mov     _pwm_Right1,#0xFF
02D0            909   ;        robot.c:126: waitms(1500);
02D0 9005DC     910            mov     dptr,#0x05DC
02D3 120100     911            lcall   _waitms
02D6            912   ;        robot.c:129: turncar(0); //0 = left
02D6 900000     913            mov     dptr,#0x0000
02D9 120100     914            lcall   _turncar
02DC            915   ;        robot.c:130: currentcmd = 0;
02DC 755800     916            mov     _currentcmd,#0x00
02DF            917   ;        robot.c:132: break;
02DF 020100     918            ljmp    L002034?
02E2            919   ;        robot.c:135: case 2 :
02E2            920   L002023?:
02E2            921   ;        robot.c:137: if (Volts_at_Pin(LQFP32_MUX_P2_4) > 1 || Volts_at_Pin(LQFP32_MUX_P2_3) > 1) {
02E2 75820C     922            mov     dpl,#0x0C
02E5 120100     923            lcall   _Volts_at_Pin
02E8 AA82       924            mov     r2,dpl
02EA AB83       925            mov     r3,dph
02EC ACF0       926            mov     r4,b
02EE FD         927            mov     r5,a
02EF E4         928            clr     a
02F0 C0E0       929            push    acc
02F2 C0E0       930            push    acc
02F4 7480       931            mov     a,#0x80
02F6 C0E0       932            push    acc
02F8 743F       933            mov     a,#0x3F
02FA C0E0       934            push    acc
02FC 8A82       935            mov     dpl,r2
02FE 8B83       936            mov     dph,r3
0300 8CF0       937            mov     b,r4
0302 ED         938            mov     a,r5
0303 120100     939            lcall   ___fsgt
0306 AA82       940            mov     r2,dpl
0308 E581       941            mov     a,sp
030A 24FC       942            add     a,#0xfc
030C F581       943            mov     sp,a
030E EA         944            mov     a,r2
030F 7001       945            jnz     L002024?
0311 75820B     946            mov     dpl,#0x0B
0314 120100     947            lcall   _Volts_at_Pin
0317 AA82       948            mov     r2,dpl
0319 AB83       949            mov     r3,dph
031B ACF0       950            mov     r4,b
031D FD         951            mov     r5,a
031E E4         952            clr     a
031F C0E0       953            push    acc
0321 C0E0       954            push    acc
0323 7480       955            mov     a,#0x80
0325 C0E0       956            push    acc
0327 743F       957            mov     a,#0x3F
0329 C0E0       958            push    acc
032B 8A82       959            mov     dpl,r2
032D 8B83       960            mov     dph,r3
032F 8CF0       961            mov     b,r4
0331 ED         962            mov     a,r5
0332 120100     963            lcall   ___fsgt
0335 AA82       964            mov     r2,dpl
0337 E581       965            mov     a,sp
0339 24FC       966            add     a,#0xfc
033B F581       967            mov     sp,a
033D EA         968            mov     a,r2
033E 7001       969            jnz     L002074?
0340 020100     970            ljmp    L002034?
0343            971   L002074?:
0343            972   L002024?:
0343            973   ;        robot.c:140: pwm_Left1 = 35;
0343 755823     974            mov     _pwm_Left1,#0x23
0346            975   ;        robot.c:141: pwm_Left0 = -1;
0346 7598FF     976            mov     _pwm_Left0,#0xFF
0349            977   ;        robot.c:142: pwm_Right0 = 35;
0349 751823     978            mov     _pwm_Right0,#0x23
034C            979   ;        robot.c:143: pwm_Right1 = -1;
034C 75D8FF     980            mov     _pwm_Right1,#0xFF
034F            981   ;        robot.c:144: waitms(1500);
034F 9005DC     982            mov     dptr,#0x05DC
0352 120100     983            lcall   _waitms
0355            984   ;        robot.c:147: turncar(1); //1 = right
0355 900001     985            mov     dptr,#0x0001
0358 120100     986            lcall   _turncar
035B            987   ;        robot.c:148: currentcmd = 0;
035B 755800     988            mov     _currentcmd,#0x00
035E            989   ;        robot.c:150: break;
035E 020100     990            ljmp    L002034?
0361            991   ;        robot.c:153: case 3 :
0361            992   L002027?:
0361            993   ;        robot.c:155: currentstate = 1;
0361 751801     994            mov     _currentstate,#0x01
0364            995   ;        robot.c:156: currentcmd = 0;
0364 755800     996            mov     _currentcmd,#0x00
0367            997   ;        robot.c:157: break;
0367 020100     998            ljmp    L002034?
036A            999   ;        robot.c:160: case 4 :
036A           1000   L002028?:
036A           1001   ;        robot.c:162: currentstate = 2;
036A 751802    1002            mov     _currentstate,#0x02
036D           1003   ;        robot.c:163: currentcmd = 0;
036D 755800    1004            mov     _currentcmd,#0x00
0370           1005   ;        robot.c:164: break;
0370 020100    1006            ljmp    L002034?
0373           1007   ;        robot.c:167: case 5 :
0373           1008   L002029?:
0373           1009   ;        robot.c:169: currentstate = 3;
0373 751803    1010            mov     _currentstate,#0x03
0376           1011   ;        robot.c:170: currentcmd = 0;
0376 755800    1012            mov     _currentcmd,#0x00
0379           1013   ;        robot.c:171: break;
0379 020100    1014            ljmp    L002034?
037C           1015   ;        robot.c:174: case 6 :
037C           1016   L002030?:
037C           1017   ;        robot.c:175: uturn();
037C 120100    1018            lcall   _uturn
037F           1019   ;        robot.c:176: currentcmd = 0;
037F 755800    1020            mov     _currentcmd,#0x00
0382           1021   ;        robot.c:177: break;
0382 020100    1022            ljmp    L002034?
0385           1023   ;        robot.c:180: default: 
0385           1024   L002031?:
0385           1025   ;        robot.c:181: currentstate = 1;
0385 751801    1026            mov     _currentstate,#0x01
0388           1027   ;        robot.c:182: }
0388 020100    1028            ljmp    L002034?
038B           1029   ;------------------------------------------------------------
038B           1030   ;Allocation info for local variables in function 'Timer2_ISR'
038B           1031   ;------------------------------------------------------------
038B           1032   ;------------------------------------------------------------
038B           1033   ;        robot.c:186: void Timer2_ISR (void) interrupt 5 {
038B           1034   ;        -----------------------------------------
038B           1035   ;         function Timer2_ISR
038B           1036   ;        -----------------------------------------
038B           1037   _Timer2_ISR:
038B C0E0      1038            push    acc
038D C0F0      1039            push    b
038F C0D0      1040            push    psw
0391 75D000    1041            mov     psw,#0x00
0394           1042   ;        robot.c:187: TF2H = 0; // Clear Timer2 interrupt flag
0394 C2CF      1043            clr     _TF2H
0396           1044   ;        robot.c:189: pwm_count++;
0396 0558      1045            inc     _pwm_count
0398           1046   ;        robot.c:190: if(pwm_count>100) pwm_count=0;
0398 C3        1047            clr     c
0399 74E4      1048            mov     a,#(0x64 ^ 0x80)
039B 8558F0    1049            mov     b,_pwm_count
039E 63F080    1050            xrl     b,#0x80
03A1 95F0      1051            subb    a,b
03A3 5001      1052            jnc     L003002?
03A5 755800    1053            mov     _pwm_count,#0x00
03A8           1054   L003002?:
03A8           1055   ;        robot.c:193: MOTOR_LEFT0 = pwm_count > pwm_Left0 ? 0 : 1; //p1.5
03A8 C3        1056            clr     c
03A9 E598      1057            mov     a,_pwm_Left0
03AB 6480      1058            xrl     a,#0x80
03AD 8558F0    1059            mov     b,_pwm_count
03B0 63F080    1060            xrl     b,#0x80
03B3 95F0      1061            subb    a,b
03B5 9268      1062            mov  _Timer2_ISR_sloc0_1_0,c
03B7 B3        1063            cpl     c
03B8 9295      1064            mov     _P1_5,c
03BA           1065   ;        robot.c:194: MOTOR_LEFT1 = pwm_count > pwm_Left1 ? 0 : 1; //p1.6
03BA C3        1066            clr     c
03BB E558      1067            mov     a,_pwm_Left1
03BD 6480      1068            xrl     a,#0x80
03BF 8558F0    1069            mov     b,_pwm_count
03C2 63F080    1070            xrl     b,#0x80
03C5 95F0      1071            subb    a,b
03C7 9268      1072            mov  _Timer2_ISR_sloc0_1_0,c
03C9 B3        1073            cpl     c
03CA 9296      1074            mov     _P1_6,c
03CC           1075   ;        robot.c:195: MOTOR_RIGHT0 = pwm_count > pwm_Right0 ? 0 : 1; //p2.0
03CC C3        1076            clr     c
03CD E518      1077            mov     a,_pwm_Right0
03CF 6480      1078            xrl     a,#0x80
03D1 8558F0    1079            mov     b,_pwm_count
03D4 63F080    1080            xrl     b,#0x80
03D7 95F0      1081            subb    a,b
03D9 9268      1082            mov  _Timer2_ISR_sloc0_1_0,c
03DB B3        1083            cpl     c
03DC 92A0      1084            mov     _P2_0,c
03DE           1085   ;        robot.c:196: MOTOR_RIGHT1 = pwm_count > pwm_Right1 ? 0 : 1; //p2.1
03DE C3        1086            clr     c
03DF E5D8      1087            mov     a,_pwm_Right1
03E1 6480      1088            xrl     a,#0x80
03E3 8558F0    1089            mov     b,_pwm_count
03E6 63F080    1090            xrl     b,#0x80
03E9 95F0      1091            subb    a,b
03EB 9268      1092            mov  _Timer2_ISR_sloc0_1_0,c
03ED B3        1093            cpl     c
03EE 92A1      1094            mov     _P2_1,c
03F0 D0D0      1095            pop     psw
03F2 D0F0      1096            pop     b
03F4 D0E0      1097            pop     acc
03F6 32        1098            reti
03F7           1099   ;        eliminated unneeded push/pop dpl
03F7           1100   ;        eliminated unneeded push/pop dph
03F7           1101   ;------------------------------------------------------------
03F7           1102   ;Allocation info for local variables in function 'forward_backward'
03F7           1103   ;------------------------------------------------------------
03F7           1104   ;direction                 Allocated to registers r2 
03F7           1105   ;------------------------------------------------------------
03F7           1106   ;        robot.c:203: void forward_backward(unsigned char direction) {
03F7           1107   ;        -----------------------------------------
03F7           1108   ;         function forward_backward
03F7           1109   ;        -----------------------------------------
03F7           1110   _forward_backward:
03F7           1111   ;        robot.c:204: if (direction == 0) { //p2.1,1.6 on
03F7 E582      1112            mov     a,dpl
03F9 FA        1113            mov     r2,a
03FA 7001      1114            jnz     L004004?
03FC           1115   ;        robot.c:205: pwm_Left0 = pwm_Right0 = -1;
03FC 7518FF    1116            mov     _pwm_Right0,#0xFF
03FF 7598FF    1117            mov     _pwm_Left0,#0xFF
0402           1118   ;        robot.c:206: pwm_Left1 = pwm_Right1 = pwm_both;  //MOTOR_LEFT1 = MOTOR_RIGHT1 = pwm_both;
0402 85D8D8    1119            mov     _pwm_Right1,_pwm_both
0405 85D858    1120            mov     _pwm_Left1,_pwm_both
0408 22        1121            ret
0409           1122   L004004?:
0409           1123   ;        robot.c:209: else if (direction == 1) { //p2.0,1.5 on
0409 BA0100    1124            cjne    r2,#0x01,L004006?
040C           1125   ;        robot.c:210: pwm_Left1 = pwm_Right1 = -1;
040C 75D8FF    1126            mov     _pwm_Right1,#0xFF
040F 7558FF    1127            mov     _pwm_Left1,#0xFF
0412           1128   ;        robot.c:211: pwm_Left0 = pwm_Right0 = pwm_both; 
0412 85D818    1129            mov     _pwm_Right0,_pwm_both
0415 85D898    1130            mov     _pwm_Left0,_pwm_both
0418           1131   L004006?:
0418 22        1132            ret
0419           1133   ;------------------------------------------------------------
0419           1134   ;Allocation info for local variables in function 'readData'
0419           1135   ;------------------------------------------------------------
0419           1136   ;commandflag               Allocated to registers r2 r3 
0419           1137   ;------------------------------------------------------------
0419           1138   ;        robot.c:222: void readData (void) {
0419           1139   ;        -----------------------------------------
0419           1140   ;         function readData
0419           1141   ;        -----------------------------------------
0419           1142   _readData:
0419           1143   ;        robot.c:223: int commandflag = 0;                                       //determines if there's a real command coming in or not
0419 7A00      1144            mov     r2,#0x00
041B 7B00      1145            mov     r3,#0x00
041D           1146   ;        robot.c:226: if (COMMAND_PIN == 0) {                                    //0---
041D 309040    1147            jnb     _P1_0,L005039?
0420 020100    1148            ljmp    L005022?
0423           1149   L005039?:
0423           1150   ;        robot.c:227: waitms(CMDFRQ*1.5);
0423 900069    1151            mov     dptr,#0x0069
0426 C002      1152            push    ar2
0428 C003      1153            push    ar3
042A 120100    1154            lcall   _waitms
042D D003      1155            pop     ar3
042F D002      1156            pop     ar2
0431           1157   ;        robot.c:228: if (COMMAND_PIN == 1) {                            //01--
0431 3090C0    1158            jnb     _P1_0,L005019?
0434           1159   ;        robot.c:229: waitms(CMDFRQ);
0434 900046    1160            mov     dptr,#0x0046
0437 C002      1161            push    ar2
0439 C003      1162            push    ar3
043B 120100    1163            lcall   _waitms
043E D003      1164            pop     ar3
0440 D002      1165            pop     ar2
0442           1166   ;        robot.c:230: if (COMMAND_PIN == 0) {                    //010-
0442 209000    1167            jb      _P1_0,L005007?
0445           1168   ;        robot.c:231: waitms(CMDFRQ);
0445 900046    1169            mov     dptr,#0x0046
0448 C002      1170            push    ar2
044A C003      1171            push    ar3
044C 120100    1172            lcall   _waitms
044F D003      1173            pop     ar3
0451 D002      1174            pop     ar2
0453           1175   ;        robot.c:232: if (COMMAND_PIN == 0)      currentcmd = 4;         //0100  
0453 209040    1176            jb      _P1_0,L005002?
0456 755804    1177            mov     _currentcmd,#0x04
0459 8001      1178            sjmp    L005022?
045B           1179   L005002?:
045B           1180   ;        robot.c:233: else                                       currentcmd = 5;         //0101
045B 755805    1181            mov     _currentcmd,#0x05
045E 8001      1182            sjmp    L005022?
0460           1183   L005007?:
0460           1184   ;        robot.c:236: waitms(CMDFRQ);
0460 900046    1185            mov     dptr,#0x0046
0463 C002      1186            push    ar2
0465 C003      1187            push    ar3
0467 120100    1188            lcall   _waitms
046A D003      1189            pop     ar3
046C D002      1190            pop     ar2
046E           1191   ;        robot.c:237: if (COMMAND_PIN == 0)      currentcmd = 6;         //0110
046E 209080    1192            jb      _P1_0,L005022?
0471 755806    1193            mov     _currentcmd,#0x06
0474 8001      1194            sjmp    L005022?
0476           1195   L005019?:
0476           1196   ;        robot.c:241: waitms(CMDFRQ);
0476 900046    1197            mov     dptr,#0x0046
0479 C002      1198            push    ar2
047B C003      1199            push    ar3
047D 120100    1200            lcall   _waitms
0480 D003      1201            pop     ar3
0482 D002      1202            pop     ar2
0484           1203   ;        robot.c:242: if (COMMAND_PIN == 1) {                    //001-
0484 309080    1204            jnb     _P1_0,L005016?
0487           1205   ;        robot.c:243: waitms(CMDFRQ);
0487 900046    1206            mov     dptr,#0x0046
048A C002      1207            push    ar2
048C C003      1208            push    ar3
048E 120100    1209            lcall   _waitms
0491 D003      1210            pop     ar3
0493 D002      1211            pop     ar2
0495           1212   ;        robot.c:244: if (COMMAND_PIN == 1)      currentcmd = 3;         //0011
0495 3090C0    1213            jnb     _P1_0,L005010?
0498 755803    1214            mov     _currentcmd,#0x03
049B 8001      1215            sjmp    L005022?
049D           1216   L005010?:
049D           1217   ;        robot.c:245: else                                       currentcmd = 2;         //0010
049D 755802    1218            mov     _currentcmd,#0x02
04A0 8001      1219            sjmp    L005022?
04A2           1220   L005016?:
04A2           1221   ;        robot.c:248: waitms(CMDFRQ);
04A2 900046    1222            mov     dptr,#0x0046
04A5 C002      1223            push    ar2
04A7 C003      1224            push    ar3
04A9 120100    1225            lcall   _waitms
04AC D003      1226            pop     ar3
04AE D002      1227            pop     ar2
04B0           1228   ;        robot.c:249: if (COMMAND_PIN == 1)      currentcmd = 1; //0001
04B0 309000    1229            jnb     _P1_0,L005013?
04B3 755801    1230            mov     _currentcmd,#0x01
04B6 8001      1231            sjmp    L005022?
04B8           1232   L005013?:
04B8           1233   ;        robot.c:251: commandflag = 1;
04B8 7A01      1234            mov     r2,#0x01
04BA 7B00      1235            mov     r3,#0x00
04BC           1236   L005022?:
04BC           1237   ;        robot.c:258: if (commandflag == 0)      {while (COMMAND_PIN == 0);} 
04BC EA        1238            mov     a,r2
04BD 4B        1239            orl     a,r3
04BE 7001      1240            jnz     L005027?
04C0           1241   L005023?:
04C0 309080    1242            jnb     _P1_0,L005023?
04C3           1243   L005027?:
04C3           1244   ;        robot.c:261: printf("\ncurrent command is %d\r\n", currentcmd);                 
04C3 AA58      1245            mov     r2,_currentcmd
04C5 E558      1246            mov     a,_currentcmd
04C7 33        1247            rlc     a
04C8 95E0      1248            subb    a,acc
04CA FB        1249            mov     r3,a
04CB C002      1250            push    ar2
04CD C003      1251            push    ar3
04CF 74C0      1252            mov     a,#__str_1
04D1 C0E0      1253            push    acc
04D3 74A7      1254            mov     a,#(__str_1 >> 8)
04D5 C0E0      1255            push    acc
04D7 7480      1256            mov     a,#0x80
04D9 C0E0      1257            push    acc
04DB 120100    1258            lcall   _printf
04DE E581      1259            mov     a,sp
04E0 24FB      1260            add     a,#0xfb
04E2 F581      1261            mov     sp,a
04E4 22        1262            ret
04E5           1263   ;------------------------------------------------------------
04E5           1264   ;Allocation info for local variables in function 'linetrack'
04E5           1265   ;------------------------------------------------------------
04E5           1266   ;forwardbackward           Allocated with name '_linetrack_forwardbackward_1_85'
04E5           1267   ;vleft                     Allocated with name '_linetrack_vleft_1_86'
04E5           1268   ;vright                    Allocated with name '_linetrack_vright_1_86'
04E5           1269   ;sloc0                     Allocated with name '_linetrack_sloc0_1_0'
04E5           1270   ;sloc1                     Allocated with name '_linetrack_sloc1_1_0'
04E5           1271   ;------------------------------------------------------------
04E5           1272   ;        robot.c:268: void linetrack (int forwardbackward) {
04E5           1273   ;        -----------------------------------------
04E5           1274   ;         function linetrack
04E5           1275   ;        -----------------------------------------
04E5           1276   _linetrack:
04E5 858298    1277            mov     _linetrack_forwardbackward_1_85,dpl
04E8 858399    1278            mov     (_linetrack_forwardbackward_1_85 + 1),dph
04EB           1279   ;        robot.c:273: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
04EB 75820B    1280            mov     dpl,#0x0B
04EE 120100    1281            lcall   _Volts_at_Pin
04F1 8582E8    1282            mov     _linetrack_vleft_1_86,dpl
04F4 8583E9    1283            mov     (_linetrack_vleft_1_86 + 1),dph
04F7 85F0EA    1284            mov     (_linetrack_vleft_1_86 + 2),b
04FA F5EB      1285            mov     (_linetrack_vleft_1_86 + 3),a
04FC           1286   ;        robot.c:274: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
04FC 75820C    1287            mov     dpl,#0x0C
04FF 120100    1288            lcall   _Volts_at_Pin
0502 858238    1289            mov     _linetrack_vright_1_86,dpl
0505 858339    1290            mov     (_linetrack_vright_1_86 + 1),dph
0508 85F03A    1291            mov     (_linetrack_vright_1_86 + 2),b
050B F53B      1292            mov     (_linetrack_vright_1_86 + 3),a
050D           1293   ;        robot.c:277: pwm_Left0 = -1;
050D 7598FF    1294            mov     _pwm_Left0,#0xFF
0510           1295   ;        robot.c:278: pwm_Left1 = vright*vright*75/(vright*vright+vleft*vleft);
0510 C038      1296            push    _linetrack_vright_1_86
0512 C039      1297            push    (_linetrack_vright_1_86 + 1)
0514 C03A      1298            push    (_linetrack_vright_1_86 + 2)
0516 C03B      1299            push    (_linetrack_vright_1_86 + 3)
0518 853882    1300            mov     dpl,_linetrack_vright_1_86
051B 853983    1301            mov     dph,(_linetrack_vright_1_86 + 1)
051E 853AF0    1302            mov     b,(_linetrack_vright_1_86 + 2)
0521 E53B      1303            mov     a,(_linetrack_vright_1_86 + 3)
0523 120100    1304            lcall   ___fsmul
0526 AC82      1305            mov     r4,dpl
0528 AD83      1306            mov     r5,dph
052A AEF0      1307            mov     r6,b
052C FF        1308            mov     r7,a
052D E581      1309            mov     a,sp
052F 24FC      1310            add     a,#0xfc
0531 F581      1311            mov     sp,a
0533 C004      1312            push    ar4
0535 C005      1313            push    ar5
0537 C006      1314            push    ar6
0539 C007      1315            push    ar7
053B 900000    1316            mov     dptr,#0x0000
053E 75F096    1317            mov     b,#0x96
0541 7442      1318            mov     a,#0x42
0543 120100    1319            lcall   ___fsmul
0546 AC82      1320            mov     r4,dpl
0548 AD83      1321            mov     r5,dph
054A AEF0      1322            mov     r6,b
054C FF        1323            mov     r7,a
054D E581      1324            mov     a,sp
054F 24FC      1325            add     a,#0xfc
0551 F581      1326            mov     sp,a
0553 C004      1327            push    ar4
0555 C005      1328            push    ar5
0557 C006      1329            push    ar6
0559 C007      1330            push    ar7
055B C038      1331            push    _linetrack_vright_1_86
055D C039      1332            push    (_linetrack_vright_1_86 + 1)
055F C03A      1333            push    (_linetrack_vright_1_86 + 2)
0561 C03B      1334            push    (_linetrack_vright_1_86 + 3)
0563 853882    1335            mov     dpl,_linetrack_vright_1_86
0566 853983    1336            mov     dph,(_linetrack_vright_1_86 + 1)
0569 853AF0    1337            mov     b,(_linetrack_vright_1_86 + 2)
056C E53B      1338            mov     a,(_linetrack_vright_1_86 + 3)
056E 120100    1339            lcall   ___fsmul
0571 858288    1340            mov     _linetrack_sloc0_1_0,dpl
0574 858389    1341            mov     (_linetrack_sloc0_1_0 + 1),dph
0577 85F08A    1342            mov     (_linetrack_sloc0_1_0 + 2),b
057A F58B      1343            mov     (_linetrack_sloc0_1_0 + 3),a
057C E581      1344            mov     a,sp
057E 24FC      1345            add     a,#0xfc
0580 F581      1346            mov     sp,a
0582 C0E8      1347            push    _linetrack_vleft_1_86
0584 C0E9      1348            push    (_linetrack_vleft_1_86 + 1)
0586 C0EA      1349            push    (_linetrack_vleft_1_86 + 2)
0588 C0EB      1350            push    (_linetrack_vleft_1_86 + 3)
058A 85E882    1351            mov     dpl,_linetrack_vleft_1_86
058D 85E983    1352            mov     dph,(_linetrack_vleft_1_86 + 1)
0590 85EAF0    1353            mov     b,(_linetrack_vleft_1_86 + 2)
0593 E5EB      1354            mov     a,(_linetrack_vleft_1_86 + 3)
0595 120100    1355            lcall   ___fsmul
0598 AA82      1356            mov     r2,dpl
059A AB83      1357            mov     r3,dph
059C A8F0      1358            mov     r0,b
059E F9        1359            mov     r1,a
059F E581      1360            mov     a,sp
05A1 24FC      1361            add     a,#0xfc
05A3 F581      1362            mov     sp,a
05A5 C002      1363            push    ar2
05A7 C003      1364            push    ar3
05A9 C000      1365            push    ar0
05AB C001      1366            push    ar1
05AD 858882    1367            mov     dpl,_linetrack_sloc0_1_0
05B0 858983    1368            mov     dph,(_linetrack_sloc0_1_0 + 1)
05B3 858AF0    1369            mov     b,(_linetrack_sloc0_1_0 + 2)
05B6 E58B      1370            mov     a,(_linetrack_sloc0_1_0 + 3)
05B8 120100    1371            lcall   ___fsadd
05BB AA82      1372            mov     r2,dpl
05BD AB83      1373            mov     r3,dph
05BF A8F0      1374            mov     r0,b
05C1 F9        1375            mov     r1,a
05C2 E581      1376            mov     a,sp
05C4 24FC      1377            add     a,#0xfc
05C6 F581      1378            mov     sp,a
05C8 D007      1379            pop     ar7
05CA D006      1380            pop     ar6
05CC D005      1381            pop     ar5
05CE D004      1382            pop     ar4
05D0 C002      1383            push    ar2
05D2 C003      1384            push    ar3
05D4 C000      1385            push    ar0
05D6 C001      1386            push    ar1
05D8 8C82      1387            mov     dpl,r4
05DA 8D83      1388            mov     dph,r5
05DC 8EF0      1389            mov     b,r6
05DE EF        1390            mov     a,r7
05DF 120100    1391            lcall   ___fsdiv
05E2 AA82      1392            mov     r2,dpl
05E4 AB83      1393            mov     r3,dph
05E6 ACF0      1394            mov     r4,b
05E8 FD        1395            mov     r5,a
05E9 E581      1396            mov     a,sp
05EB 24FC      1397            add     a,#0xfc
05ED F581      1398            mov     sp,a
05EF 8A82      1399            mov     dpl,r2
05F1 8B83      1400            mov     dph,r3
05F3 8CF0      1401            mov     b,r4
05F5 ED        1402            mov     a,r5
05F6 120100    1403            lcall   ___fs2schar
05F9 858258    1404            mov     _pwm_Left1,dpl
05FC           1405   ;        robot.c:279: pwm_Right1 = -1;
05FC 75D8FF    1406            mov     _pwm_Right1,#0xFF
05FF           1407   ;        robot.c:280: pwm_Right0 = vleft*vleft*75/(vright*vright+vleft*vleft);
05FF C0E8      1408            push    _linetrack_vleft_1_86
0601 C0E9      1409            push    (_linetrack_vleft_1_86 + 1)
0603 C0EA      1410            push    (_linetrack_vleft_1_86 + 2)
0605 C0EB      1411            push    (_linetrack_vleft_1_86 + 3)
0607 85E882    1412            mov     dpl,_linetrack_vleft_1_86
060A 85E983    1413            mov     dph,(_linetrack_vleft_1_86 + 1)
060D 85EAF0    1414            mov     b,(_linetrack_vleft_1_86 + 2)
0610 E5EB      1415            mov     a,(_linetrack_vleft_1_86 + 3)
0612 120100    1416            lcall   ___fsmul
0615 AA82      1417            mov     r2,dpl
0617 AB83      1418            mov     r3,dph
0619 ACF0      1419            mov     r4,b
061B FD        1420            mov     r5,a
061C E581      1421            mov     a,sp
061E 24FC      1422            add     a,#0xfc
0620 F581      1423            mov     sp,a
0622 C002      1424            push    ar2
0624 C003      1425            push    ar3
0626 C004      1426            push    ar4
0628 C005      1427            push    ar5
062A 900000    1428            mov     dptr,#0x0000
062D 75F096    1429            mov     b,#0x96
0630 7442      1430            mov     a,#0x42
0632 120100    1431            lcall   ___fsmul
0635 AA82      1432            mov     r2,dpl
0637 AB83      1433            mov     r3,dph
0639 ACF0      1434            mov     r4,b
063B FD        1435            mov     r5,a
063C E581      1436            mov     a,sp
063E 24FC      1437            add     a,#0xfc
0640 F581      1438            mov     sp,a
0642 C002      1439            push    ar2
0644 C003      1440            push    ar3
0646 C004      1441            push    ar4
0648 C005      1442            push    ar5
064A C038      1443            push    _linetrack_vright_1_86
064C C039      1444            push    (_linetrack_vright_1_86 + 1)
064E C03A      1445            push    (_linetrack_vright_1_86 + 2)
0650 C03B      1446            push    (_linetrack_vright_1_86 + 3)
0652 853882    1447            mov     dpl,_linetrack_vright_1_86
0655 853983    1448            mov     dph,(_linetrack_vright_1_86 + 1)
0658 853AF0    1449            mov     b,(_linetrack_vright_1_86 + 2)
065B E53B      1450            mov     a,(_linetrack_vright_1_86 + 3)
065D 120100    1451            lcall   ___fsmul
0660 858288    1452            mov     _linetrack_sloc0_1_0,dpl
0663 858389    1453            mov     (_linetrack_sloc0_1_0 + 1),dph
0666 85F08A    1454            mov     (_linetrack_sloc0_1_0 + 2),b
0669 F58B      1455            mov     (_linetrack_sloc0_1_0 + 3),a
066B E581      1456            mov     a,sp
066D 24FC      1457            add     a,#0xfc
066F F581      1458            mov     sp,a
0671 C0E8      1459            push    _linetrack_vleft_1_86
0673 C0E9      1460            push    (_linetrack_vleft_1_86 + 1)
0675 C0EA      1461            push    (_linetrack_vleft_1_86 + 2)
0677 C0EB      1462            push    (_linetrack_vleft_1_86 + 3)
0679 85E882    1463            mov     dpl,_linetrack_vleft_1_86
067C 85E983    1464            mov     dph,(_linetrack_vleft_1_86 + 1)
067F 85EAF0    1465            mov     b,(_linetrack_vleft_1_86 + 2)
0682 E5EB      1466            mov     a,(_linetrack_vleft_1_86 + 3)
0684 120100    1467            lcall   ___fsmul
0687 AE82      1468            mov     r6,dpl
0689 AF83      1469            mov     r7,dph
068B A8F0      1470            mov     r0,b
068D F9        1471            mov     r1,a
068E E581      1472            mov     a,sp
0690 24FC      1473            add     a,#0xfc
0692 F581      1474            mov     sp,a
0694 C006      1475            push    ar6
0696 C007      1476            push    ar7
0698 C000      1477            push    ar0
069A C001      1478            push    ar1
069C 858882    1479            mov     dpl,_linetrack_sloc0_1_0
069F 858983    1480            mov     dph,(_linetrack_sloc0_1_0 + 1)
06A2 858AF0    1481            mov     b,(_linetrack_sloc0_1_0 + 2)
06A5 E58B      1482            mov     a,(_linetrack_sloc0_1_0 + 3)
06A7 120100    1483            lcall   ___fsadd
06AA AE82      1484            mov     r6,dpl
06AC AF83      1485            mov     r7,dph
06AE A8F0      1486            mov     r0,b
06B0 F9        1487            mov     r1,a
06B1 E581      1488            mov     a,sp
06B3 24FC      1489            add     a,#0xfc
06B5 F581      1490            mov     sp,a
06B7 D005      1491            pop     ar5
06B9 D004      1492            pop     ar4
06BB D003      1493            pop     ar3
06BD D002      1494            pop     ar2
06BF C006      1495            push    ar6
06C1 C007      1496            push    ar7
06C3 C000      1497            push    ar0
06C5 C001      1498            push    ar1
06C7 8A82      1499            mov     dpl,r2
06C9 8B83      1500            mov     dph,r3
06CB 8CF0      1501            mov     b,r4
06CD ED        1502            mov     a,r5
06CE 120100    1503            lcall   ___fsdiv
06D1 AA82      1504            mov     r2,dpl
06D3 AB83      1505            mov     r3,dph
06D5 ACF0      1506            mov     r4,b
06D7 FD        1507            mov     r5,a
06D8 E581      1508            mov     a,sp
06DA 24FC      1509            add     a,#0xfc
06DC F581      1510            mov     sp,a
06DE 8A82      1511            mov     dpl,r2
06E0 8B83      1512            mov     dph,r3
06E2 8CF0      1513            mov     b,r4
06E4 ED        1514            mov     a,r5
06E5 120100    1515            lcall   ___fs2schar
06E8 858218    1516            mov     _pwm_Right0,dpl
06EB           1517   ;        robot.c:284: if (forwardbackward) {
06EB E598      1518            mov     a,_linetrack_forwardbackward_1_85
06ED 4599      1519            orl     a,(_linetrack_forwardbackward_1_85 + 1)
06EF 7001      1520            jnz     L006006?
06F1 020100    1521            ljmp    L006002?
06F4           1522   L006006?:
06F4           1523   ;        robot.c:286: vleft=Volts_at_Pin(LQFP32_MUX_P2_5);
06F4 75820D    1524            mov     dpl,#0x0D
06F7 120100    1525            lcall   _Volts_at_Pin
06FA 8582E8    1526            mov     _linetrack_vleft_1_86,dpl
06FD 8583E9    1527            mov     (_linetrack_vleft_1_86 + 1),dph
0700 85F0EA    1528            mov     (_linetrack_vleft_1_86 + 2),b
0703 F5EB      1529            mov     (_linetrack_vleft_1_86 + 3),a
0705           1530   ;        robot.c:287: vright=Volts_at_Pin(LQFP32_MUX_P2_6);
0705 75820E    1531            mov     dpl,#0x0E
0708 120100    1532            lcall   _Volts_at_Pin
070B 858238    1533            mov     _linetrack_vright_1_86,dpl
070E 858339    1534            mov     (_linetrack_vright_1_86 + 1),dph
0711 85F03A    1535            mov     (_linetrack_vright_1_86 + 2),b
0714 F53B      1536            mov     (_linetrack_vright_1_86 + 3),a
0716           1537   ;        robot.c:290: pwm_Left1 = -1;
0716 7558FF    1538            mov     _pwm_Left1,#0xFF
0719           1539   ;        robot.c:291: pwm_Left0 = vright*vright*75/(vright*vright+vleft*vleft);
0719 C038      1540            push    _linetrack_vright_1_86
071B C039      1541            push    (_linetrack_vright_1_86 + 1)
071D C03A      1542            push    (_linetrack_vright_1_86 + 2)
071F C03B      1543            push    (_linetrack_vright_1_86 + 3)
0721 853882    1544            mov     dpl,_linetrack_vright_1_86
0724 853983    1545            mov     dph,(_linetrack_vright_1_86 + 1)
0727 853AF0    1546            mov     b,(_linetrack_vright_1_86 + 2)
072A E53B      1547            mov     a,(_linetrack_vright_1_86 + 3)
072C 120100    1548            lcall   ___fsmul
072F AA82      1549            mov     r2,dpl
0731 AB83      1550            mov     r3,dph
0733 ACF0      1551            mov     r4,b
0735 FD        1552            mov     r5,a
0736 E581      1553            mov     a,sp
0738 24FC      1554            add     a,#0xfc
073A F581      1555            mov     sp,a
073C C002      1556            push    ar2
073E C003      1557            push    ar3
0740 C004      1558            push    ar4
0742 C005      1559            push    ar5
0744 900000    1560            mov     dptr,#0x0000
0747 75F096    1561            mov     b,#0x96
074A 7442      1562            mov     a,#0x42
074C 120100    1563            lcall   ___fsmul
074F AA82      1564            mov     r2,dpl
0751 AB83      1565            mov     r3,dph
0753 ACF0      1566            mov     r4,b
0755 FD        1567            mov     r5,a
0756 E581      1568            mov     a,sp
0758 24FC      1569            add     a,#0xfc
075A F581      1570            mov     sp,a
075C C002      1571            push    ar2
075E C003      1572            push    ar3
0760 C004      1573            push    ar4
0762 C005      1574            push    ar5
0764 C038      1575            push    _linetrack_vright_1_86
0766 C039      1576            push    (_linetrack_vright_1_86 + 1)
0768 C03A      1577            push    (_linetrack_vright_1_86 + 2)
076A C03B      1578            push    (_linetrack_vright_1_86 + 3)
076C 853882    1579            mov     dpl,_linetrack_vright_1_86
076F 853983    1580            mov     dph,(_linetrack_vright_1_86 + 1)
0772 853AF0    1581            mov     b,(_linetrack_vright_1_86 + 2)
0775 E53B      1582            mov     a,(_linetrack_vright_1_86 + 3)
0777 120100    1583            lcall   ___fsmul
077A 858288    1584            mov     _linetrack_sloc0_1_0,dpl
077D 858389    1585            mov     (_linetrack_sloc0_1_0 + 1),dph
0780 85F08A    1586            mov     (_linetrack_sloc0_1_0 + 2),b
0783 F58B      1587            mov     (_linetrack_sloc0_1_0 + 3),a
0785 E581      1588            mov     a,sp
0787 24FC      1589            add     a,#0xfc
0789 F581      1590            mov     sp,a
078B C0E8      1591            push    _linetrack_vleft_1_86
078D C0E9      1592            push    (_linetrack_vleft_1_86 + 1)
078F C0EA      1593            push    (_linetrack_vleft_1_86 + 2)
0791 C0EB      1594            push    (_linetrack_vleft_1_86 + 3)
0793 85E882    1595            mov     dpl,_linetrack_vleft_1_86
0796 85E983    1596            mov     dph,(_linetrack_vleft_1_86 + 1)
0799 85EAF0    1597            mov     b,(_linetrack_vleft_1_86 + 2)
079C E5EB      1598            mov     a,(_linetrack_vleft_1_86 + 3)
079E 120100    1599            lcall   ___fsmul
07A1 AE82      1600            mov     r6,dpl
07A3 AF83      1601            mov     r7,dph
07A5 A8F0      1602            mov     r0,b
07A7 F9        1603            mov     r1,a
07A8 E581      1604            mov     a,sp
07AA 24FC      1605            add     a,#0xfc
07AC F581      1606            mov     sp,a
07AE C006      1607            push    ar6
07B0 C007      1608            push    ar7
07B2 C000      1609            push    ar0
07B4 C001      1610            push    ar1
07B6 858882    1611            mov     dpl,_linetrack_sloc0_1_0
07B9 858983    1612            mov     dph,(_linetrack_sloc0_1_0 + 1)
07BC 858AF0    1613            mov     b,(_linetrack_sloc0_1_0 + 2)
07BF E58B      1614            mov     a,(_linetrack_sloc0_1_0 + 3)
07C1 120100    1615            lcall   ___fsadd
07C4 AE82      1616            mov     r6,dpl
07C6 AF83      1617            mov     r7,dph
07C8 A8F0      1618            mov     r0,b
07CA F9        1619            mov     r1,a
07CB E581      1620            mov     a,sp
07CD 24FC      1621            add     a,#0xfc
07CF F581      1622            mov     sp,a
07D1 D005      1623            pop     ar5
07D3 D004      1624            pop     ar4
07D5 D003      1625            pop     ar3
07D7 D002      1626            pop     ar2
07D9 C006      1627            push    ar6
07DB C007      1628            push    ar7
07DD C000      1629            push    ar0
07DF C001      1630            push    ar1
07E1 8A82      1631            mov     dpl,r2
07E3 8B83      1632            mov     dph,r3
07E5 8CF0      1633            mov     b,r4
07E7 ED        1634            mov     a,r5
07E8 120100    1635            lcall   ___fsdiv
07EB AA82      1636            mov     r2,dpl
07ED AB83      1637            mov     r3,dph
07EF ACF0      1638            mov     r4,b
07F1 FD        1639            mov     r5,a
07F2 E581      1640            mov     a,sp
07F4 24FC      1641            add     a,#0xfc
07F6 F581      1642            mov     sp,a
07F8 8A82      1643            mov     dpl,r2
07FA 8B83      1644            mov     dph,r3
07FC 8CF0      1645            mov     b,r4
07FE ED        1646            mov     a,r5
07FF 120100    1647            lcall   ___fs2schar
0802 858298    1648            mov     _pwm_Left0,dpl
0805           1649   ;        robot.c:292: pwm_Right0 = -1;
0805 7518FF    1650            mov     _pwm_Right0,#0xFF
0808           1651   ;        robot.c:293: pwm_Right1 = vleft*vleft*75/(vright*vright+vleft*vleft);
0808 C0E8      1652            push    _linetrack_vleft_1_86
080A C0E9      1653            push    (_linetrack_vleft_1_86 + 1)
080C C0EA      1654            push    (_linetrack_vleft_1_86 + 2)
080E C0EB      1655            push    (_linetrack_vleft_1_86 + 3)
0810 85E882    1656            mov     dpl,_linetrack_vleft_1_86
0813 85E983    1657            mov     dph,(_linetrack_vleft_1_86 + 1)
0816 85EAF0    1658            mov     b,(_linetrack_vleft_1_86 + 2)
0819 E5EB      1659            mov     a,(_linetrack_vleft_1_86 + 3)
081B 120100    1660            lcall   ___fsmul
081E AA82      1661            mov     r2,dpl
0820 AB83      1662            mov     r3,dph
0822 ACF0      1663            mov     r4,b
0824 FD        1664            mov     r5,a
0825 E581      1665            mov     a,sp
0827 24FC      1666            add     a,#0xfc
0829 F581      1667            mov     sp,a
082B C002      1668            push    ar2
082D C003      1669            push    ar3
082F C004      1670            push    ar4
0831 C005      1671            push    ar5
0833 900000    1672            mov     dptr,#0x0000
0836 75F096    1673            mov     b,#0x96
0839 7442      1674            mov     a,#0x42
083B 120100    1675            lcall   ___fsmul
083E AA82      1676            mov     r2,dpl
0840 AB83      1677            mov     r3,dph
0842 ACF0      1678            mov     r4,b
0844 FD        1679            mov     r5,a
0845 E581      1680            mov     a,sp
0847 24FC      1681            add     a,#0xfc
0849 F581      1682            mov     sp,a
084B C002      1683            push    ar2
084D C003      1684            push    ar3
084F C004      1685            push    ar4
0851 C005      1686            push    ar5
0853 C038      1687            push    _linetrack_vright_1_86
0855 C039      1688            push    (_linetrack_vright_1_86 + 1)
0857 C03A      1689            push    (_linetrack_vright_1_86 + 2)
0859 C03B      1690            push    (_linetrack_vright_1_86 + 3)
085B 853882    1691            mov     dpl,_linetrack_vright_1_86
085E 853983    1692            mov     dph,(_linetrack_vright_1_86 + 1)
0861 853AF0    1693            mov     b,(_linetrack_vright_1_86 + 2)
0864 E53B      1694            mov     a,(_linetrack_vright_1_86 + 3)
0866 120100    1695            lcall   ___fsmul
0869 858288    1696            mov     _linetrack_sloc0_1_0,dpl
086C 858389    1697            mov     (_linetrack_sloc0_1_0 + 1),dph
086F 85F08A    1698            mov     (_linetrack_sloc0_1_0 + 2),b
0872 F58B      1699            mov     (_linetrack_sloc0_1_0 + 3),a
0874 E581      1700            mov     a,sp
0876 24FC      1701            add     a,#0xfc
0878 F581      1702            mov     sp,a
087A C0E8      1703            push    _linetrack_vleft_1_86
087C C0E9      1704            push    (_linetrack_vleft_1_86 + 1)
087E C0EA      1705            push    (_linetrack_vleft_1_86 + 2)
0880 C0EB      1706            push    (_linetrack_vleft_1_86 + 3)
0882 85E882    1707            mov     dpl,_linetrack_vleft_1_86
0885 85E983    1708            mov     dph,(_linetrack_vleft_1_86 + 1)
0888 85EAF0    1709            mov     b,(_linetrack_vleft_1_86 + 2)
088B E5EB      1710            mov     a,(_linetrack_vleft_1_86 + 3)
088D 120100    1711            lcall   ___fsmul
0890 AE82      1712            mov     r6,dpl
0892 AF83      1713            mov     r7,dph
0894 A8F0      1714            mov     r0,b
0896 F9        1715            mov     r1,a
0897 E581      1716            mov     a,sp
0899 24FC      1717            add     a,#0xfc
089B F581      1718            mov     sp,a
089D C006      1719            push    ar6
089F C007      1720            push    ar7
08A1 C000      1721            push    ar0
08A3 C001      1722            push    ar1
08A5 858882    1723            mov     dpl,_linetrack_sloc0_1_0
08A8 858983    1724            mov     dph,(_linetrack_sloc0_1_0 + 1)
08AB 858AF0    1725            mov     b,(_linetrack_sloc0_1_0 + 2)
08AE E58B      1726            mov     a,(_linetrack_sloc0_1_0 + 3)
08B0 120100    1727            lcall   ___fsadd
08B3 AE82      1728            mov     r6,dpl
08B5 AF83      1729            mov     r7,dph
08B7 A8F0      1730            mov     r0,b
08B9 F9        1731            mov     r1,a
08BA E581      1732            mov     a,sp
08BC 24FC      1733            add     a,#0xfc
08BE F581      1734            mov     sp,a
08C0 D005      1735            pop     ar5
08C2 D004      1736            pop     ar4
08C4 D003      1737            pop     ar3
08C6 D002      1738            pop     ar2
08C8 C006      1739            push    ar6
08CA C007      1740            push    ar7
08CC C000      1741            push    ar0
08CE C001      1742            push    ar1
08D0 8A82      1743            mov     dpl,r2
08D2 8B83      1744            mov     dph,r3
08D4 8CF0      1745            mov     b,r4
08D6 ED        1746            mov     a,r5
08D7 120100    1747            lcall   ___fsdiv
08DA AA82      1748            mov     r2,dpl
08DC AB83      1749            mov     r3,dph
08DE ACF0      1750            mov     r4,b
08E0 FD        1751            mov     r5,a
08E1 E581      1752            mov     a,sp
08E3 24FC      1753            add     a,#0xfc
08E5 F581      1754            mov     sp,a
08E7 8A82      1755            mov     dpl,r2
08E9 8B83      1756            mov     dph,r3
08EB 8CF0      1757            mov     b,r4
08ED ED        1758            mov     a,r5
08EE 120100    1759            lcall   ___fs2schar
08F1 8582D8    1760            mov     _pwm_Right1,dpl
08F4           1761   L006002?:
08F4           1762   ;        robot.c:297: printf("2.3= %f, 2.4= %f, LeftF= %4d, RightF= %4d, LeftB= %4d, RightB= %4d, command:%1d, state:%1d\r", vleft, vright, pwm_Left1, pwm_Right0, pwm_Left0, pwm_Right1, currentcmd, currentstate);
08F4 AA18      1763            mov     r2,_currentstate
08F6 E518      1764            mov     a,_currentstate
08F8 33        1765            rlc     a
08F9 95E0      1766            subb    a,acc
08FB FB        1767            mov     r3,a
08FC AC58      1768            mov     r4,_currentcmd
08FE E558      1769            mov     a,_currentcmd
0900 33        1770            rlc     a
0901 95E0      1771            subb    a,acc
0903 FD        1772            mov     r5,a
0904 AED8      1773            mov     r6,_pwm_Right1
0906 E5D8      1774            mov     a,_pwm_Right1
0908 33        1775            rlc     a
0909 95E0      1776            subb    a,acc
090B FF        1777            mov     r7,a
090C 859888    1778            mov     _linetrack_sloc0_1_0,_pwm_Left0
090F E598      1779            mov     a,_pwm_Left0
0911 33        1780            rlc     a
0912 95E0      1781            subb    a,acc
0914 F589      1782            mov     (_linetrack_sloc0_1_0 + 1),a
0916 8518D8    1783            mov     _linetrack_sloc1_1_0,_pwm_Right0
0919 E518      1784            mov     a,_pwm_Right0
091B 33        1785            rlc     a
091C 95E0      1786            subb    a,acc
091E F5D9      1787            mov     (_linetrack_sloc1_1_0 + 1),a
0920 A858      1788            mov     r0,_pwm_Left1
0922 E558      1789            mov     a,_pwm_Left1
0924 33        1790            rlc     a
0925 95E0      1791            subb    a,acc
0927 F9        1792            mov     r1,a
0928 C002      1793            push    ar2
092A C003      1794            push    ar3
092C C004      1795            push    ar4
092E C005      1796            push    ar5
0930 C006      1797            push    ar6
0932 C007      1798            push    ar7
0934 C088      1799            push    _linetrack_sloc0_1_0
0936 C089      1800            push    (_linetrack_sloc0_1_0 + 1)
0938 C0D8      1801            push    _linetrack_sloc1_1_0
093A C0D9      1802            push    (_linetrack_sloc1_1_0 + 1)
093C C000      1803            push    ar0
093E C001      1804            push    ar1
0940 C038      1805            push    _linetrack_vright_1_86
0942 C039      1806            push    (_linetrack_vright_1_86 + 1)
0944 C03A      1807            push    (_linetrack_vright_1_86 + 2)
0946 C03B      1808            push    (_linetrack_vright_1_86 + 3)
0948 C0E8      1809            push    _linetrack_vleft_1_86
094A C0E9      1810            push    (_linetrack_vleft_1_86 + 1)
094C C0EA      1811            push    (_linetrack_vleft_1_86 + 2)
094E C0EB      1812            push    (_linetrack_vleft_1_86 + 3)
0950 7480      1813            mov     a,#__str_2
0952 C0E0      1814            push    acc
0954 74A9      1815            mov     a,#(__str_2 >> 8)
0956 C0E0      1816            push    acc
0958 7480      1817            mov     a,#0x80
095A C0E0      1818            push    acc
095C 120100    1819            lcall   _printf
095F E581      1820            mov     a,sp
0961 24E9      1821            add     a,#0xe9
0963 F581      1822            mov     sp,a
0965 22        1823            ret
0966           1824   ;------------------------------------------------------------
0966           1825   ;Allocation info for local variables in function 'stopcar'
0966           1826   ;------------------------------------------------------------
0966           1827   ;------------------------------------------------------------
0966           1828   ;        robot.c:305: void stopcar(void) {
0966           1829   ;        -----------------------------------------
0966           1830   ;         function stopcar
0966           1831   ;        -----------------------------------------
0966           1832   _stopcar:
0966           1833   ;        robot.c:307: pwm_Left1 = -1;
0966 7558FF    1834            mov     _pwm_Left1,#0xFF
0969           1835   ;        robot.c:308: pwm_Right1 = -1;
0969 75D8FF    1836            mov     _pwm_Right1,#0xFF
096C           1837   ;        robot.c:309: pwm_Left0 = -1;
096C 7598FF    1838            mov     _pwm_Left0,#0xFF
096F           1839   ;        robot.c:310: pwm_Right0 = -1;
096F 7518FF    1840            mov     _pwm_Right0,#0xFF
0972 22        1841            ret
0973           1842   ;------------------------------------------------------------
0973           1843   ;Allocation info for local variables in function 'turncar'
0973           1844   ;------------------------------------------------------------
0973           1845   ;leftright                 Allocated to registers r2 r3 
0973           1846   ;vleft                     Allocated with name '_turncar_vleft_1_91'
0973           1847   ;vright                    Allocated with name '_turncar_vright_1_91'
0973           1848   ;------------------------------------------------------------
0973           1849   ;        robot.c:316: void turncar (int leftright) {
0973           1850   ;        -----------------------------------------
0973           1851   ;         function turncar
0973           1852   ;        -----------------------------------------
0973           1853   _turncar:
0973 AA82      1854            mov     r2,dpl
0975 AB83      1855            mov     r3,dph
0977           1856   ;        robot.c:322: pwm_Left0 = -1;
0977 7598FF    1857            mov     _pwm_Left0,#0xFF
097A           1858   ;        robot.c:323: pwm_Left1 = -1;
097A 7558FF    1859            mov     _pwm_Left1,#0xFF
097D           1860   ;        robot.c:324: pwm_Right0 = -1;
097D 7518FF    1861            mov     _pwm_Right0,#0xFF
0980           1862   ;        robot.c:325: pwm_Right1 = -1;
0980 75D8FF    1863            mov     _pwm_Right1,#0xFF
0983           1864   ;        robot.c:328: if (leftright == 0) {
0983 EA        1865            mov     a,r2
0984 4B        1866            orl     a,r3
0985 6001      1867            jz      L008022?
0987 020100    1868            ljmp    L008012?
098A           1869   L008022?:
098A           1870   ;        robot.c:330: pwm_Right0 = 50;
098A 751832    1871            mov     _pwm_Right0,#0x32
098D           1872   ;        robot.c:333: waitms(1000);
098D 9003E8    1873            mov     dptr,#0x03E8
0990 120100    1874            lcall   _waitms
0993           1875   ;        robot.c:336: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0993 75820B    1876            mov     dpl,#0x0B
0996 120100    1877            lcall   _Volts_at_Pin
0999 858228    1878            mov     _turncar_vleft_1_91,dpl
099C 858329    1879            mov     (_turncar_vleft_1_91 + 1),dph
099F 85F02A    1880            mov     (_turncar_vleft_1_91 + 2),b
09A2 F52B      1881            mov     (_turncar_vleft_1_91 + 3),a
09A4           1882   ;        robot.c:337: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
09A4 75820C    1883            mov     dpl,#0x0C
09A7 120100    1884            lcall   _Volts_at_Pin
09AA 858278    1885            mov     _turncar_vright_1_91,dpl
09AD 858379    1886            mov     (_turncar_vright_1_91 + 1),dph
09B0 85F07A    1887            mov     (_turncar_vright_1_91 + 2),b
09B3 F57B      1888            mov     (_turncar_vright_1_91 + 3),a
09B5           1889   ;        robot.c:339: while (((vleft - vright) > 0.2) || ((vleft - vright) < (-0.2))) {
09B5           1890   L008002?:
09B5 C078      1891            push    _turncar_vright_1_91
09B7 C079      1892            push    (_turncar_vright_1_91 + 1)
09B9 C07A      1893            push    (_turncar_vright_1_91 + 2)
09BB C07B      1894            push    (_turncar_vright_1_91 + 3)
09BD 852882    1895            mov     dpl,_turncar_vleft_1_91
09C0 852983    1896            mov     dph,(_turncar_vleft_1_91 + 1)
09C3 852AF0    1897            mov     b,(_turncar_vleft_1_91 + 2)
09C6 E52B      1898            mov     a,(_turncar_vleft_1_91 + 3)
09C8 120100    1899            lcall   ___fssub
09CB AC82      1900            mov     r4,dpl
09CD AD83      1901            mov     r5,dph
09CF AEF0      1902            mov     r6,b
09D1 FF        1903            mov     r7,a
09D2 E581      1904            mov     a,sp
09D4 24FC      1905            add     a,#0xfc
09D6 F581      1906            mov     sp,a
09D8 74CD      1907            mov     a,#0xCD
09DA C0E0      1908            push    acc
09DC 74CC      1909            mov     a,#0xCC
09DE C0E0      1910            push    acc
09E0 744C      1911            mov     a,#0x4C
09E2 C0E0      1912            push    acc
09E4 743E      1913            mov     a,#0x3E
09E6 C0E0      1914            push    acc
09E8 8C82      1915            mov     dpl,r4
09EA 8D83      1916            mov     dph,r5
09EC 8EF0      1917            mov     b,r6
09EE EF        1918            mov     a,r7
09EF 120100    1919            lcall   ___fsgt
09F2 AC82      1920            mov     r4,dpl
09F4 E581      1921            mov     a,sp
09F6 24FC      1922            add     a,#0xfc
09F8 F581      1923            mov     sp,a
09FA EC        1924            mov     a,r4
09FB 7001      1925            jnz     L008003?
09FD C078      1926            push    _turncar_vright_1_91
09FF C079      1927            push    (_turncar_vright_1_91 + 1)
0A01 C07A      1928            push    (_turncar_vright_1_91 + 2)
0A03 C07B      1929            push    (_turncar_vright_1_91 + 3)
0A05 852882    1930            mov     dpl,_turncar_vleft_1_91
0A08 852983    1931            mov     dph,(_turncar_vleft_1_91 + 1)
0A0B 852AF0    1932            mov     b,(_turncar_vleft_1_91 + 2)
0A0E E52B      1933            mov     a,(_turncar_vleft_1_91 + 3)
0A10 120100    1934            lcall   ___fssub
0A13 AC82      1935            mov     r4,dpl
0A15 AD83      1936            mov     r5,dph
0A17 AEF0      1937            mov     r6,b
0A19 FF        1938            mov     r7,a
0A1A E581      1939            mov     a,sp
0A1C 24FC      1940            add     a,#0xfc
0A1E F581      1941            mov     sp,a
0A20 74CD      1942            mov     a,#0xCD
0A22 C0E0      1943            push    acc
0A24 74CC      1944            mov     a,#0xCC
0A26 C0E0      1945            push    acc
0A28 744C      1946            mov     a,#0x4C
0A2A C0E0      1947            push    acc
0A2C 74BE      1948            mov     a,#0xBE
0A2E C0E0      1949            push    acc
0A30 8C82      1950            mov     dpl,r4
0A32 8D83      1951            mov     dph,r5
0A34 8EF0      1952            mov     b,r6
0A36 EF        1953            mov     a,r7
0A37 120100    1954            lcall   ___fslt
0A3A AC82      1955            mov     r4,dpl
0A3C E581      1956            mov     a,sp
0A3E 24FC      1957            add     a,#0xfc
0A40 F581      1958            mov     sp,a
0A42 EC        1959            mov     a,r4
0A43 6001      1960            jz      L008004?
0A45           1961   L008003?:
0A45           1962   ;        robot.c:341: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0A45 75820B    1963            mov     dpl,#0x0B
0A48 120100    1964            lcall   _Volts_at_Pin
0A4B 858228    1965            mov     _turncar_vleft_1_91,dpl
0A4E 858329    1966            mov     (_turncar_vleft_1_91 + 1),dph
0A51 85F02A    1967            mov     (_turncar_vleft_1_91 + 2),b
0A54 F52B      1968            mov     (_turncar_vleft_1_91 + 3),a
0A56           1969   ;        robot.c:342: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0A56 75820C    1970            mov     dpl,#0x0C
0A59 120100    1971            lcall   _Volts_at_Pin
0A5C 858278    1972            mov     _turncar_vright_1_91,dpl
0A5F 858379    1973            mov     (_turncar_vright_1_91 + 1),dph
0A62 85F07A    1974            mov     (_turncar_vright_1_91 + 2),b
0A65 F57B      1975            mov     (_turncar_vright_1_91 + 3),a
0A67 020100    1976            ljmp    L008002?
0A6A           1977   L008004?:
0A6A           1978   ;        robot.c:347: pwm_Right0 = -1;           
0A6A 7518FF    1979            mov     _pwm_Right0,#0xFF
0A6D 22        1980            ret
0A6E           1981   L008012?:
0A6E           1982   ;        robot.c:351: else if (leftright == 1) {
0A6E BA0180    1983            cjne    r2,#0x01,L008025?
0A71 BB0080    1984            cjne    r3,#0x00,L008025?
0A74 8001      1985            sjmp    L008026?
0A76           1986   L008025?:
0A76 22        1987            ret
0A77           1988   L008026?:
0A77           1989   ;        robot.c:353: pwm_Left1 = 50;
0A77 755832    1990            mov     _pwm_Left1,#0x32
0A7A           1991   ;        robot.c:356: waitms(1000);
0A7A 9003E8    1992            mov     dptr,#0x03E8
0A7D 120100    1993            lcall   _waitms
0A80           1994   ;        robot.c:359: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0A80 75820B    1995            mov     dpl,#0x0B
0A83 120100    1996            lcall   _Volts_at_Pin
0A86 858228    1997            mov     _turncar_vleft_1_91,dpl
0A89 858329    1998            mov     (_turncar_vleft_1_91 + 1),dph
0A8C 85F02A    1999            mov     (_turncar_vleft_1_91 + 2),b
0A8F F52B      2000            mov     (_turncar_vleft_1_91 + 3),a
0A91           2001   ;        robot.c:360: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0A91 75820C    2002            mov     dpl,#0x0C
0A94 120100    2003            lcall   _Volts_at_Pin
0A97 858278    2004            mov     _turncar_vright_1_91,dpl
0A9A 858379    2005            mov     (_turncar_vright_1_91 + 1),dph
0A9D 85F07A    2006            mov     (_turncar_vright_1_91 + 2),b
0AA0 F57B      2007            mov     (_turncar_vright_1_91 + 3),a
0AA2           2008   ;        robot.c:362: while (((vleft - vright) > 0.2) || ((vleft - vright) < (-0.2))) {
0AA2           2009   L008006?:
0AA2 C078      2010            push    _turncar_vright_1_91
0AA4 C079      2011            push    (_turncar_vright_1_91 + 1)
0AA6 C07A      2012            push    (_turncar_vright_1_91 + 2)
0AA8 C07B      2013            push    (_turncar_vright_1_91 + 3)
0AAA 852882    2014            mov     dpl,_turncar_vleft_1_91
0AAD 852983    2015            mov     dph,(_turncar_vleft_1_91 + 1)
0AB0 852AF0    2016            mov     b,(_turncar_vleft_1_91 + 2)
0AB3 E52B      2017            mov     a,(_turncar_vleft_1_91 + 3)
0AB5 120100    2018            lcall   ___fssub
0AB8 AA82      2019            mov     r2,dpl
0ABA AB83      2020            mov     r3,dph
0ABC ACF0      2021            mov     r4,b
0ABE FD        2022            mov     r5,a
0ABF E581      2023            mov     a,sp
0AC1 24FC      2024            add     a,#0xfc
0AC3 F581      2025            mov     sp,a
0AC5 74CD      2026            mov     a,#0xCD
0AC7 C0E0      2027            push    acc
0AC9 74CC      2028            mov     a,#0xCC
0ACB C0E0      2029            push    acc
0ACD 744C      2030            mov     a,#0x4C
0ACF C0E0      2031            push    acc
0AD1 743E      2032            mov     a,#0x3E
0AD3 C0E0      2033            push    acc
0AD5 8A82      2034            mov     dpl,r2
0AD7 8B83      2035            mov     dph,r3
0AD9 8CF0      2036            mov     b,r4
0ADB ED        2037            mov     a,r5
0ADC 120100    2038            lcall   ___fsgt
0ADF AA82      2039            mov     r2,dpl
0AE1 E581      2040            mov     a,sp
0AE3 24FC      2041            add     a,#0xfc
0AE5 F581      2042            mov     sp,a
0AE7 EA        2043            mov     a,r2
0AE8 7001      2044            jnz     L008007?
0AEA C078      2045            push    _turncar_vright_1_91
0AEC C079      2046            push    (_turncar_vright_1_91 + 1)
0AEE C07A      2047            push    (_turncar_vright_1_91 + 2)
0AF0 C07B      2048            push    (_turncar_vright_1_91 + 3)
0AF2 852882    2049            mov     dpl,_turncar_vleft_1_91
0AF5 852983    2050            mov     dph,(_turncar_vleft_1_91 + 1)
0AF8 852AF0    2051            mov     b,(_turncar_vleft_1_91 + 2)
0AFB E52B      2052            mov     a,(_turncar_vleft_1_91 + 3)
0AFD 120100    2053            lcall   ___fssub
0B00 AA82      2054            mov     r2,dpl
0B02 AB83      2055            mov     r3,dph
0B04 ACF0      2056            mov     r4,b
0B06 FD        2057            mov     r5,a
0B07 E581      2058            mov     a,sp
0B09 24FC      2059            add     a,#0xfc
0B0B F581      2060            mov     sp,a
0B0D 74CD      2061            mov     a,#0xCD
0B0F C0E0      2062            push    acc
0B11 74CC      2063            mov     a,#0xCC
0B13 C0E0      2064            push    acc
0B15 744C      2065            mov     a,#0x4C
0B17 C0E0      2066            push    acc
0B19 74BE      2067            mov     a,#0xBE
0B1B C0E0      2068            push    acc
0B1D 8A82      2069            mov     dpl,r2
0B1F 8B83      2070            mov     dph,r3
0B21 8CF0      2071            mov     b,r4
0B23 ED        2072            mov     a,r5
0B24 120100    2073            lcall   ___fslt
0B27 AA82      2074            mov     r2,dpl
0B29 E581      2075            mov     a,sp
0B2B 24FC      2076            add     a,#0xfc
0B2D F581      2077            mov     sp,a
0B2F EA        2078            mov     a,r2
0B30 6001      2079            jz      L008008?
0B32           2080   L008007?:
0B32           2081   ;        robot.c:364: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0B32 75820B    2082            mov     dpl,#0x0B
0B35 120100    2083            lcall   _Volts_at_Pin
0B38 858228    2084            mov     _turncar_vleft_1_91,dpl
0B3B 858329    2085            mov     (_turncar_vleft_1_91 + 1),dph
0B3E 85F02A    2086            mov     (_turncar_vleft_1_91 + 2),b
0B41 F52B      2087            mov     (_turncar_vleft_1_91 + 3),a
0B43           2088   ;        robot.c:365: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0B43 75820C    2089            mov     dpl,#0x0C
0B46 120100    2090            lcall   _Volts_at_Pin
0B49 858278    2091            mov     _turncar_vright_1_91,dpl
0B4C 858379    2092            mov     (_turncar_vright_1_91 + 1),dph
0B4F 85F07A    2093            mov     (_turncar_vright_1_91 + 2),b
0B52 F57B      2094            mov     (_turncar_vright_1_91 + 3),a
0B54 020100    2095            ljmp    L008006?
0B57           2096   L008008?:
0B57           2097   ;        robot.c:370: pwm_Left1 = -1; 
0B57 7558FF    2098            mov     _pwm_Left1,#0xFF
0B5A 22        2099            ret
0B5B           2100   ;------------------------------------------------------------
0B5B           2101   ;Allocation info for local variables in function 'uturn'
0B5B           2102   ;------------------------------------------------------------
0B5B           2103   ;vleft                     Allocated with name '_uturn_vleft_1_97'
0B5B           2104   ;vright                    Allocated with name '_uturn_vright_1_97'
0B5B           2105   ;------------------------------------------------------------
0B5B           2106   ;        robot.c:378: void uturn(void) {
0B5B           2107   ;        -----------------------------------------
0B5B           2108   ;         function uturn
0B5B           2109   ;        -----------------------------------------
0B5B           2110   _uturn:
0B5B           2111   ;        robot.c:382: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0B5B 75820B    2112            mov     dpl,#0x0B
0B5E 120100    2113            lcall   _Volts_at_Pin
0B61 8582C8    2114            mov     _uturn_vleft_1_97,dpl
0B64 8583C9    2115            mov     (_uturn_vleft_1_97 + 1),dph
0B67 85F0CA    2116            mov     (_uturn_vleft_1_97 + 2),b
0B6A F5CB      2117            mov     (_uturn_vleft_1_97 + 3),a
0B6C           2118   ;        robot.c:383: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0B6C 75820C    2119            mov     dpl,#0x0C
0B6F 120100    2120            lcall   _Volts_at_Pin
0B72 858218    2121            mov     _uturn_vright_1_97,dpl
0B75 858319    2122            mov     (_uturn_vright_1_97 + 1),dph
0B78 85F01A    2123            mov     (_uturn_vright_1_97 + 2),b
0B7B F51B      2124            mov     (_uturn_vright_1_97 + 3),a
0B7D           2125   ;        robot.c:386: pwm_Left0 = -1;
0B7D 7598FF    2126            mov     _pwm_Left0,#0xFF
0B80           2127   ;        robot.c:387: pwm_Left1 = 50;
0B80 755832    2128            mov     _pwm_Left1,#0x32
0B83           2129   ;        robot.c:388: pwm_Right0 = -1;
0B83 7518FF    2130            mov     _pwm_Right0,#0xFF
0B86           2131   ;        robot.c:389: pwm_Right1 = 50;
0B86 75D832    2132            mov     _pwm_Right1,#0x32
0B89           2133   ;        robot.c:392: waitms(4000);
0B89 900FA0    2134            mov     dptr,#0x0FA0
0B8C 120100    2135            lcall   _waitms
0B8F           2136   ;        robot.c:395: while (((vleft - vright) > 0.2) || ((vleft - vright) < (-0.2))) {
0B8F           2137   L009002?:
0B8F C018      2138            push    _uturn_vright_1_97
0B91 C019      2139            push    (_uturn_vright_1_97 + 1)
0B93 C01A      2140            push    (_uturn_vright_1_97 + 2)
0B95 C01B      2141            push    (_uturn_vright_1_97 + 3)
0B97 85C882    2142            mov     dpl,_uturn_vleft_1_97
0B9A 85C983    2143            mov     dph,(_uturn_vleft_1_97 + 1)
0B9D 85CAF0    2144            mov     b,(_uturn_vleft_1_97 + 2)
0BA0 E5CB      2145            mov     a,(_uturn_vleft_1_97 + 3)
0BA2 120100    2146            lcall   ___fssub
0BA5 AA82      2147            mov     r2,dpl
0BA7 AB83      2148            mov     r3,dph
0BA9 ACF0      2149            mov     r4,b
0BAB FD        2150            mov     r5,a
0BAC E581      2151            mov     a,sp
0BAE 24FC      2152            add     a,#0xfc
0BB0 F581      2153            mov     sp,a
0BB2 74CD      2154            mov     a,#0xCD
0BB4 C0E0      2155            push    acc
0BB6 74CC      2156            mov     a,#0xCC
0BB8 C0E0      2157            push    acc
0BBA 744C      2158            mov     a,#0x4C
0BBC C0E0      2159            push    acc
0BBE 743E      2160            mov     a,#0x3E
0BC0 C0E0      2161            push    acc
0BC2 8A82      2162            mov     dpl,r2
0BC4 8B83      2163            mov     dph,r3
0BC6 8CF0      2164            mov     b,r4
0BC8 ED        2165            mov     a,r5
0BC9 120100    2166            lcall   ___fsgt
0BCC AA82      2167            mov     r2,dpl
0BCE E581      2168            mov     a,sp
0BD0 24FC      2169            add     a,#0xfc
0BD2 F581      2170            mov     sp,a
0BD4 EA        2171            mov     a,r2
0BD5 7001      2172            jnz     L009003?
0BD7 C018      2173            push    _uturn_vright_1_97
0BD9 C019      2174            push    (_uturn_vright_1_97 + 1)
0BDB C01A      2175            push    (_uturn_vright_1_97 + 2)
0BDD C01B      2176            push    (_uturn_vright_1_97 + 3)
0BDF 85C882    2177            mov     dpl,_uturn_vleft_1_97
0BE2 85C983    2178            mov     dph,(_uturn_vleft_1_97 + 1)
0BE5 85CAF0    2179            mov     b,(_uturn_vleft_1_97 + 2)
0BE8 E5CB      2180            mov     a,(_uturn_vleft_1_97 + 3)
0BEA 120100    2181            lcall   ___fssub
0BED AA82      2182            mov     r2,dpl
0BEF AB83      2183            mov     r3,dph
0BF1 ACF0      2184            mov     r4,b
0BF3 FD        2185            mov     r5,a
0BF4 E581      2186            mov     a,sp
0BF6 24FC      2187            add     a,#0xfc
0BF8 F581      2188            mov     sp,a
0BFA 74CD      2189            mov     a,#0xCD
0BFC C0E0      2190            push    acc
0BFE 74CC      2191            mov     a,#0xCC
0C00 C0E0      2192            push    acc
0C02 744C      2193            mov     a,#0x4C
0C04 C0E0      2194            push    acc
0C06 74BE      2195            mov     a,#0xBE
0C08 C0E0      2196            push    acc
0C0A 8A82      2197            mov     dpl,r2
0C0C 8B83      2198            mov     dph,r3
0C0E 8CF0      2199            mov     b,r4
0C10 ED        2200            mov     a,r5
0C11 120100    2201            lcall   ___fslt
0C14 AA82      2202            mov     r2,dpl
0C16 E581      2203            mov     a,sp
0C18 24FC      2204            add     a,#0xfc
0C1A F581      2205            mov     sp,a
0C1C EA        2206            mov     a,r2
0C1D 6001      2207            jz      L009005?
0C1F           2208   L009003?:
0C1F           2209   ;        robot.c:397: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0C1F 75820B    2210            mov     dpl,#0x0B
0C22 120100    2211            lcall   _Volts_at_Pin
0C25 8582C8    2212            mov     _uturn_vleft_1_97,dpl
0C28 8583C9    2213            mov     (_uturn_vleft_1_97 + 1),dph
0C2B 85F0CA    2214            mov     (_uturn_vleft_1_97 + 2),b
0C2E F5CB      2215            mov     (_uturn_vleft_1_97 + 3),a
0C30           2216   ;        robot.c:398: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0C30 75820C    2217            mov     dpl,#0x0C
0C33 120100    2218            lcall   _Volts_at_Pin
0C36 858218    2219            mov     _uturn_vright_1_97,dpl
0C39 858319    2220            mov     (_uturn_vright_1_97 + 1),dph
0C3C 85F01A    2221            mov     (_uturn_vright_1_97 + 2),b
0C3F F51B      2222            mov     (_uturn_vright_1_97 + 3),a
0C41 020100    2223            ljmp    L009002?
0C44           2224   L009005?:
0C44 22        2225            ret
0C45           2226   ;------------------------------------------------------------
0C45           2227   ;Allocation info for local variables in function 'movecar'
0C45           2228   ;------------------------------------------------------------
0C45           2229   ;power                     Allocated with name '_movecar_PARM_2'
0C45           2230   ;forback                   Allocated to registers r2 r3 
0C45           2231   ;------------------------------------------------------------
0C45           2232   ;        robot.c:405: void movecar (int forback, int power) {
0C45           2233   ;        -----------------------------------------
0C45           2234   ;         function movecar
0C45           2235   ;        -----------------------------------------
0C45           2236   _movecar:
0C45 AA82      2237            mov     r2,dpl
0C47 AB83      2238            mov     r3,dph
0C49           2239   ;        robot.c:407: if (forback == 0) {
0C49 EA        2240            mov     a,r2
0C4A 4B        2241            orl     a,r3
0C4B 7001      2242            jnz     L010002?
0C4D           2243   ;        robot.c:408: pwm_Left1 = power;
0C4D AA58      2244            mov     r2,_movecar_PARM_2
0C4F 8A58      2245            mov     _pwm_Left1,r2
0C51           2246   ;        robot.c:409: pwm_Left0 = -1;
0C51 7598FF    2247            mov     _pwm_Left0,#0xFF
0C54           2248   ;        robot.c:410: pwm_Right0 = power;
0C54 8A18      2249            mov     _pwm_Right0,r2
0C56           2250   ;        robot.c:411: pwm_Right1 = -1;
0C56 75D8FF    2251            mov     _pwm_Right1,#0xFF
0C59 22        2252            ret
0C5A           2253   L010002?:
0C5A           2254   ;        robot.c:414: pwm_Left0 = power;
0C5A AA58      2255            mov     r2,_movecar_PARM_2
0C5C 8A98      2256            mov     _pwm_Left0,r2
0C5E           2257   ;        robot.c:415: pwm_Left1 = -1;
0C5E 7558FF    2258            mov     _pwm_Left1,#0xFF
0C61           2259   ;        robot.c:416: pwm_Right1 = power;
0C61 8AD8      2260            mov     _pwm_Right1,r2
0C63           2261   ;        robot.c:417: pwm_Right0 = -1;
0C63 7518FF    2262            mov     _pwm_Right0,#0xFF
0C66 22        2263            ret
0C67           2264            rseg R_CSEG
0C67           2265   
0000           2266            rseg R_XINIT
0000           2267   
0000           2268            rseg R_CONST
0000           2269   __str_0:
0000 1B        2270            db 0x1B
0001 5B324A    2271            db '[2J'
0004 00        2272            db 0x00
0005           2273   __str_1:
0005 0A        2274            db 0x0A
0006 63757272  2275            db 'current command is %d'
     656E7420
     636F6D6D
     616E6420
     69732025
     64
001B 0D        2276            db 0x0D
001C 0A        2277            db 0x0A
001D 00        2278            db 0x00
001E           2279   __str_2:
001E 322E333D  2280            db '2.3= %f, 2.4= %f, LeftF= %4d, RightF= %4d, LeftB= %4d, Right'
     2025662C
     20322E34
     3D202566
     2C204C65
     6674463D
     20253464
     2C205269
     67687446
     3D202534
     642C204C
     65667442
     3D202534
     642C2052
     69676874
005A 423D2025  2281            db 'B= %4d, command:%1d, state:%1d'
     34642C20
     636F6D6D
     616E643A
     2531642C
     20737461
     74653A25
     3164
0078 0D        2282            db 0x0D
0079 00        2283            db 0x00
007A           2284   
002E           2285            CSEG
002E           2286   
002E           2287   end
