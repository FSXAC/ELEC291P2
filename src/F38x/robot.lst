0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Sun Apr 02 13:29:27 2017
0000              5   ;--------------------------------------------------------
                  5   $name robot
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _Timer2_ISR
0000             29            public _currentstate
0000             30            public _currentcmd
0000             31            public _direction
0000             32            public _pwm_Right1
0000             33            public _pwm_Right0
0000             34            public _pwm_Left1
0000             35            public _pwm_Left0
0000             36            public _pwm_both
0000             37            public _mode
0000             38            public _pwm_count
0000             39            public _forward_backward
0000             40            public _readData
0000             41            public _linetrack
0000             42            public _stopcar
0000             43            public _turncar
0000             44            public _uturn
0000             45   ;--------------------------------------------------------
0000             46   ; Special Function Registers
0000             47   ;--------------------------------------------------------
0000             48   _P0             DATA 0x80
0000             49   _SP             DATA 0x81
0000             50   _DPL            DATA 0x82
0000             51   _DPH            DATA 0x83
0000             52   _EMI0TC         DATA 0x84
0000             53   _EMI0CF         DATA 0x85
0000             54   _OSCLCN         DATA 0x86
0000             55   _PCON           DATA 0x87
0000             56   _TCON           DATA 0x88
0000             57   _TMOD           DATA 0x89
0000             58   _TL0            DATA 0x8a
0000             59   _TL1            DATA 0x8b
0000             60   _TH0            DATA 0x8c
0000             61   _TH1            DATA 0x8d
0000             62   _CKCON          DATA 0x8e
0000             63   _PSCTL          DATA 0x8f
0000             64   _P1             DATA 0x90
0000             65   _TMR3CN         DATA 0x91
0000             66   _TMR4CN         DATA 0x91
0000             67   _TMR3RLL        DATA 0x92
0000             68   _TMR4RLL        DATA 0x92
0000             69   _TMR3RLH        DATA 0x93
0000             70   _TMR4RLH        DATA 0x93
0000             71   _TMR3L          DATA 0x94
0000             72   _TMR4L          DATA 0x94
0000             73   _TMR3H          DATA 0x95
0000             74   _TMR4H          DATA 0x95
0000             75   _USB0ADR        DATA 0x96
0000             76   _USB0DAT        DATA 0x97
0000             77   _SCON           DATA 0x98
0000             78   _SCON0          DATA 0x98
0000             79   _SBUF           DATA 0x99
0000             80   _SBUF0          DATA 0x99
0000             81   _CPT1CN         DATA 0x9a
0000             82   _CPT0CN         DATA 0x9b
0000             83   _CPT1MD         DATA 0x9c
0000             84   _CPT0MD         DATA 0x9d
0000             85   _CPT1MX         DATA 0x9e
0000             86   _CPT0MX         DATA 0x9f
0000             87   _P2             DATA 0xa0
0000             88   _SPI0CFG        DATA 0xa1
0000             89   _SPI0CKR        DATA 0xa2
0000             90   _SPI0DAT        DATA 0xa3
0000             91   _P0MDOUT        DATA 0xa4
0000             92   _P1MDOUT        DATA 0xa5
0000             93   _P2MDOUT        DATA 0xa6
0000             94   _P3MDOUT        DATA 0xa7
0000             95   _IE             DATA 0xa8
0000             96   _CLKSEL         DATA 0xa9
0000             97   _EMI0CN         DATA 0xaa
0000             98   __XPAGE         DATA 0xaa
0000             99   _SBCON1         DATA 0xac
0000            100   _P4MDOUT        DATA 0xae
0000            101   _PFE0CN         DATA 0xaf
0000            102   _P3             DATA 0xb0
0000            103   _OSCXCN         DATA 0xb1
0000            104   _OSCICN         DATA 0xb2
0000            105   _OSCICL         DATA 0xb3
0000            106   _SBRLL1         DATA 0xb4
0000            107   _SBRLH1         DATA 0xb5
0000            108   _FLSCL          DATA 0xb6
0000            109   _FLKEY          DATA 0xb7
0000            110   _IP             DATA 0xb8
0000            111   _CLKMUL         DATA 0xb9
0000            112   _SMBTC          DATA 0xb9
0000            113   _AMX0N          DATA 0xba
0000            114   _AMX0P          DATA 0xbb
0000            115   _ADC0CF         DATA 0xbc
0000            116   _ADC0L          DATA 0xbd
0000            117   _ADC0H          DATA 0xbe
0000            118   _SFRPAGE        DATA 0xbf
0000            119   _SMB0CN         DATA 0xc0
0000            120   _SMB1CN         DATA 0xc0
0000            121   _SMB0CF         DATA 0xc1
0000            122   _SMB1CF         DATA 0xc1
0000            123   _SMB0DAT        DATA 0xc2
0000            124   _SMB1DAT        DATA 0xc2
0000            125   _ADC0GTL        DATA 0xc3
0000            126   _ADC0GTH        DATA 0xc4
0000            127   _ADC0LTL        DATA 0xc5
0000            128   _ADC0LTH        DATA 0xc6
0000            129   _P4             DATA 0xc7
0000            130   _TMR2CN         DATA 0xc8
0000            131   _TMR5CN         DATA 0xc8
0000            132   _REG01CN        DATA 0xc9
0000            133   _TMR2RLL        DATA 0xca
0000            134   _TMR5RLL        DATA 0xca
0000            135   _TMR2RLH        DATA 0xcb
0000            136   _TMR5RLH        DATA 0xcb
0000            137   _TMR2L          DATA 0xcc
0000            138   _TMR5L          DATA 0xcc
0000            139   _TMR2H          DATA 0xcd
0000            140   _TMR5H          DATA 0xcd
0000            141   _SMB0ADM        DATA 0xce
0000            142   _SMB1ADM        DATA 0xce
0000            143   _SMB0ADR        DATA 0xcf
0000            144   _SMB1ADR        DATA 0xcf
0000            145   _PSW            DATA 0xd0
0000            146   _REF0CN         DATA 0xd1
0000            147   _SCON1          DATA 0xd2
0000            148   _SBUF1          DATA 0xd3
0000            149   _P0SKIP         DATA 0xd4
0000            150   _P1SKIP         DATA 0xd5
0000            151   _P2SKIP         DATA 0xd6
0000            152   _USB0XCN        DATA 0xd7
0000            153   _PCA0CN         DATA 0xd8
0000            154   _PCA0MD         DATA 0xd9
0000            155   _PCA0CPM0       DATA 0xda
0000            156   _PCA0CPM1       DATA 0xdb
0000            157   _PCA0CPM2       DATA 0xdc
0000            158   _PCA0CPM3       DATA 0xdd
0000            159   _PCA0CPM4       DATA 0xde
0000            160   _P3SKIP         DATA 0xdf
0000            161   _ACC            DATA 0xe0
0000            162   _XBR0           DATA 0xe1
0000            163   _XBR1           DATA 0xe2
0000            164   _XBR2           DATA 0xe3
0000            165   _IT01CF         DATA 0xe4
0000            166   _CKCON1         DATA 0xe4
0000            167   _SMOD1          DATA 0xe5
0000            168   _EIE1           DATA 0xe6
0000            169   _EIE2           DATA 0xe7
0000            170   _ADC0CN         DATA 0xe8
0000            171   _PCA0CPL1       DATA 0xe9
0000            172   _PCA0CPH1       DATA 0xea
0000            173   _PCA0CPL2       DATA 0xeb
0000            174   _PCA0CPH2       DATA 0xec
0000            175   _PCA0CPL3       DATA 0xed
0000            176   _PCA0CPH3       DATA 0xee
0000            177   _RSTSRC         DATA 0xef
0000            178   _B              DATA 0xf0
0000            179   _P0MDIN         DATA 0xf1
0000            180   _P1MDIN         DATA 0xf2
0000            181   _P2MDIN         DATA 0xf3
0000            182   _P3MDIN         DATA 0xf4
0000            183   _P4MDIN         DATA 0xf5
0000            184   _EIP1           DATA 0xf6
0000            185   _EIP2           DATA 0xf7
0000            186   _SPI0CN         DATA 0xf8
0000            187   _PCA0L          DATA 0xf9
0000            188   _PCA0H          DATA 0xfa
0000            189   _PCA0CPL0       DATA 0xfb
0000            190   _PCA0CPH0       DATA 0xfc
0000            191   _PCA0CPL4       DATA 0xfd
0000            192   _PCA0CPH4       DATA 0xfe
0000            193   _VDM0CN         DATA 0xff
0000            194   _DPTR           DATA 0x8382
0000            195   _TMR2RL         DATA 0xcbca
0000            196   _TMR3RL         DATA 0x9392
0000            197   _TMR4RL         DATA 0x9392
0000            198   _TMR5RL         DATA 0xcbca
0000            199   _TMR2           DATA 0xcdcc
0000            200   _TMR3           DATA 0x9594
0000            201   _TMR4           DATA 0x9594
0000            202   _TMR5           DATA 0xcdcc
0000            203   _SBRL1          DATA 0xb5b4
0000            204   _ADC0           DATA 0xbebd
0000            205   _ADC0GT         DATA 0xc4c3
0000            206   _ADC0LT         DATA 0xc6c5
0000            207   _PCA0           DATA 0xfaf9
0000            208   _PCA0CP1        DATA 0xeae9
0000            209   _PCA0CP2        DATA 0xeceb
0000            210   _PCA0CP3        DATA 0xeeed
0000            211   _PCA0CP0        DATA 0xfcfb
0000            212   _PCA0CP4        DATA 0xfefd
0000            213   ;--------------------------------------------------------
0000            214   ; special function bits
0000            215   ;--------------------------------------------------------
0000            216   _P0_0           BIT 0x80
0000            217   _P0_1           BIT 0x81
0000            218   _P0_2           BIT 0x82
0000            219   _P0_3           BIT 0x83
0000            220   _P0_4           BIT 0x84
0000            221   _P0_5           BIT 0x85
0000            222   _P0_6           BIT 0x86
0000            223   _P0_7           BIT 0x87
0000            224   _TF1            BIT 0x8f
0000            225   _TR1            BIT 0x8e
0000            226   _TF0            BIT 0x8d
0000            227   _TR0            BIT 0x8c
0000            228   _IE1            BIT 0x8b
0000            229   _IT1            BIT 0x8a
0000            230   _IE0            BIT 0x89
0000            231   _IT0            BIT 0x88
0000            232   _P1_0           BIT 0x90
0000            233   _P1_1           BIT 0x91
0000            234   _P1_2           BIT 0x92
0000            235   _P1_3           BIT 0x93
0000            236   _P1_4           BIT 0x94
0000            237   _P1_5           BIT 0x95
0000            238   _P1_6           BIT 0x96
0000            239   _P1_7           BIT 0x97
0000            240   _S0MODE         BIT 0x9f
0000            241   _SCON0_6        BIT 0x9e
0000            242   _MCE0           BIT 0x9d
0000            243   _REN0           BIT 0x9c
0000            244   _TB80           BIT 0x9b
0000            245   _RB80           BIT 0x9a
0000            246   _TI0            BIT 0x99
0000            247   _RI0            BIT 0x98
0000            248   _SCON_6         BIT 0x9e
0000            249   _MCE            BIT 0x9d
0000            250   _REN            BIT 0x9c
0000            251   _TB8            BIT 0x9b
0000            252   _RB8            BIT 0x9a
0000            253   _TI             BIT 0x99
0000            254   _RI             BIT 0x98
0000            255   _P2_0           BIT 0xa0
0000            256   _P2_1           BIT 0xa1
0000            257   _P2_2           BIT 0xa2
0000            258   _P2_3           BIT 0xa3
0000            259   _P2_4           BIT 0xa4
0000            260   _P2_5           BIT 0xa5
0000            261   _P2_6           BIT 0xa6
0000            262   _P2_7           BIT 0xa7
0000            263   _EA             BIT 0xaf
0000            264   _ESPI0          BIT 0xae
0000            265   _ET2            BIT 0xad
0000            266   _ES0            BIT 0xac
0000            267   _ET1            BIT 0xab
0000            268   _EX1            BIT 0xaa
0000            269   _ET0            BIT 0xa9
0000            270   _EX0            BIT 0xa8
0000            271   _P3_0           BIT 0xb0
0000            272   _P3_1           BIT 0xb1
0000            273   _P3_2           BIT 0xb2
0000            274   _P3_3           BIT 0xb3
0000            275   _P3_4           BIT 0xb4
0000            276   _P3_5           BIT 0xb5
0000            277   _P3_6           BIT 0xb6
0000            278   _P3_7           BIT 0xb7
0000            279   _IP_7           BIT 0xbf
0000            280   _PSPI0          BIT 0xbe
0000            281   _PT2            BIT 0xbd
0000            282   _PS0            BIT 0xbc
0000            283   _PT1            BIT 0xbb
0000            284   _PX1            BIT 0xba
0000            285   _PT0            BIT 0xb9
0000            286   _PX0            BIT 0xb8
0000            287   _MASTER0        BIT 0xc7
0000            288   _TXMODE0        BIT 0xc6
0000            289   _STA0           BIT 0xc5
0000            290   _STO0           BIT 0xc4
0000            291   _ACKRQ0         BIT 0xc3
0000            292   _ARBLOST0       BIT 0xc2
0000            293   _ACK0           BIT 0xc1
0000            294   _SI0            BIT 0xc0
0000            295   _MASTER1        BIT 0xc7
0000            296   _TXMODE1        BIT 0xc6
0000            297   _STA1           BIT 0xc5
0000            298   _STO1           BIT 0xc4
0000            299   _ACKRQ1         BIT 0xc3
0000            300   _ARBLOST1       BIT 0xc2
0000            301   _ACK1           BIT 0xc1
0000            302   _SI1            BIT 0xc0
0000            303   _TF2            BIT 0xcf
0000            304   _TF2H           BIT 0xcf
0000            305   _TF2L           BIT 0xce
0000            306   _TF2LEN         BIT 0xcd
0000            307   _TF2CEN         BIT 0xcc
0000            308   _T2SPLIT        BIT 0xcb
0000            309   _TR2            BIT 0xca
0000            310   _T2CSS          BIT 0xc9
0000            311   _T2XCLK         BIT 0xc8
0000            312   _TF5H           BIT 0xcf
0000            313   _TF5L           BIT 0xce
0000            314   _TF5LEN         BIT 0xcd
0000            315   _TMR5CN_4       BIT 0xcc
0000            316   _T5SPLIT        BIT 0xcb
0000            317   _TR5            BIT 0xca
0000            318   _TMR5CN_1       BIT 0xc9
0000            319   _T5XCLK         BIT 0xc8
0000            320   _CY             BIT 0xd7
0000            321   _AC             BIT 0xd6
0000            322   _F0             BIT 0xd5
0000            323   _RS1            BIT 0xd4
0000            324   _RS0            BIT 0xd3
0000            325   _OV             BIT 0xd2
0000            326   _F1             BIT 0xd1
0000            327   _PARITY         BIT 0xd0
0000            328   _CF             BIT 0xdf
0000            329   _CR             BIT 0xde
0000            330   _PCA0CN_5       BIT 0xde
0000            331   _CCF4           BIT 0xdc
0000            332   _CCF3           BIT 0xdb
0000            333   _CCF2           BIT 0xda
0000            334   _CCF1           BIT 0xd9
0000            335   _CCF0           BIT 0xd8
0000            336   _ACC_7          BIT 0xe7
0000            337   _ACC_6          BIT 0xe6
0000            338   _ACC_5          BIT 0xe5
0000            339   _ACC_4          BIT 0xe4
0000            340   _ACC_3          BIT 0xe3
0000            341   _ACC_2          BIT 0xe2
0000            342   _ACC_1          BIT 0xe1
0000            343   _ACC_0          BIT 0xe0
0000            344   _AD0EN          BIT 0xef
0000            345   _AD0TM          BIT 0xee
0000            346   _AD0INT         BIT 0xed
0000            347   _AD0BUSY        BIT 0xec
0000            348   _AD0WINT        BIT 0xeb
0000            349   _AD0CM2         BIT 0xea
0000            350   _AD0CM1         BIT 0xe9
0000            351   _AD0CM0         BIT 0xe8
0000            352   _B_7            BIT 0xf7
0000            353   _B_6            BIT 0xf6
0000            354   _B_5            BIT 0xf5
0000            355   _B_4            BIT 0xf4
0000            356   _B_3            BIT 0xf3
0000            357   _B_2            BIT 0xf2
0000            358   _B_1            BIT 0xf1
0000            359   _B_0            BIT 0xf0
0000            360   _SPIF           BIT 0xff
0000            361   _WCOL           BIT 0xfe
0000            362   _MODF           BIT 0xfd
0000            363   _RXOVRN         BIT 0xfc
0000            364   _NSSMD1         BIT 0xfb
0000            365   _NSSMD0         BIT 0xfa
0000            366   _TXBMT          BIT 0xf9
0000            367   _SPIEN          BIT 0xf8
0000            368   ;--------------------------------------------------------
0000            369   ; overlayable register banks
0000            370   ;--------------------------------------------------------
0000            371            rbank0 segment data overlay
0000            372   ;--------------------------------------------------------
0000            373   ; internal ram data
0000            374   ;--------------------------------------------------------
0000            375            rseg R_DSEG
0000            376   _pwm_count:
0000            377            ds 1
0001            378   _mode:
0001            379            ds 1
0002            380   _pwm_both:
0002            381            ds 1
0003            382   _pwm_Left0:
0003            383            ds 1
0004            384   _pwm_Left1:
0004            385            ds 1
0005            386   _pwm_Right0:
0005            387            ds 1
0006            388   _pwm_Right1:
0006            389            ds 1
0007            390   _direction:
0007            391            ds 1
0008            392   _currentcmd:
0008            393            ds 1
0009            394   _currentstate:
0009            395            ds 1
000A            396   _linetrack_forwardbackward_1_79:
000A            397            ds 2
000C            398   _linetrack_vleft_1_80:
000C            399            ds 4
0010            400   _linetrack_vright_1_80:
0010            401            ds 4
0014            402   _linetrack_sloc0_1_0:
0014            403            ds 4
0018            404   _turncar_vleft_1_85:
0018            405            ds 4
001C            406   _turncar_vright_1_85:
001C            407            ds 4
0020            408   _uturn_vleft_1_91:
0020            409            ds 4
0024            410   _uturn_vright_1_91:
0024            411            ds 4
0028            412   ;--------------------------------------------------------
0028            413   ; overlayable items in internal ram 
0028            414   ;--------------------------------------------------------
0000            415            rseg    R_OSEG
0000            416   ;--------------------------------------------------------
0000            417   ; indirectly addressable internal ram data
0000            418   ;--------------------------------------------------------
0000            419            rseg R_ISEG
0000            420   ;--------------------------------------------------------
0000            421   ; absolute internal ram data
0000            422   ;--------------------------------------------------------
0000            423            DSEG
0000            424   ;--------------------------------------------------------
0000            425   ; bit data
0000            426   ;--------------------------------------------------------
0000            427            rseg R_BSEG
0000            428   _Timer2_ISR_sloc0_1_0:
0000            429            DBIT    1
0001            430   ;--------------------------------------------------------
0001            431   ; paged external ram data
0001            432   ;--------------------------------------------------------
0000            433            rseg R_PSEG
0000            434   ;--------------------------------------------------------
0000            435   ; external ram data
0000            436   ;--------------------------------------------------------
0000            437            rseg R_XSEG
0000            438   ;--------------------------------------------------------
0000            439   ; absolute external ram data
0000            440   ;--------------------------------------------------------
0000            441            XSEG
0000            442   ;--------------------------------------------------------
0000            443   ; external initialized ram data
0000            444   ;--------------------------------------------------------
0000            445            rseg R_IXSEG
0000            446            rseg R_HOME
0000            447            rseg R_GSINIT
0000            448            rseg R_CSEG
0000            449   ;--------------------------------------------------------
0000            450   ; Reset entry point and interrupt vectors
0000            451   ;--------------------------------------------------------
0000            452            CSEG at 0x0000
0000 020100     453            ljmp    _crt0
002B            454            CSEG at 0x002b
002B 020100     455            ljmp    _Timer2_ISR
002E            456   ;--------------------------------------------------------
002E            457   ; global & static initialisations
002E            458   ;--------------------------------------------------------
0000            459            rseg R_HOME
0000            460            rseg R_GSINIT
0000            461            rseg R_GSINIT
0000            462   ;--------------------------------------------------------
0000            463   ; data variables initialization
0000            464   ;--------------------------------------------------------
0000            465            rseg R_DINIT
0000            466   ;        robot.c:8: volatile  char pwm_count=0;
0000 752000     467            mov     _pwm_count,#0x00
0003            468   ;        robot.c:9: volatile  char mode = 0;
0003 75F000     469            mov     _mode,#0x00
0006            470   ;        robot.c:10: volatile  char pwm_both =0;
0006 75B000     471            mov     _pwm_both,#0x00
0009            472   ;        robot.c:11: volatile  char pwm_Left0 = 0; //p1.5
0009 757000     473            mov     _pwm_Left0,#0x00
000C            474   ;        robot.c:12: volatile  char pwm_Left1 = 0; //p1.6
000C 753000     475            mov     _pwm_Left1,#0x00
000F            476   ;        robot.c:13: volatile  char pwm_Right0 = 0; //p2.0
000F 75F000     477            mov     _pwm_Right0,#0x00
0012            478   ;        robot.c:14: volatile  char pwm_Right1 = 0; //p2.1
0012 75B000     479            mov     _pwm_Right1,#0x00
0015            480   ;        robot.c:15: volatile  char direction = 0; // 1 for back 0 for forward
0015 757000     481            mov     _direction,#0x00
0018            482   ;        robot.c:17: volatile  char currentcmd = 0;
0018 753000     483            mov     _currentcmd,#0x00
001B            484   ;        robot.c:18: volatile  char currentstate = 1;
001B 75F001     485            mov     _currentstate,#0x01
001E            486            ; The linker places a 'ret' at the end of segment R_DINIT.
001E            487   ;--------------------------------------------------------
001E            488   ; code
001E            489   ;--------------------------------------------------------
0000            490            rseg R_CSEG
0000            491   ;------------------------------------------------------------
0000            492   ;Allocation info for local variables in function 'Timer2_ISR'
0000            493   ;------------------------------------------------------------
0000            494   ;------------------------------------------------------------
0000            495   ;        robot.c:20: void Timer2_ISR (void) interrupt 5 {
0000            496   ;        -----------------------------------------
0000            497   ;         function Timer2_ISR
0000            498   ;        -----------------------------------------
0000            499   _Timer2_ISR:
0000            500            using   0
0000 C0E0       501            push    acc
0002 C0F0       502            push    b
0004 C0D0       503            push    psw
0006 75D000     504            mov     psw,#0x00
0009            505   ;        robot.c:21: TF2H = 0; // Clear Timer2 interrupt flag
0009 C2CF       506            clr     _TF2H
000B            507   ;        robot.c:23: pwm_count++;
000B 0520       508            inc     _pwm_count
000D            509   ;        robot.c:24: if(pwm_count>100) pwm_count=0;
000D C3         510            clr     c
000E 74E4       511            mov     a,#(0x64 ^ 0x80)
0010 8520F0     512            mov     b,_pwm_count
0013 63F080     513            xrl     b,#0x80
0016 95F0       514            subb    a,b
0018 5001       515            jnc     L002002?
001A 752000     516            mov     _pwm_count,#0x00
001D            517   L002002?:
001D            518   ;        robot.c:27: MOTOR_LEFT0 = pwm_count > pwm_Left0 ? 0 : 1; //p1.5
001D C3         519            clr     c
001E E570       520            mov     a,_pwm_Left0
0020 6480       521            xrl     a,#0x80
0022 8520F0     522            mov     b,_pwm_count
0025 63F080     523            xrl     b,#0x80
0028 95F0       524            subb    a,b
002A 9200       525            mov  _Timer2_ISR_sloc0_1_0,c
002C B3         526            cpl     c
002D 9295       527            mov     _P1_5,c
002F            528   ;        robot.c:28: MOTOR_LEFT1 = pwm_count > pwm_Left1 ? 0 : 1; //p1.6
002F C3         529            clr     c
0030 E530       530            mov     a,_pwm_Left1
0032 6480       531            xrl     a,#0x80
0034 8520F0     532            mov     b,_pwm_count
0037 63F080     533            xrl     b,#0x80
003A 95F0       534            subb    a,b
003C 9200       535            mov  _Timer2_ISR_sloc0_1_0,c
003E B3         536            cpl     c
003F 9296       537            mov     _P1_6,c
0041            538   ;        robot.c:29: MOTOR_RIGHT0 = pwm_count > pwm_Right0 ? 0 : 1; //p2.0
0041 C3         539            clr     c
0042 E5F0       540            mov     a,_pwm_Right0
0044 6480       541            xrl     a,#0x80
0046 8520F0     542            mov     b,_pwm_count
0049 63F080     543            xrl     b,#0x80
004C 95F0       544            subb    a,b
004E 9200       545            mov  _Timer2_ISR_sloc0_1_0,c
0050 B3         546            cpl     c
0051 92A0       547            mov     _P2_0,c
0053            548   ;        robot.c:30: MOTOR_RIGHT1 = pwm_count > pwm_Right1 ? 0 : 1; //p2.1
0053 C3         549            clr     c
0054 E5B0       550            mov     a,_pwm_Right1
0056 6480       551            xrl     a,#0x80
0058 8520F0     552            mov     b,_pwm_count
005B 63F080     553            xrl     b,#0x80
005E 95F0       554            subb    a,b
0060 9200       555            mov  _Timer2_ISR_sloc0_1_0,c
0062 B3         556            cpl     c
0063 92A1       557            mov     _P2_1,c
0065 D0D0       558            pop     psw
0067 D0F0       559            pop     b
0069 D0E0       560            pop     acc
006B 32         561            reti
006C            562   ;        eliminated unneeded push/pop dpl
006C            563   ;        eliminated unneeded push/pop dph
006C            564   ;------------------------------------------------------------
006C            565   ;Allocation info for local variables in function 'forward_backward'
006C            566   ;------------------------------------------------------------
006C            567   ;direction                 Allocated to registers r2 
006C            568   ;------------------------------------------------------------
006C            569   ;        robot.c:37: void forward_backward(unsigned char direction) {
006C            570   ;        -----------------------------------------
006C            571   ;         function forward_backward
006C            572   ;        -----------------------------------------
006C            573   _forward_backward:
006C            574   ;        robot.c:38: if (direction == 0) { //p2.1,1.6 on
006C E582       575            mov     a,dpl
006E FA         576            mov     r2,a
006F 7001       577            jnz     L003004?
0071            578   ;        robot.c:39: pwm_Left0 = pwm_Right0 = -1;
0071 75F0FF     579            mov     _pwm_Right0,#0xFF
0074 7570FF     580            mov     _pwm_Left0,#0xFF
0077            581   ;        robot.c:40: pwm_Left1 = pwm_Right1 = pwm_both;  //MOTOR_LEFT1 = MOTOR_RIGHT1 = pwm_both;
0077 85B0B0     582            mov     _pwm_Right1,_pwm_both
007A 85B030     583            mov     _pwm_Left1,_pwm_both
007D 22         584            ret
007E            585   L003004?:
007E            586   ;        robot.c:43: else if (direction == 1) { //p2.0,1.5 on
007E BA0100     587            cjne    r2,#0x01,L003006?
0081            588   ;        robot.c:44: pwm_Left1 = pwm_Right1 = -1;
0081 75B0FF     589            mov     _pwm_Right1,#0xFF
0084 7530FF     590            mov     _pwm_Left1,#0xFF
0087            591   ;        robot.c:45: pwm_Left0 = pwm_Right0 = pwm_both; 
0087 85B0F0     592            mov     _pwm_Right0,_pwm_both
008A 85B070     593            mov     _pwm_Left0,_pwm_both
008D            594   L003006?:
008D 22         595            ret
008E            596   ;------------------------------------------------------------
008E            597   ;Allocation info for local variables in function 'readData'
008E            598   ;------------------------------------------------------------
008E            599   ;commandflag               Allocated to registers r2 r3 
008E            600   ;------------------------------------------------------------
008E            601   ;        robot.c:52: void readData (void) {
008E            602   ;        -----------------------------------------
008E            603   ;         function readData
008E            604   ;        -----------------------------------------
008E            605   _readData:
008E            606   ;        robot.c:53: int commandflag = 0;                                        //determines if there's a real command coming in or not
008E 7A00       607            mov     r2,#0x00
0090 7B00       608            mov     r3,#0x00
0092            609   ;        robot.c:55: if (COMMAND_PIN == 0) {                                     //0---
0092 309040     610            jnb     _P1_0,L004039?
0095 020100     611            ljmp    L004022?
0098            612   L004039?:
0098            613   ;        robot.c:56: waitms(6);
0098 900006     614            mov     dptr,#0x0006
009B C002       615            push    ar2
009D C003       616            push    ar3
009F 120100     617            lcall   _waitms
00A2 D003       618            pop     ar3
00A4 D002       619            pop     ar2
00A6            620   ;        robot.c:57: if (COMMAND_PIN == 1) {                             //01--
00A6 309000     621            jnb     _P1_0,L004019?
00A9            622   ;        robot.c:58: waitms(4);
00A9 900004     623            mov     dptr,#0x0004
00AC C002       624            push    ar2
00AE C003       625            push    ar3
00B0 120100     626            lcall   _waitms
00B3 D003       627            pop     ar3
00B5 D002       628            pop     ar2
00B7            629   ;        robot.c:59: if (COMMAND_PIN == 0) {                     //010-
00B7 209040     630            jb      _P1_0,L004007?
00BA            631   ;        robot.c:60: waitms(4);
00BA 900004     632            mov     dptr,#0x0004
00BD C002       633            push    ar2
00BF C003       634            push    ar3
00C1 120100     635            lcall   _waitms
00C4 D003       636            pop     ar3
00C6 D002       637            pop     ar2
00C8            638   ;        robot.c:61: if (COMMAND_PIN == 0) {             //0100  
00C8 209080     639            jb      _P1_0,L004002?
00CB            640   ;        robot.c:62: currentcmd = 4;
00CB 753004     641            mov     _currentcmd,#0x04
00CE 8001       642            sjmp    L004022?
00D0            643   L004002?:
00D0            644   ;        robot.c:65: currentcmd = 5;
00D0 753005     645            mov     _currentcmd,#0x05
00D3 8001       646            sjmp    L004022?
00D5            647   L004007?:
00D5            648   ;        robot.c:69: waitms(4);
00D5 900004     649            mov     dptr,#0x0004
00D8 C002       650            push    ar2
00DA C003       651            push    ar3
00DC 120100     652            lcall   _waitms
00DF D003       653            pop     ar3
00E1 D002       654            pop     ar2
00E3            655   ;        robot.c:70: if (COMMAND_PIN == 0) {             //0110
00E3 209080     656            jb      _P1_0,L004022?
00E6            657   ;        robot.c:71: currentcmd = 6;
00E6 753006     658            mov     _currentcmd,#0x06
00E9 8001       659            sjmp    L004022?
00EB            660   L004019?:
00EB            661   ;        robot.c:76: waitms(4);
00EB 900004     662            mov     dptr,#0x0004
00EE C002       663            push    ar2
00F0 C003       664            push    ar3
00F2 120100     665            lcall   _waitms
00F5 D003       666            pop     ar3
00F7 D002       667            pop     ar2
00F9            668   ;        robot.c:77: if (COMMAND_PIN == 1) {                     //001-
00F9 3090C0     669            jnb     _P1_0,L004016?
00FC            670   ;        robot.c:78: waitms(4);
00FC 900004     671            mov     dptr,#0x0004
00FF C002       672            push    ar2
0101 C003       673            push    ar3
0103 120100     674            lcall   _waitms
0106 D003       675            pop     ar3
0108 D002       676            pop     ar2
010A            677   ;        robot.c:79: if (COMMAND_PIN == 1) {             //0011
010A 309000     678            jnb     _P1_0,L004010?
010D            679   ;        robot.c:80: currentcmd = 3;
010D 753003     680            mov     _currentcmd,#0x03
0110 8001       681            sjmp    L004022?
0112            682   L004010?:
0112            683   ;        robot.c:83: currentcmd = 2;
0112 753002     684            mov     _currentcmd,#0x02
0115 8001       685            sjmp    L004022?
0117            686   L004016?:
0117            687   ;        robot.c:87: waitms(4);
0117 900004     688            mov     dptr,#0x0004
011A C002       689            push    ar2
011C C003       690            push    ar3
011E 120100     691            lcall   _waitms
0121 D003       692            pop     ar3
0123 D002       693            pop     ar2
0125            694   ;        robot.c:88: if (COMMAND_PIN == 1) {             //0001  
0125 309040     695            jnb     _P1_0,L004013?
0128            696   ;        robot.c:89: currentcmd == 1;
0128 E530       697            mov     a,_currentcmd
012A 8001       698            sjmp    L004022?
012C            699   L004013?:
012C            700   ;        robot.c:92: commandflag = 1;
012C 7A01       701            mov     r2,#0x01
012E 7B00       702            mov     r3,#0x00
0130            703   L004022?:
0130            704   ;        robot.c:97: if (commandflag == 0) {                                     //only wait for signal to end if a command has been received. 
0130 EA         705            mov     a,r2
0131 4B         706            orl     a,r3
0132 7001       707            jnz     L004027?
0134            708   ;        robot.c:98: while (COMMAND_PIN == 0) {}
0134            709   L004023?:
0134 3090C0     710            jnb     _P1_0,L004023?
0137            711   L004027?:
0137            712   ;        robot.c:101: printf("current command is %d\r\n", currentcmd);           
0137 AA30       713            mov     r2,_currentcmd
0139 E530       714            mov     a,_currentcmd
013B 33         715            rlc     a
013C 95E0       716            subb    a,acc
013E FB         717            mov     r3,a
013F C002       718            push    ar2
0141 C003       719            push    ar3
0143 7400       720            mov     a,#__str_0
0145 C0E0       721            push    acc
0147 7499       722            mov     a,#(__str_0 >> 8)
0149 C0E0       723            push    acc
014B 7480       724            mov     a,#0x80
014D C0E0       725            push    acc
014F 120100     726            lcall   _printf
0152 E581       727            mov     a,sp
0154 24FB       728            add     a,#0xfb
0156 F581       729            mov     sp,a
0158 22         730            ret
0159            731   ;------------------------------------------------------------
0159            732   ;Allocation info for local variables in function 'linetrack'
0159            733   ;------------------------------------------------------------
0159            734   ;forwardbackward           Allocated with name '_linetrack_forwardbackward_1_79'
0159            735   ;vleft                     Allocated with name '_linetrack_vleft_1_80'
0159            736   ;vright                    Allocated with name '_linetrack_vright_1_80'
0159            737   ;sloc0                     Allocated with name '_linetrack_sloc0_1_0'
0159            738   ;------------------------------------------------------------
0159            739   ;        robot.c:105: void linetrack (int forwardbackward) {
0159            740   ;        -----------------------------------------
0159            741   ;         function linetrack
0159            742   ;        -----------------------------------------
0159            743   _linetrack:
0159 858280     744            mov     _linetrack_forwardbackward_1_79,dpl
015C 858381     745            mov     (_linetrack_forwardbackward_1_79 + 1),dph
015F            746   ;        robot.c:109: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
015F 75820B     747            mov     dpl,#0x0B
0162 120100     748            lcall   _Volts_at_Pin
0165 8582D0     749            mov     _linetrack_vleft_1_80,dpl
0168 8583D1     750            mov     (_linetrack_vleft_1_80 + 1),dph
016B 85F0D2     751            mov     (_linetrack_vleft_1_80 + 2),b
016E F5D3       752            mov     (_linetrack_vleft_1_80 + 3),a
0170            753   ;        robot.c:110: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0170 75820C     754            mov     dpl,#0x0C
0173 120100     755            lcall   _Volts_at_Pin
0176 858220     756            mov     _linetrack_vright_1_80,dpl
0179 858321     757            mov     (_linetrack_vright_1_80 + 1),dph
017C 85F022     758            mov     (_linetrack_vright_1_80 + 2),b
017F F523       759            mov     (_linetrack_vright_1_80 + 3),a
0181            760   ;        robot.c:112: pwm_Left0 = -1;
0181 7570FF     761            mov     _pwm_Left0,#0xFF
0184            762   ;        robot.c:114: pwm_Left1 = vright*vright*75/(vright*vright+vleft*vleft);
0184 C020       763            push    _linetrack_vright_1_80
0186 C021       764            push    (_linetrack_vright_1_80 + 1)
0188 C022       765            push    (_linetrack_vright_1_80 + 2)
018A C023       766            push    (_linetrack_vright_1_80 + 3)
018C 852082     767            mov     dpl,_linetrack_vright_1_80
018F 852183     768            mov     dph,(_linetrack_vright_1_80 + 1)
0192 8522F0     769            mov     b,(_linetrack_vright_1_80 + 2)
0195 E523       770            mov     a,(_linetrack_vright_1_80 + 3)
0197 120100     771            lcall   ___fsmul
019A AC82       772            mov     r4,dpl
019C AD83       773            mov     r5,dph
019E AEF0       774            mov     r6,b
01A0 FF         775            mov     r7,a
01A1 E581       776            mov     a,sp
01A3 24FC       777            add     a,#0xfc
01A5 F581       778            mov     sp,a
01A7 C004       779            push    ar4
01A9 C005       780            push    ar5
01AB C006       781            push    ar6
01AD C007       782            push    ar7
01AF 900000     783            mov     dptr,#0x0000
01B2 75F096     784            mov     b,#0x96
01B5 7442       785            mov     a,#0x42
01B7 120100     786            lcall   ___fsmul
01BA AC82       787            mov     r4,dpl
01BC AD83       788            mov     r5,dph
01BE AEF0       789            mov     r6,b
01C0 FF         790            mov     r7,a
01C1 E581       791            mov     a,sp
01C3 24FC       792            add     a,#0xfc
01C5 F581       793            mov     sp,a
01C7 C004       794            push    ar4
01C9 C005       795            push    ar5
01CB C006       796            push    ar6
01CD C007       797            push    ar7
01CF C020       798            push    _linetrack_vright_1_80
01D1 C021       799            push    (_linetrack_vright_1_80 + 1)
01D3 C022       800            push    (_linetrack_vright_1_80 + 2)
01D5 C023       801            push    (_linetrack_vright_1_80 + 3)
01D7 852082     802            mov     dpl,_linetrack_vright_1_80
01DA 852183     803            mov     dph,(_linetrack_vright_1_80 + 1)
01DD 8522F0     804            mov     b,(_linetrack_vright_1_80 + 2)
01E0 E523       805            mov     a,(_linetrack_vright_1_80 + 3)
01E2 120100     806            lcall   ___fsmul
01E5 858270     807            mov     _linetrack_sloc0_1_0,dpl
01E8 858371     808            mov     (_linetrack_sloc0_1_0 + 1),dph
01EB 85F072     809            mov     (_linetrack_sloc0_1_0 + 2),b
01EE F573       810            mov     (_linetrack_sloc0_1_0 + 3),a
01F0 E581       811            mov     a,sp
01F2 24FC       812            add     a,#0xfc
01F4 F581       813            mov     sp,a
01F6 C0D0       814            push    _linetrack_vleft_1_80
01F8 C0D1       815            push    (_linetrack_vleft_1_80 + 1)
01FA C0D2       816            push    (_linetrack_vleft_1_80 + 2)
01FC C0D3       817            push    (_linetrack_vleft_1_80 + 3)
01FE 85D082     818            mov     dpl,_linetrack_vleft_1_80
0201 85D183     819            mov     dph,(_linetrack_vleft_1_80 + 1)
0204 85D2F0     820            mov     b,(_linetrack_vleft_1_80 + 2)
0207 E5D3       821            mov     a,(_linetrack_vleft_1_80 + 3)
0209 120100     822            lcall   ___fsmul
020C AA82       823            mov     r2,dpl
020E AB83       824            mov     r3,dph
0210 A8F0       825            mov     r0,b
0212 F9         826            mov     r1,a
0213 E581       827            mov     a,sp
0215 24FC       828            add     a,#0xfc
0217 F581       829            mov     sp,a
0219 C002       830            push    ar2
021B C003       831            push    ar3
021D C000       832            push    ar0
021F C001       833            push    ar1
0221 857082     834            mov     dpl,_linetrack_sloc0_1_0
0224 857183     835            mov     dph,(_linetrack_sloc0_1_0 + 1)
0227 8572F0     836            mov     b,(_linetrack_sloc0_1_0 + 2)
022A E573       837            mov     a,(_linetrack_sloc0_1_0 + 3)
022C 120100     838            lcall   ___fsadd
022F AA82       839            mov     r2,dpl
0231 AB83       840            mov     r3,dph
0233 A8F0       841            mov     r0,b
0235 F9         842            mov     r1,a
0236 E581       843            mov     a,sp
0238 24FC       844            add     a,#0xfc
023A F581       845            mov     sp,a
023C D007       846            pop     ar7
023E D006       847            pop     ar6
0240 D005       848            pop     ar5
0242 D004       849            pop     ar4
0244 C002       850            push    ar2
0246 C003       851            push    ar3
0248 C000       852            push    ar0
024A C001       853            push    ar1
024C 8C82       854            mov     dpl,r4
024E 8D83       855            mov     dph,r5
0250 8EF0       856            mov     b,r6
0252 EF         857            mov     a,r7
0253 120100     858            lcall   ___fsdiv
0256 AA82       859            mov     r2,dpl
0258 AB83       860            mov     r3,dph
025A ACF0       861            mov     r4,b
025C FD         862            mov     r5,a
025D E581       863            mov     a,sp
025F 24FC       864            add     a,#0xfc
0261 F581       865            mov     sp,a
0263 8A82       866            mov     dpl,r2
0265 8B83       867            mov     dph,r3
0267 8CF0       868            mov     b,r4
0269 ED         869            mov     a,r5
026A 120100     870            lcall   ___fs2schar
026D 858230     871            mov     _pwm_Left1,dpl
0270            872   ;        robot.c:115: pwm_Right1 = -1;
0270 75B0FF     873            mov     _pwm_Right1,#0xFF
0273            874   ;        robot.c:117: pwm_Right0 = vleft*vleft*75/(vright*vright+vleft*vleft);
0273 C0D0       875            push    _linetrack_vleft_1_80
0275 C0D1       876            push    (_linetrack_vleft_1_80 + 1)
0277 C0D2       877            push    (_linetrack_vleft_1_80 + 2)
0279 C0D3       878            push    (_linetrack_vleft_1_80 + 3)
027B 85D082     879            mov     dpl,_linetrack_vleft_1_80
027E 85D183     880            mov     dph,(_linetrack_vleft_1_80 + 1)
0281 85D2F0     881            mov     b,(_linetrack_vleft_1_80 + 2)
0284 E5D3       882            mov     a,(_linetrack_vleft_1_80 + 3)
0286 120100     883            lcall   ___fsmul
0289 AA82       884            mov     r2,dpl
028B AB83       885            mov     r3,dph
028D ACF0       886            mov     r4,b
028F FD         887            mov     r5,a
0290 E581       888            mov     a,sp
0292 24FC       889            add     a,#0xfc
0294 F581       890            mov     sp,a
0296 C002       891            push    ar2
0298 C003       892            push    ar3
029A C004       893            push    ar4
029C C005       894            push    ar5
029E 900000     895            mov     dptr,#0x0000
02A1 75F096     896            mov     b,#0x96
02A4 7442       897            mov     a,#0x42
02A6 120100     898            lcall   ___fsmul
02A9 AA82       899            mov     r2,dpl
02AB AB83       900            mov     r3,dph
02AD ACF0       901            mov     r4,b
02AF FD         902            mov     r5,a
02B0 E581       903            mov     a,sp
02B2 24FC       904            add     a,#0xfc
02B4 F581       905            mov     sp,a
02B6 C002       906            push    ar2
02B8 C003       907            push    ar3
02BA C004       908            push    ar4
02BC C005       909            push    ar5
02BE C020       910            push    _linetrack_vright_1_80
02C0 C021       911            push    (_linetrack_vright_1_80 + 1)
02C2 C022       912            push    (_linetrack_vright_1_80 + 2)
02C4 C023       913            push    (_linetrack_vright_1_80 + 3)
02C6 852082     914            mov     dpl,_linetrack_vright_1_80
02C9 852183     915            mov     dph,(_linetrack_vright_1_80 + 1)
02CC 8522F0     916            mov     b,(_linetrack_vright_1_80 + 2)
02CF E523       917            mov     a,(_linetrack_vright_1_80 + 3)
02D1 120100     918            lcall   ___fsmul
02D4 858270     919            mov     _linetrack_sloc0_1_0,dpl
02D7 858371     920            mov     (_linetrack_sloc0_1_0 + 1),dph
02DA 85F072     921            mov     (_linetrack_sloc0_1_0 + 2),b
02DD F573       922            mov     (_linetrack_sloc0_1_0 + 3),a
02DF E581       923            mov     a,sp
02E1 24FC       924            add     a,#0xfc
02E3 F581       925            mov     sp,a
02E5 C0D0       926            push    _linetrack_vleft_1_80
02E7 C0D1       927            push    (_linetrack_vleft_1_80 + 1)
02E9 C0D2       928            push    (_linetrack_vleft_1_80 + 2)
02EB C0D3       929            push    (_linetrack_vleft_1_80 + 3)
02ED 85D082     930            mov     dpl,_linetrack_vleft_1_80
02F0 85D183     931            mov     dph,(_linetrack_vleft_1_80 + 1)
02F3 85D2F0     932            mov     b,(_linetrack_vleft_1_80 + 2)
02F6 E5D3       933            mov     a,(_linetrack_vleft_1_80 + 3)
02F8 120100     934            lcall   ___fsmul
02FB AE82       935            mov     r6,dpl
02FD AF83       936            mov     r7,dph
02FF A8F0       937            mov     r0,b
0301 F9         938            mov     r1,a
0302 E581       939            mov     a,sp
0304 24FC       940            add     a,#0xfc
0306 F581       941            mov     sp,a
0308 C006       942            push    ar6
030A C007       943            push    ar7
030C C000       944            push    ar0
030E C001       945            push    ar1
0310 857082     946            mov     dpl,_linetrack_sloc0_1_0
0313 857183     947            mov     dph,(_linetrack_sloc0_1_0 + 1)
0316 8572F0     948            mov     b,(_linetrack_sloc0_1_0 + 2)
0319 E573       949            mov     a,(_linetrack_sloc0_1_0 + 3)
031B 120100     950            lcall   ___fsadd
031E AE82       951            mov     r6,dpl
0320 AF83       952            mov     r7,dph
0322 A8F0       953            mov     r0,b
0324 F9         954            mov     r1,a
0325 E581       955            mov     a,sp
0327 24FC       956            add     a,#0xfc
0329 F581       957            mov     sp,a
032B D005       958            pop     ar5
032D D004       959            pop     ar4
032F D003       960            pop     ar3
0331 D002       961            pop     ar2
0333 C006       962            push    ar6
0335 C007       963            push    ar7
0337 C000       964            push    ar0
0339 C001       965            push    ar1
033B 8A82       966            mov     dpl,r2
033D 8B83       967            mov     dph,r3
033F 8CF0       968            mov     b,r4
0341 ED         969            mov     a,r5
0342 120100     970            lcall   ___fsdiv
0345 AA82       971            mov     r2,dpl
0347 AB83       972            mov     r3,dph
0349 ACF0       973            mov     r4,b
034B FD         974            mov     r5,a
034C E581       975            mov     a,sp
034E 24FC       976            add     a,#0xfc
0350 F581       977            mov     sp,a
0352 8A82       978            mov     dpl,r2
0354 8B83       979            mov     dph,r3
0356 8CF0       980            mov     b,r4
0358 ED         981            mov     a,r5
0359 120100     982            lcall   ___fs2schar
035C 8582F0     983            mov     _pwm_Right0,dpl
035F            984   ;        robot.c:119: if (forwardbackward) {
035F E580       985            mov     a,_linetrack_forwardbackward_1_79
0361 4581       986            orl     a,(_linetrack_forwardbackward_1_79 + 1)
0363 6001       987            jz      L005003?
0365            988   ;        robot.c:120: pwm_Left0 = pwm_Left1;
0365 853070     989            mov     _pwm_Left0,_pwm_Left1
0368            990   ;        robot.c:121: pwm_Left1 = -1;
0368 7530FF     991            mov     _pwm_Left1,#0xFF
036B            992   ;        robot.c:122: pwm_Right1 = pwm_Right1;
036B 85B0B0     993            mov     _pwm_Right1,_pwm_Right1
036E            994   ;        robot.c:123: pwm_Right0 = -1;
036E 75F0FF     995            mov     _pwm_Right0,#0xFF
0371            996   L005003?:
0371 22         997            ret
0372            998   ;------------------------------------------------------------
0372            999   ;Allocation info for local variables in function 'stopcar'
0372           1000   ;------------------------------------------------------------
0372           1001   ;------------------------------------------------------------
0372           1002   ;        robot.c:130: void stopcar(void) {
0372           1003   ;        -----------------------------------------
0372           1004   ;         function stopcar
0372           1005   ;        -----------------------------------------
0372           1006   _stopcar:
0372           1007   ;        robot.c:131: pwm_Left1 = -1;
0372 7530FF    1008            mov     _pwm_Left1,#0xFF
0375           1009   ;        robot.c:132: pwm_Right1 = -1;
0375 75B0FF    1010            mov     _pwm_Right1,#0xFF
0378           1011   ;        robot.c:133: pwm_Left0 = -1;
0378 7570FF    1012            mov     _pwm_Left0,#0xFF
037B           1013   ;        robot.c:134: pwm_Right0 = -1;
037B 75F0FF    1014            mov     _pwm_Right0,#0xFF
037E 22        1015            ret
037F           1016   ;------------------------------------------------------------
037F           1017   ;Allocation info for local variables in function 'turncar'
037F           1018   ;------------------------------------------------------------
037F           1019   ;leftright                 Allocated to registers r2 r3 
037F           1020   ;vleft                     Allocated with name '_turncar_vleft_1_85'
037F           1021   ;vright                    Allocated with name '_turncar_vright_1_85'
037F           1022   ;------------------------------------------------------------
037F           1023   ;        robot.c:137: void turncar (int leftright) {
037F           1024   ;        -----------------------------------------
037F           1025   ;         function turncar
037F           1026   ;        -----------------------------------------
037F           1027   _turncar:
037F AA82      1028            mov     r2,dpl
0381 AB83      1029            mov     r3,dph
0383           1030   ;        robot.c:141: pwm_Left0 = -1;
0383 7570FF    1031            mov     _pwm_Left0,#0xFF
0386           1032   ;        robot.c:142: pwm_Left1 = -1;
0386 7530FF    1033            mov     _pwm_Left1,#0xFF
0389           1034   ;        robot.c:143: pwm_Right0 = -1;
0389 75F0FF    1035            mov     _pwm_Right0,#0xFF
038C           1036   ;        robot.c:144: pwm_Right1 = -1;
038C 75B0FF    1037            mov     _pwm_Right1,#0xFF
038F           1038   ;        robot.c:147: if (leftright == 0) {
038F EA        1039            mov     a,r2
0390 4B        1040            orl     a,r3
0391 6001      1041            jz      L007022?
0393 020100    1042            ljmp    L007012?
0396           1043   L007022?:
0396           1044   ;        robot.c:149: pwm_Right0 = 50;
0396 75F032    1045            mov     _pwm_Right0,#0x32
0399           1046   ;        robot.c:151: waitms(1000);
0399 9003E8    1047            mov     dptr,#0x03E8
039C 120100    1048            lcall   _waitms
039F           1049   ;        robot.c:153: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
039F 75820B    1050            mov     dpl,#0x0B
03A2 120100    1051            lcall   _Volts_at_Pin
03A5 8582C0    1052            mov     _turncar_vleft_1_85,dpl
03A8 8583C1    1053            mov     (_turncar_vleft_1_85 + 1),dph
03AB 85F0C2    1054            mov     (_turncar_vleft_1_85 + 2),b
03AE F5C3      1055            mov     (_turncar_vleft_1_85 + 3),a
03B0           1056   ;        robot.c:154: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
03B0 75820C    1057            mov     dpl,#0x0C
03B3 120100    1058            lcall   _Volts_at_Pin
03B6 858210    1059            mov     _turncar_vright_1_85,dpl
03B9 858311    1060            mov     (_turncar_vright_1_85 + 1),dph
03BC 85F012    1061            mov     (_turncar_vright_1_85 + 2),b
03BF F513      1062            mov     (_turncar_vright_1_85 + 3),a
03C1           1063   ;        robot.c:156: while (((vleft - vright) > 0.2) || ((vleft - vright) < (-0.2))) {
03C1           1064   L007002?:
03C1 C010      1065            push    _turncar_vright_1_85
03C3 C011      1066            push    (_turncar_vright_1_85 + 1)
03C5 C012      1067            push    (_turncar_vright_1_85 + 2)
03C7 C013      1068            push    (_turncar_vright_1_85 + 3)
03C9 85C082    1069            mov     dpl,_turncar_vleft_1_85
03CC 85C183    1070            mov     dph,(_turncar_vleft_1_85 + 1)
03CF 85C2F0    1071            mov     b,(_turncar_vleft_1_85 + 2)
03D2 E5C3      1072            mov     a,(_turncar_vleft_1_85 + 3)
03D4 120100    1073            lcall   ___fssub
03D7 AC82      1074            mov     r4,dpl
03D9 AD83      1075            mov     r5,dph
03DB AEF0      1076            mov     r6,b
03DD FF        1077            mov     r7,a
03DE E581      1078            mov     a,sp
03E0 24FC      1079            add     a,#0xfc
03E2 F581      1080            mov     sp,a
03E4 74CD      1081            mov     a,#0xCD
03E6 C0E0      1082            push    acc
03E8 74CC      1083            mov     a,#0xCC
03EA C0E0      1084            push    acc
03EC 744C      1085            mov     a,#0x4C
03EE C0E0      1086            push    acc
03F0 743E      1087            mov     a,#0x3E
03F2 C0E0      1088            push    acc
03F4 8C82      1089            mov     dpl,r4
03F6 8D83      1090            mov     dph,r5
03F8 8EF0      1091            mov     b,r6
03FA EF        1092            mov     a,r7
03FB 120100    1093            lcall   ___fsgt
03FE AC82      1094            mov     r4,dpl
0400 E581      1095            mov     a,sp
0402 24FC      1096            add     a,#0xfc
0404 F581      1097            mov     sp,a
0406 EC        1098            mov     a,r4
0407 7001      1099            jnz     L007003?
0409 C010      1100            push    _turncar_vright_1_85
040B C011      1101            push    (_turncar_vright_1_85 + 1)
040D C012      1102            push    (_turncar_vright_1_85 + 2)
040F C013      1103            push    (_turncar_vright_1_85 + 3)
0411 85C082    1104            mov     dpl,_turncar_vleft_1_85
0414 85C183    1105            mov     dph,(_turncar_vleft_1_85 + 1)
0417 85C2F0    1106            mov     b,(_turncar_vleft_1_85 + 2)
041A E5C3      1107            mov     a,(_turncar_vleft_1_85 + 3)
041C 120100    1108            lcall   ___fssub
041F AC82      1109            mov     r4,dpl
0421 AD83      1110            mov     r5,dph
0423 AEF0      1111            mov     r6,b
0425 FF        1112            mov     r7,a
0426 E581      1113            mov     a,sp
0428 24FC      1114            add     a,#0xfc
042A F581      1115            mov     sp,a
042C 74CD      1116            mov     a,#0xCD
042E C0E0      1117            push    acc
0430 74CC      1118            mov     a,#0xCC
0432 C0E0      1119            push    acc
0434 744C      1120            mov     a,#0x4C
0436 C0E0      1121            push    acc
0438 74BE      1122            mov     a,#0xBE
043A C0E0      1123            push    acc
043C 8C82      1124            mov     dpl,r4
043E 8D83      1125            mov     dph,r5
0440 8EF0      1126            mov     b,r6
0442 EF        1127            mov     a,r7
0443 120100    1128            lcall   ___fslt
0446 AC82      1129            mov     r4,dpl
0448 E581      1130            mov     a,sp
044A 24FC      1131            add     a,#0xfc
044C F581      1132            mov     sp,a
044E EC        1133            mov     a,r4
044F 6001      1134            jz      L007004?
0451           1135   L007003?:
0451           1136   ;        robot.c:158: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0451 75820B    1137            mov     dpl,#0x0B
0454 120100    1138            lcall   _Volts_at_Pin
0457 8582C0    1139            mov     _turncar_vleft_1_85,dpl
045A 8583C1    1140            mov     (_turncar_vleft_1_85 + 1),dph
045D 85F0C2    1141            mov     (_turncar_vleft_1_85 + 2),b
0460 F5C3      1142            mov     (_turncar_vleft_1_85 + 3),a
0462           1143   ;        robot.c:159: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0462 75820C    1144            mov     dpl,#0x0C
0465 120100    1145            lcall   _Volts_at_Pin
0468 858210    1146            mov     _turncar_vright_1_85,dpl
046B 858311    1147            mov     (_turncar_vright_1_85 + 1),dph
046E 85F012    1148            mov     (_turncar_vright_1_85 + 2),b
0471 F513      1149            mov     (_turncar_vright_1_85 + 3),a
0473 020100    1150            ljmp    L007002?
0476           1151   L007004?:
0476           1152   ;        robot.c:163: pwm_Right0 = -1;           
0476 75F0FF    1153            mov     _pwm_Right0,#0xFF
0479 22        1154            ret
047A           1155   L007012?:
047A           1156   ;        robot.c:166: else if (leftright == 1) {
047A BA0180    1157            cjne    r2,#0x01,L007025?
047D BB0080    1158            cjne    r3,#0x00,L007025?
0480 8001      1159            sjmp    L007026?
0482           1160   L007025?:
0482 22        1161            ret
0483           1162   L007026?:
0483           1163   ;        robot.c:168: pwm_Left1 = 50;
0483 753032    1164            mov     _pwm_Left1,#0x32
0486           1165   ;        robot.c:170: waitms(1000);
0486 9003E8    1166            mov     dptr,#0x03E8
0489 120100    1167            lcall   _waitms
048C           1168   ;        robot.c:172: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
048C 75820B    1169            mov     dpl,#0x0B
048F 120100    1170            lcall   _Volts_at_Pin
0492 8582C0    1171            mov     _turncar_vleft_1_85,dpl
0495 8583C1    1172            mov     (_turncar_vleft_1_85 + 1),dph
0498 85F0C2    1173            mov     (_turncar_vleft_1_85 + 2),b
049B F5C3      1174            mov     (_turncar_vleft_1_85 + 3),a
049D           1175   ;        robot.c:173: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
049D 75820C    1176            mov     dpl,#0x0C
04A0 120100    1177            lcall   _Volts_at_Pin
04A3 858210    1178            mov     _turncar_vright_1_85,dpl
04A6 858311    1179            mov     (_turncar_vright_1_85 + 1),dph
04A9 85F012    1180            mov     (_turncar_vright_1_85 + 2),b
04AC F513      1181            mov     (_turncar_vright_1_85 + 3),a
04AE           1182   ;        robot.c:175: while (((vleft - vright) > 0.2) || ((vleft - vright) < (-0.2))) {
04AE           1183   L007006?:
04AE C010      1184            push    _turncar_vright_1_85
04B0 C011      1185            push    (_turncar_vright_1_85 + 1)
04B2 C012      1186            push    (_turncar_vright_1_85 + 2)
04B4 C013      1187            push    (_turncar_vright_1_85 + 3)
04B6 85C082    1188            mov     dpl,_turncar_vleft_1_85
04B9 85C183    1189            mov     dph,(_turncar_vleft_1_85 + 1)
04BC 85C2F0    1190            mov     b,(_turncar_vleft_1_85 + 2)
04BF E5C3      1191            mov     a,(_turncar_vleft_1_85 + 3)
04C1 120100    1192            lcall   ___fssub
04C4 AA82      1193            mov     r2,dpl
04C6 AB83      1194            mov     r3,dph
04C8 ACF0      1195            mov     r4,b
04CA FD        1196            mov     r5,a
04CB E581      1197            mov     a,sp
04CD 24FC      1198            add     a,#0xfc
04CF F581      1199            mov     sp,a
04D1 74CD      1200            mov     a,#0xCD
04D3 C0E0      1201            push    acc
04D5 74CC      1202            mov     a,#0xCC
04D7 C0E0      1203            push    acc
04D9 744C      1204            mov     a,#0x4C
04DB C0E0      1205            push    acc
04DD 743E      1206            mov     a,#0x3E
04DF C0E0      1207            push    acc
04E1 8A82      1208            mov     dpl,r2
04E3 8B83      1209            mov     dph,r3
04E5 8CF0      1210            mov     b,r4
04E7 ED        1211            mov     a,r5
04E8 120100    1212            lcall   ___fsgt
04EB AA82      1213            mov     r2,dpl
04ED E581      1214            mov     a,sp
04EF 24FC      1215            add     a,#0xfc
04F1 F581      1216            mov     sp,a
04F3 EA        1217            mov     a,r2
04F4 7001      1218            jnz     L007007?
04F6 C010      1219            push    _turncar_vright_1_85
04F8 C011      1220            push    (_turncar_vright_1_85 + 1)
04FA C012      1221            push    (_turncar_vright_1_85 + 2)
04FC C013      1222            push    (_turncar_vright_1_85 + 3)
04FE 85C082    1223            mov     dpl,_turncar_vleft_1_85
0501 85C183    1224            mov     dph,(_turncar_vleft_1_85 + 1)
0504 85C2F0    1225            mov     b,(_turncar_vleft_1_85 + 2)
0507 E5C3      1226            mov     a,(_turncar_vleft_1_85 + 3)
0509 120100    1227            lcall   ___fssub
050C AA82      1228            mov     r2,dpl
050E AB83      1229            mov     r3,dph
0510 ACF0      1230            mov     r4,b
0512 FD        1231            mov     r5,a
0513 E581      1232            mov     a,sp
0515 24FC      1233            add     a,#0xfc
0517 F581      1234            mov     sp,a
0519 74CD      1235            mov     a,#0xCD
051B C0E0      1236            push    acc
051D 74CC      1237            mov     a,#0xCC
051F C0E0      1238            push    acc
0521 744C      1239            mov     a,#0x4C
0523 C0E0      1240            push    acc
0525 74BE      1241            mov     a,#0xBE
0527 C0E0      1242            push    acc
0529 8A82      1243            mov     dpl,r2
052B 8B83      1244            mov     dph,r3
052D 8CF0      1245            mov     b,r4
052F ED        1246            mov     a,r5
0530 120100    1247            lcall   ___fslt
0533 AA82      1248            mov     r2,dpl
0535 E581      1249            mov     a,sp
0537 24FC      1250            add     a,#0xfc
0539 F581      1251            mov     sp,a
053B EA        1252            mov     a,r2
053C 6001      1253            jz      L007008?
053E           1254   L007007?:
053E           1255   ;        robot.c:177: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
053E 75820B    1256            mov     dpl,#0x0B
0541 120100    1257            lcall   _Volts_at_Pin
0544 8582C0    1258            mov     _turncar_vleft_1_85,dpl
0547 8583C1    1259            mov     (_turncar_vleft_1_85 + 1),dph
054A 85F0C2    1260            mov     (_turncar_vleft_1_85 + 2),b
054D F5C3      1261            mov     (_turncar_vleft_1_85 + 3),a
054F           1262   ;        robot.c:178: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
054F 75820C    1263            mov     dpl,#0x0C
0552 120100    1264            lcall   _Volts_at_Pin
0555 858210    1265            mov     _turncar_vright_1_85,dpl
0558 858311    1266            mov     (_turncar_vright_1_85 + 1),dph
055B 85F012    1267            mov     (_turncar_vright_1_85 + 2),b
055E F513      1268            mov     (_turncar_vright_1_85 + 3),a
0560 020100    1269            ljmp    L007006?
0563           1270   L007008?:
0563           1271   ;        robot.c:182: pwm_Left1 = -1; 
0563 7530FF    1272            mov     _pwm_Left1,#0xFF
0566 22        1273            ret
0567           1274   ;------------------------------------------------------------
0567           1275   ;Allocation info for local variables in function 'uturn'
0567           1276   ;------------------------------------------------------------
0567           1277   ;vleft                     Allocated with name '_uturn_vleft_1_91'
0567           1278   ;vright                    Allocated with name '_uturn_vright_1_91'
0567           1279   ;------------------------------------------------------------
0567           1280   ;        robot.c:186: void uturn(void) {
0567           1281   ;        -----------------------------------------
0567           1282   ;         function uturn
0567           1283   ;        -----------------------------------------
0567           1284   _uturn:
0567           1285   ;        robot.c:190: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0567 75820B    1286            mov     dpl,#0x0B
056A 120100    1287            lcall   _Volts_at_Pin
056D 858260    1288            mov     _uturn_vleft_1_91,dpl
0570 858361    1289            mov     (_uturn_vleft_1_91 + 1),dph
0573 85F062    1290            mov     (_uturn_vleft_1_91 + 2),b
0576 F563      1291            mov     (_uturn_vleft_1_91 + 3),a
0578           1292   ;        robot.c:191: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0578 75820C    1293            mov     dpl,#0x0C
057B 120100    1294            lcall   _Volts_at_Pin
057E 8582B0    1295            mov     _uturn_vright_1_91,dpl
0581 8583B1    1296            mov     (_uturn_vright_1_91 + 1),dph
0584 85F0B2    1297            mov     (_uturn_vright_1_91 + 2),b
0587 F5B3      1298            mov     (_uturn_vright_1_91 + 3),a
0589           1299   ;        robot.c:193: pwm_Left0 = -1;
0589 7570FF    1300            mov     _pwm_Left0,#0xFF
058C           1301   ;        robot.c:194: pwm_Left1 = 50;
058C 753032    1302            mov     _pwm_Left1,#0x32
058F           1303   ;        robot.c:195: pwm_Right0 = -1;
058F 75F0FF    1304            mov     _pwm_Right0,#0xFF
0592           1305   ;        robot.c:196: pwm_Right1 = 50;
0592 75B032    1306            mov     _pwm_Right1,#0x32
0595           1307   ;        robot.c:198: waitms(4000);
0595 900FA0    1308            mov     dptr,#0x0FA0
0598 120100    1309            lcall   _waitms
059B           1310   ;        robot.c:200: while (((vleft - vright) > 0.2) || ((vleft - vright) < (-0.2))) {
059B           1311   L008002?:
059B C0B0      1312            push    _uturn_vright_1_91
059D C0B1      1313            push    (_uturn_vright_1_91 + 1)
059F C0B2      1314            push    (_uturn_vright_1_91 + 2)
05A1 C0B3      1315            push    (_uturn_vright_1_91 + 3)
05A3 856082    1316            mov     dpl,_uturn_vleft_1_91
05A6 856183    1317            mov     dph,(_uturn_vleft_1_91 + 1)
05A9 8562F0    1318            mov     b,(_uturn_vleft_1_91 + 2)
05AC E563      1319            mov     a,(_uturn_vleft_1_91 + 3)
05AE 120100    1320            lcall   ___fssub
05B1 AA82      1321            mov     r2,dpl
05B3 AB83      1322            mov     r3,dph
05B5 ACF0      1323            mov     r4,b
05B7 FD        1324            mov     r5,a
05B8 E581      1325            mov     a,sp
05BA 24FC      1326            add     a,#0xfc
05BC F581      1327            mov     sp,a
05BE 74CD      1328            mov     a,#0xCD
05C0 C0E0      1329            push    acc
05C2 74CC      1330            mov     a,#0xCC
05C4 C0E0      1331            push    acc
05C6 744C      1332            mov     a,#0x4C
05C8 C0E0      1333            push    acc
05CA 743E      1334            mov     a,#0x3E
05CC C0E0      1335            push    acc
05CE 8A82      1336            mov     dpl,r2
05D0 8B83      1337            mov     dph,r3
05D2 8CF0      1338            mov     b,r4
05D4 ED        1339            mov     a,r5
05D5 120100    1340            lcall   ___fsgt
05D8 AA82      1341            mov     r2,dpl
05DA E581      1342            mov     a,sp
05DC 24FC      1343            add     a,#0xfc
05DE F581      1344            mov     sp,a
05E0 EA        1345            mov     a,r2
05E1 7001      1346            jnz     L008003?
05E3 C0B0      1347            push    _uturn_vright_1_91
05E5 C0B1      1348            push    (_uturn_vright_1_91 + 1)
05E7 C0B2      1349            push    (_uturn_vright_1_91 + 2)
05E9 C0B3      1350            push    (_uturn_vright_1_91 + 3)
05EB 856082    1351            mov     dpl,_uturn_vleft_1_91
05EE 856183    1352            mov     dph,(_uturn_vleft_1_91 + 1)
05F1 8562F0    1353            mov     b,(_uturn_vleft_1_91 + 2)
05F4 E563      1354            mov     a,(_uturn_vleft_1_91 + 3)
05F6 120100    1355            lcall   ___fssub
05F9 AA82      1356            mov     r2,dpl
05FB AB83      1357            mov     r3,dph
05FD ACF0      1358            mov     r4,b
05FF FD        1359            mov     r5,a
0600 E581      1360            mov     a,sp
0602 24FC      1361            add     a,#0xfc
0604 F581      1362            mov     sp,a
0606 74CD      1363            mov     a,#0xCD
0608 C0E0      1364            push    acc
060A 74CC      1365            mov     a,#0xCC
060C C0E0      1366            push    acc
060E 744C      1367            mov     a,#0x4C
0610 C0E0      1368            push    acc
0612 74BE      1369            mov     a,#0xBE
0614 C0E0      1370            push    acc
0616 8A82      1371            mov     dpl,r2
0618 8B83      1372            mov     dph,r3
061A 8CF0      1373            mov     b,r4
061C ED        1374            mov     a,r5
061D 120100    1375            lcall   ___fslt
0620 AA82      1376            mov     r2,dpl
0622 E581      1377            mov     a,sp
0624 24FC      1378            add     a,#0xfc
0626 F581      1379            mov     sp,a
0628 EA        1380            mov     a,r2
0629 6001      1381            jz      L008005?
062B           1382   L008003?:
062B           1383   ;        robot.c:202: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
062B 75820B    1384            mov     dpl,#0x0B
062E 120100    1385            lcall   _Volts_at_Pin
0631 858260    1386            mov     _uturn_vleft_1_91,dpl
0634 858361    1387            mov     (_uturn_vleft_1_91 + 1),dph
0637 85F062    1388            mov     (_uturn_vleft_1_91 + 2),b
063A F563      1389            mov     (_uturn_vleft_1_91 + 3),a
063C           1390   ;        robot.c:203: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
063C 75820C    1391            mov     dpl,#0x0C
063F 120100    1392            lcall   _Volts_at_Pin
0642 8582B0    1393            mov     _uturn_vright_1_91,dpl
0645 8583B1    1394            mov     (_uturn_vright_1_91 + 1),dph
0648 85F0B2    1395            mov     (_uturn_vright_1_91 + 2),b
064B F5B3      1396            mov     (_uturn_vright_1_91 + 3),a
064D 020100    1397            ljmp    L008002?
0650           1398   L008005?:
0650 22        1399            ret
0651           1400   ;------------------------------------------------------------
0651           1401   ;Allocation info for local variables in function 'main'
0651           1402   ;------------------------------------------------------------
0651           1403   ;------------------------------------------------------------
0651           1404   ;        robot.c:207: void main(void) {
0651           1405   ;        -----------------------------------------
0651           1406   ;         function main
0651           1407   ;        -----------------------------------------
0651           1408   _main:
0651           1409   ;        robot.c:208: MOTOR_LEFT0 =0;
0651 C295      1410            clr     _P1_5
0653           1411   ;        robot.c:209: MOTOR_LEFT1 =0;
0653 C296      1412            clr     _P1_6
0655           1413   ;        robot.c:210: MOTOR_RIGHT0 =0;
0655 C2A0      1414            clr     _P2_0
0657           1415   ;        robot.c:211: MOTOR_RIGHT1 =0;
0657 C2A1      1416            clr     _P2_1
0659           1417   ;        robot.c:213: currentstate = 1;          //initialize the car to be stopped
0659 75F001    1418            mov     _currentstate,#0x01
065C           1419   ;        robot.c:214: currentcmd = 1;            //initialize the command to be null
065C 753001    1420            mov     _currentcmd,#0x01
065F           1421   ;        robot.c:217: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
065F 7480      1422            mov     a,#__str_1
0661 C0E0      1423            push    acc
0663 749F      1424            mov     a,#(__str_1 >> 8)
0665 C0E0      1425            push    acc
0667 7480      1426            mov     a,#0x80
0669 C0E0      1427            push    acc
066B 120100    1428            lcall   _printf
066E 1581      1429            dec     sp
0670 1581      1430            dec     sp
0672 1581      1431            dec     sp
0674           1432   ;        robot.c:226: InitPinADC(2, 3); // Configure P2.3 as analog input
0674 750003    1433            mov     _InitPinADC_PARM_2,#0x03
0677 758202    1434            mov     dpl,#0x02
067A 120100    1435            lcall   _InitPinADC
067D           1436   ;        robot.c:227: InitPinADC(2, 4); // Configure P2.4 as analog input
067D 750004    1437            mov     _InitPinADC_PARM_2,#0x04
0680 758202    1438            mov     dpl,#0x02
0683 120100    1439            lcall   _InitPinADC
0686           1440   ;        robot.c:228: InitPinADC(1, 0);
0686 750000    1441            mov     _InitPinADC_PARM_2,#0x00
0689 758201    1442            mov     dpl,#0x01
068C 120100    1443            lcall   _InitPinADC
068F           1444   ;        robot.c:229: InitADC();
068F 120100    1445            lcall   _InitADC
0692           1446   ;        robot.c:231: while(1)
0692           1447   L009026?:
0692           1448   ;        robot.c:235: printf("adc readings = %f\r\n", Volts_at_Pin(LQFP32_MUX_P1_0));
0692 758200    1449            mov     dpl,#0x00
0695 120100    1450            lcall   _Volts_at_Pin
0698 AA82      1451            mov     r2,dpl
069A AB83      1452            mov     r3,dph
069C ACF0      1453            mov     r4,b
069E FD        1454            mov     r5,a
069F C002      1455            push    ar2
06A1 C003      1456            push    ar3
06A3 C004      1457            push    ar4
06A5 C005      1458            push    ar5
06A7 74D0      1459            mov     a,#__str_2
06A9 C0E0      1460            push    acc
06AB 74A0      1461            mov     a,#(__str_2 >> 8)
06AD C0E0      1462            push    acc
06AF 7480      1463            mov     a,#0x80
06B1 C0E0      1464            push    acc
06B3 120100    1465            lcall   _printf
06B6 E581      1466            mov     a,sp
06B8 24F9      1467            add     a,#0xf9
06BA F581      1468            mov     sp,a
06BC           1469   ;        robot.c:237: switch (currentstate) {
06BC AAF0      1470            mov     r2,_currentstate
06BE BA0110    1471            cjne    r2,#0x01,L009042?
06C1 8001      1472            sjmp    L009001?
06C3           1473   L009042?:
06C3 BA0290    1474            cjne    r2,#0x02,L009043?
06C6 8001      1475            sjmp    L009002?
06C8           1476   L009043?:
06C8           1477   ;        robot.c:238: case 1:
06C8 BA0310    1478            cjne    r2,#0x03,L009004?
06CB 8001      1479            sjmp    L009003?
06CD           1480   L009001?:
06CD           1481   ;        robot.c:239: linetrack(0);      //forwards
06CD 900000    1482            mov     dptr,#0x0000
06D0 120100    1483            lcall   _linetrack
06D3           1484   ;        robot.c:240: break;
06D3           1485   ;        robot.c:241: case 2:
06D3 8001      1486            sjmp    L009004?
06D5           1487   L009002?:
06D5           1488   ;        robot.c:242: linetrack(1);      //backwards
06D5 900001    1489            mov     dptr,#0x0001
06D8 120100    1490            lcall   _linetrack
06DB           1491   ;        robot.c:243: break;
06DB           1492   ;        robot.c:244: case 3:
06DB 8001      1493            sjmp    L009004?
06DD           1494   L009003?:
06DD           1495   ;        robot.c:245: stopcar();                 //stop car
06DD 120100    1496            lcall   _stopcar
06E0           1497   ;        robot.c:247: }
06E0           1498   L009004?:
06E0           1499   ;        robot.c:249: switch (currentcmd) {
06E0 E530      1500            mov     a,_currentcmd
06E2 FA        1501            mov     r2,a
06E3 30E790    1502            jnb     acc.7,L009045?
06E6 020100    1503            ljmp    L009023?
06E9           1504   L009045?:
06E9 C3        1505            clr     c
06EA 7486      1506            mov     a,#(0x06 ^ 0x80)
06EC 8AF0      1507            mov     b,r2
06EE 63F080    1508            xrl     b,#0x80
06F1 95F0      1509            subb    a,b
06F3 5001      1510            jnc     L009046?
06F5 020100    1511            ljmp    L009023?
06F8           1512   L009046?:
06F8 EA        1513            mov     a,r2
06F9 2A        1514            add     a,r2
06FA 2A        1515            add     a,r2
06FB 90A350    1516            mov     dptr,#L009047?
06FE 73        1517            jmp     @a+dptr
06FF           1518   L009047?:
06FF 020100    1519            ljmp    L009005?
0702 020100    1520            ljmp    L009011?
0705 020100    1521            ljmp    L009015?
0708 020100    1522            ljmp    L009019?
070B 020100    1523            ljmp    L009020?
070E 020100    1524            ljmp    L009021?
0711 020100    1525            ljmp    L009022?
0714           1526   ;        robot.c:251: case 0 :
0714           1527   L009005?:
0714           1528   ;        robot.c:253: if (currentstate == 1) {
0714 7401      1529            mov     a,#0x01
0716 B5F050    1530            cjne    a,_currentstate,L009048?
0719 8001      1531            sjmp    L009049?
071B           1532   L009048?:
071B 020100    1533            ljmp    L009026?
071E           1534   L009049?:
071E           1535   ;        robot.c:254: if (Volts_at_Pin(LQFP32_MUX_P2_3) > 1 && Volts_at_Pin(LQFP32_MUX_P2_4) > 1) {
071E 75820B    1536            mov     dpl,#0x0B
0721 120100    1537            lcall   _Volts_at_Pin
0724 AA82      1538            mov     r2,dpl
0726 AB83      1539            mov     r3,dph
0728 ACF0      1540            mov     r4,b
072A FD        1541            mov     r5,a
072B E4        1542            clr     a
072C C0E0      1543            push    acc
072E C0E0      1544            push    acc
0730 7480      1545            mov     a,#0x80
0732 C0E0      1546            push    acc
0734 743F      1547            mov     a,#0x3F
0736 C0E0      1548            push    acc
0738 8A82      1549            mov     dpl,r2
073A 8B83      1550            mov     dph,r3
073C 8CF0      1551            mov     b,r4
073E ED        1552            mov     a,r5
073F 120100    1553            lcall   ___fsgt
0742 AA82      1554            mov     r2,dpl
0744 E581      1555            mov     a,sp
0746 24FC      1556            add     a,#0xfc
0748 F581      1557            mov     sp,a
074A EA        1558            mov     a,r2
074B 7001      1559            jnz     L009050?
074D 020100    1560            ljmp    L009026?
0750           1561   L009050?:
0750 75820C    1562            mov     dpl,#0x0C
0753 120100    1563            lcall   _Volts_at_Pin
0756 AA82      1564            mov     r2,dpl
0758 AB83      1565            mov     r3,dph
075A ACF0      1566            mov     r4,b
075C FD        1567            mov     r5,a
075D E4        1568            clr     a
075E C0E0      1569            push    acc
0760 C0E0      1570            push    acc
0762 7480      1571            mov     a,#0x80
0764 C0E0      1572            push    acc
0766 743F      1573            mov     a,#0x3F
0768 C0E0      1574            push    acc
076A 8A82      1575            mov     dpl,r2
076C 8B83      1576            mov     dph,r3
076E 8CF0      1577            mov     b,r4
0770 ED        1578            mov     a,r5
0771 120100    1579            lcall   ___fsgt
0774 AA82      1580            mov     r2,dpl
0776 E581      1581            mov     a,sp
0778 24FC      1582            add     a,#0xfc
077A F581      1583            mov     sp,a
077C EA        1584            mov     a,r2
077D 7001      1585            jnz     L009051?
077F 020100    1586            ljmp    L009026?
0782           1587   L009051?:
0782           1588   ;        robot.c:256: pwm_Left1 = 35;
0782 753023    1589            mov     _pwm_Left1,#0x23
0785           1590   ;        robot.c:257: pwm_Left0 = -1;
0785 7570FF    1591            mov     _pwm_Left0,#0xFF
0788           1592   ;        robot.c:258: pwm_Right0 = 35;
0788 75F023    1593            mov     _pwm_Right0,#0x23
078B           1594   ;        robot.c:259: pwm_Right1 = -1;                                           
078B 75B0FF    1595            mov     _pwm_Right1,#0xFF
078E           1596   ;        robot.c:260: waitms(1500);
078E 9005DC    1597            mov     dptr,#0x05DC
0791 120100    1598            lcall   _waitms
0794           1599   ;        robot.c:263: break;
0794 020100    1600            ljmp    L009026?
0797           1601   ;        robot.c:264: case 1 :
0797           1602   L009011?:
0797           1603   ;        robot.c:266: if (Volts_at_Pin(LQFP32_MUX_P2_3) > 1 && Volts_at_Pin(LQFP32_MUX_P2_4) > 1) {
0797 75820B    1604            mov     dpl,#0x0B
079A 120100    1605            lcall   _Volts_at_Pin
079D AA82      1606            mov     r2,dpl
079F AB83      1607            mov     r3,dph
07A1 ACF0      1608            mov     r4,b
07A3 FD        1609            mov     r5,a
07A4 E4        1610            clr     a
07A5 C0E0      1611            push    acc
07A7 C0E0      1612            push    acc
07A9 7480      1613            mov     a,#0x80
07AB C0E0      1614            push    acc
07AD 743F      1615            mov     a,#0x3F
07AF C0E0      1616            push    acc
07B1 8A82      1617            mov     dpl,r2
07B3 8B83      1618            mov     dph,r3
07B5 8CF0      1619            mov     b,r4
07B7 ED        1620            mov     a,r5
07B8 120100    1621            lcall   ___fsgt
07BB AA82      1622            mov     r2,dpl
07BD E581      1623            mov     a,sp
07BF 24FC      1624            add     a,#0xfc
07C1 F581      1625            mov     sp,a
07C3 EA        1626            mov     a,r2
07C4 7001      1627            jnz     L009052?
07C6 020100    1628            ljmp    L009026?
07C9           1629   L009052?:
07C9 75820C    1630            mov     dpl,#0x0C
07CC 120100    1631            lcall   _Volts_at_Pin
07CF AA82      1632            mov     r2,dpl
07D1 AB83      1633            mov     r3,dph
07D3 ACF0      1634            mov     r4,b
07D5 FD        1635            mov     r5,a
07D6 E4        1636            clr     a
07D7 C0E0      1637            push    acc
07D9 C0E0      1638            push    acc
07DB 7480      1639            mov     a,#0x80
07DD C0E0      1640            push    acc
07DF 743F      1641            mov     a,#0x3F
07E1 C0E0      1642            push    acc
07E3 8A82      1643            mov     dpl,r2
07E5 8B83      1644            mov     dph,r3
07E7 8CF0      1645            mov     b,r4
07E9 ED        1646            mov     a,r5
07EA 120100    1647            lcall   ___fsgt
07ED AA82      1648            mov     r2,dpl
07EF E581      1649            mov     a,sp
07F1 24FC      1650            add     a,#0xfc
07F3 F581      1651            mov     sp,a
07F5 EA        1652            mov     a,r2
07F6 7001      1653            jnz     L009053?
07F8 020100    1654            ljmp    L009026?
07FB           1655   L009053?:
07FB           1656   ;        robot.c:268: pwm_Left1 = 35;
07FB 753023    1657            mov     _pwm_Left1,#0x23
07FE           1658   ;        robot.c:269: pwm_Left0 = -1;
07FE 7570FF    1659            mov     _pwm_Left0,#0xFF
0801           1660   ;        robot.c:270: pwm_Right0 = 35;
0801 75F023    1661            mov     _pwm_Right0,#0x23
0804           1662   ;        robot.c:271: pwm_Right1 = -1;                                           
0804 75B0FF    1663            mov     _pwm_Right1,#0xFF
0807           1664   ;        robot.c:272: waitms(1500);
0807 9005DC    1665            mov     dptr,#0x05DC
080A 120100    1666            lcall   _waitms
080D           1667   ;        robot.c:274: turncar(0); //0 = left
080D 900000    1668            mov     dptr,#0x0000
0810 120100    1669            lcall   _turncar
0813           1670   ;        robot.c:275: currentcmd = 0;
0813 753000    1671            mov     _currentcmd,#0x00
0816           1672   ;        robot.c:278: break;
0816 020100    1673            ljmp    L009026?
0819           1674   ;        robot.c:281: case 2 :
0819           1675   L009015?:
0819           1676   ;        robot.c:283: if (Volts_at_Pin(LQFP32_MUX_P2_4) > 1 || Volts_at_Pin(LQFP32_MUX_P2_3) > 1) {
0819 75820C    1677            mov     dpl,#0x0C
081C 120100    1678            lcall   _Volts_at_Pin
081F AA82      1679            mov     r2,dpl
0821 AB83      1680            mov     r3,dph
0823 ACF0      1681            mov     r4,b
0825 FD        1682            mov     r5,a
0826 E4        1683            clr     a
0827 C0E0      1684            push    acc
0829 C0E0      1685            push    acc
082B 7480      1686            mov     a,#0x80
082D C0E0      1687            push    acc
082F 743F      1688            mov     a,#0x3F
0831 C0E0      1689            push    acc
0833 8A82      1690            mov     dpl,r2
0835 8B83      1691            mov     dph,r3
0837 8CF0      1692            mov     b,r4
0839 ED        1693            mov     a,r5
083A 120100    1694            lcall   ___fsgt
083D AA82      1695            mov     r2,dpl
083F E581      1696            mov     a,sp
0841 24FC      1697            add     a,#0xfc
0843 F581      1698            mov     sp,a
0845 EA        1699            mov     a,r2
0846 7001      1700            jnz     L009016?
0848 75820B    1701            mov     dpl,#0x0B
084B 120100    1702            lcall   _Volts_at_Pin
084E AA82      1703            mov     r2,dpl
0850 AB83      1704            mov     r3,dph
0852 ACF0      1705            mov     r4,b
0854 FD        1706            mov     r5,a
0855 E4        1707            clr     a
0856 C0E0      1708            push    acc
0858 C0E0      1709            push    acc
085A 7480      1710            mov     a,#0x80
085C C0E0      1711            push    acc
085E 743F      1712            mov     a,#0x3F
0860 C0E0      1713            push    acc
0862 8A82      1714            mov     dpl,r2
0864 8B83      1715            mov     dph,r3
0866 8CF0      1716            mov     b,r4
0868 ED        1717            mov     a,r5
0869 120100    1718            lcall   ___fsgt
086C AA82      1719            mov     r2,dpl
086E E581      1720            mov     a,sp
0870 24FC      1721            add     a,#0xfc
0872 F581      1722            mov     sp,a
0874 EA        1723            mov     a,r2
0875 7001      1724            jnz     L009055?
0877 020100    1725            ljmp    L009026?
087A           1726   L009055?:
087A           1727   L009016?:
087A           1728   ;        robot.c:284: printf("\n\r reached intersection :D");
087A 7450      1729            mov     a,#__str_3
087C C0E0      1730            push    acc
087E 74A7      1731            mov     a,#(__str_3 >> 8)
0880 C0E0      1732            push    acc
0882 7480      1733            mov     a,#0x80
0884 C0E0      1734            push    acc
0886 120100    1735            lcall   _printf
0889 1581      1736            dec     sp
088B 1581      1737            dec     sp
088D 1581      1738            dec     sp
088F           1739   ;        robot.c:285: pwm_Left1 = 35;
088F 753023    1740            mov     _pwm_Left1,#0x23
0892           1741   ;        robot.c:286: pwm_Left0 = -1;
0892 7570FF    1742            mov     _pwm_Left0,#0xFF
0895           1743   ;        robot.c:287: pwm_Right0 = 35;
0895 75F023    1744            mov     _pwm_Right0,#0x23
0898           1745   ;        robot.c:288: pwm_Right1 = -1;
0898 75B0FF    1746            mov     _pwm_Right1,#0xFF
089B           1747   ;        robot.c:289: waitms(1500);
089B 9005DC    1748            mov     dptr,#0x05DC
089E 120100    1749            lcall   _waitms
08A1           1750   ;        robot.c:291: turncar(1); //1 = right
08A1 900001    1751            mov     dptr,#0x0001
08A4 120100    1752            lcall   _turncar
08A7           1753   ;        robot.c:292: currentcmd = 0;
08A7 753000    1754            mov     _currentcmd,#0x00
08AA           1755   ;        robot.c:294: break;
08AA 020100    1756            ljmp    L009026?
08AD           1757   ;        robot.c:297: case 3 :
08AD           1758   L009019?:
08AD           1759   ;        robot.c:298: currentstate = 1;
08AD 75F001    1760            mov     _currentstate,#0x01
08B0           1761   ;        robot.c:299: currentcmd = 0;
08B0 753000    1762            mov     _currentcmd,#0x00
08B3           1763   ;        robot.c:300: break;
08B3 020100    1764            ljmp    L009026?
08B6           1765   ;        robot.c:303: case 4 :
08B6           1766   L009020?:
08B6           1767   ;        robot.c:304: currentstate = 2;
08B6 75F002    1768            mov     _currentstate,#0x02
08B9           1769   ;        robot.c:305: currentcmd = 0;
08B9 753000    1770            mov     _currentcmd,#0x00
08BC           1771   ;        robot.c:306: break;
08BC 020100    1772            ljmp    L009026?
08BF           1773   ;        robot.c:309: case 5 :
08BF           1774   L009021?:
08BF           1775   ;        robot.c:310: currentstate = 3;
08BF 75F003    1776            mov     _currentstate,#0x03
08C2           1777   ;        robot.c:311: currentcmd = 0;
08C2 753000    1778            mov     _currentcmd,#0x00
08C5           1779   ;        robot.c:312: break;
08C5 020100    1780            ljmp    L009026?
08C8           1781   ;        robot.c:315: case 6 :
08C8           1782   L009022?:
08C8           1783   ;        robot.c:316: uturn();  //uturn
08C8 120100    1784            lcall   _uturn
08CB           1785   ;        robot.c:317: currentcmd = 0;
08CB 753000    1786            mov     _currentcmd,#0x00
08CE           1787   ;        robot.c:318: break;
08CE 020100    1788            ljmp    L009026?
08D1           1789   ;        robot.c:319: default: 
08D1           1790   L009023?:
08D1           1791   ;        robot.c:320: currentstate = 1;
08D1 75F001    1792            mov     _currentstate,#0x01
08D4           1793   ;        robot.c:321: }
08D4 020100    1794            ljmp    L009026?
08D7           1795            rseg R_CSEG
08D7           1796   
0000           1797            rseg R_XINIT
0000           1798   
0000           1799            rseg R_CONST
0000           1800   __str_0:
0000 63757272  1801            db 'current command is %d'
     656E7420
     636F6D6D
     616E6420
     69732025
     64
0015 0D        1802            db 0x0D
0016 0A        1803            db 0x0A
0017 00        1804            db 0x00
0018           1805   __str_1:
0018 1B        1806            db 0x1B
0019 5B324A    1807            db '[2J'
001C 00        1808            db 0x00
001D           1809   __str_2:
001D 61646320  1810            db 'adc readings = %f'
     72656164
     696E6773
     203D2025
     66
002E 0D        1811            db 0x0D
002F 0A        1812            db 0x0A
0030 00        1813            db 0x00
0031           1814   __str_3:
0031 0A        1815            db 0x0A
0032 0D        1816            db 0x0D
0033 20726561  1817            db ' reached intersection :D'
     63686564
     20696E74
     65727365
     6374696F
     6E203A44
004B 00        1818            db 0x00
004C           1819   
002E           1820            CSEG
002E           1821   
002E           1822   end
