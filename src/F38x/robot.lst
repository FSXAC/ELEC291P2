0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Mon Apr 03 12:31:06 2017
0000              5   ;--------------------------------------------------------
                  5   $name robot
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _Timer2_ISR
0000             27            public _main
0000             28            public _currentstate
0000             29            public _currentcmd
0000             30            public _direction
0000             31            public _pwm_Right1
0000             32            public _pwm_Right0
0000             33            public _pwm_Left1
0000             34            public _pwm_Left0
0000             35            public _pwm_both
0000             36            public _mode
0000             37            public _pwm_count
0000             38            public _readData
0000             39            public _linetrack
0000             40            public _stopcar
0000             41            public _turncar
0000             42            public _uturn
0000             43   ;--------------------------------------------------------
0000             44   ; Special Function Registers
0000             45   ;--------------------------------------------------------
0000             46   _P0             DATA 0x80
0000             47   _SP             DATA 0x81
0000             48   _DPL            DATA 0x82
0000             49   _DPH            DATA 0x83
0000             50   _EMI0TC         DATA 0x84
0000             51   _EMI0CF         DATA 0x85
0000             52   _OSCLCN         DATA 0x86
0000             53   _PCON           DATA 0x87
0000             54   _TCON           DATA 0x88
0000             55   _TMOD           DATA 0x89
0000             56   _TL0            DATA 0x8a
0000             57   _TL1            DATA 0x8b
0000             58   _TH0            DATA 0x8c
0000             59   _TH1            DATA 0x8d
0000             60   _CKCON          DATA 0x8e
0000             61   _PSCTL          DATA 0x8f
0000             62   _P1             DATA 0x90
0000             63   _TMR3CN         DATA 0x91
0000             64   _TMR4CN         DATA 0x91
0000             65   _TMR3RLL        DATA 0x92
0000             66   _TMR4RLL        DATA 0x92
0000             67   _TMR3RLH        DATA 0x93
0000             68   _TMR4RLH        DATA 0x93
0000             69   _TMR3L          DATA 0x94
0000             70   _TMR4L          DATA 0x94
0000             71   _TMR3H          DATA 0x95
0000             72   _TMR4H          DATA 0x95
0000             73   _USB0ADR        DATA 0x96
0000             74   _USB0DAT        DATA 0x97
0000             75   _SCON           DATA 0x98
0000             76   _SCON0          DATA 0x98
0000             77   _SBUF           DATA 0x99
0000             78   _SBUF0          DATA 0x99
0000             79   _CPT1CN         DATA 0x9a
0000             80   _CPT0CN         DATA 0x9b
0000             81   _CPT1MD         DATA 0x9c
0000             82   _CPT0MD         DATA 0x9d
0000             83   _CPT1MX         DATA 0x9e
0000             84   _CPT0MX         DATA 0x9f
0000             85   _P2             DATA 0xa0
0000             86   _SPI0CFG        DATA 0xa1
0000             87   _SPI0CKR        DATA 0xa2
0000             88   _SPI0DAT        DATA 0xa3
0000             89   _P0MDOUT        DATA 0xa4
0000             90   _P1MDOUT        DATA 0xa5
0000             91   _P2MDOUT        DATA 0xa6
0000             92   _P3MDOUT        DATA 0xa7
0000             93   _IE             DATA 0xa8
0000             94   _CLKSEL         DATA 0xa9
0000             95   _EMI0CN         DATA 0xaa
0000             96   __XPAGE         DATA 0xaa
0000             97   _SBCON1         DATA 0xac
0000             98   _P4MDOUT        DATA 0xae
0000             99   _PFE0CN         DATA 0xaf
0000            100   _P3             DATA 0xb0
0000            101   _OSCXCN         DATA 0xb1
0000            102   _OSCICN         DATA 0xb2
0000            103   _OSCICL         DATA 0xb3
0000            104   _SBRLL1         DATA 0xb4
0000            105   _SBRLH1         DATA 0xb5
0000            106   _FLSCL          DATA 0xb6
0000            107   _FLKEY          DATA 0xb7
0000            108   _IP             DATA 0xb8
0000            109   _CLKMUL         DATA 0xb9
0000            110   _SMBTC          DATA 0xb9
0000            111   _AMX0N          DATA 0xba
0000            112   _AMX0P          DATA 0xbb
0000            113   _ADC0CF         DATA 0xbc
0000            114   _ADC0L          DATA 0xbd
0000            115   _ADC0H          DATA 0xbe
0000            116   _SFRPAGE        DATA 0xbf
0000            117   _SMB0CN         DATA 0xc0
0000            118   _SMB1CN         DATA 0xc0
0000            119   _SMB0CF         DATA 0xc1
0000            120   _SMB1CF         DATA 0xc1
0000            121   _SMB0DAT        DATA 0xc2
0000            122   _SMB1DAT        DATA 0xc2
0000            123   _ADC0GTL        DATA 0xc3
0000            124   _ADC0GTH        DATA 0xc4
0000            125   _ADC0LTL        DATA 0xc5
0000            126   _ADC0LTH        DATA 0xc6
0000            127   _P4             DATA 0xc7
0000            128   _TMR2CN         DATA 0xc8
0000            129   _TMR5CN         DATA 0xc8
0000            130   _REG01CN        DATA 0xc9
0000            131   _TMR2RLL        DATA 0xca
0000            132   _TMR5RLL        DATA 0xca
0000            133   _TMR2RLH        DATA 0xcb
0000            134   _TMR5RLH        DATA 0xcb
0000            135   _TMR2L          DATA 0xcc
0000            136   _TMR5L          DATA 0xcc
0000            137   _TMR2H          DATA 0xcd
0000            138   _TMR5H          DATA 0xcd
0000            139   _SMB0ADM        DATA 0xce
0000            140   _SMB1ADM        DATA 0xce
0000            141   _SMB0ADR        DATA 0xcf
0000            142   _SMB1ADR        DATA 0xcf
0000            143   _PSW            DATA 0xd0
0000            144   _REF0CN         DATA 0xd1
0000            145   _SCON1          DATA 0xd2
0000            146   _SBUF1          DATA 0xd3
0000            147   _P0SKIP         DATA 0xd4
0000            148   _P1SKIP         DATA 0xd5
0000            149   _P2SKIP         DATA 0xd6
0000            150   _USB0XCN        DATA 0xd7
0000            151   _PCA0CN         DATA 0xd8
0000            152   _PCA0MD         DATA 0xd9
0000            153   _PCA0CPM0       DATA 0xda
0000            154   _PCA0CPM1       DATA 0xdb
0000            155   _PCA0CPM2       DATA 0xdc
0000            156   _PCA0CPM3       DATA 0xdd
0000            157   _PCA0CPM4       DATA 0xde
0000            158   _P3SKIP         DATA 0xdf
0000            159   _ACC            DATA 0xe0
0000            160   _XBR0           DATA 0xe1
0000            161   _XBR1           DATA 0xe2
0000            162   _XBR2           DATA 0xe3
0000            163   _IT01CF         DATA 0xe4
0000            164   _CKCON1         DATA 0xe4
0000            165   _SMOD1          DATA 0xe5
0000            166   _EIE1           DATA 0xe6
0000            167   _EIE2           DATA 0xe7
0000            168   _ADC0CN         DATA 0xe8
0000            169   _PCA0CPL1       DATA 0xe9
0000            170   _PCA0CPH1       DATA 0xea
0000            171   _PCA0CPL2       DATA 0xeb
0000            172   _PCA0CPH2       DATA 0xec
0000            173   _PCA0CPL3       DATA 0xed
0000            174   _PCA0CPH3       DATA 0xee
0000            175   _RSTSRC         DATA 0xef
0000            176   _B              DATA 0xf0
0000            177   _P0MDIN         DATA 0xf1
0000            178   _P1MDIN         DATA 0xf2
0000            179   _P2MDIN         DATA 0xf3
0000            180   _P3MDIN         DATA 0xf4
0000            181   _P4MDIN         DATA 0xf5
0000            182   _EIP1           DATA 0xf6
0000            183   _EIP2           DATA 0xf7
0000            184   _SPI0CN         DATA 0xf8
0000            185   _PCA0L          DATA 0xf9
0000            186   _PCA0H          DATA 0xfa
0000            187   _PCA0CPL0       DATA 0xfb
0000            188   _PCA0CPH0       DATA 0xfc
0000            189   _PCA0CPL4       DATA 0xfd
0000            190   _PCA0CPH4       DATA 0xfe
0000            191   _VDM0CN         DATA 0xff
0000            192   _DPTR           DATA 0x8382
0000            193   _TMR2RL         DATA 0xcbca
0000            194   _TMR3RL         DATA 0x9392
0000            195   _TMR4RL         DATA 0x9392
0000            196   _TMR5RL         DATA 0xcbca
0000            197   _TMR2           DATA 0xcdcc
0000            198   _TMR3           DATA 0x9594
0000            199   _TMR4           DATA 0x9594
0000            200   _TMR5           DATA 0xcdcc
0000            201   _SBRL1          DATA 0xb5b4
0000            202   _ADC0           DATA 0xbebd
0000            203   _ADC0GT         DATA 0xc4c3
0000            204   _ADC0LT         DATA 0xc6c5
0000            205   _PCA0           DATA 0xfaf9
0000            206   _PCA0CP1        DATA 0xeae9
0000            207   _PCA0CP2        DATA 0xeceb
0000            208   _PCA0CP3        DATA 0xeeed
0000            209   _PCA0CP0        DATA 0xfcfb
0000            210   _PCA0CP4        DATA 0xfefd
0000            211   ;--------------------------------------------------------
0000            212   ; special function bits
0000            213   ;--------------------------------------------------------
0000            214   _P0_0           BIT 0x80
0000            215   _P0_1           BIT 0x81
0000            216   _P0_2           BIT 0x82
0000            217   _P0_3           BIT 0x83
0000            218   _P0_4           BIT 0x84
0000            219   _P0_5           BIT 0x85
0000            220   _P0_6           BIT 0x86
0000            221   _P0_7           BIT 0x87
0000            222   _TF1            BIT 0x8f
0000            223   _TR1            BIT 0x8e
0000            224   _TF0            BIT 0x8d
0000            225   _TR0            BIT 0x8c
0000            226   _IE1            BIT 0x8b
0000            227   _IT1            BIT 0x8a
0000            228   _IE0            BIT 0x89
0000            229   _IT0            BIT 0x88
0000            230   _P1_0           BIT 0x90
0000            231   _P1_1           BIT 0x91
0000            232   _P1_2           BIT 0x92
0000            233   _P1_3           BIT 0x93
0000            234   _P1_4           BIT 0x94
0000            235   _P1_5           BIT 0x95
0000            236   _P1_6           BIT 0x96
0000            237   _P1_7           BIT 0x97
0000            238   _S0MODE         BIT 0x9f
0000            239   _SCON0_6        BIT 0x9e
0000            240   _MCE0           BIT 0x9d
0000            241   _REN0           BIT 0x9c
0000            242   _TB80           BIT 0x9b
0000            243   _RB80           BIT 0x9a
0000            244   _TI0            BIT 0x99
0000            245   _RI0            BIT 0x98
0000            246   _SCON_6         BIT 0x9e
0000            247   _MCE            BIT 0x9d
0000            248   _REN            BIT 0x9c
0000            249   _TB8            BIT 0x9b
0000            250   _RB8            BIT 0x9a
0000            251   _TI             BIT 0x99
0000            252   _RI             BIT 0x98
0000            253   _P2_0           BIT 0xa0
0000            254   _P2_1           BIT 0xa1
0000            255   _P2_2           BIT 0xa2
0000            256   _P2_3           BIT 0xa3
0000            257   _P2_4           BIT 0xa4
0000            258   _P2_5           BIT 0xa5
0000            259   _P2_6           BIT 0xa6
0000            260   _P2_7           BIT 0xa7
0000            261   _EA             BIT 0xaf
0000            262   _ESPI0          BIT 0xae
0000            263   _ET2            BIT 0xad
0000            264   _ES0            BIT 0xac
0000            265   _ET1            BIT 0xab
0000            266   _EX1            BIT 0xaa
0000            267   _ET0            BIT 0xa9
0000            268   _EX0            BIT 0xa8
0000            269   _P3_0           BIT 0xb0
0000            270   _P3_1           BIT 0xb1
0000            271   _P3_2           BIT 0xb2
0000            272   _P3_3           BIT 0xb3
0000            273   _P3_4           BIT 0xb4
0000            274   _P3_5           BIT 0xb5
0000            275   _P3_6           BIT 0xb6
0000            276   _P3_7           BIT 0xb7
0000            277   _IP_7           BIT 0xbf
0000            278   _PSPI0          BIT 0xbe
0000            279   _PT2            BIT 0xbd
0000            280   _PS0            BIT 0xbc
0000            281   _PT1            BIT 0xbb
0000            282   _PX1            BIT 0xba
0000            283   _PT0            BIT 0xb9
0000            284   _PX0            BIT 0xb8
0000            285   _MASTER0        BIT 0xc7
0000            286   _TXMODE0        BIT 0xc6
0000            287   _STA0           BIT 0xc5
0000            288   _STO0           BIT 0xc4
0000            289   _ACKRQ0         BIT 0xc3
0000            290   _ARBLOST0       BIT 0xc2
0000            291   _ACK0           BIT 0xc1
0000            292   _SI0            BIT 0xc0
0000            293   _MASTER1        BIT 0xc7
0000            294   _TXMODE1        BIT 0xc6
0000            295   _STA1           BIT 0xc5
0000            296   _STO1           BIT 0xc4
0000            297   _ACKRQ1         BIT 0xc3
0000            298   _ARBLOST1       BIT 0xc2
0000            299   _ACK1           BIT 0xc1
0000            300   _SI1            BIT 0xc0
0000            301   _TF2            BIT 0xcf
0000            302   _TF2H           BIT 0xcf
0000            303   _TF2L           BIT 0xce
0000            304   _TF2LEN         BIT 0xcd
0000            305   _TF2CEN         BIT 0xcc
0000            306   _T2SPLIT        BIT 0xcb
0000            307   _TR2            BIT 0xca
0000            308   _T2CSS          BIT 0xc9
0000            309   _T2XCLK         BIT 0xc8
0000            310   _TF5H           BIT 0xcf
0000            311   _TF5L           BIT 0xce
0000            312   _TF5LEN         BIT 0xcd
0000            313   _TMR5CN_4       BIT 0xcc
0000            314   _T5SPLIT        BIT 0xcb
0000            315   _TR5            BIT 0xca
0000            316   _TMR5CN_1       BIT 0xc9
0000            317   _T5XCLK         BIT 0xc8
0000            318   _CY             BIT 0xd7
0000            319   _AC             BIT 0xd6
0000            320   _F0             BIT 0xd5
0000            321   _RS1            BIT 0xd4
0000            322   _RS0            BIT 0xd3
0000            323   _OV             BIT 0xd2
0000            324   _F1             BIT 0xd1
0000            325   _PARITY         BIT 0xd0
0000            326   _CF             BIT 0xdf
0000            327   _CR             BIT 0xde
0000            328   _PCA0CN_5       BIT 0xde
0000            329   _CCF4           BIT 0xdc
0000            330   _CCF3           BIT 0xdb
0000            331   _CCF2           BIT 0xda
0000            332   _CCF1           BIT 0xd9
0000            333   _CCF0           BIT 0xd8
0000            334   _ACC_7          BIT 0xe7
0000            335   _ACC_6          BIT 0xe6
0000            336   _ACC_5          BIT 0xe5
0000            337   _ACC_4          BIT 0xe4
0000            338   _ACC_3          BIT 0xe3
0000            339   _ACC_2          BIT 0xe2
0000            340   _ACC_1          BIT 0xe1
0000            341   _ACC_0          BIT 0xe0
0000            342   _AD0EN          BIT 0xef
0000            343   _AD0TM          BIT 0xee
0000            344   _AD0INT         BIT 0xed
0000            345   _AD0BUSY        BIT 0xec
0000            346   _AD0WINT        BIT 0xeb
0000            347   _AD0CM2         BIT 0xea
0000            348   _AD0CM1         BIT 0xe9
0000            349   _AD0CM0         BIT 0xe8
0000            350   _B_7            BIT 0xf7
0000            351   _B_6            BIT 0xf6
0000            352   _B_5            BIT 0xf5
0000            353   _B_4            BIT 0xf4
0000            354   _B_3            BIT 0xf3
0000            355   _B_2            BIT 0xf2
0000            356   _B_1            BIT 0xf1
0000            357   _B_0            BIT 0xf0
0000            358   _SPIF           BIT 0xff
0000            359   _WCOL           BIT 0xfe
0000            360   _MODF           BIT 0xfd
0000            361   _RXOVRN         BIT 0xfc
0000            362   _NSSMD1         BIT 0xfb
0000            363   _NSSMD0         BIT 0xfa
0000            364   _TXBMT          BIT 0xf9
0000            365   _SPIEN          BIT 0xf8
0000            366   ;--------------------------------------------------------
0000            367   ; overlayable register banks
0000            368   ;--------------------------------------------------------
0000            369            rbank0 segment data overlay
0000            370   ;--------------------------------------------------------
0000            371   ; internal ram data
0000            372   ;--------------------------------------------------------
0000            373            rseg R_DSEG
0000            374   _pwm_count:
0000            375            ds 1
0001            376   _mode:
0001            377            ds 1
0002            378   _pwm_both:
0002            379            ds 1
0003            380   _pwm_Left0:
0003            381            ds 1
0004            382   _pwm_Left1:
0004            383            ds 1
0005            384   _pwm_Right0:
0005            385            ds 1
0006            386   _pwm_Right1:
0006            387            ds 1
0007            388   _direction:
0007            389            ds 1
0008            390   _currentcmd:
0008            391            ds 1
0009            392   _currentstate:
0009            393            ds 1
000A            394   _main_v1_1_57:
000A            395            ds 4
000E            396   _main_v2_1_57:
000E            397            ds 4
0012            398   _linetrack_vleft_1_76:
0012            399            ds 4
0016            400   _linetrack_vright_1_76:
0016            401            ds 4
001A            402   _linetrack_sloc0_1_0:
001A            403            ds 4
001E            404   _linetrack_sloc1_1_0:
001E            405            ds 4
0022            406   _turncar_v_1_82:
0022            407            ds 4
0026            408   _turncar_direction_1_82:
0026            409            ds 1
0027            410   _uturn_vleft_1_92:
0027            411            ds 4
002B            412   _uturn_vright_1_92:
002B            413            ds 4
002F            414   ;--------------------------------------------------------
002F            415   ; overlayable items in internal ram 
002F            416   ;--------------------------------------------------------
0000            417            rseg R_OSEG
0000            418   ;--------------------------------------------------------
0000            419   ; indirectly addressable internal ram data
0000            420   ;--------------------------------------------------------
0000            421            rseg R_ISEG
0000            422   ;--------------------------------------------------------
0000            423   ; absolute internal ram data
0000            424   ;--------------------------------------------------------
0000            425            DSEG
0000            426   ;--------------------------------------------------------
0000            427   ; bit data
0000            428   ;--------------------------------------------------------
0000            429            rseg R_BSEG
0000            430   _main_sloc0_1_0:
0000            431            DBIT    1
0001            432   _Timer2_ISR_sloc0_1_0:
0001            433            DBIT    1
0002            434   ;--------------------------------------------------------
0002            435   ; paged external ram data
0002            436   ;--------------------------------------------------------
0000            437            rseg R_PSEG
0000            438   ;--------------------------------------------------------
0000            439   ; external ram data
0000            440   ;--------------------------------------------------------
0000            441            rseg R_XSEG
0000            442   ;--------------------------------------------------------
0000            443   ; absolute external ram data
0000            444   ;--------------------------------------------------------
0000            445            XSEG
0000            446   ;--------------------------------------------------------
0000            447   ; external initialized ram data
0000            448   ;--------------------------------------------------------
0000            449            rseg R_IXSEG
0000            450            rseg R_HOME
0000            451            rseg R_GSINIT
0000            452            rseg R_CSEG
0000            453   ;--------------------------------------------------------
0000            454   ; Reset entry point and interrupt vectors
0000            455   ;--------------------------------------------------------
0000            456            CSEG at 0x0000
0000 020100     457            ljmp    _crt0
002B            458            CSEG at 0x002b
002B 020100     459            ljmp    _Timer2_ISR
002E            460   ;--------------------------------------------------------
002E            461   ; global & static initialisations
002E            462   ;--------------------------------------------------------
0000            463            rseg R_HOME
0000            464            rseg R_GSINIT
0000            465            rseg R_GSINIT
0000            466   ;--------------------------------------------------------
0000            467   ; data variables initialization
0000            468   ;--------------------------------------------------------
0000            469            rseg R_DINIT
0000            470   ;        robot.c:10: volatile  char pwm_count=0;
0000 752000     471            mov     _pwm_count,#0x00
0003            472   ;        robot.c:11: volatile  char mode = 0;
0003 75F000     473            mov     _mode,#0x00
0006            474   ;        robot.c:12: volatile  char pwm_both =0;
0006 75B000     475            mov     _pwm_both,#0x00
0009            476   ;        robot.c:13: volatile  char pwm_Left0 = 0; //p1.5
0009 757000     477            mov     _pwm_Left0,#0x00
000C            478   ;        robot.c:14: volatile  char pwm_Left1 = 0; //p1.6
000C 753000     479            mov     _pwm_Left1,#0x00
000F            480   ;        robot.c:15: volatile  char pwm_Right0 = 0; //p2.0
000F 75F000     481            mov     _pwm_Right0,#0x00
0012            482   ;        robot.c:16: volatile  char pwm_Right1 = 0; //p2.1
0012 75B000     483            mov     _pwm_Right1,#0x00
0015            484   ;        robot.c:17: volatile  char direction = 0; // 1 for back 0 for forward
0015 757000     485            mov     _direction,#0x00
0018            486   ;        robot.c:19: volatile  char currentcmd = 0;
0018 753000     487            mov     _currentcmd,#0x00
001B            488   ;        robot.c:20: volatile  char currentstate = 1;
001B 75F001     489            mov     _currentstate,#0x01
001E            490            ; The linker places a 'ret' at the end of segment R_DINIT.
001E            491   ;--------------------------------------------------------
001E            492   ; code
001E            493   ;--------------------------------------------------------
0000            494            rseg R_CSEG
0000            495   ;------------------------------------------------------------
0000            496   ;Allocation info for local variables in function 'main'
0000            497   ;------------------------------------------------------------
0000            498   ;v1                        Allocated with name '_main_v1_1_57'
0000            499   ;v2                        Allocated with name '_main_v2_1_57'
0000            500   ;------------------------------------------------------------
0000            501   ;        robot.c:22: void main(void) {
0000            502   ;        -----------------------------------------
0000            503   ;         function main
0000            504   ;        -----------------------------------------
0000            505   _main:
0000            506            using   0
0000            507   ;        robot.c:24: volatile float v1 = 0;
0000 752800     508            mov     _main_v1_1_57,#0x00
0003 752900     509            mov     (_main_v1_1_57 + 1),#0x00
0006 752A00     510            mov     (_main_v1_1_57 + 2),#0x00
0009 752B00     511            mov     (_main_v1_1_57 + 3),#0x00
000C            512   ;        robot.c:25: volatile float v2 = 0;
000C 756800     513            mov     _main_v2_1_57,#0x00
000F 756900     514            mov     (_main_v2_1_57 + 1),#0x00
0012 756A00     515            mov     (_main_v2_1_57 + 2),#0x00
0015 756B00     516            mov     (_main_v2_1_57 + 3),#0x00
0018            517   ;        robot.c:27: MOTOR_LEFT0 = 0;
0018 C295       518            clr     _P1_5
001A            519   ;        robot.c:28: MOTOR_LEFT1 = 0;
001A C296       520            clr     _P1_6
001C            521   ;        robot.c:29: MOTOR_RIGHT0 = 0;
001C C2A0       522            clr     _P2_0
001E            523   ;        robot.c:30: MOTOR_RIGHT1 = 0;
001E C2A1       524            clr     _P2_1
0020            525   ;        robot.c:33: currentstate = 1;           //1-FORWARD, 2-BACKWARDS, 3-STOPPED, 4-DEBUGGER
0020 75F001     526            mov     _currentstate,#0x01
0023            527   ;        robot.c:34: currentcmd = 0;             //0-NO COMMAND, 1-TURN LEFT, 2-TURN RIGHT, 3-FORWARDS, 4-BACKWARDS, 5-STOP, 6-UTURN
0023 753000     528            mov     _currentcmd,#0x00
0026            529   ;        robot.c:37: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0026 74E8       530            mov     a,#__str_0
0028 C0E0       531            push    acc
002A 7494       532            mov     a,#(__str_0 >> 8)
002C C0E0       533            push    acc
002E 7480       534            mov     a,#0x80
0030 C0E0       535            push    acc
0032 120100     536            lcall   _printf
0035 1581       537            dec     sp
0037 1581       538            dec     sp
0039 1581       539            dec     sp
003B            540   ;        robot.c:40: InitPinADC(2, 3); // Configure P2.3 as analog input (tank1)
003B 750003     541            mov     _InitPinADC_PARM_2,#0x03
003E 758202     542            mov     dpl,#0x02
0041 120100     543            lcall   _InitPinADC
0044            544   ;        robot.c:41: InitPinADC(2, 4); // Configure P2.4 as analog input         (tank1)
0044 750004     545            mov     _InitPinADC_PARM_2,#0x04
0047 758202     546            mov     dpl,#0x02
004A 120100     547            lcall   _InitPinADC
004D            548   ;        robot.c:42: InitPinADC(2, 5); // Configure P2.5 as analog input (tank2)
004D 750005     549            mov     _InitPinADC_PARM_2,#0x05
0050 758202     550            mov     dpl,#0x02
0053 120100     551            lcall   _InitPinADC
0056            552   ;        robot.c:43: InitPinADC(2, 6); // Configure P2.6 as analog input (tank2)
0056 750006     553            mov     _InitPinADC_PARM_2,#0x06
0059 758202     554            mov     dpl,#0x02
005C 120100     555            lcall   _InitPinADC
005F            556   ;        robot.c:46: InitADC();  
005F 120100     557            lcall   _InitADC
0062            558   ;        robot.c:49: while (1) {         
0062            559   L002034?:
0062            560   ;        robot.c:52: currentcmd = readData(); 
0062 120100     561            lcall   _readData
0065 858230     562            mov     _currentcmd,dpl
0068            563   ;        robot.c:61: switch (currentstate) {
0068 AAF0       564            mov     r2,_currentstate
006A BA0138     565            cjne    r2,#0x01,L002064?
006D 8001       566            sjmp    L002001?
006F            567   L002064?:
006F BA02B8     568            cjne    r2,#0x02,L002065?
0072 8001       569            sjmp    L002002?
0074            570   L002065?:
0074            571   ;        robot.c:62: case FORWARD_STATE:
0074 BA0338     572            cjne    r2,#0x03,L002004?
0077 8001       573            sjmp    L002003?
0079            574   L002001?:
0079            575   ;        robot.c:63: linetrack(0);       // forwards
0079 900000     576            mov     dptr,#0x0000
007C 120100     577            lcall   _linetrack
007F            578   ;        robot.c:65: v1 = Volts_at_Pin(TANK_FL);
007F 75820B     579            mov     dpl,#0x0B
0082 120100     580            lcall   _Volts_at_Pin
0085 858228     581            mov     _main_v1_1_57,dpl
0088 858329     582            mov     (_main_v1_1_57 + 1),dph
008B 85F02A     583            mov     (_main_v1_1_57 + 2),b
008E F52B       584            mov     (_main_v1_1_57 + 3),a
0090            585   ;        robot.c:66: v2 = Volts_at_Pin(TANK_FR);
0090 75820C     586            mov     dpl,#0x0C
0093 120100     587            lcall   _Volts_at_Pin
0096 858268     588            mov     _main_v2_1_57,dpl
0099 858369     589            mov     (_main_v2_1_57 + 1),dph
009C 85F06A     590            mov     (_main_v2_1_57 + 2),b
009F F56B       591            mov     (_main_v2_1_57 + 3),a
00A1            592   ;        robot.c:67: break;
00A1            593   ;        robot.c:68: case REVERSE_STATE:
00A1 8001       594            sjmp    L002004?
00A3            595   L002002?:
00A3            596   ;        robot.c:69: linetrack(1);       // backwards
00A3 900001     597            mov     dptr,#0x0001
00A6 120100     598            lcall   _linetrack
00A9            599   ;        robot.c:71: v2 = Volts_at_Pin(TANK_RL);
00A9 75820D     600            mov     dpl,#0x0D
00AC 120100     601            lcall   _Volts_at_Pin
00AF 858268     602            mov     _main_v2_1_57,dpl
00B2 858369     603            mov     (_main_v2_1_57 + 1),dph
00B5 85F06A     604            mov     (_main_v2_1_57 + 2),b
00B8 F56B       605            mov     (_main_v2_1_57 + 3),a
00BA            606   ;        robot.c:72: v1 = Volts_at_Pin(TANK_RR);
00BA 75820E     607            mov     dpl,#0x0E
00BD 120100     608            lcall   _Volts_at_Pin
00C0 858228     609            mov     _main_v1_1_57,dpl
00C3 858329     610            mov     (_main_v1_1_57 + 1),dph
00C6 85F02A     611            mov     (_main_v1_1_57 + 2),b
00C9 F52B       612            mov     (_main_v1_1_57 + 3),a
00CB            613   ;        robot.c:73: break;
00CB            614   ;        robot.c:74: case STOP_STATE:
00CB 8001       615            sjmp    L002004?
00CD            616   L002003?:
00CD            617   ;        robot.c:75: stopcar();          // stop car
00CD 120100     618            lcall   _stopcar
00D0            619   ;        robot.c:77: }
00D0            620   L002004?:
00D0            621   ;        robot.c:80: switch (currentcmd) {
00D0 E530       622            mov     a,_currentcmd
00D2 FA         623            mov     r2,a
00D3 30E778     624            jnb     acc.7,L002067?
00D6 020100     625            ljmp    L002031?
00D9            626   L002067?:
00D9 C3         627            clr     c
00DA 7486       628            mov     a,#(0x06 ^ 0x80)
00DC 8AF0       629            mov     b,r2
00DE 63F080     630            xrl     b,#0x80
00E1 95F0       631            subb    a,b
00E3 5001       632            jnc     L002068?
00E5 020100     633            ljmp    L002031?
00E8            634   L002068?:
00E8 EA         635            mov     a,r2
00E9 2A         636            add     a,r2
00EA 2A         637            add     a,r2
00EB 909A38     638            mov     dptr,#L002069?
00EE 73         639            jmp     @a+dptr
00EF            640   L002069?:
00EF 020100     641            ljmp    L002005?
00F2 020100     642            ljmp    L002019?
00F5 020100     643            ljmp    L002023?
00F8 020100     644            ljmp    L002027?
00FB 020100     645            ljmp    L002028?
00FE 020100     646            ljmp    L002029?
0101 020100     647            ljmp    L002030?
0104            648   ;        robot.c:82: case CMD_NONE:
0104            649   L002005?:
0104            650   ;        robot.c:84: if ((currentstate-1) ? 
0104 AAF0       651            mov     r2,_currentstate
0106 E5F0       652            mov     a,_currentstate
0108 33         653            rlc     a
0109 95E0       654            subb    a,acc
010B FB         655            mov     r3,a
010C 1A         656            dec     r2
010D BAFF38     657            cjne    r2,#0xff,L002070?
0110 1B         658            dec     r3
0111            659   L002070?:
0111 EA         660            mov     a,r2
0112 4B         661            orl     a,r3
0113 6001       662            jz      L002038?
0115            663   ;        robot.c:85: (v1 > 1.2 && v2 > 1.2) :
0115 749A       664            mov     a,#0x9A
0117 C0E0       665            push    acc
0119 7499       666            mov     a,#0x99
011B C0E0       667            push    acc
011D C0E0       668            push    acc
011F 743F       669            mov     a,#0x3F
0121 C0E0       670            push    acc
0123 852882     671            mov     dpl,_main_v1_1_57
0126 852983     672            mov     dph,(_main_v1_1_57 + 1)
0129 852AF0     673            mov     b,(_main_v1_1_57 + 2)
012C E52B       674            mov     a,(_main_v1_1_57 + 3)
012E 120100     675            lcall   ___fsgt
0131 AA82       676            mov     r2,dpl
0133 E581       677            mov     a,sp
0135 24FC       678            add     a,#0xfc
0137 F581       679            mov     sp,a
0139 EA         680            mov     a,r2
013A 6001       681            jz      L002040?
013C 749A       682            mov     a,#0x9A
013E C0E0       683            push    acc
0140 7499       684            mov     a,#0x99
0142 C0E0       685            push    acc
0144 C0E0       686            push    acc
0146 743F       687            mov     a,#0x3F
0148 C0E0       688            push    acc
014A 856882     689            mov     dpl,_main_v2_1_57
014D 856983     690            mov     dph,(_main_v2_1_57 + 1)
0150 856AF0     691            mov     b,(_main_v2_1_57 + 2)
0153 E56B       692            mov     a,(_main_v2_1_57 + 3)
0155 120100     693            lcall   ___fsgt
0158 AA82       694            mov     r2,dpl
015A E581       695            mov     a,sp
015C 24FC       696            add     a,#0xfc
015E F581       697            mov     sp,a
0160 EA         698            mov     a,r2
0161 7001       699            jnz     L002041?
0163            700   L002040?:
0163 7A00       701            mov     r2,#0x00
0165 8001       702            sjmp    L002042?
0167            703   L002041?:
0167 7A01       704            mov     r2,#0x01
0169            705   L002042?:
0169 EA         706            mov     a,r2
016A 24FF       707            add     a,#0xff
016C 9218       708            mov     _main_sloc0_1_0,c
016E 8001       709            sjmp    L002039?
0170            710   L002038?:
0170            711   ;        robot.c:86: (v1 > 0.7 && v2 > 1)) {
0170 7433       712            mov     a,#0x33
0172 C0E0       713            push    acc
0174 C0E0       714            push    acc
0176 C0E0       715            push    acc
0178 743F       716            mov     a,#0x3F
017A C0E0       717            push    acc
017C 852882     718            mov     dpl,_main_v1_1_57
017F 852983     719            mov     dph,(_main_v1_1_57 + 1)
0182 852AF0     720            mov     b,(_main_v1_1_57 + 2)
0185 E52B       721            mov     a,(_main_v1_1_57 + 3)
0187 120100     722            lcall   ___fsgt
018A AA82       723            mov     r2,dpl
018C E581       724            mov     a,sp
018E 24FC       725            add     a,#0xfc
0190 F581       726            mov     sp,a
0192 EA         727            mov     a,r2
0193 6001       728            jz      L002043?
0195 E4         729            clr     a
0196 C0E0       730            push    acc
0198 C0E0       731            push    acc
019A 7480       732            mov     a,#0x80
019C C0E0       733            push    acc
019E 743F       734            mov     a,#0x3F
01A0 C0E0       735            push    acc
01A2 856882     736            mov     dpl,_main_v2_1_57
01A5 856983     737            mov     dph,(_main_v2_1_57 + 1)
01A8 856AF0     738            mov     b,(_main_v2_1_57 + 2)
01AB E56B       739            mov     a,(_main_v2_1_57 + 3)
01AD 120100     740            lcall   ___fsgt
01B0 AA82       741            mov     r2,dpl
01B2 E581       742            mov     a,sp
01B4 24FC       743            add     a,#0xfc
01B6 F581       744            mov     sp,a
01B8 EA         745            mov     a,r2
01B9 7001       746            jnz     L002044?
01BB            747   L002043?:
01BB 7A00       748            mov     r2,#0x00
01BD 8001       749            sjmp    L002045?
01BF            750   L002044?:
01BF 7A01       751            mov     r2,#0x01
01C1            752   L002045?:
01C1 EA         753            mov     a,r2
01C2 24FF       754            add     a,#0xff
01C4 9218       755            mov     _main_sloc0_1_0,c
01C6            756   L002039?:
01C6 2018B8     757            jb      _main_sloc0_1_0,L002076?
01C9 020100     758            ljmp    L002034?
01CC            759   L002076?:
01CC            760   ;        robot.c:87: printf("\nINTERSECTION\n");
01CC 74F8       761            mov     a,#__str_1
01CE C0E0       762            push    acc
01D0 749E       763            mov     a,#(__str_1 >> 8)
01D2 C0E0       764            push    acc
01D4 7480       765            mov     a,#0x80
01D6 C0E0       766            push    acc
01D8 120100     767            lcall   _printf
01DB 1581       768            dec     sp
01DD 1581       769            dec     sp
01DF 1581       770            dec     sp
01E1            771   ;        robot.c:89: if (currentstate == 1) {
01E1 7401       772            mov     a,#0x01
01E3 B5F038     773            cjne    a,_currentstate,L002015?
01E6            774   ;        robot.c:90: if (Volts_at_Pin(LQFP32_MUX_P2_5)>Volts_at_Pin(LQFP32_MUX_P2_6)) {
01E6 75820D     775            mov     dpl,#0x0D
01E9 120100     776            lcall   _Volts_at_Pin
01EC AA82       777            mov     r2,dpl
01EE AB83       778            mov     r3,dph
01F0 ACF0       779            mov     r4,b
01F2 FD         780            mov     r5,a
01F3 75820E     781            mov     dpl,#0x0E
01F6 C002       782            push    ar2
01F8 C003       783            push    ar3
01FA C004       784            push    ar4
01FC C005       785            push    ar5
01FE 120100     786            lcall   _Volts_at_Pin
0201 AE82       787            mov     r6,dpl
0203 AF83       788            mov     r7,dph
0205 A8F0       789            mov     r0,b
0207 F9         790            mov     r1,a
0208 D005       791            pop     ar5
020A D004       792            pop     ar4
020C D003       793            pop     ar3
020E D002       794            pop     ar2
0210 C006       795            push    ar6
0212 C007       796            push    ar7
0214 C000       797            push    ar0
0216 C001       798            push    ar1
0218 8A82       799            mov     dpl,r2
021A 8B83       800            mov     dph,r3
021C 8CF0       801            mov     b,r4
021E ED         802            mov     a,r5
021F 120100     803            lcall   ___fsgt
0222 AA82       804            mov     r2,dpl
0224 E581       805            mov     a,sp
0226 24FC       806            add     a,#0xfc
0228 F581       807            mov     sp,a
022A EA         808            mov     a,r2
022B 6001       809            jz      L002007?
022D            810   ;        robot.c:91: pwm_Left1 = 50;
022D 753032     811            mov     _pwm_Left1,#0x32
0230            812   ;        robot.c:92: pwm_Left0 = -1;
0230 7570FF     813            mov     _pwm_Left0,#0xFF
0233            814   ;        robot.c:93: pwm_Right0 = 30;
0233 75F01E     815            mov     _pwm_Right0,#0x1E
0236            816   ;        robot.c:94: pwm_Right1 = -1;
0236 75B0FF     817            mov     _pwm_Right1,#0xFF
0239 8001       818            sjmp    L002016?
023B            819   L002007?:
023B            820   ;        robot.c:97: pwm_Left1 = 30;
023B 75301E     821            mov     _pwm_Left1,#0x1E
023E            822   ;        robot.c:98: pwm_Left0 = -1;
023E 7570FF     823            mov     _pwm_Left0,#0xFF
0241            824   ;        robot.c:99: pwm_Right0 = 50;
0241 75F032     825            mov     _pwm_Right0,#0x32
0244            826   ;        robot.c:100: pwm_Right1 = -1;
0244 75B0FF     827            mov     _pwm_Right1,#0xFF
0247 8001       828            sjmp    L002016?
0249            829   L002015?:
0249            830   ;        robot.c:102: } else if (currentstate == 2) {
0249 7402       831            mov     a,#0x02
024B B5F0B8     832            cjne    a,_currentstate,L002016?
024E            833   ;        robot.c:103: if (Volts_at_Pin(TANK_FL)>Volts_at_Pin(TANK_FR)) {
024E 75820B     834            mov     dpl,#0x0B
0251 120100     835            lcall   _Volts_at_Pin
0254 AA82       836            mov     r2,dpl
0256 AB83       837            mov     r3,dph
0258 ACF0       838            mov     r4,b
025A FD         839            mov     r5,a
025B 75820C     840            mov     dpl,#0x0C
025E C002       841            push    ar2
0260 C003       842            push    ar3
0262 C004       843            push    ar4
0264 C005       844            push    ar5
0266 120100     845            lcall   _Volts_at_Pin
0269 AE82       846            mov     r6,dpl
026B AF83       847            mov     r7,dph
026D A8F0       848            mov     r0,b
026F F9         849            mov     r1,a
0270 D005       850            pop     ar5
0272 D004       851            pop     ar4
0274 D003       852            pop     ar3
0276 D002       853            pop     ar2
0278 C006       854            push    ar6
027A C007       855            push    ar7
027C C000       856            push    ar0
027E C001       857            push    ar1
0280 8A82       858            mov     dpl,r2
0282 8B83       859            mov     dph,r3
0284 8CF0       860            mov     b,r4
0286 ED         861            mov     a,r5
0287 120100     862            lcall   ___fsgt
028A AA82       863            mov     r2,dpl
028C E581       864            mov     a,sp
028E 24FC       865            add     a,#0xfc
0290 F581       866            mov     sp,a
0292 EA         867            mov     a,r2
0293 6001       868            jz      L002010?
0295            869   ;        robot.c:104: pwm_Left0 = 50;
0295 757032     870            mov     _pwm_Left0,#0x32
0298            871   ;        robot.c:105: pwm_Left1 = -1;
0298 7530FF     872            mov     _pwm_Left1,#0xFF
029B            873   ;        robot.c:106: pwm_Right0 = -1;
029B 75F0FF     874            mov     _pwm_Right0,#0xFF
029E            875   ;        robot.c:107: pwm_Right1 = 30;
029E 75B01E     876            mov     _pwm_Right1,#0x1E
02A1 8001       877            sjmp    L002016?
02A3            878   L002010?:
02A3            879   ;        robot.c:110: pwm_Left0 = 30;
02A3 75701E     880            mov     _pwm_Left0,#0x1E
02A6            881   ;        robot.c:111: pwm_Left1 = -1;
02A6 7530FF     882            mov     _pwm_Left1,#0xFF
02A9            883   ;        robot.c:112: pwm_Right0 = -1;
02A9 75F0FF     884            mov     _pwm_Right0,#0xFF
02AC            885   ;        robot.c:113: pwm_Right1 = 50;
02AC 75B032     886            mov     _pwm_Right1,#0x32
02AF            887   L002016?:
02AF            888   ;        robot.c:117: waitms(1500);
02AF 9005DC     889            mov     dptr,#0x05DC
02B2 120100     890            lcall   _waitms
02B5            891   ;        robot.c:119: break;
02B5 020100     892            ljmp    L002034?
02B8            893   ;        robot.c:121: case CMD_LEFT:
02B8            894   L002019?:
02B8            895   ;        robot.c:123: if (v1 > 0.7 && v2 >1)  {
02B8 7433       896            mov     a,#0x33
02BA C0E0       897            push    acc
02BC C0E0       898            push    acc
02BE C0E0       899            push    acc
02C0 743F       900            mov     a,#0x3F
02C2 C0E0       901            push    acc
02C4 852882     902            mov     dpl,_main_v1_1_57
02C7 852983     903            mov     dph,(_main_v1_1_57 + 1)
02CA 852AF0     904            mov     b,(_main_v1_1_57 + 2)
02CD E52B       905            mov     a,(_main_v1_1_57 + 3)
02CF 120100     906            lcall   ___fsgt
02D2 AA82       907            mov     r2,dpl
02D4 E581       908            mov     a,sp
02D6 24FC       909            add     a,#0xfc
02D8 F581       910            mov     sp,a
02DA EA         911            mov     a,r2
02DB 7001       912            jnz     L002083?
02DD 020100     913            ljmp    L002034?
02E0            914   L002083?:
02E0 E4         915            clr     a
02E1 C0E0       916            push    acc
02E3 C0E0       917            push    acc
02E5 7480       918            mov     a,#0x80
02E7 C0E0       919            push    acc
02E9 743F       920            mov     a,#0x3F
02EB C0E0       921            push    acc
02ED 856882     922            mov     dpl,_main_v2_1_57
02F0 856983     923            mov     dph,(_main_v2_1_57 + 1)
02F3 856AF0     924            mov     b,(_main_v2_1_57 + 2)
02F6 E56B       925            mov     a,(_main_v2_1_57 + 3)
02F8 120100     926            lcall   ___fsgt
02FB AA82       927            mov     r2,dpl
02FD E581       928            mov     a,sp
02FF 24FC       929            add     a,#0xfc
0301 F581       930            mov     sp,a
0303 EA         931            mov     a,r2
0304 7001       932            jnz     L002084?
0306 020100     933            ljmp    L002034?
0309            934   L002084?:
0309            935   ;        robot.c:124: printf("\n\r INTERSECTION\n");
0309 7400       936            mov     a,#__str_2
030B C0E0       937            push    acc
030D 74A1       938            mov     a,#(__str_2 >> 8)
030F C0E0       939            push    acc
0311 7480       940            mov     a,#0x80
0313 C0E0       941            push    acc
0315 120100     942            lcall   _printf
0318 1581       943            dec     sp
031A 1581       944            dec     sp
031C 1581       945            dec     sp
031E            946   ;        robot.c:129: turncar(currentstate);
031E AAF0       947            mov     r2,_currentstate
0320 E5F0       948            mov     a,_currentstate
0322 33         949            rlc     a
0323 95E0       950            subb    a,acc
0325 FB         951            mov     r3,a
0326 8A82       952            mov     dpl,r2
0328 8B83       953            mov     dph,r3
032A 120100     954            lcall   _turncar
032D            955   ;        robot.c:130: currentcmd = 0;
032D 753000     956            mov     _currentcmd,#0x00
0330            957   ;        robot.c:132: break;
0330 020100     958            ljmp    L002034?
0333            959   ;        robot.c:135: case CMD_RIGHT:
0333            960   L002023?:
0333            961   ;        robot.c:137: if (v1 > 0.7 && v2 >1) {
0333 7433       962            mov     a,#0x33
0335 C0E0       963            push    acc
0337 C0E0       964            push    acc
0339 C0E0       965            push    acc
033B 743F       966            mov     a,#0x3F
033D C0E0       967            push    acc
033F 852882     968            mov     dpl,_main_v1_1_57
0342 852983     969            mov     dph,(_main_v1_1_57 + 1)
0345 852AF0     970            mov     b,(_main_v1_1_57 + 2)
0348 E52B       971            mov     a,(_main_v1_1_57 + 3)
034A 120100     972            lcall   ___fsgt
034D AA82       973            mov     r2,dpl
034F E581       974            mov     a,sp
0351 24FC       975            add     a,#0xfc
0353 F581       976            mov     sp,a
0355 EA         977            mov     a,r2
0356 7001       978            jnz     L002085?
0358 020100     979            ljmp    L002034?
035B            980   L002085?:
035B E4         981            clr     a
035C C0E0       982            push    acc
035E C0E0       983            push    acc
0360 7480       984            mov     a,#0x80
0362 C0E0       985            push    acc
0364 743F       986            mov     a,#0x3F
0366 C0E0       987            push    acc
0368 856882     988            mov     dpl,_main_v2_1_57
036B 856983     989            mov     dph,(_main_v2_1_57 + 1)
036E 856AF0     990            mov     b,(_main_v2_1_57 + 2)
0371 E56B       991            mov     a,(_main_v2_1_57 + 3)
0373 120100     992            lcall   ___fsgt
0376 AA82       993            mov     r2,dpl
0378 E581       994            mov     a,sp
037A 24FC       995            add     a,#0xfc
037C F581       996            mov     sp,a
037E EA         997            mov     a,r2
037F 7001       998            jnz     L002086?
0381 020100     999            ljmp    L002034?
0384           1000   L002086?:
0384           1001   ;        robot.c:138: printf("\n\r INTERSECTION\n");
0384 7400      1002            mov     a,#__str_2
0386 C0E0      1003            push    acc
0388 74A1      1004            mov     a,#(__str_2 >> 8)
038A C0E0      1005            push    acc
038C 7480      1006            mov     a,#0x80
038E C0E0      1007            push    acc
0390 120100    1008            lcall   _printf
0393 1581      1009            dec     sp
0395 1581      1010            dec     sp
0397 1581      1011            dec     sp
0399           1012   ;        robot.c:140: turncar(currentstate + 2); //1 = right
0399 AAF0      1013            mov     r2,_currentstate
039B E5F0      1014            mov     a,_currentstate
039D 33        1015            rlc     a
039E 95E0      1016            subb    a,acc
03A0 FB        1017            mov     r3,a
03A1 8A82      1018            mov     dpl,r2
03A3 8B83      1019            mov     dph,r3
03A5 A3        1020            inc     dptr
03A6 A3        1021            inc     dptr
03A7 120100    1022            lcall   _turncar
03AA           1023   ;        robot.c:141: currentcmd = 0;
03AA 753000    1024            mov     _currentcmd,#0x00
03AD           1025   ;        robot.c:143: break;
03AD 020100    1026            ljmp    L002034?
03B0           1027   ;        robot.c:146: case CMD_FORWARD:
03B0           1028   L002027?:
03B0           1029   ;        robot.c:148: currentstate = 1;
03B0 75F001    1030            mov     _currentstate,#0x01
03B3           1031   ;        robot.c:149: currentcmd = 0;
03B3 753000    1032            mov     _currentcmd,#0x00
03B6           1033   ;        robot.c:150: break;
03B6 020100    1034            ljmp    L002034?
03B9           1035   ;        robot.c:153: case CMD_REVERSE:
03B9           1036   L002028?:
03B9           1037   ;        robot.c:155: currentstate = 2;
03B9 75F002    1038            mov     _currentstate,#0x02
03BC           1039   ;        robot.c:156: currentcmd = 0;
03BC 753000    1040            mov     _currentcmd,#0x00
03BF           1041   ;        robot.c:157: break;
03BF 020100    1042            ljmp    L002034?
03C2           1043   ;        robot.c:160: case CMD_STOP:
03C2           1044   L002029?:
03C2           1045   ;        robot.c:162: currentstate = 3;
03C2 75F003    1046            mov     _currentstate,#0x03
03C5           1047   ;        robot.c:163: currentcmd = 0;
03C5 753000    1048            mov     _currentcmd,#0x00
03C8           1049   ;        robot.c:164: break;
03C8 020100    1050            ljmp    L002034?
03CB           1051   ;        robot.c:167: case CMD_UTURN:
03CB           1052   L002030?:
03CB           1053   ;        robot.c:168: uturn();
03CB 120100    1054            lcall   _uturn
03CE           1055   ;        robot.c:169: currentcmd = 0;
03CE 753000    1056            mov     _currentcmd,#0x00
03D1           1057   ;        robot.c:170: break;
03D1 020100    1058            ljmp    L002034?
03D4           1059   ;        robot.c:173: default: 
03D4           1060   L002031?:
03D4           1061   ;        robot.c:174: currentstate = 1;
03D4 75F001    1062            mov     _currentstate,#0x01
03D7           1063   ;        robot.c:175: }
03D7 020100    1064            ljmp    L002034?
03DA           1065   ;------------------------------------------------------------
03DA           1066   ;Allocation info for local variables in function 'Timer2_ISR'
03DA           1067   ;------------------------------------------------------------
03DA           1068   ;------------------------------------------------------------
03DA           1069   ;        robot.c:179: void Timer2_ISR (void) interrupt 5 {
03DA           1070   ;        -----------------------------------------
03DA           1071   ;         function Timer2_ISR
03DA           1072   ;        -----------------------------------------
03DA           1073   _Timer2_ISR:
03DA C0E0      1074            push    acc
03DC C0F0      1075            push    b
03DE C0D0      1076            push    psw
03E0 75D000    1077            mov     psw,#0x00
03E3           1078   ;        robot.c:180: TF2H = 0; // Clear Timer2 interrupt flag
03E3 C2CF      1079            clr     _TF2H
03E5           1080   ;        robot.c:182: pwm_count++;
03E5 0520      1081            inc     _pwm_count
03E7           1082   ;        robot.c:183: if(pwm_count>100) pwm_count=0;
03E7 C3        1083            clr     c
03E8 74E4      1084            mov     a,#(0x64 ^ 0x80)
03EA 8520F0    1085            mov     b,_pwm_count
03ED 63F080    1086            xrl     b,#0x80
03F0 95F0      1087            subb    a,b
03F2 5001      1088            jnc     L003002?
03F4 752000    1089            mov     _pwm_count,#0x00
03F7           1090   L003002?:
03F7           1091   ;        robot.c:186: MOTOR_LEFT0 = pwm_count > pwm_Left0 ? 0 : 1; //p1.5
03F7 C3        1092            clr     c
03F8 E570      1093            mov     a,_pwm_Left0
03FA 6480      1094            xrl     a,#0x80
03FC 8520F0    1095            mov     b,_pwm_count
03FF 63F080    1096            xrl     b,#0x80
0402 95F0      1097            subb    a,b
0404 9268      1098            mov  _Timer2_ISR_sloc0_1_0,c
0406 B3        1099            cpl     c
0407 9295      1100            mov     _P1_5,c
0409           1101   ;        robot.c:187: MOTOR_LEFT1 = pwm_count > pwm_Left1 ? 0 : 1; //p1.6
0409 C3        1102            clr     c
040A E530      1103            mov     a,_pwm_Left1
040C 6480      1104            xrl     a,#0x80
040E 8520F0    1105            mov     b,_pwm_count
0411 63F080    1106            xrl     b,#0x80
0414 95F0      1107            subb    a,b
0416 9268      1108            mov  _Timer2_ISR_sloc0_1_0,c
0418 B3        1109            cpl     c
0419 9296      1110            mov     _P1_6,c
041B           1111   ;        robot.c:188: MOTOR_RIGHT0 = pwm_count > pwm_Right0 ? 0 : 1; //p2.0
041B C3        1112            clr     c
041C E5F0      1113            mov     a,_pwm_Right0
041E 6480      1114            xrl     a,#0x80
0420 8520F0    1115            mov     b,_pwm_count
0423 63F080    1116            xrl     b,#0x80
0426 95F0      1117            subb    a,b
0428 9268      1118            mov  _Timer2_ISR_sloc0_1_0,c
042A B3        1119            cpl     c
042B 92A0      1120            mov     _P2_0,c
042D           1121   ;        robot.c:189: MOTOR_RIGHT1 = pwm_count > pwm_Right1 ? 0 : 1; //p2.1
042D C3        1122            clr     c
042E E5B0      1123            mov     a,_pwm_Right1
0430 6480      1124            xrl     a,#0x80
0432 8520F0    1125            mov     b,_pwm_count
0435 63F080    1126            xrl     b,#0x80
0438 95F0      1127            subb    a,b
043A 9268      1128            mov  _Timer2_ISR_sloc0_1_0,c
043C B3        1129            cpl     c
043D 92A1      1130            mov     _P2_1,c
043F D0D0      1131            pop     psw
0441 D0F0      1132            pop     b
0443 D0E0      1133            pop     acc
0445 32        1134            reti
0446           1135   ;        eliminated unneeded push/pop dpl
0446           1136   ;        eliminated unneeded push/pop dph
0446           1137   ;------------------------------------------------------------
0446           1138   ;Allocation info for local variables in function 'readData'
0446           1139   ;------------------------------------------------------------
0446           1140   ;command                   Allocated to registers r2 
0446           1141   ;------------------------------------------------------------
0446           1142   ;        robot.c:282: unsigned char readData(void) {
0446           1143   ;        -----------------------------------------
0446           1144   ;         function readData
0446           1145   ;        -----------------------------------------
0446           1146   _readData:
0446           1147   ;        robot.c:283: unsigned char command = 0;
0446 7A00      1148            mov     r2,#0x00
0448           1149   ;        robot.c:285: if (!COMMAND_PIN) {
0448 209140    1150            jb      _P1_1,L004005?
044B           1151   ;        robot.c:286: while (!COMMAND_PIN);
044B           1152   L004001?:
044B 309180    1153            jnb     _P1_1,L004001?
044E           1154   ;        robot.c:287: P1_4 = 1;
044E D294      1155            setb    _P1_4
0450           1156   ;        robot.c:288: waitms((int)(CMDFRQ + CMDFRQ/2));
0450 900069    1157            mov     dptr,#0x0069
0453 120100    1158            lcall   _waitms
0456           1159   ;        robot.c:289: P1_4 = 0;
0456 C294      1160            clr     _P1_4
0458           1161   ;        robot.c:290: command |= COMMAND_PIN<<1;
0458 A291      1162            mov     c,_P1_1
045A E4        1163            clr     a
045B 33        1164            rlc     a
045C 25E0      1165            add     a,acc
045E FA        1166            mov     r2,a
045F           1167   ;        robot.c:291: waitms(CMDFRQ);
045F 900046    1168            mov     dptr,#0x0046
0462 C002      1169            push    ar2
0464 120100    1170            lcall   _waitms
0467 D002      1171            pop     ar2
0469           1172   ;        robot.c:292: P1_4 = 1;
0469 D294      1173            setb    _P1_4
046B           1174   ;        robot.c:293: command |= COMMAND_PIN<<2;
046B A291      1175            mov     c,_P1_1
046D E4        1176            clr     a
046E 33        1177            rlc     a
046F 25E0      1178            add     a,acc
0471 25E0      1179            add     a,acc
0473 4202      1180            orl     ar2,a
0475           1181   ;        robot.c:294: waitms(CMDFRQ);
0475 900046    1182            mov     dptr,#0x0046
0478 C002      1183            push    ar2
047A 120100    1184            lcall   _waitms
047D D002      1185            pop     ar2
047F           1186   ;        robot.c:295: P1_4 = 0;
047F C294      1187            clr     _P1_4
0481           1188   ;        robot.c:296: command |= COMMAND_PIN<<3;
0481 A291      1189            mov     c,_P1_1
0483 E4        1190            clr     a
0484 33        1191            rlc     a
0485 C4        1192            swap    a
0486 03        1193            rr      a
0487 54F8      1194            anl     a,#0xf8
0489 FB        1195            mov     r3,a
048A 4202      1196            orl     ar2,a
048C           1197   L004005?:
048C           1198   ;        robot.c:299: printf("Command received: %d\n", command);
048C 8A03      1199            mov     ar3,r2
048E 7C00      1200            mov     r4,#0x00
0490 C002      1201            push    ar2
0492 C003      1202            push    ar3
0494 C004      1203            push    ar4
0496 74C0      1204            mov     a,#__str_3
0498 C0E0      1205            push    acc
049A 74A2      1206            mov     a,#(__str_3 >> 8)
049C C0E0      1207            push    acc
049E 7480      1208            mov     a,#0x80
04A0 C0E0      1209            push    acc
04A2 120100    1210            lcall   _printf
04A5 E581      1211            mov     a,sp
04A7 24FB      1212            add     a,#0xfb
04A9 F581      1213            mov     sp,a
04AB D002      1214            pop     ar2
04AD           1215   ;        robot.c:300: return command;
04AD 8A82      1216            mov     dpl,r2
04AF 22        1217            ret
04B0           1218   ;------------------------------------------------------------
04B0           1219   ;Allocation info for local variables in function 'linetrack'
04B0           1220   ;------------------------------------------------------------
04B0           1221   ;forwardbackward           Allocated to registers r2 r3 
04B0           1222   ;vleft                     Allocated with name '_linetrack_vleft_1_76'
04B0           1223   ;vright                    Allocated with name '_linetrack_vright_1_76'
04B0           1224   ;sloc0                     Allocated with name '_linetrack_sloc0_1_0'
04B0           1225   ;sloc1                     Allocated with name '_linetrack_sloc1_1_0'
04B0           1226   ;------------------------------------------------------------
04B0           1227   ;        robot.c:307: void linetrack (int forwardbackward) {
04B0           1228   ;        -----------------------------------------
04B0           1229   ;         function linetrack
04B0           1230   ;        -----------------------------------------
04B0           1231   _linetrack:
04B0 AA82      1232            mov     r2,dpl
04B2 AB83      1233            mov     r3,dph
04B4           1234   ;        robot.c:315: if (forwardbackward == 0) {
04B4 EA        1235            mov     a,r2
04B5 4B        1236            orl     a,r3
04B6 6001      1237            jz      L005010?
04B8 020100    1238            ljmp    L005004?
04BB           1239   L005010?:
04BB           1240   ;        robot.c:316: vleft=Volts_at_Pin(TANK_FL);
04BB 75820B    1241            mov     dpl,#0x0B
04BE 120100    1242            lcall   _Volts_at_Pin
04C1 8582B8    1243            mov     _linetrack_vleft_1_76,dpl
04C4 8583B9    1244            mov     (_linetrack_vleft_1_76 + 1),dph
04C7 85F0BA    1245            mov     (_linetrack_vleft_1_76 + 2),b
04CA F5BB      1246            mov     (_linetrack_vleft_1_76 + 3),a
04CC           1247   ;        robot.c:317: vright=Volts_at_Pin(TANK_FR);
04CC 75820C    1248            mov     dpl,#0x0C
04CF 120100    1249            lcall   _Volts_at_Pin
04D2 858208    1250            mov     _linetrack_vright_1_76,dpl
04D5 858309    1251            mov     (_linetrack_vright_1_76 + 1),dph
04D8 85F00A    1252            mov     (_linetrack_vright_1_76 + 2),b
04DB F50B      1253            mov     (_linetrack_vright_1_76 + 3),a
04DD           1254   ;        robot.c:320: pwm_Left0 = -1;
04DD 7570FF    1255            mov     _pwm_Left0,#0xFF
04E0           1256   ;        robot.c:321: pwm_Left1 = vright*vright*75/(vright*vright+vleft*vleft);
04E0 C008      1257            push    _linetrack_vright_1_76
04E2 C009      1258            push    (_linetrack_vright_1_76 + 1)
04E4 C00A      1259            push    (_linetrack_vright_1_76 + 2)
04E6 C00B      1260            push    (_linetrack_vright_1_76 + 3)
04E8 850882    1261            mov     dpl,_linetrack_vright_1_76
04EB 850983    1262            mov     dph,(_linetrack_vright_1_76 + 1)
04EE 850AF0    1263            mov     b,(_linetrack_vright_1_76 + 2)
04F1 E50B      1264            mov     a,(_linetrack_vright_1_76 + 3)
04F3 120100    1265            lcall   ___fsmul
04F6 AC82      1266            mov     r4,dpl
04F8 AD83      1267            mov     r5,dph
04FA AEF0      1268            mov     r6,b
04FC FF        1269            mov     r7,a
04FD E581      1270            mov     a,sp
04FF 24FC      1271            add     a,#0xfc
0501 F581      1272            mov     sp,a
0503 C004      1273            push    ar4
0505 C005      1274            push    ar5
0507 C006      1275            push    ar6
0509 C007      1276            push    ar7
050B 900000    1277            mov     dptr,#0x0000
050E 75F096    1278            mov     b,#0x96
0511 7442      1279            mov     a,#0x42
0513 120100    1280            lcall   ___fsmul
0516 858258    1281            mov     _linetrack_sloc0_1_0,dpl
0519 858359    1282            mov     (_linetrack_sloc0_1_0 + 1),dph
051C 85F05A    1283            mov     (_linetrack_sloc0_1_0 + 2),b
051F F55B      1284            mov     (_linetrack_sloc0_1_0 + 3),a
0521 E581      1285            mov     a,sp
0523 24FC      1286            add     a,#0xfc
0525 F581      1287            mov     sp,a
0527 C008      1288            push    _linetrack_vright_1_76
0529 C009      1289            push    (_linetrack_vright_1_76 + 1)
052B C00A      1290            push    (_linetrack_vright_1_76 + 2)
052D C00B      1291            push    (_linetrack_vright_1_76 + 3)
052F 850882    1292            mov     dpl,_linetrack_vright_1_76
0532 850983    1293            mov     dph,(_linetrack_vright_1_76 + 1)
0535 850AF0    1294            mov     b,(_linetrack_vright_1_76 + 2)
0538 E50B      1295            mov     a,(_linetrack_vright_1_76 + 3)
053A 120100    1296            lcall   ___fsmul
053D 8582A8    1297            mov     _linetrack_sloc1_1_0,dpl
0540 8583A9    1298            mov     (_linetrack_sloc1_1_0 + 1),dph
0543 85F0AA    1299            mov     (_linetrack_sloc1_1_0 + 2),b
0546 F5AB      1300            mov     (_linetrack_sloc1_1_0 + 3),a
0548 E581      1301            mov     a,sp
054A 24FC      1302            add     a,#0xfc
054C F581      1303            mov     sp,a
054E C0B8      1304            push    _linetrack_vleft_1_76
0550 C0B9      1305            push    (_linetrack_vleft_1_76 + 1)
0552 C0BA      1306            push    (_linetrack_vleft_1_76 + 2)
0554 C0BB      1307            push    (_linetrack_vleft_1_76 + 3)
0556 85B882    1308            mov     dpl,_linetrack_vleft_1_76
0559 85B983    1309            mov     dph,(_linetrack_vleft_1_76 + 1)
055C 85BAF0    1310            mov     b,(_linetrack_vleft_1_76 + 2)
055F E5BB      1311            mov     a,(_linetrack_vleft_1_76 + 3)
0561 120100    1312            lcall   ___fsmul
0564 AE82      1313            mov     r6,dpl
0566 AF83      1314            mov     r7,dph
0568 ACF0      1315            mov     r4,b
056A FD        1316            mov     r5,a
056B E581      1317            mov     a,sp
056D 24FC      1318            add     a,#0xfc
056F F581      1319            mov     sp,a
0571 C006      1320            push    ar6
0573 C007      1321            push    ar7
0575 C004      1322            push    ar4
0577 C005      1323            push    ar5
0579 85A882    1324            mov     dpl,_linetrack_sloc1_1_0
057C 85A983    1325            mov     dph,(_linetrack_sloc1_1_0 + 1)
057F 85AAF0    1326            mov     b,(_linetrack_sloc1_1_0 + 2)
0582 E5AB      1327            mov     a,(_linetrack_sloc1_1_0 + 3)
0584 120100    1328            lcall   ___fsadd
0587 AC82      1329            mov     r4,dpl
0589 AD83      1330            mov     r5,dph
058B AEF0      1331            mov     r6,b
058D FF        1332            mov     r7,a
058E E581      1333            mov     a,sp
0590 24FC      1334            add     a,#0xfc
0592 F581      1335            mov     sp,a
0594 C004      1336            push    ar4
0596 C005      1337            push    ar5
0598 C006      1338            push    ar6
059A C007      1339            push    ar7
059C 855882    1340            mov     dpl,_linetrack_sloc0_1_0
059F 855983    1341            mov     dph,(_linetrack_sloc0_1_0 + 1)
05A2 855AF0    1342            mov     b,(_linetrack_sloc0_1_0 + 2)
05A5 E55B      1343            mov     a,(_linetrack_sloc0_1_0 + 3)
05A7 120100    1344            lcall   ___fsdiv
05AA AC82      1345            mov     r4,dpl
05AC AD83      1346            mov     r5,dph
05AE AEF0      1347            mov     r6,b
05B0 FF        1348            mov     r7,a
05B1 E581      1349            mov     a,sp
05B3 24FC      1350            add     a,#0xfc
05B5 F581      1351            mov     sp,a
05B7 8C82      1352            mov     dpl,r4
05B9 8D83      1353            mov     dph,r5
05BB 8EF0      1354            mov     b,r6
05BD EF        1355            mov     a,r7
05BE 120100    1356            lcall   ___fs2schar
05C1 858230    1357            mov     _pwm_Left1,dpl
05C4           1358   ;        robot.c:322: pwm_Right1 = -1;
05C4 75B0FF    1359            mov     _pwm_Right1,#0xFF
05C7           1360   ;        robot.c:323: pwm_Right0 = vleft*vleft*75/(vright*vright+vleft*vleft);
05C7 C0B8      1361            push    _linetrack_vleft_1_76
05C9 C0B9      1362            push    (_linetrack_vleft_1_76 + 1)
05CB C0BA      1363            push    (_linetrack_vleft_1_76 + 2)
05CD C0BB      1364            push    (_linetrack_vleft_1_76 + 3)
05CF 85B882    1365            mov     dpl,_linetrack_vleft_1_76
05D2 85B983    1366            mov     dph,(_linetrack_vleft_1_76 + 1)
05D5 85BAF0    1367            mov     b,(_linetrack_vleft_1_76 + 2)
05D8 E5BB      1368            mov     a,(_linetrack_vleft_1_76 + 3)
05DA 120100    1369            lcall   ___fsmul
05DD AC82      1370            mov     r4,dpl
05DF AD83      1371            mov     r5,dph
05E1 AEF0      1372            mov     r6,b
05E3 FF        1373            mov     r7,a
05E4 E581      1374            mov     a,sp
05E6 24FC      1375            add     a,#0xfc
05E8 F581      1376            mov     sp,a
05EA C004      1377            push    ar4
05EC C005      1378            push    ar5
05EE C006      1379            push    ar6
05F0 C007      1380            push    ar7
05F2 900000    1381            mov     dptr,#0x0000
05F5 75F096    1382            mov     b,#0x96
05F8 7442      1383            mov     a,#0x42
05FA 120100    1384            lcall   ___fsmul
05FD 8582A8    1385            mov     _linetrack_sloc1_1_0,dpl
0600 8583A9    1386            mov     (_linetrack_sloc1_1_0 + 1),dph
0603 85F0AA    1387            mov     (_linetrack_sloc1_1_0 + 2),b
0606 F5AB      1388            mov     (_linetrack_sloc1_1_0 + 3),a
0608 E581      1389            mov     a,sp
060A 24FC      1390            add     a,#0xfc
060C F581      1391            mov     sp,a
060E C008      1392            push    _linetrack_vright_1_76
0610 C009      1393            push    (_linetrack_vright_1_76 + 1)
0612 C00A      1394            push    (_linetrack_vright_1_76 + 2)
0614 C00B      1395            push    (_linetrack_vright_1_76 + 3)
0616 850882    1396            mov     dpl,_linetrack_vright_1_76
0619 850983    1397            mov     dph,(_linetrack_vright_1_76 + 1)
061C 850AF0    1398            mov     b,(_linetrack_vright_1_76 + 2)
061F E50B      1399            mov     a,(_linetrack_vright_1_76 + 3)
0621 120100    1400            lcall   ___fsmul
0624 858258    1401            mov     _linetrack_sloc0_1_0,dpl
0627 858359    1402            mov     (_linetrack_sloc0_1_0 + 1),dph
062A 85F05A    1403            mov     (_linetrack_sloc0_1_0 + 2),b
062D F55B      1404            mov     (_linetrack_sloc0_1_0 + 3),a
062F E581      1405            mov     a,sp
0631 24FC      1406            add     a,#0xfc
0633 F581      1407            mov     sp,a
0635 C0B8      1408            push    _linetrack_vleft_1_76
0637 C0B9      1409            push    (_linetrack_vleft_1_76 + 1)
0639 C0BA      1410            push    (_linetrack_vleft_1_76 + 2)
063B C0BB      1411            push    (_linetrack_vleft_1_76 + 3)
063D 85B882    1412            mov     dpl,_linetrack_vleft_1_76
0640 85B983    1413            mov     dph,(_linetrack_vleft_1_76 + 1)
0643 85BAF0    1414            mov     b,(_linetrack_vleft_1_76 + 2)
0646 E5BB      1415            mov     a,(_linetrack_vleft_1_76 + 3)
0648 120100    1416            lcall   ___fsmul
064B AE82      1417            mov     r6,dpl
064D AF83      1418            mov     r7,dph
064F ACF0      1419            mov     r4,b
0651 FD        1420            mov     r5,a
0652 E581      1421            mov     a,sp
0654 24FC      1422            add     a,#0xfc
0656 F581      1423            mov     sp,a
0658 C006      1424            push    ar6
065A C007      1425            push    ar7
065C C004      1426            push    ar4
065E C005      1427            push    ar5
0660 855882    1428            mov     dpl,_linetrack_sloc0_1_0
0663 855983    1429            mov     dph,(_linetrack_sloc0_1_0 + 1)
0666 855AF0    1430            mov     b,(_linetrack_sloc0_1_0 + 2)
0669 E55B      1431            mov     a,(_linetrack_sloc0_1_0 + 3)
066B 120100    1432            lcall   ___fsadd
066E AC82      1433            mov     r4,dpl
0670 AD83      1434            mov     r5,dph
0672 AEF0      1435            mov     r6,b
0674 FF        1436            mov     r7,a
0675 E581      1437            mov     a,sp
0677 24FC      1438            add     a,#0xfc
0679 F581      1439            mov     sp,a
067B C004      1440            push    ar4
067D C005      1441            push    ar5
067F C006      1442            push    ar6
0681 C007      1443            push    ar7
0683 85A882    1444            mov     dpl,_linetrack_sloc1_1_0
0686 85A983    1445            mov     dph,(_linetrack_sloc1_1_0 + 1)
0689 85AAF0    1446            mov     b,(_linetrack_sloc1_1_0 + 2)
068C E5AB      1447            mov     a,(_linetrack_sloc1_1_0 + 3)
068E 120100    1448            lcall   ___fsdiv
0691 AC82      1449            mov     r4,dpl
0693 AD83      1450            mov     r5,dph
0695 AEF0      1451            mov     r6,b
0697 FF        1452            mov     r7,a
0698 E581      1453            mov     a,sp
069A 24FC      1454            add     a,#0xfc
069C F581      1455            mov     sp,a
069E 8C82      1456            mov     dpl,r4
06A0 8D83      1457            mov     dph,r5
06A2 8EF0      1458            mov     b,r6
06A4 EF        1459            mov     a,r7
06A5 120100    1460            lcall   ___fs2schar
06A8 8582F0    1461            mov     _pwm_Right0,dpl
06AB 22        1462            ret
06AC           1463   L005004?:
06AC           1464   ;        robot.c:324: } else if (forwardbackward == 1) {
06AC BA0180    1465            cjne    r2,#0x01,L005011?
06AF BB0080    1466            cjne    r3,#0x00,L005011?
06B2 8001      1467            sjmp    L005012?
06B4           1468   L005011?:
06B4 22        1469            ret
06B5           1470   L005012?:
06B5           1471   ;        robot.c:327: vleft=Volts_at_Pin(TANK_RL);
06B5 75820D    1472            mov     dpl,#0x0D
06B8 120100    1473            lcall   _Volts_at_Pin
06BB 8582B8    1474            mov     _linetrack_vleft_1_76,dpl
06BE 8583B9    1475            mov     (_linetrack_vleft_1_76 + 1),dph
06C1 85F0BA    1476            mov     (_linetrack_vleft_1_76 + 2),b
06C4 F5BB      1477            mov     (_linetrack_vleft_1_76 + 3),a
06C6           1478   ;        robot.c:328: vright=Volts_at_Pin(TANK_RR);
06C6 75820E    1479            mov     dpl,#0x0E
06C9 120100    1480            lcall   _Volts_at_Pin
06CC 858208    1481            mov     _linetrack_vright_1_76,dpl
06CF 858309    1482            mov     (_linetrack_vright_1_76 + 1),dph
06D2 85F00A    1483            mov     (_linetrack_vright_1_76 + 2),b
06D5 F50B      1484            mov     (_linetrack_vright_1_76 + 3),a
06D7           1485   ;        robot.c:331: pwm_Left1 = -1;
06D7 7530FF    1486            mov     _pwm_Left1,#0xFF
06DA           1487   ;        robot.c:332: pwm_Left0 = vright*vright*75/(vright*vright+vleft*vleft);
06DA C008      1488            push    _linetrack_vright_1_76
06DC C009      1489            push    (_linetrack_vright_1_76 + 1)
06DE C00A      1490            push    (_linetrack_vright_1_76 + 2)
06E0 C00B      1491            push    (_linetrack_vright_1_76 + 3)
06E2 850882    1492            mov     dpl,_linetrack_vright_1_76
06E5 850983    1493            mov     dph,(_linetrack_vright_1_76 + 1)
06E8 850AF0    1494            mov     b,(_linetrack_vright_1_76 + 2)
06EB E50B      1495            mov     a,(_linetrack_vright_1_76 + 3)
06ED 120100    1496            lcall   ___fsmul
06F0 AA82      1497            mov     r2,dpl
06F2 AB83      1498            mov     r3,dph
06F4 ACF0      1499            mov     r4,b
06F6 FD        1500            mov     r5,a
06F7 E581      1501            mov     a,sp
06F9 24FC      1502            add     a,#0xfc
06FB F581      1503            mov     sp,a
06FD C002      1504            push    ar2
06FF C003      1505            push    ar3
0701 C004      1506            push    ar4
0703 C005      1507            push    ar5
0705 900000    1508            mov     dptr,#0x0000
0708 75F096    1509            mov     b,#0x96
070B 7442      1510            mov     a,#0x42
070D 120100    1511            lcall   ___fsmul
0710 AA82      1512            mov     r2,dpl
0712 AB83      1513            mov     r3,dph
0714 ACF0      1514            mov     r4,b
0716 FD        1515            mov     r5,a
0717 E581      1516            mov     a,sp
0719 24FC      1517            add     a,#0xfc
071B F581      1518            mov     sp,a
071D C002      1519            push    ar2
071F C003      1520            push    ar3
0721 C004      1521            push    ar4
0723 C005      1522            push    ar5
0725 C008      1523            push    _linetrack_vright_1_76
0727 C009      1524            push    (_linetrack_vright_1_76 + 1)
0729 C00A      1525            push    (_linetrack_vright_1_76 + 2)
072B C00B      1526            push    (_linetrack_vright_1_76 + 3)
072D 850882    1527            mov     dpl,_linetrack_vright_1_76
0730 850983    1528            mov     dph,(_linetrack_vright_1_76 + 1)
0733 850AF0    1529            mov     b,(_linetrack_vright_1_76 + 2)
0736 E50B      1530            mov     a,(_linetrack_vright_1_76 + 3)
0738 120100    1531            lcall   ___fsmul
073B 8582A8    1532            mov     _linetrack_sloc1_1_0,dpl
073E 8583A9    1533            mov     (_linetrack_sloc1_1_0 + 1),dph
0741 85F0AA    1534            mov     (_linetrack_sloc1_1_0 + 2),b
0744 F5AB      1535            mov     (_linetrack_sloc1_1_0 + 3),a
0746 E581      1536            mov     a,sp
0748 24FC      1537            add     a,#0xfc
074A F581      1538            mov     sp,a
074C C0B8      1539            push    _linetrack_vleft_1_76
074E C0B9      1540            push    (_linetrack_vleft_1_76 + 1)
0750 C0BA      1541            push    (_linetrack_vleft_1_76 + 2)
0752 C0BB      1542            push    (_linetrack_vleft_1_76 + 3)
0754 85B882    1543            mov     dpl,_linetrack_vleft_1_76
0757 85B983    1544            mov     dph,(_linetrack_vleft_1_76 + 1)
075A 85BAF0    1545            mov     b,(_linetrack_vleft_1_76 + 2)
075D E5BB      1546            mov     a,(_linetrack_vleft_1_76 + 3)
075F 120100    1547            lcall   ___fsmul
0762 AE82      1548            mov     r6,dpl
0764 AF83      1549            mov     r7,dph
0766 A8F0      1550            mov     r0,b
0768 F9        1551            mov     r1,a
0769 E581      1552            mov     a,sp
076B 24FC      1553            add     a,#0xfc
076D F581      1554            mov     sp,a
076F C006      1555            push    ar6
0771 C007      1556            push    ar7
0773 C000      1557            push    ar0
0775 C001      1558            push    ar1
0777 85A882    1559            mov     dpl,_linetrack_sloc1_1_0
077A 85A983    1560            mov     dph,(_linetrack_sloc1_1_0 + 1)
077D 85AAF0    1561            mov     b,(_linetrack_sloc1_1_0 + 2)
0780 E5AB      1562            mov     a,(_linetrack_sloc1_1_0 + 3)
0782 120100    1563            lcall   ___fsadd
0785 AE82      1564            mov     r6,dpl
0787 AF83      1565            mov     r7,dph
0789 A8F0      1566            mov     r0,b
078B F9        1567            mov     r1,a
078C E581      1568            mov     a,sp
078E 24FC      1569            add     a,#0xfc
0790 F581      1570            mov     sp,a
0792 D005      1571            pop     ar5
0794 D004      1572            pop     ar4
0796 D003      1573            pop     ar3
0798 D002      1574            pop     ar2
079A C006      1575            push    ar6
079C C007      1576            push    ar7
079E C000      1577            push    ar0
07A0 C001      1578            push    ar1
07A2 8A82      1579            mov     dpl,r2
07A4 8B83      1580            mov     dph,r3
07A6 8CF0      1581            mov     b,r4
07A8 ED        1582            mov     a,r5
07A9 120100    1583            lcall   ___fsdiv
07AC AA82      1584            mov     r2,dpl
07AE AB83      1585            mov     r3,dph
07B0 ACF0      1586            mov     r4,b
07B2 FD        1587            mov     r5,a
07B3 E581      1588            mov     a,sp
07B5 24FC      1589            add     a,#0xfc
07B7 F581      1590            mov     sp,a
07B9 8A82      1591            mov     dpl,r2
07BB 8B83      1592            mov     dph,r3
07BD 8CF0      1593            mov     b,r4
07BF ED        1594            mov     a,r5
07C0 120100    1595            lcall   ___fs2schar
07C3 858270    1596            mov     _pwm_Left0,dpl
07C6           1597   ;        robot.c:333: pwm_Right0 = -1;
07C6 75F0FF    1598            mov     _pwm_Right0,#0xFF
07C9           1599   ;        robot.c:334: pwm_Right1 = vleft*vleft*75/(vright*vright+vleft*vleft);
07C9 C0B8      1600            push    _linetrack_vleft_1_76
07CB C0B9      1601            push    (_linetrack_vleft_1_76 + 1)
07CD C0BA      1602            push    (_linetrack_vleft_1_76 + 2)
07CF C0BB      1603            push    (_linetrack_vleft_1_76 + 3)
07D1 85B882    1604            mov     dpl,_linetrack_vleft_1_76
07D4 85B983    1605            mov     dph,(_linetrack_vleft_1_76 + 1)
07D7 85BAF0    1606            mov     b,(_linetrack_vleft_1_76 + 2)
07DA E5BB      1607            mov     a,(_linetrack_vleft_1_76 + 3)
07DC 120100    1608            lcall   ___fsmul
07DF AA82      1609            mov     r2,dpl
07E1 AB83      1610            mov     r3,dph
07E3 ACF0      1611            mov     r4,b
07E5 FD        1612            mov     r5,a
07E6 E581      1613            mov     a,sp
07E8 24FC      1614            add     a,#0xfc
07EA F581      1615            mov     sp,a
07EC C002      1616            push    ar2
07EE C003      1617            push    ar3
07F0 C004      1618            push    ar4
07F2 C005      1619            push    ar5
07F4 900000    1620            mov     dptr,#0x0000
07F7 75F096    1621            mov     b,#0x96
07FA 7442      1622            mov     a,#0x42
07FC 120100    1623            lcall   ___fsmul
07FF AA82      1624            mov     r2,dpl
0801 AB83      1625            mov     r3,dph
0803 ACF0      1626            mov     r4,b
0805 FD        1627            mov     r5,a
0806 E581      1628            mov     a,sp
0808 24FC      1629            add     a,#0xfc
080A F581      1630            mov     sp,a
080C C002      1631            push    ar2
080E C003      1632            push    ar3
0810 C004      1633            push    ar4
0812 C005      1634            push    ar5
0814 C008      1635            push    _linetrack_vright_1_76
0816 C009      1636            push    (_linetrack_vright_1_76 + 1)
0818 C00A      1637            push    (_linetrack_vright_1_76 + 2)
081A C00B      1638            push    (_linetrack_vright_1_76 + 3)
081C 850882    1639            mov     dpl,_linetrack_vright_1_76
081F 850983    1640            mov     dph,(_linetrack_vright_1_76 + 1)
0822 850AF0    1641            mov     b,(_linetrack_vright_1_76 + 2)
0825 E50B      1642            mov     a,(_linetrack_vright_1_76 + 3)
0827 120100    1643            lcall   ___fsmul
082A 8582A8    1644            mov     _linetrack_sloc1_1_0,dpl
082D 8583A9    1645            mov     (_linetrack_sloc1_1_0 + 1),dph
0830 85F0AA    1646            mov     (_linetrack_sloc1_1_0 + 2),b
0833 F5AB      1647            mov     (_linetrack_sloc1_1_0 + 3),a
0835 E581      1648            mov     a,sp
0837 24FC      1649            add     a,#0xfc
0839 F581      1650            mov     sp,a
083B C0B8      1651            push    _linetrack_vleft_1_76
083D C0B9      1652            push    (_linetrack_vleft_1_76 + 1)
083F C0BA      1653            push    (_linetrack_vleft_1_76 + 2)
0841 C0BB      1654            push    (_linetrack_vleft_1_76 + 3)
0843 85B882    1655            mov     dpl,_linetrack_vleft_1_76
0846 85B983    1656            mov     dph,(_linetrack_vleft_1_76 + 1)
0849 85BAF0    1657            mov     b,(_linetrack_vleft_1_76 + 2)
084C E5BB      1658            mov     a,(_linetrack_vleft_1_76 + 3)
084E 120100    1659            lcall   ___fsmul
0851 AE82      1660            mov     r6,dpl
0853 AF83      1661            mov     r7,dph
0855 A8F0      1662            mov     r0,b
0857 F9        1663            mov     r1,a
0858 E581      1664            mov     a,sp
085A 24FC      1665            add     a,#0xfc
085C F581      1666            mov     sp,a
085E C006      1667            push    ar6
0860 C007      1668            push    ar7
0862 C000      1669            push    ar0
0864 C001      1670            push    ar1
0866 85A882    1671            mov     dpl,_linetrack_sloc1_1_0
0869 85A983    1672            mov     dph,(_linetrack_sloc1_1_0 + 1)
086C 85AAF0    1673            mov     b,(_linetrack_sloc1_1_0 + 2)
086F E5AB      1674            mov     a,(_linetrack_sloc1_1_0 + 3)
0871 120100    1675            lcall   ___fsadd
0874 AE82      1676            mov     r6,dpl
0876 AF83      1677            mov     r7,dph
0878 A8F0      1678            mov     r0,b
087A F9        1679            mov     r1,a
087B E581      1680            mov     a,sp
087D 24FC      1681            add     a,#0xfc
087F F581      1682            mov     sp,a
0881 D005      1683            pop     ar5
0883 D004      1684            pop     ar4
0885 D003      1685            pop     ar3
0887 D002      1686            pop     ar2
0889 C006      1687            push    ar6
088B C007      1688            push    ar7
088D C000      1689            push    ar0
088F C001      1690            push    ar1
0891 8A82      1691            mov     dpl,r2
0893 8B83      1692            mov     dph,r3
0895 8CF0      1693            mov     b,r4
0897 ED        1694            mov     a,r5
0898 120100    1695            lcall   ___fsdiv
089B AA82      1696            mov     r2,dpl
089D AB83      1697            mov     r3,dph
089F ACF0      1698            mov     r4,b
08A1 FD        1699            mov     r5,a
08A2 E581      1700            mov     a,sp
08A4 24FC      1701            add     a,#0xfc
08A6 F581      1702            mov     sp,a
08A8 8A82      1703            mov     dpl,r2
08AA 8B83      1704            mov     dph,r3
08AC 8CF0      1705            mov     b,r4
08AE ED        1706            mov     a,r5
08AF 120100    1707            lcall   ___fs2schar
08B2 8582B0    1708            mov     _pwm_Right1,dpl
08B5 22        1709            ret
08B6           1710   ;------------------------------------------------------------
08B6           1711   ;Allocation info for local variables in function 'stopcar'
08B6           1712   ;------------------------------------------------------------
08B6           1713   ;------------------------------------------------------------
08B6           1714   ;        robot.c:342: void stopcar(void) {
08B6           1715   ;        -----------------------------------------
08B6           1716   ;         function stopcar
08B6           1717   ;        -----------------------------------------
08B6           1718   _stopcar:
08B6           1719   ;        robot.c:344: pwm_Left1 = -1;
08B6 7530FF    1720            mov     _pwm_Left1,#0xFF
08B9           1721   ;        robot.c:345: pwm_Right1 = -1;
08B9 75B0FF    1722            mov     _pwm_Right1,#0xFF
08BC           1723   ;        robot.c:346: pwm_Left0 = -1;
08BC 7570FF    1724            mov     _pwm_Left0,#0xFF
08BF           1725   ;        robot.c:347: pwm_Right0 = -1;
08BF 75F0FF    1726            mov     _pwm_Right0,#0xFF
08C2 22        1727            ret
08C3           1728   ;------------------------------------------------------------
08C3           1729   ;Allocation info for local variables in function 'turncar'
08C3           1730   ;------------------------------------------------------------
08C3           1731   ;leftright                 Allocated to registers r2 r3 
08C3           1732   ;v                         Allocated with name '_turncar_v_1_82'
08C3           1733   ;direction                 Allocated with name '_turncar_direction_1_82'
08C3           1734   ;------------------------------------------------------------
08C3           1735   ;        robot.c:353: void turncar (int leftright) {
08C3           1736   ;        -----------------------------------------
08C3           1737   ;         function turncar
08C3           1738   ;        -----------------------------------------
08C3           1739   _turncar:
08C3 AA82      1740            mov     r2,dpl
08C5 AB83      1741            mov     r3,dph
08C7           1742   ;        robot.c:362: pwm_Left0 = -1;
08C7 7570FF    1743            mov     _pwm_Left0,#0xFF
08CA           1744   ;        robot.c:363: pwm_Left1 = -1;
08CA 7530FF    1745            mov     _pwm_Left1,#0xFF
08CD           1746   ;        robot.c:364: pwm_Right0 = -1;
08CD 75F0FF    1747            mov     _pwm_Right0,#0xFF
08D0           1748   ;        robot.c:365: pwm_Right1 = -1;
08D0 75B0FF    1749            mov     _pwm_Right1,#0xFF
08D3           1750   ;        robot.c:367: direction = currentstate - 1;
08D3 E5F0      1751            mov     a,_currentstate
08D5 14        1752            dec     a
08D6 F538      1753            mov     _turncar_direction_1_82,a
08D8           1754   ;        robot.c:370: if (leftright == 1) {
08D8 BA0100    1755            cjne    r2,#0x01,L007062?
08DB BB0000    1756            cjne    r3,#0x00,L007062?
08DE 8001      1757            sjmp    L007063?
08E0           1758   L007062?:
08E0 020100    1759            ljmp    L007022?
08E3           1760   L007063?:
08E3           1761   ;        robot.c:372: pwm_Right0 = 100;
08E3 75F064    1762            mov     _pwm_Right0,#0x64
08E6           1763   ;        robot.c:375: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
08E6 E538      1764            mov     a,_turncar_direction_1_82
08E8 6001      1765            jz      L007026?
08EA 75820C    1766            mov     dpl,#0x0C
08ED 120100    1767            lcall   _Volts_at_Pin
08F0 AC82      1768            mov     r4,dpl
08F2 AD83      1769            mov     r5,dph
08F4 AEF0      1770            mov     r6,b
08F6 FF        1771            mov     r7,a
08F7 8001      1772            sjmp    L007027?
08F9           1773   L007026?:
08F9 75820E    1774            mov     dpl,#0x0E
08FC 120100    1775            lcall   _Volts_at_Pin
08FF AC82      1776            mov     r4,dpl
0901 AD83      1777            mov     r5,dph
0903 AEF0      1778            mov     r6,b
0905 FF        1779            mov     r7,a
0906           1780   L007027?:
0906 8CE8      1781            mov     _turncar_v_1_82,r4
0908 8DE9      1782            mov     (_turncar_v_1_82 + 1),r5
090A 8EEA      1783            mov     (_turncar_v_1_82 + 2),r6
090C 8FEB      1784            mov     (_turncar_v_1_82 + 3),r7
090E           1785   ;        robot.c:377: while (v < 1.3) {
090E           1786   L007001?:
090E 7466      1787            mov     a,#0x66
0910 C0E0      1788            push    acc
0912 C0E0      1789            push    acc
0914 74A6      1790            mov     a,#0xA6
0916 C0E0      1791            push    acc
0918 743F      1792            mov     a,#0x3F
091A C0E0      1793            push    acc
091C 85E882    1794            mov     dpl,_turncar_v_1_82
091F 85E983    1795            mov     dph,(_turncar_v_1_82 + 1)
0922 85EAF0    1796            mov     b,(_turncar_v_1_82 + 2)
0925 E5EB      1797            mov     a,(_turncar_v_1_82 + 3)
0927 120100    1798            lcall   ___fslt
092A AC82      1799            mov     r4,dpl
092C E581      1800            mov     a,sp
092E 24FC      1801            add     a,#0xfc
0930 F581      1802            mov     sp,a
0932 EC        1803            mov     a,r4
0933 6001      1804            jz      L007003?
0935           1805   ;        robot.c:379: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0935 E538      1806            mov     a,_turncar_direction_1_82
0937 6001      1807            jz      L007028?
0939 75820C    1808            mov     dpl,#0x0C
093C 120100    1809            lcall   _Volts_at_Pin
093F AC82      1810            mov     r4,dpl
0941 AD83      1811            mov     r5,dph
0943 AEF0      1812            mov     r6,b
0945 FF        1813            mov     r7,a
0946 8001      1814            sjmp    L007029?
0948           1815   L007028?:
0948 75820E    1816            mov     dpl,#0x0E
094B 120100    1817            lcall   _Volts_at_Pin
094E AC82      1818            mov     r4,dpl
0950 AD83      1819            mov     r5,dph
0952 AEF0      1820            mov     r6,b
0954 FF        1821            mov     r7,a
0955           1822   L007029?:
0955 8CE8      1823            mov     _turncar_v_1_82,r4
0957 8DE9      1824            mov     (_turncar_v_1_82 + 1),r5
0959 8EEA      1825            mov     (_turncar_v_1_82 + 2),r6
095B 8FEB      1826            mov     (_turncar_v_1_82 + 3),r7
095D 8001      1827            sjmp    L007001?
095F           1828   L007003?:
095F           1829   ;        robot.c:383: waitms(300);
095F 90012C    1830            mov     dptr,#0x012C
0962 120100    1831            lcall   _waitms
0965           1832   ;        robot.c:386: pwm_Right0 = -1; 
0965 75F0FF    1833            mov     _pwm_Right0,#0xFF
0968 22        1834            ret
0969           1835   L007022?:
0969           1836   ;        robot.c:390: else if (leftright == 3) {
0969 BA0380    1837            cjne    r2,#0x03,L007067?
096C BB0080    1838            cjne    r3,#0x00,L007067?
096F 8001      1839            sjmp    L007068?
0971           1840   L007067?:
0971 020100    1841            ljmp    L007019?
0974           1842   L007068?:
0974           1843   ;        robot.c:392: pwm_Left1 = 75;
0974 75304B    1844            mov     _pwm_Left1,#0x4B
0977           1845   ;        robot.c:393: waitms(200);
0977 9000C8    1846            mov     dptr,#0x00C8
097A 120100    1847            lcall   _waitms
097D           1848   ;        robot.c:396: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
097D E538      1849            mov     a,_turncar_direction_1_82
097F 6001      1850            jz      L007030?
0981 75820B    1851            mov     dpl,#0x0B
0984 120100    1852            lcall   _Volts_at_Pin
0987 AC82      1853            mov     r4,dpl
0989 AD83      1854            mov     r5,dph
098B AEF0      1855            mov     r6,b
098D FF        1856            mov     r7,a
098E 8001      1857            sjmp    L007031?
0990           1858   L007030?:
0990 75820D    1859            mov     dpl,#0x0D
0993 120100    1860            lcall   _Volts_at_Pin
0996 AC82      1861            mov     r4,dpl
0998 AD83      1862            mov     r5,dph
099A AEF0      1863            mov     r6,b
099C FF        1864            mov     r7,a
099D           1865   L007031?:
099D 8CE8      1866            mov     _turncar_v_1_82,r4
099F 8DE9      1867            mov     (_turncar_v_1_82 + 1),r5
09A1 8EEA      1868            mov     (_turncar_v_1_82 + 2),r6
09A3 8FEB      1869            mov     (_turncar_v_1_82 + 3),r7
09A5           1870   ;        robot.c:398: while (v < 1.3) {
09A5           1871   L007004?:
09A5 7466      1872            mov     a,#0x66
09A7 C0E0      1873            push    acc
09A9 C0E0      1874            push    acc
09AB 74A6      1875            mov     a,#0xA6
09AD C0E0      1876            push    acc
09AF 743F      1877            mov     a,#0x3F
09B1 C0E0      1878            push    acc
09B3 85E882    1879            mov     dpl,_turncar_v_1_82
09B6 85E983    1880            mov     dph,(_turncar_v_1_82 + 1)
09B9 85EAF0    1881            mov     b,(_turncar_v_1_82 + 2)
09BC E5EB      1882            mov     a,(_turncar_v_1_82 + 3)
09BE 120100    1883            lcall   ___fslt
09C1 AC82      1884            mov     r4,dpl
09C3 E581      1885            mov     a,sp
09C5 24FC      1886            add     a,#0xfc
09C7 F581      1887            mov     sp,a
09C9 EC        1888            mov     a,r4
09CA 6001      1889            jz      L007006?
09CC           1890   ;        robot.c:400: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
09CC E538      1891            mov     a,_turncar_direction_1_82
09CE 6001      1892            jz      L007032?
09D0 75820B    1893            mov     dpl,#0x0B
09D3 120100    1894            lcall   _Volts_at_Pin
09D6 AC82      1895            mov     r4,dpl
09D8 AD83      1896            mov     r5,dph
09DA AEF0      1897            mov     r6,b
09DC FF        1898            mov     r7,a
09DD 8001      1899            sjmp    L007033?
09DF           1900   L007032?:
09DF 75820D    1901            mov     dpl,#0x0D
09E2 120100    1902            lcall   _Volts_at_Pin
09E5 AC82      1903            mov     r4,dpl
09E7 AD83      1904            mov     r5,dph
09E9 AEF0      1905            mov     r6,b
09EB FF        1906            mov     r7,a
09EC           1907   L007033?:
09EC 8CE8      1908            mov     _turncar_v_1_82,r4
09EE 8DE9      1909            mov     (_turncar_v_1_82 + 1),r5
09F0 8EEA      1910            mov     (_turncar_v_1_82 + 2),r6
09F2 8FEB      1911            mov     (_turncar_v_1_82 + 3),r7
09F4 8001      1912            sjmp    L007004?
09F6           1913   L007006?:
09F6           1914   ;        robot.c:404: pwm_Left1 = -1; 
09F6 7530FF    1915            mov     _pwm_Left1,#0xFF
09F9 22        1916            ret
09FA           1917   L007019?:
09FA           1918   ;        robot.c:408: else if (leftright == 2) {
09FA BA02C0    1919            cjne    r2,#0x02,L007072?
09FD BB00C0    1920            cjne    r3,#0x00,L007072?
0A00 8001      1921            sjmp    L007073?
0A02           1922   L007072?:
0A02 020100    1923            ljmp    L007016?
0A05           1924   L007073?:
0A05           1925   ;        robot.c:410: pwm_Right1 = 100;
0A05 75B064    1926            mov     _pwm_Right1,#0x64
0A08           1927   ;        robot.c:413: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0A08 E538      1928            mov     a,_turncar_direction_1_82
0A0A 6001      1929            jz      L007034?
0A0C 75820C    1930            mov     dpl,#0x0C
0A0F 120100    1931            lcall   _Volts_at_Pin
0A12 AC82      1932            mov     r4,dpl
0A14 AD83      1933            mov     r5,dph
0A16 AEF0      1934            mov     r6,b
0A18 FF        1935            mov     r7,a
0A19 8001      1936            sjmp    L007035?
0A1B           1937   L007034?:
0A1B 75820E    1938            mov     dpl,#0x0E
0A1E 120100    1939            lcall   _Volts_at_Pin
0A21 AC82      1940            mov     r4,dpl
0A23 AD83      1941            mov     r5,dph
0A25 AEF0      1942            mov     r6,b
0A27 FF        1943            mov     r7,a
0A28           1944   L007035?:
0A28 8CE8      1945            mov     _turncar_v_1_82,r4
0A2A 8DE9      1946            mov     (_turncar_v_1_82 + 1),r5
0A2C 8EEA      1947            mov     (_turncar_v_1_82 + 2),r6
0A2E 8FEB      1948            mov     (_turncar_v_1_82 + 3),r7
0A30           1949   ;        robot.c:415: while (v < 0.9) {
0A30           1950   L007007?:
0A30 7466      1951            mov     a,#0x66
0A32 C0E0      1952            push    acc
0A34 C0E0      1953            push    acc
0A36 C0E0      1954            push    acc
0A38 743F      1955            mov     a,#0x3F
0A3A C0E0      1956            push    acc
0A3C 85E882    1957            mov     dpl,_turncar_v_1_82
0A3F 85E983    1958            mov     dph,(_turncar_v_1_82 + 1)
0A42 85EAF0    1959            mov     b,(_turncar_v_1_82 + 2)
0A45 E5EB      1960            mov     a,(_turncar_v_1_82 + 3)
0A47 120100    1961            lcall   ___fslt
0A4A AC82      1962            mov     r4,dpl
0A4C E581      1963            mov     a,sp
0A4E 24FC      1964            add     a,#0xfc
0A50 F581      1965            mov     sp,a
0A52 EC        1966            mov     a,r4
0A53 6001      1967            jz      L007009?
0A55           1968   ;        robot.c:417: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0A55 E538      1969            mov     a,_turncar_direction_1_82
0A57 6001      1970            jz      L007036?
0A59 75820C    1971            mov     dpl,#0x0C
0A5C 120100    1972            lcall   _Volts_at_Pin
0A5F AC82      1973            mov     r4,dpl
0A61 AD83      1974            mov     r5,dph
0A63 AEF0      1975            mov     r6,b
0A65 FF        1976            mov     r7,a
0A66 8001      1977            sjmp    L007037?
0A68           1978   L007036?:
0A68 75820E    1979            mov     dpl,#0x0E
0A6B 120100    1980            lcall   _Volts_at_Pin
0A6E AC82      1981            mov     r4,dpl
0A70 AD83      1982            mov     r5,dph
0A72 AEF0      1983            mov     r6,b
0A74 FF        1984            mov     r7,a
0A75           1985   L007037?:
0A75 8CE8      1986            mov     _turncar_v_1_82,r4
0A77 8DE9      1987            mov     (_turncar_v_1_82 + 1),r5
0A79 8EEA      1988            mov     (_turncar_v_1_82 + 2),r6
0A7B 8FEB      1989            mov     (_turncar_v_1_82 + 3),r7
0A7D 8001      1990            sjmp    L007007?
0A7F           1991   L007009?:
0A7F           1992   ;        robot.c:421: waitms(300);
0A7F 90012C    1993            mov     dptr,#0x012C
0A82 120100    1994            lcall   _waitms
0A85           1995   ;        robot.c:424: pwm_Right1 = -1; 
0A85 75B0FF    1996            mov     _pwm_Right1,#0xFF
0A88 22        1997            ret
0A89           1998   L007016?:
0A89           1999   ;        robot.c:428: else if (leftright == 4) {
0A89 BA0400    2000            cjne    r2,#0x04,L007077?
0A8C BB0000    2001            cjne    r3,#0x00,L007077?
0A8F 8001      2002            sjmp    L007078?
0A91           2003   L007077?:
0A91 22        2004            ret
0A92           2005   L007078?:
0A92           2006   ;        robot.c:430: pwm_Left0 = 75;
0A92 75704B    2007            mov     _pwm_Left0,#0x4B
0A95           2008   ;        robot.c:431: waitms(200);
0A95 9000C8    2009            mov     dptr,#0x00C8
0A98 120100    2010            lcall   _waitms
0A9B           2011   ;        robot.c:434: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0A9B E538      2012            mov     a,_turncar_direction_1_82
0A9D 6001      2013            jz      L007038?
0A9F 75820B    2014            mov     dpl,#0x0B
0AA2 120100    2015            lcall   _Volts_at_Pin
0AA5 AA82      2016            mov     r2,dpl
0AA7 AB83      2017            mov     r3,dph
0AA9 ACF0      2018            mov     r4,b
0AAB FD        2019            mov     r5,a
0AAC 8001      2020            sjmp    L007039?
0AAE           2021   L007038?:
0AAE 75820D    2022            mov     dpl,#0x0D
0AB1 120100    2023            lcall   _Volts_at_Pin
0AB4 AA82      2024            mov     r2,dpl
0AB6 AB83      2025            mov     r3,dph
0AB8 ACF0      2026            mov     r4,b
0ABA FD        2027            mov     r5,a
0ABB           2028   L007039?:
0ABB 8AE8      2029            mov     _turncar_v_1_82,r2
0ABD 8BE9      2030            mov     (_turncar_v_1_82 + 1),r3
0ABF 8CEA      2031            mov     (_turncar_v_1_82 + 2),r4
0AC1 8DEB      2032            mov     (_turncar_v_1_82 + 3),r5
0AC3           2033   ;        robot.c:436: while (v < 0.9) {
0AC3           2034   L007010?:
0AC3 7466      2035            mov     a,#0x66
0AC5 C0E0      2036            push    acc
0AC7 C0E0      2037            push    acc
0AC9 C0E0      2038            push    acc
0ACB 743F      2039            mov     a,#0x3F
0ACD C0E0      2040            push    acc
0ACF 85E882    2041            mov     dpl,_turncar_v_1_82
0AD2 85E983    2042            mov     dph,(_turncar_v_1_82 + 1)
0AD5 85EAF0    2043            mov     b,(_turncar_v_1_82 + 2)
0AD8 E5EB      2044            mov     a,(_turncar_v_1_82 + 3)
0ADA 120100    2045            lcall   ___fslt
0ADD AA82      2046            mov     r2,dpl
0ADF E581      2047            mov     a,sp
0AE1 24FC      2048            add     a,#0xfc
0AE3 F581      2049            mov     sp,a
0AE5 EA        2050            mov     a,r2
0AE6 6001      2051            jz      L007012?
0AE8           2052   ;        robot.c:438: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0AE8 E538      2053            mov     a,_turncar_direction_1_82
0AEA 6001      2054            jz      L007040?
0AEC 75820B    2055            mov     dpl,#0x0B
0AEF 120100    2056            lcall   _Volts_at_Pin
0AF2 AA82      2057            mov     r2,dpl
0AF4 AB83      2058            mov     r3,dph
0AF6 ACF0      2059            mov     r4,b
0AF8 FD        2060            mov     r5,a
0AF9 8001      2061            sjmp    L007041?
0AFB           2062   L007040?:
0AFB 75820D    2063            mov     dpl,#0x0D
0AFE 120100    2064            lcall   _Volts_at_Pin
0B01 AA82      2065            mov     r2,dpl
0B03 AB83      2066            mov     r3,dph
0B05 ACF0      2067            mov     r4,b
0B07 FD        2068            mov     r5,a
0B08           2069   L007041?:
0B08 8AE8      2070            mov     _turncar_v_1_82,r2
0B0A 8BE9      2071            mov     (_turncar_v_1_82 + 1),r3
0B0C 8CEA      2072            mov     (_turncar_v_1_82 + 2),r4
0B0E 8DEB      2073            mov     (_turncar_v_1_82 + 3),r5
0B10 8001      2074            sjmp    L007010?
0B12           2075   L007012?:
0B12           2076   ;        robot.c:442: pwm_Left0 = -1; 
0B12 7570FF    2077            mov     _pwm_Left0,#0xFF
0B15 22        2078            ret
0B16           2079   ;------------------------------------------------------------
0B16           2080   ;Allocation info for local variables in function 'uturn'
0B16           2081   ;------------------------------------------------------------
0B16           2082   ;vleft                     Allocated with name '_uturn_vleft_1_92'
0B16           2083   ;vright                    Allocated with name '_uturn_vright_1_92'
0B16           2084   ;------------------------------------------------------------
0B16           2085   ;        robot.c:449: void uturn(void) {
0B16           2086   ;        -----------------------------------------
0B16           2087   ;         function uturn
0B16           2088   ;        -----------------------------------------
0B16           2089   _uturn:
0B16           2090   ;        robot.c:453: vleft = Volts_at_Pin(TANK_FL);
0B16 75820B    2091            mov     dpl,#0x0B
0B19 120100    2092            lcall   _Volts_at_Pin
0B1C 858288    2093            mov     _uturn_vleft_1_92,dpl
0B1F 858389    2094            mov     (_uturn_vleft_1_92 + 1),dph
0B22 85F08A    2095            mov     (_uturn_vleft_1_92 + 2),b
0B25 F58B      2096            mov     (_uturn_vleft_1_92 + 3),a
0B27           2097   ;        robot.c:454: vright = Volts_at_Pin(TANK_FR);
0B27 75820C    2098            mov     dpl,#0x0C
0B2A 120100    2099            lcall   _Volts_at_Pin
0B2D 8582D8    2100            mov     _uturn_vright_1_92,dpl
0B30 8583D9    2101            mov     (_uturn_vright_1_92 + 1),dph
0B33 85F0DA    2102            mov     (_uturn_vright_1_92 + 2),b
0B36 F5DB      2103            mov     (_uturn_vright_1_92 + 3),a
0B38           2104   ;        robot.c:457: pwm_Left0 = -1;
0B38 7570FF    2105            mov     _pwm_Left0,#0xFF
0B3B           2106   ;        robot.c:458: pwm_Left1 = 50;
0B3B 753032    2107            mov     _pwm_Left1,#0x32
0B3E           2108   ;        robot.c:459: pwm_Right0 = -1;
0B3E 75F0FF    2109            mov     _pwm_Right0,#0xFF
0B41           2110   ;        robot.c:460: pwm_Right1 = 50;
0B41 75B032    2111            mov     _pwm_Right1,#0x32
0B44           2112   ;        robot.c:463: waitms(4000);
0B44 900FA0    2113            mov     dptr,#0x0FA0
0B47 120100    2114            lcall   _waitms
0B4A           2115   ;        robot.c:466: while (((vleft - vright) > 0.2) || ((vleft - vright) < (-0.2))) {
0B4A           2116   L008002?:
0B4A C0D8      2117            push    _uturn_vright_1_92
0B4C C0D9      2118            push    (_uturn_vright_1_92 + 1)
0B4E C0DA      2119            push    (_uturn_vright_1_92 + 2)
0B50 C0DB      2120            push    (_uturn_vright_1_92 + 3)
0B52 858882    2121            mov     dpl,_uturn_vleft_1_92
0B55 858983    2122            mov     dph,(_uturn_vleft_1_92 + 1)
0B58 858AF0    2123            mov     b,(_uturn_vleft_1_92 + 2)
0B5B E58B      2124            mov     a,(_uturn_vleft_1_92 + 3)
0B5D 120100    2125            lcall   ___fssub
0B60 AA82      2126            mov     r2,dpl
0B62 AB83      2127            mov     r3,dph
0B64 ACF0      2128            mov     r4,b
0B66 FD        2129            mov     r5,a
0B67 E581      2130            mov     a,sp
0B69 24FC      2131            add     a,#0xfc
0B6B F581      2132            mov     sp,a
0B6D 74CD      2133            mov     a,#0xCD
0B6F C0E0      2134            push    acc
0B71 74CC      2135            mov     a,#0xCC
0B73 C0E0      2136            push    acc
0B75 744C      2137            mov     a,#0x4C
0B77 C0E0      2138            push    acc
0B79 743E      2139            mov     a,#0x3E
0B7B C0E0      2140            push    acc
0B7D 8A82      2141            mov     dpl,r2
0B7F 8B83      2142            mov     dph,r3
0B81 8CF0      2143            mov     b,r4
0B83 ED        2144            mov     a,r5
0B84 120100    2145            lcall   ___fsgt
0B87 AA82      2146            mov     r2,dpl
0B89 E581      2147            mov     a,sp
0B8B 24FC      2148            add     a,#0xfc
0B8D F581      2149            mov     sp,a
0B8F EA        2150            mov     a,r2
0B90 7001      2151            jnz     L008003?
0B92 C0D8      2152            push    _uturn_vright_1_92
0B94 C0D9      2153            push    (_uturn_vright_1_92 + 1)
0B96 C0DA      2154            push    (_uturn_vright_1_92 + 2)
0B98 C0DB      2155            push    (_uturn_vright_1_92 + 3)
0B9A 858882    2156            mov     dpl,_uturn_vleft_1_92
0B9D 858983    2157            mov     dph,(_uturn_vleft_1_92 + 1)
0BA0 858AF0    2158            mov     b,(_uturn_vleft_1_92 + 2)
0BA3 E58B      2159            mov     a,(_uturn_vleft_1_92 + 3)
0BA5 120100    2160            lcall   ___fssub
0BA8 AA82      2161            mov     r2,dpl
0BAA AB83      2162            mov     r3,dph
0BAC ACF0      2163            mov     r4,b
0BAE FD        2164            mov     r5,a
0BAF E581      2165            mov     a,sp
0BB1 24FC      2166            add     a,#0xfc
0BB3 F581      2167            mov     sp,a
0BB5 74CD      2168            mov     a,#0xCD
0BB7 C0E0      2169            push    acc
0BB9 74CC      2170            mov     a,#0xCC
0BBB C0E0      2171            push    acc
0BBD 744C      2172            mov     a,#0x4C
0BBF C0E0      2173            push    acc
0BC1 74BE      2174            mov     a,#0xBE
0BC3 C0E0      2175            push    acc
0BC5 8A82      2176            mov     dpl,r2
0BC7 8B83      2177            mov     dph,r3
0BC9 8CF0      2178            mov     b,r4
0BCB ED        2179            mov     a,r5
0BCC 120100    2180            lcall   ___fslt
0BCF AA82      2181            mov     r2,dpl
0BD1 E581      2182            mov     a,sp
0BD3 24FC      2183            add     a,#0xfc
0BD5 F581      2184            mov     sp,a
0BD7 EA        2185            mov     a,r2
0BD8 6001      2186            jz      L008005?
0BDA           2187   L008003?:
0BDA           2188   ;        robot.c:468: vleft  = Volts_at_Pin(TANK_FL);
0BDA 75820B    2189            mov     dpl,#0x0B
0BDD 120100    2190            lcall   _Volts_at_Pin
0BE0 858288    2191            mov     _uturn_vleft_1_92,dpl
0BE3 858389    2192            mov     (_uturn_vleft_1_92 + 1),dph
0BE6 85F08A    2193            mov     (_uturn_vleft_1_92 + 2),b
0BE9 F58B      2194            mov     (_uturn_vleft_1_92 + 3),a
0BEB           2195   ;        robot.c:469: vright = Volts_at_Pin(TANK_FR);
0BEB 75820C    2196            mov     dpl,#0x0C
0BEE 120100    2197            lcall   _Volts_at_Pin
0BF1 8582D8    2198            mov     _uturn_vright_1_92,dpl
0BF4 8583D9    2199            mov     (_uturn_vright_1_92 + 1),dph
0BF7 85F0DA    2200            mov     (_uturn_vright_1_92 + 2),b
0BFA F5DB      2201            mov     (_uturn_vright_1_92 + 3),a
0BFC 020100    2202            ljmp    L008002?
0BFF           2203   L008005?:
0BFF 22        2204            ret
0C00           2205            rseg R_CSEG
0C00           2206   
0000           2207            rseg R_XINIT
0000           2208   
0000           2209            rseg R_CONST
0000           2210   __str_0:
0000 1B        2211            db 0x1B
0001 5B324A    2212            db '[2J'
0004 00        2213            db 0x00
0005           2214   __str_1:
0005 0A        2215            db 0x0A
0006 494E5445  2216            db 'INTERSECTION'
     52534543
     54494F4E
0012 0A        2217            db 0x0A
0013 00        2218            db 0x00
0014           2219   __str_2:
0014 0A        2220            db 0x0A
0015 0D        2221            db 0x0D
0016 20494E54  2222            db ' INTERSECTION'
     45525345
     4354494F
     4E
0023 0A        2223            db 0x0A
0024 00        2224            db 0x00
0025           2225   __str_3:
0025 436F6D6D  2226            db 'Command received: %d'
     616E6420
     72656365
     69766564
     3A202564
0039 0A        2227            db 0x0A
003A 00        2228            db 0x00
003B           2229   
002E           2230            CSEG
002E           2231   
002E           2232   end
