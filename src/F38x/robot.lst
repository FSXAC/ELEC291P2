0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Mon Apr 03 11:56:31 2017
0000              5   ;--------------------------------------------------------
                  5   $name robot
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _movecar_PARM_2
0000             28            public _Timer2_ISR
0000             29            public _main
0000             30            public _currentstate
0000             31            public _currentcmd
0000             32            public _direction
0000             33            public _pwm_Right1
0000             34            public _pwm_Right0
0000             35            public _pwm_Left1
0000             36            public _pwm_Left0
0000             37            public _pwm_both
0000             38            public _mode
0000             39            public _pwm_count
0000             40            public _forward_backward
0000             41            public _readData
0000             42            public _linetrack
0000             43            public _stopcar
0000             44            public _turncar
0000             45            public _uturn
0000             46            public _movecar
0000             47   ;--------------------------------------------------------
0000             48   ; Special Function Registers
0000             49   ;--------------------------------------------------------
0000             50   _P0             DATA 0x80
0000             51   _SP             DATA 0x81
0000             52   _DPL            DATA 0x82
0000             53   _DPH            DATA 0x83
0000             54   _EMI0TC         DATA 0x84
0000             55   _EMI0CF         DATA 0x85
0000             56   _OSCLCN         DATA 0x86
0000             57   _PCON           DATA 0x87
0000             58   _TCON           DATA 0x88
0000             59   _TMOD           DATA 0x89
0000             60   _TL0            DATA 0x8a
0000             61   _TL1            DATA 0x8b
0000             62   _TH0            DATA 0x8c
0000             63   _TH1            DATA 0x8d
0000             64   _CKCON          DATA 0x8e
0000             65   _PSCTL          DATA 0x8f
0000             66   _P1             DATA 0x90
0000             67   _TMR3CN         DATA 0x91
0000             68   _TMR4CN         DATA 0x91
0000             69   _TMR3RLL        DATA 0x92
0000             70   _TMR4RLL        DATA 0x92
0000             71   _TMR3RLH        DATA 0x93
0000             72   _TMR4RLH        DATA 0x93
0000             73   _TMR3L          DATA 0x94
0000             74   _TMR4L          DATA 0x94
0000             75   _TMR3H          DATA 0x95
0000             76   _TMR4H          DATA 0x95
0000             77   _USB0ADR        DATA 0x96
0000             78   _USB0DAT        DATA 0x97
0000             79   _SCON           DATA 0x98
0000             80   _SCON0          DATA 0x98
0000             81   _SBUF           DATA 0x99
0000             82   _SBUF0          DATA 0x99
0000             83   _CPT1CN         DATA 0x9a
0000             84   _CPT0CN         DATA 0x9b
0000             85   _CPT1MD         DATA 0x9c
0000             86   _CPT0MD         DATA 0x9d
0000             87   _CPT1MX         DATA 0x9e
0000             88   _CPT0MX         DATA 0x9f
0000             89   _P2             DATA 0xa0
0000             90   _SPI0CFG        DATA 0xa1
0000             91   _SPI0CKR        DATA 0xa2
0000             92   _SPI0DAT        DATA 0xa3
0000             93   _P0MDOUT        DATA 0xa4
0000             94   _P1MDOUT        DATA 0xa5
0000             95   _P2MDOUT        DATA 0xa6
0000             96   _P3MDOUT        DATA 0xa7
0000             97   _IE             DATA 0xa8
0000             98   _CLKSEL         DATA 0xa9
0000             99   _EMI0CN         DATA 0xaa
0000            100   __XPAGE         DATA 0xaa
0000            101   _SBCON1         DATA 0xac
0000            102   _P4MDOUT        DATA 0xae
0000            103   _PFE0CN         DATA 0xaf
0000            104   _P3             DATA 0xb0
0000            105   _OSCXCN         DATA 0xb1
0000            106   _OSCICN         DATA 0xb2
0000            107   _OSCICL         DATA 0xb3
0000            108   _SBRLL1         DATA 0xb4
0000            109   _SBRLH1         DATA 0xb5
0000            110   _FLSCL          DATA 0xb6
0000            111   _FLKEY          DATA 0xb7
0000            112   _IP             DATA 0xb8
0000            113   _CLKMUL         DATA 0xb9
0000            114   _SMBTC          DATA 0xb9
0000            115   _AMX0N          DATA 0xba
0000            116   _AMX0P          DATA 0xbb
0000            117   _ADC0CF         DATA 0xbc
0000            118   _ADC0L          DATA 0xbd
0000            119   _ADC0H          DATA 0xbe
0000            120   _SFRPAGE        DATA 0xbf
0000            121   _SMB0CN         DATA 0xc0
0000            122   _SMB1CN         DATA 0xc0
0000            123   _SMB0CF         DATA 0xc1
0000            124   _SMB1CF         DATA 0xc1
0000            125   _SMB0DAT        DATA 0xc2
0000            126   _SMB1DAT        DATA 0xc2
0000            127   _ADC0GTL        DATA 0xc3
0000            128   _ADC0GTH        DATA 0xc4
0000            129   _ADC0LTL        DATA 0xc5
0000            130   _ADC0LTH        DATA 0xc6
0000            131   _P4             DATA 0xc7
0000            132   _TMR2CN         DATA 0xc8
0000            133   _TMR5CN         DATA 0xc8
0000            134   _REG01CN        DATA 0xc9
0000            135   _TMR2RLL        DATA 0xca
0000            136   _TMR5RLL        DATA 0xca
0000            137   _TMR2RLH        DATA 0xcb
0000            138   _TMR5RLH        DATA 0xcb
0000            139   _TMR2L          DATA 0xcc
0000            140   _TMR5L          DATA 0xcc
0000            141   _TMR2H          DATA 0xcd
0000            142   _TMR5H          DATA 0xcd
0000            143   _SMB0ADM        DATA 0xce
0000            144   _SMB1ADM        DATA 0xce
0000            145   _SMB0ADR        DATA 0xcf
0000            146   _SMB1ADR        DATA 0xcf
0000            147   _PSW            DATA 0xd0
0000            148   _REF0CN         DATA 0xd1
0000            149   _SCON1          DATA 0xd2
0000            150   _SBUF1          DATA 0xd3
0000            151   _P0SKIP         DATA 0xd4
0000            152   _P1SKIP         DATA 0xd5
0000            153   _P2SKIP         DATA 0xd6
0000            154   _USB0XCN        DATA 0xd7
0000            155   _PCA0CN         DATA 0xd8
0000            156   _PCA0MD         DATA 0xd9
0000            157   _PCA0CPM0       DATA 0xda
0000            158   _PCA0CPM1       DATA 0xdb
0000            159   _PCA0CPM2       DATA 0xdc
0000            160   _PCA0CPM3       DATA 0xdd
0000            161   _PCA0CPM4       DATA 0xde
0000            162   _P3SKIP         DATA 0xdf
0000            163   _ACC            DATA 0xe0
0000            164   _XBR0           DATA 0xe1
0000            165   _XBR1           DATA 0xe2
0000            166   _XBR2           DATA 0xe3
0000            167   _IT01CF         DATA 0xe4
0000            168   _CKCON1         DATA 0xe4
0000            169   _SMOD1          DATA 0xe5
0000            170   _EIE1           DATA 0xe6
0000            171   _EIE2           DATA 0xe7
0000            172   _ADC0CN         DATA 0xe8
0000            173   _PCA0CPL1       DATA 0xe9
0000            174   _PCA0CPH1       DATA 0xea
0000            175   _PCA0CPL2       DATA 0xeb
0000            176   _PCA0CPH2       DATA 0xec
0000            177   _PCA0CPL3       DATA 0xed
0000            178   _PCA0CPH3       DATA 0xee
0000            179   _RSTSRC         DATA 0xef
0000            180   _B              DATA 0xf0
0000            181   _P0MDIN         DATA 0xf1
0000            182   _P1MDIN         DATA 0xf2
0000            183   _P2MDIN         DATA 0xf3
0000            184   _P3MDIN         DATA 0xf4
0000            185   _P4MDIN         DATA 0xf5
0000            186   _EIP1           DATA 0xf6
0000            187   _EIP2           DATA 0xf7
0000            188   _SPI0CN         DATA 0xf8
0000            189   _PCA0L          DATA 0xf9
0000            190   _PCA0H          DATA 0xfa
0000            191   _PCA0CPL0       DATA 0xfb
0000            192   _PCA0CPH0       DATA 0xfc
0000            193   _PCA0CPL4       DATA 0xfd
0000            194   _PCA0CPH4       DATA 0xfe
0000            195   _VDM0CN         DATA 0xff
0000            196   _DPTR           DATA 0x8382
0000            197   _TMR2RL         DATA 0xcbca
0000            198   _TMR3RL         DATA 0x9392
0000            199   _TMR4RL         DATA 0x9392
0000            200   _TMR5RL         DATA 0xcbca
0000            201   _TMR2           DATA 0xcdcc
0000            202   _TMR3           DATA 0x9594
0000            203   _TMR4           DATA 0x9594
0000            204   _TMR5           DATA 0xcdcc
0000            205   _SBRL1          DATA 0xb5b4
0000            206   _ADC0           DATA 0xbebd
0000            207   _ADC0GT         DATA 0xc4c3
0000            208   _ADC0LT         DATA 0xc6c5
0000            209   _PCA0           DATA 0xfaf9
0000            210   _PCA0CP1        DATA 0xeae9
0000            211   _PCA0CP2        DATA 0xeceb
0000            212   _PCA0CP3        DATA 0xeeed
0000            213   _PCA0CP0        DATA 0xfcfb
0000            214   _PCA0CP4        DATA 0xfefd
0000            215   ;--------------------------------------------------------
0000            216   ; special function bits
0000            217   ;--------------------------------------------------------
0000            218   _P0_0           BIT 0x80
0000            219   _P0_1           BIT 0x81
0000            220   _P0_2           BIT 0x82
0000            221   _P0_3           BIT 0x83
0000            222   _P0_4           BIT 0x84
0000            223   _P0_5           BIT 0x85
0000            224   _P0_6           BIT 0x86
0000            225   _P0_7           BIT 0x87
0000            226   _TF1            BIT 0x8f
0000            227   _TR1            BIT 0x8e
0000            228   _TF0            BIT 0x8d
0000            229   _TR0            BIT 0x8c
0000            230   _IE1            BIT 0x8b
0000            231   _IT1            BIT 0x8a
0000            232   _IE0            BIT 0x89
0000            233   _IT0            BIT 0x88
0000            234   _P1_0           BIT 0x90
0000            235   _P1_1           BIT 0x91
0000            236   _P1_2           BIT 0x92
0000            237   _P1_3           BIT 0x93
0000            238   _P1_4           BIT 0x94
0000            239   _P1_5           BIT 0x95
0000            240   _P1_6           BIT 0x96
0000            241   _P1_7           BIT 0x97
0000            242   _S0MODE         BIT 0x9f
0000            243   _SCON0_6        BIT 0x9e
0000            244   _MCE0           BIT 0x9d
0000            245   _REN0           BIT 0x9c
0000            246   _TB80           BIT 0x9b
0000            247   _RB80           BIT 0x9a
0000            248   _TI0            BIT 0x99
0000            249   _RI0            BIT 0x98
0000            250   _SCON_6         BIT 0x9e
0000            251   _MCE            BIT 0x9d
0000            252   _REN            BIT 0x9c
0000            253   _TB8            BIT 0x9b
0000            254   _RB8            BIT 0x9a
0000            255   _TI             BIT 0x99
0000            256   _RI             BIT 0x98
0000            257   _P2_0           BIT 0xa0
0000            258   _P2_1           BIT 0xa1
0000            259   _P2_2           BIT 0xa2
0000            260   _P2_3           BIT 0xa3
0000            261   _P2_4           BIT 0xa4
0000            262   _P2_5           BIT 0xa5
0000            263   _P2_6           BIT 0xa6
0000            264   _P2_7           BIT 0xa7
0000            265   _EA             BIT 0xaf
0000            266   _ESPI0          BIT 0xae
0000            267   _ET2            BIT 0xad
0000            268   _ES0            BIT 0xac
0000            269   _ET1            BIT 0xab
0000            270   _EX1            BIT 0xaa
0000            271   _ET0            BIT 0xa9
0000            272   _EX0            BIT 0xa8
0000            273   _P3_0           BIT 0xb0
0000            274   _P3_1           BIT 0xb1
0000            275   _P3_2           BIT 0xb2
0000            276   _P3_3           BIT 0xb3
0000            277   _P3_4           BIT 0xb4
0000            278   _P3_5           BIT 0xb5
0000            279   _P3_6           BIT 0xb6
0000            280   _P3_7           BIT 0xb7
0000            281   _IP_7           BIT 0xbf
0000            282   _PSPI0          BIT 0xbe
0000            283   _PT2            BIT 0xbd
0000            284   _PS0            BIT 0xbc
0000            285   _PT1            BIT 0xbb
0000            286   _PX1            BIT 0xba
0000            287   _PT0            BIT 0xb9
0000            288   _PX0            BIT 0xb8
0000            289   _MASTER0        BIT 0xc7
0000            290   _TXMODE0        BIT 0xc6
0000            291   _STA0           BIT 0xc5
0000            292   _STO0           BIT 0xc4
0000            293   _ACKRQ0         BIT 0xc3
0000            294   _ARBLOST0       BIT 0xc2
0000            295   _ACK0           BIT 0xc1
0000            296   _SI0            BIT 0xc0
0000            297   _MASTER1        BIT 0xc7
0000            298   _TXMODE1        BIT 0xc6
0000            299   _STA1           BIT 0xc5
0000            300   _STO1           BIT 0xc4
0000            301   _ACKRQ1         BIT 0xc3
0000            302   _ARBLOST1       BIT 0xc2
0000            303   _ACK1           BIT 0xc1
0000            304   _SI1            BIT 0xc0
0000            305   _TF2            BIT 0xcf
0000            306   _TF2H           BIT 0xcf
0000            307   _TF2L           BIT 0xce
0000            308   _TF2LEN         BIT 0xcd
0000            309   _TF2CEN         BIT 0xcc
0000            310   _T2SPLIT        BIT 0xcb
0000            311   _TR2            BIT 0xca
0000            312   _T2CSS          BIT 0xc9
0000            313   _T2XCLK         BIT 0xc8
0000            314   _TF5H           BIT 0xcf
0000            315   _TF5L           BIT 0xce
0000            316   _TF5LEN         BIT 0xcd
0000            317   _TMR5CN_4       BIT 0xcc
0000            318   _T5SPLIT        BIT 0xcb
0000            319   _TR5            BIT 0xca
0000            320   _TMR5CN_1       BIT 0xc9
0000            321   _T5XCLK         BIT 0xc8
0000            322   _CY             BIT 0xd7
0000            323   _AC             BIT 0xd6
0000            324   _F0             BIT 0xd5
0000            325   _RS1            BIT 0xd4
0000            326   _RS0            BIT 0xd3
0000            327   _OV             BIT 0xd2
0000            328   _F1             BIT 0xd1
0000            329   _PARITY         BIT 0xd0
0000            330   _CF             BIT 0xdf
0000            331   _CR             BIT 0xde
0000            332   _PCA0CN_5       BIT 0xde
0000            333   _CCF4           BIT 0xdc
0000            334   _CCF3           BIT 0xdb
0000            335   _CCF2           BIT 0xda
0000            336   _CCF1           BIT 0xd9
0000            337   _CCF0           BIT 0xd8
0000            338   _ACC_7          BIT 0xe7
0000            339   _ACC_6          BIT 0xe6
0000            340   _ACC_5          BIT 0xe5
0000            341   _ACC_4          BIT 0xe4
0000            342   _ACC_3          BIT 0xe3
0000            343   _ACC_2          BIT 0xe2
0000            344   _ACC_1          BIT 0xe1
0000            345   _ACC_0          BIT 0xe0
0000            346   _AD0EN          BIT 0xef
0000            347   _AD0TM          BIT 0xee
0000            348   _AD0INT         BIT 0xed
0000            349   _AD0BUSY        BIT 0xec
0000            350   _AD0WINT        BIT 0xeb
0000            351   _AD0CM2         BIT 0xea
0000            352   _AD0CM1         BIT 0xe9
0000            353   _AD0CM0         BIT 0xe8
0000            354   _B_7            BIT 0xf7
0000            355   _B_6            BIT 0xf6
0000            356   _B_5            BIT 0xf5
0000            357   _B_4            BIT 0xf4
0000            358   _B_3            BIT 0xf3
0000            359   _B_2            BIT 0xf2
0000            360   _B_1            BIT 0xf1
0000            361   _B_0            BIT 0xf0
0000            362   _SPIF           BIT 0xff
0000            363   _WCOL           BIT 0xfe
0000            364   _MODF           BIT 0xfd
0000            365   _RXOVRN         BIT 0xfc
0000            366   _NSSMD1         BIT 0xfb
0000            367   _NSSMD0         BIT 0xfa
0000            368   _TXBMT          BIT 0xf9
0000            369   _SPIEN          BIT 0xf8
0000            370   ;--------------------------------------------------------
0000            371   ; overlayable register banks
0000            372   ;--------------------------------------------------------
0000            373            rbank0 segment data overlay
0000            374   ;--------------------------------------------------------
0000            375   ; internal ram data
0000            376   ;--------------------------------------------------------
0000            377            rseg R_DSEG
0000            378   _pwm_count:
0000            379            ds 1
0001            380   _mode:
0001            381            ds 1
0002            382   _pwm_both:
0002            383            ds 1
0003            384   _pwm_Left0:
0003            385            ds 1
0004            386   _pwm_Left1:
0004            387            ds 1
0005            388   _pwm_Right0:
0005            389            ds 1
0006            390   _pwm_Right1:
0006            391            ds 1
0007            392   _direction:
0007            393            ds 1
0008            394   _currentcmd:
0008            395            ds 1
0009            396   _currentstate:
0009            397            ds 1
000A            398   _main_v1_1_57:
000A            399            ds 4
000E            400   _main_v2_1_57:
000E            401            ds 4
0012            402   _main_sloc0_1_0:
0012            403            ds 2
0014            404   _main_sloc1_1_0:
0014            405            ds 4
0018            406   _main_sloc2_1_0:
0018            407            ds 4
001C            408   _linetrack_forwardbackward_1_87:
001C            409            ds 2
001E            410   _linetrack_vleft_1_88:
001E            411            ds 4
0022            412   _linetrack_vright_1_88:
0022            413            ds 4
0026            414   _linetrack_sloc0_1_0:
0026            415            ds 4
002A            416   _turncar_v_1_95:
002A            417            ds 4
002E            418   _turncar_direction_1_95:
002E            419            ds 1
002F            420   _uturn_vleft_1_105:
002F            421            ds 4
0033            422   _uturn_vright_1_105:
0033            423            ds 4
0037            424   ;--------------------------------------------------------
0037            425   ; overlayable items in internal ram 
0037            426   ;--------------------------------------------------------
0000            427            rseg    R_OSEG
0000            428            rseg    R_OSEG
0000            429   _movecar_PARM_2:
0000            430            ds 2
0002            431   ;--------------------------------------------------------
0002            432   ; indirectly addressable internal ram data
0002            433   ;--------------------------------------------------------
0000            434            rseg R_ISEG
0000            435   ;--------------------------------------------------------
0000            436   ; absolute internal ram data
0000            437   ;--------------------------------------------------------
0000            438            DSEG
0000            439   ;--------------------------------------------------------
0000            440   ; bit data
0000            441   ;--------------------------------------------------------
0000            442            rseg R_BSEG
0000            443   _main_sloc3_1_0:
0000            444            DBIT    1
0001            445   _Timer2_ISR_sloc0_1_0:
0001            446            DBIT    1
0002            447   ;--------------------------------------------------------
0002            448   ; paged external ram data
0002            449   ;--------------------------------------------------------
0000            450            rseg R_PSEG
0000            451   ;--------------------------------------------------------
0000            452   ; external ram data
0000            453   ;--------------------------------------------------------
0000            454            rseg R_XSEG
0000            455   ;--------------------------------------------------------
0000            456   ; absolute external ram data
0000            457   ;--------------------------------------------------------
0000            458            XSEG
0000            459   ;--------------------------------------------------------
0000            460   ; external initialized ram data
0000            461   ;--------------------------------------------------------
0000            462            rseg R_IXSEG
0000            463            rseg R_HOME
0000            464            rseg R_GSINIT
0000            465            rseg R_CSEG
0000            466   ;--------------------------------------------------------
0000            467   ; Reset entry point and interrupt vectors
0000            468   ;--------------------------------------------------------
0000            469            CSEG at 0x0000
0000 020100     470            ljmp    _crt0
002B            471            CSEG at 0x002b
002B 020100     472            ljmp    _Timer2_ISR
002E            473   ;--------------------------------------------------------
002E            474   ; global & static initialisations
002E            475   ;--------------------------------------------------------
0000            476            rseg R_HOME
0000            477            rseg R_GSINIT
0000            478            rseg R_GSINIT
0000            479   ;--------------------------------------------------------
0000            480   ; data variables initialization
0000            481   ;--------------------------------------------------------
0000            482            rseg R_DINIT
0000            483   ;        robot.c:10: volatile  char pwm_count=0;
0000 755800     484            mov     _pwm_count,#0x00
0003            485   ;        robot.c:11: volatile  char mode = 0;
0003 751800     486            mov     _mode,#0x00
0006            487   ;        robot.c:12: volatile  char pwm_both =0;
0006 75D800     488            mov     _pwm_both,#0x00
0009            489   ;        robot.c:13: volatile  char pwm_Left0 = 0; //p1.5
0009 759800     490            mov     _pwm_Left0,#0x00
000C            491   ;        robot.c:14: volatile  char pwm_Left1 = 0; //p1.6
000C 755800     492            mov     _pwm_Left1,#0x00
000F            493   ;        robot.c:15: volatile  char pwm_Right0 = 0; //p2.0
000F 751800     494            mov     _pwm_Right0,#0x00
0012            495   ;        robot.c:16: volatile  char pwm_Right1 = 0; //p2.1
0012 75D800     496            mov     _pwm_Right1,#0x00
0015            497   ;        robot.c:17: volatile  char direction = 0; // 1 for back 0 for forward
0015 759800     498            mov     _direction,#0x00
0018            499   ;        robot.c:19: volatile  char currentcmd = 0;
0018 755800     500            mov     _currentcmd,#0x00
001B            501   ;        robot.c:20: volatile  char currentstate = 1;
001B 751801     502            mov     _currentstate,#0x01
001E            503            ; The linker places a 'ret' at the end of segment R_DINIT.
001E            504   ;--------------------------------------------------------
001E            505   ; code
001E            506   ;--------------------------------------------------------
0000            507            rseg R_CSEG
0000            508   ;------------------------------------------------------------
0000            509   ;Allocation info for local variables in function 'main'
0000            510   ;------------------------------------------------------------
0000            511   ;v1                        Allocated with name '_main_v1_1_57'
0000            512   ;v2                        Allocated with name '_main_v2_1_57'
0000            513   ;i                         Allocated to registers 
0000            514   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0000            515   ;sloc1                     Allocated with name '_main_sloc1_1_0'
0000            516   ;sloc2                     Allocated with name '_main_sloc2_1_0'
0000            517   ;------------------------------------------------------------
0000            518   ;        robot.c:22: void main(void) {
0000            519   ;        -----------------------------------------
0000            520   ;         function main
0000            521   ;        -----------------------------------------
0000            522   _main:
0000            523            using   0
0000            524   ;        robot.c:24: volatile float v1 = 0;
0000 75E800     525            mov     _main_v1_1_57,#0x00
0003 75E900     526            mov     (_main_v1_1_57 + 1),#0x00
0006 75EA00     527            mov     (_main_v1_1_57 + 2),#0x00
0009 75EB00     528            mov     (_main_v1_1_57 + 3),#0x00
000C            529   ;        robot.c:25: volatile float v2 = 0;
000C 752800     530            mov     _main_v2_1_57,#0x00
000F 752900     531            mov     (_main_v2_1_57 + 1),#0x00
0012 752A00     532            mov     (_main_v2_1_57 + 2),#0x00
0015 752B00     533            mov     (_main_v2_1_57 + 3),#0x00
0018            534   ;        robot.c:28: MOTOR_LEFT0 =0;
0018 C295       535            clr     _P1_5
001A            536   ;        robot.c:29: MOTOR_LEFT1 =0;
001A C296       537            clr     _P1_6
001C            538   ;        robot.c:30: MOTOR_RIGHT0 =0;
001C C2A0       539            clr     _P2_0
001E            540   ;        robot.c:31: MOTOR_RIGHT1 =0;
001E C2A1       541            clr     _P2_1
0020            542   ;        robot.c:34: currentstate = 2;           //1-FORWARD, 2-BACKWARDS, 3-STOPPED, 4-DEBUGGER
0020 751802     543            mov     _currentstate,#0x02
0023            544   ;        robot.c:35: currentcmd = 2;             //0-NO COMMAND, 1-TURN LEFT, 2-TURN RIGHT, 3-FORWARDS, 4-BACKWARDS, 5-STOP, 6-UTURN
0023 755802     545            mov     _currentcmd,#0x02
0026            546   ;        robot.c:38: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0026 7468       547            mov     a,#__str_0
0028 C0E0       548            push    acc
002A 749A       549            mov     a,#(__str_0 >> 8)
002C C0E0       550            push    acc
002E 7480       551            mov     a,#0x80
0030 C0E0       552            push    acc
0032 120100     553            lcall   _printf
0035 1581       554            dec     sp
0037 1581       555            dec     sp
0039 1581       556            dec     sp
003B            557   ;        robot.c:41: InitPinADC(2, 3); // Configure P2.3 as analog input (tank1)
003B 750003     558            mov     _InitPinADC_PARM_2,#0x03
003E 758202     559            mov     dpl,#0x02
0041 120100     560            lcall   _InitPinADC
0044            561   ;        robot.c:42: InitPinADC(2, 4); // Configure P2.4 as analog input         (tank1)
0044 750004     562            mov     _InitPinADC_PARM_2,#0x04
0047 758202     563            mov     dpl,#0x02
004A 120100     564            lcall   _InitPinADC
004D            565   ;        robot.c:43: InitPinADC(2, 5); // Configure P2.5 as analog input (tank2)
004D 750005     566            mov     _InitPinADC_PARM_2,#0x05
0050 758202     567            mov     dpl,#0x02
0053 120100     568            lcall   _InitPinADC
0056            569   ;        robot.c:44: InitPinADC(2, 6); // Configure P2.6 as analog input (tank2)
0056 750006     570            mov     _InitPinADC_PARM_2,#0x06
0059 758202     571            mov     dpl,#0x02
005C 120100     572            lcall   _InitPinADC
005F            573   ;        robot.c:50: InitADC();
005F 120100     574            lcall   _InitADC
0062            575   ;        robot.c:54: while(1)
0062            576   L002033?:
0062            577   ;        robot.c:57: readData(); 
0062 120100     578            lcall   _readData
0065            579   ;        robot.c:59: printf("frontL %f frontR %f backL %f backR %f command %1d\r\n", Volts_at_Pin(LQFP32_MUX_P2_3),Volts_at_Pin(LQFP32_MUX_P2_4),Volts_at_Pin(LQFP32_MUX_P2_5),Volts_at_Pin(LQFP32_MUX_P2_6), currentcmd);
0065 855868     580            mov     _main_sloc0_1_0,_currentcmd
0068 E558       581            mov     a,_currentcmd
006A 33         582            rlc     a
006B 95E0       583            subb    a,acc
006D F569       584            mov     (_main_sloc0_1_0 + 1),a
006F 75820E     585            mov     dpl,#0x0E
0072 120100     586            lcall   _Volts_at_Pin
0075 AC82       587            mov     r4,dpl
0077 AD83       588            mov     r5,dph
0079 AEF0       589            mov     r6,b
007B FF         590            mov     r7,a
007C 75820D     591            mov     dpl,#0x0D
007F C004       592            push    ar4
0081 C005       593            push    ar5
0083 C006       594            push    ar6
0085 C007       595            push    ar7
0087 120100     596            lcall   _Volts_at_Pin
008A 8582A8     597            mov     _main_sloc1_1_0,dpl
008D 8583A9     598            mov     (_main_sloc1_1_0 + 1),dph
0090 85F0AA     599            mov     (_main_sloc1_1_0 + 2),b
0093 F5AB       600            mov     (_main_sloc1_1_0 + 3),a
0095 75820C     601            mov     dpl,#0x0C
0098 120100     602            lcall   _Volts_at_Pin
009B 8582E8     603            mov     _main_sloc2_1_0,dpl
009E 8583E9     604            mov     (_main_sloc2_1_0 + 1),dph
00A1 85F0EA     605            mov     (_main_sloc2_1_0 + 2),b
00A4 F5EB       606            mov     (_main_sloc2_1_0 + 3),a
00A6 75820B     607            mov     dpl,#0x0B
00A9 120100     608            lcall   _Volts_at_Pin
00AC AA82       609            mov     r2,dpl
00AE AB83       610            mov     r3,dph
00B0 A8F0       611            mov     r0,b
00B2 F9         612            mov     r1,a
00B3 D007       613            pop     ar7
00B5 D006       614            pop     ar6
00B7 D005       615            pop     ar5
00B9 D004       616            pop     ar4
00BB C068       617            push    _main_sloc0_1_0
00BD C069       618            push    (_main_sloc0_1_0 + 1)
00BF C004       619            push    ar4
00C1 C005       620            push    ar5
00C3 C006       621            push    ar6
00C5 C007       622            push    ar7
00C7 C0A8       623            push    _main_sloc1_1_0
00C9 C0A9       624            push    (_main_sloc1_1_0 + 1)
00CB C0AA       625            push    (_main_sloc1_1_0 + 2)
00CD C0AB       626            push    (_main_sloc1_1_0 + 3)
00CF C0E8       627            push    _main_sloc2_1_0
00D1 C0E9       628            push    (_main_sloc2_1_0 + 1)
00D3 C0EA       629            push    (_main_sloc2_1_0 + 2)
00D5 C0EB       630            push    (_main_sloc2_1_0 + 3)
00D7 C002       631            push    ar2
00D9 C003       632            push    ar3
00DB C000       633            push    ar0
00DD C001       634            push    ar1
00DF 7478       635            mov     a,#__str_1
00E1 C0E0       636            push    acc
00E3 749D       637            mov     a,#(__str_1 >> 8)
00E5 C0E0       638            push    acc
00E7 7480       639            mov     a,#0x80
00E9 C0E0       640            push    acc
00EB 120100     641            lcall   _printf
00EE E581       642            mov     a,sp
00F0 24EB       643            add     a,#0xeb
00F2 F581       644            mov     sp,a
00F4            645   ;        robot.c:62: switch (currentstate) {
00F4 AA18       646            mov     r2,_currentstate
00F6 BA01B8     647            cjne    r2,#0x01,L002063?
00F9 8001       648            sjmp    L002001?
00FB            649   L002063?:
00FB BA0238     650            cjne    r2,#0x02,L002064?
00FE 8001       651            sjmp    L002002?
0100            652   L002064?:
0100            653   ;        robot.c:63: case 1:
0100 BA03B8     654            cjne    r2,#0x03,L002004?
0103 8001       655            sjmp    L002003?
0105            656   L002001?:
0105            657   ;        robot.c:64: linetrack(0);       //forwards
0105 900000     658            mov     dptr,#0x0000
0108 120100     659            lcall   _linetrack
010B            660   ;        robot.c:66: v1 = Volts_at_Pin(LQFP32_MUX_P2_3);
010B 75820B     661            mov     dpl,#0x0B
010E 120100     662            lcall   _Volts_at_Pin
0111 8582E8     663            mov     _main_v1_1_57,dpl
0114 8583E9     664            mov     (_main_v1_1_57 + 1),dph
0117 85F0EA     665            mov     (_main_v1_1_57 + 2),b
011A F5EB       666            mov     (_main_v1_1_57 + 3),a
011C            667   ;        robot.c:67: v2 = Volts_at_Pin(LQFP32_MUX_P2_4);
011C 75820C     668            mov     dpl,#0x0C
011F 120100     669            lcall   _Volts_at_Pin
0122 858228     670            mov     _main_v2_1_57,dpl
0125 858329     671            mov     (_main_v2_1_57 + 1),dph
0128 85F02A     672            mov     (_main_v2_1_57 + 2),b
012B F52B       673            mov     (_main_v2_1_57 + 3),a
012D            674   ;        robot.c:68: break;
012D            675   ;        robot.c:69: case 2:
012D 8001       676            sjmp    L002004?
012F            677   L002002?:
012F            678   ;        robot.c:70: linetrack(1);       //backwards
012F 900001     679            mov     dptr,#0x0001
0132 120100     680            lcall   _linetrack
0135            681   ;        robot.c:72: v1 = Volts_at_Pin(LQFP32_MUX_P2_5);
0135 75820D     682            mov     dpl,#0x0D
0138 120100     683            lcall   _Volts_at_Pin
013B 8582E8     684            mov     _main_v1_1_57,dpl
013E 8583E9     685            mov     (_main_v1_1_57 + 1),dph
0141 85F0EA     686            mov     (_main_v1_1_57 + 2),b
0144 F5EB       687            mov     (_main_v1_1_57 + 3),a
0146            688   ;        robot.c:73: v2 = Volts_at_Pin(LQFP32_MUX_P2_6);
0146 75820E     689            mov     dpl,#0x0E
0149 120100     690            lcall   _Volts_at_Pin
014C 858228     691            mov     _main_v2_1_57,dpl
014F 858329     692            mov     (_main_v2_1_57 + 1),dph
0152 85F02A     693            mov     (_main_v2_1_57 + 2),b
0155 F52B       694            mov     (_main_v2_1_57 + 3),a
0157            695   ;        robot.c:74: break;
0157            696   ;        robot.c:75: case 3:
0157 8001       697            sjmp    L002004?
0159            698   L002003?:
0159            699   ;        robot.c:76: stopcar();          //stop car
0159 120100     700            lcall   _stopcar
015C            701   ;        robot.c:78: }
015C            702   L002004?:
015C            703   ;        robot.c:81: switch (currentcmd) {
015C E558       704            mov     a,_currentcmd
015E FA         705            mov     r2,a
015F 30E738     706            jnb     acc.7,L002066?
0162 020100     707            ljmp    L002030?
0165            708   L002066?:
0165 C3         709            clr     c
0166 7486       710            mov     a,#(0x06 ^ 0x80)
0168 8AF0       711            mov     b,r2
016A 63F080     712            xrl     b,#0x80
016D 95F0       713            subb    a,b
016F 5001       714            jnc     L002067?
0171 020100     715            ljmp    L002030?
0174            716   L002067?:
0174 EA         717            mov     a,r2
0175 2A         718            add     a,r2
0176 2A         719            add     a,r2
0177 90A000     720            mov     dptr,#L002068?
017A 73         721            jmp     @a+dptr
017B            722   L002068?:
017B 020100     723            ljmp    L002005?
017E 020100     724            ljmp    L002018?
0181 020100     725            ljmp    L002022?
0184 020100     726            ljmp    L002026?
0187 020100     727            ljmp    L002027?
018A 020100     728            ljmp    L002028?
018D 020100     729            ljmp    L002029?
0190            730   ;        robot.c:83: case 0 :
0190            731   L002005?:
0190            732   ;        robot.c:85: if ((currentstate-1)? (v1 > 1.2 && v2 > 1.2):(v1 > 0.7 && v2 > 1)) {
0190 AA18       733            mov     r2,_currentstate
0192 E518       734            mov     a,_currentstate
0194 33         735            rlc     a
0195 95E0       736            subb    a,acc
0197 FB         737            mov     r3,a
0198 1A         738            dec     r2
0199 BAFF00     739            cjne    r2,#0xff,L002069?
019C 1B         740            dec     r3
019D            741   L002069?:
019D EA         742            mov     a,r2
019E 4B         743            orl     a,r3
019F 6001       744            jz      L002037?
01A1 749A       745            mov     a,#0x9A
01A3 C0E0       746            push    acc
01A5 7499       747            mov     a,#0x99
01A7 C0E0       748            push    acc
01A9 C0E0       749            push    acc
01AB 743F       750            mov     a,#0x3F
01AD C0E0       751            push    acc
01AF 85E882     752            mov     dpl,_main_v1_1_57
01B2 85E983     753            mov     dph,(_main_v1_1_57 + 1)
01B5 85EAF0     754            mov     b,(_main_v1_1_57 + 2)
01B8 E5EB       755            mov     a,(_main_v1_1_57 + 3)
01BA 120100     756            lcall   ___fsgt
01BD AA82       757            mov     r2,dpl
01BF E581       758            mov     a,sp
01C1 24FC       759            add     a,#0xfc
01C3 F581       760            mov     sp,a
01C5 EA         761            mov     a,r2
01C6 6001       762            jz      L002039?
01C8 749A       763            mov     a,#0x9A
01CA C0E0       764            push    acc
01CC 7499       765            mov     a,#0x99
01CE C0E0       766            push    acc
01D0 C0E0       767            push    acc
01D2 743F       768            mov     a,#0x3F
01D4 C0E0       769            push    acc
01D6 852882     770            mov     dpl,_main_v2_1_57
01D9 852983     771            mov     dph,(_main_v2_1_57 + 1)
01DC 852AF0     772            mov     b,(_main_v2_1_57 + 2)
01DF E52B       773            mov     a,(_main_v2_1_57 + 3)
01E1 120100     774            lcall   ___fsgt
01E4 AA82       775            mov     r2,dpl
01E6 E581       776            mov     a,sp
01E8 24FC       777            add     a,#0xfc
01EA F581       778            mov     sp,a
01EC EA         779            mov     a,r2
01ED 7001       780            jnz     L002040?
01EF            781   L002039?:
01EF 7A00       782            mov     r2,#0x00
01F1 8001       783            sjmp    L002041?
01F3            784   L002040?:
01F3 7A01       785            mov     r2,#0x01
01F5            786   L002041?:
01F5 EA         787            mov     a,r2
01F6 24FF       788            add     a,#0xff
01F8 9298       789            mov     _main_sloc3_1_0,c
01FA 8001       790            sjmp    L002038?
01FC            791   L002037?:
01FC 7433       792            mov     a,#0x33
01FE C0E0       793            push    acc
0200 C0E0       794            push    acc
0202 C0E0       795            push    acc
0204 743F       796            mov     a,#0x3F
0206 C0E0       797            push    acc
0208 85E882     798            mov     dpl,_main_v1_1_57
020B 85E983     799            mov     dph,(_main_v1_1_57 + 1)
020E 85EAF0     800            mov     b,(_main_v1_1_57 + 2)
0211 E5EB       801            mov     a,(_main_v1_1_57 + 3)
0213 120100     802            lcall   ___fsgt
0216 AA82       803            mov     r2,dpl
0218 E581       804            mov     a,sp
021A 24FC       805            add     a,#0xfc
021C F581       806            mov     sp,a
021E EA         807            mov     a,r2
021F 6001       808            jz      L002042?
0221 E4         809            clr     a
0222 C0E0       810            push    acc
0224 C0E0       811            push    acc
0226 7480       812            mov     a,#0x80
0228 C0E0       813            push    acc
022A 743F       814            mov     a,#0x3F
022C C0E0       815            push    acc
022E 852882     816            mov     dpl,_main_v2_1_57
0231 852983     817            mov     dph,(_main_v2_1_57 + 1)
0234 852AF0     818            mov     b,(_main_v2_1_57 + 2)
0237 E52B       819            mov     a,(_main_v2_1_57 + 3)
0239 120100     820            lcall   ___fsgt
023C AA82       821            mov     r2,dpl
023E E581       822            mov     a,sp
0240 24FC       823            add     a,#0xfc
0242 F581       824            mov     sp,a
0244 EA         825            mov     a,r2
0245 7001       826            jnz     L002043?
0247            827   L002042?:
0247 7A00       828            mov     r2,#0x00
0249 8001       829            sjmp    L002044?
024B            830   L002043?:
024B 7A01       831            mov     r2,#0x01
024D            832   L002044?:
024D EA         833            mov     a,r2
024E 24FF       834            add     a,#0xff
0250 9298       835            mov     _main_sloc3_1_0,c
0252            836   L002038?:
0252 209880     837            jb      _main_sloc3_1_0,L002075?
0255 020100     838            ljmp    L002033?
0258            839   L002075?:
0258            840   ;        robot.c:86: printf("\nINTERSECTION\n");
0258 74C0       841            mov     a,#__str_2
025A C0E0       842            push    acc
025C 74A4       843            mov     a,#(__str_2 >> 8)
025E C0E0       844            push    acc
0260 7480       845            mov     a,#0x80
0262 C0E0       846            push    acc
0264 120100     847            lcall   _printf
0267 1581       848            dec     sp
0269 1581       849            dec     sp
026B 1581       850            dec     sp
026D            851   ;        robot.c:87: if (currentstate == 1) {
026D 7401       852            mov     a,#0x01
026F B51800     853            cjne    a,_currentstate,L002010?
0272            854   ;        robot.c:88: if (Volts_at_Pin(LQFP32_MUX_P2_5)>Volts_at_Pin(LQFP32_MUX_P2_6)) {
0272 75820D     855            mov     dpl,#0x0D
0275 120100     856            lcall   _Volts_at_Pin
0278 AA82       857            mov     r2,dpl
027A AB83       858            mov     r3,dph
027C ACF0       859            mov     r4,b
027E FD         860            mov     r5,a
027F 75820E     861            mov     dpl,#0x0E
0282 C002       862            push    ar2
0284 C003       863            push    ar3
0286 C004       864            push    ar4
0288 C005       865            push    ar5
028A 120100     866            lcall   _Volts_at_Pin
028D AE82       867            mov     r6,dpl
028F AF83       868            mov     r7,dph
0291 A8F0       869            mov     r0,b
0293 F9         870            mov     r1,a
0294 D005       871            pop     ar5
0296 D004       872            pop     ar4
0298 D003       873            pop     ar3
029A D002       874            pop     ar2
029C C006       875            push    ar6
029E C007       876            push    ar7
02A0 C000       877            push    ar0
02A2 C001       878            push    ar1
02A4 8A82       879            mov     dpl,r2
02A6 8B83       880            mov     dph,r3
02A8 8CF0       881            mov     b,r4
02AA ED         882            mov     a,r5
02AB 120100     883            lcall   ___fsgt
02AE AA82       884            mov     r2,dpl
02B0 E581       885            mov     a,sp
02B2 24FC       886            add     a,#0xfc
02B4 F581       887            mov     sp,a
02B6 EA         888            mov     a,r2
02B7 6001       889            jz      L002007?
02B9            890   ;        robot.c:89: pwm_Left1 = 50;
02B9 755832     891            mov     _pwm_Left1,#0x32
02BC            892   ;        robot.c:90: pwm_Left0 = -1;
02BC 7598FF     893            mov     _pwm_Left0,#0xFF
02BF            894   ;        robot.c:91: pwm_Right0 = 30;
02BF 75181E     895            mov     _pwm_Right0,#0x1E
02C2            896   ;        robot.c:92: pwm_Right1 = -1;
02C2 75D8FF     897            mov     _pwm_Right1,#0xFF
02C5 8001       898            sjmp    L002010?
02C7            899   L002007?:
02C7            900   ;        robot.c:95: pwm_Left1 = 30;
02C7 75581E     901            mov     _pwm_Left1,#0x1E
02CA            902   ;        robot.c:96: pwm_Left0 = -1;
02CA 7598FF     903            mov     _pwm_Left0,#0xFF
02CD            904   ;        robot.c:97: pwm_Right0 = 50;
02CD 751832     905            mov     _pwm_Right0,#0x32
02D0            906   ;        robot.c:98: pwm_Right1 = -1;
02D0 75D8FF     907            mov     _pwm_Right1,#0xFF
02D3            908   L002010?:
02D3            909   ;        robot.c:101: if (currentstate == 2) {
02D3 7402       910            mov     a,#0x02
02D5 B51880     911            cjne    a,_currentstate,L002015?
02D8            912   ;        robot.c:102: if (Volts_at_Pin(LQFP32_MUX_P2_3)>Volts_at_Pin(LQFP32_MUX_P2_4)) {
02D8 75820B     913            mov     dpl,#0x0B
02DB 120100     914            lcall   _Volts_at_Pin
02DE AA82       915            mov     r2,dpl
02E0 AB83       916            mov     r3,dph
02E2 ACF0       917            mov     r4,b
02E4 FD         918            mov     r5,a
02E5 75820C     919            mov     dpl,#0x0C
02E8 C002       920            push    ar2
02EA C003       921            push    ar3
02EC C004       922            push    ar4
02EE C005       923            push    ar5
02F0 120100     924            lcall   _Volts_at_Pin
02F3 AE82       925            mov     r6,dpl
02F5 AF83       926            mov     r7,dph
02F7 A8F0       927            mov     r0,b
02F9 F9         928            mov     r1,a
02FA D005       929            pop     ar5
02FC D004       930            pop     ar4
02FE D003       931            pop     ar3
0300 D002       932            pop     ar2
0302 C006       933            push    ar6
0304 C007       934            push    ar7
0306 C000       935            push    ar0
0308 C001       936            push    ar1
030A 8A82       937            mov     dpl,r2
030C 8B83       938            mov     dph,r3
030E 8CF0       939            mov     b,r4
0310 ED         940            mov     a,r5
0311 120100     941            lcall   ___fsgt
0314 AA82       942            mov     r2,dpl
0316 E581       943            mov     a,sp
0318 24FC       944            add     a,#0xfc
031A F581       945            mov     sp,a
031C EA         946            mov     a,r2
031D 6001       947            jz      L002012?
031F            948   ;        robot.c:103: pwm_Left0 = 50;
031F 759832     949            mov     _pwm_Left0,#0x32
0322            950   ;        robot.c:104: pwm_Left1 = -1;
0322 7558FF     951            mov     _pwm_Left1,#0xFF
0325            952   ;        robot.c:105: pwm_Right1 = 30;
0325 75D81E     953            mov     _pwm_Right1,#0x1E
0328            954   ;        robot.c:106: pwm_Right0 = -1;
0328 7518FF     955            mov     _pwm_Right0,#0xFF
032B 8001       956            sjmp    L002015?
032D            957   L002012?:
032D            958   ;        robot.c:109: pwm_Left0 = 30;
032D 75981E     959            mov     _pwm_Left0,#0x1E
0330            960   ;        robot.c:110: pwm_Left1 = -1;
0330 7558FF     961            mov     _pwm_Left1,#0xFF
0333            962   ;        robot.c:111: pwm_Right1 = 50;
0333 75D832     963            mov     _pwm_Right1,#0x32
0336            964   ;        robot.c:112: pwm_Right0 = -1;
0336 7518FF     965            mov     _pwm_Right0,#0xFF
0339            966   L002015?:
0339            967   ;        robot.c:115: waitms(1500);
0339 9005DC     968            mov     dptr,#0x05DC
033C 120100     969            lcall   _waitms
033F            970   ;        robot.c:117: break;
033F 020100     971            ljmp    L002033?
0342            972   ;        robot.c:119: case 1 :
0342            973   L002018?:
0342            974   ;        robot.c:121: if (v1 > 0.7 && v2 >1)  {
0342 7433       975            mov     a,#0x33
0344 C0E0       976            push    acc
0346 C0E0       977            push    acc
0348 C0E0       978            push    acc
034A 743F       979            mov     a,#0x3F
034C C0E0       980            push    acc
034E 85E882     981            mov     dpl,_main_v1_1_57
0351 85E983     982            mov     dph,(_main_v1_1_57 + 1)
0354 85EAF0     983            mov     b,(_main_v1_1_57 + 2)
0357 E5EB       984            mov     a,(_main_v1_1_57 + 3)
0359 120100     985            lcall   ___fsgt
035C AA82       986            mov     r2,dpl
035E E581       987            mov     a,sp
0360 24FC       988            add     a,#0xfc
0362 F581       989            mov     sp,a
0364 EA         990            mov     a,r2
0365 7001       991            jnz     L002082?
0367 020100     992            ljmp    L002033?
036A            993   L002082?:
036A E4         994            clr     a
036B C0E0       995            push    acc
036D C0E0       996            push    acc
036F 7480       997            mov     a,#0x80
0371 C0E0       998            push    acc
0373 743F       999            mov     a,#0x3F
0375 C0E0      1000            push    acc
0377 852882    1001            mov     dpl,_main_v2_1_57
037A 852983    1002            mov     dph,(_main_v2_1_57 + 1)
037D 852AF0    1003            mov     b,(_main_v2_1_57 + 2)
0380 E52B      1004            mov     a,(_main_v2_1_57 + 3)
0382 120100    1005            lcall   ___fsgt
0385 AA82      1006            mov     r2,dpl
0387 E581      1007            mov     a,sp
0389 24FC      1008            add     a,#0xfc
038B F581      1009            mov     sp,a
038D EA        1010            mov     a,r2
038E 7001      1011            jnz     L002083?
0390 020100    1012            ljmp    L002033?
0393           1013   L002083?:
0393           1014   ;        robot.c:122: printf("\n\r INTERSECTION\n");
0393 74C0      1015            mov     a,#__str_3
0395 C0E0      1016            push    acc
0397 74A6      1017            mov     a,#(__str_3 >> 8)
0399 C0E0      1018            push    acc
039B 7480      1019            mov     a,#0x80
039D C0E0      1020            push    acc
039F 120100    1021            lcall   _printf
03A2 1581      1022            dec     sp
03A4 1581      1023            dec     sp
03A6 1581      1024            dec     sp
03A8           1025   ;        robot.c:125: turncar(currentstate); //1 = forward left, 2 = backward left
03A8 AA18      1026            mov     r2,_currentstate
03AA E518      1027            mov     a,_currentstate
03AC 33        1028            rlc     a
03AD 95E0      1029            subb    a,acc
03AF FB        1030            mov     r3,a
03B0 8A82      1031            mov     dpl,r2
03B2 8B83      1032            mov     dph,r3
03B4 120100    1033            lcall   _turncar
03B7           1034   ;        robot.c:126: currentcmd = 0;
03B7 755800    1035            mov     _currentcmd,#0x00
03BA           1036   ;        robot.c:128: break;
03BA 020100    1037            ljmp    L002033?
03BD           1038   ;        robot.c:131: case 2 :
03BD           1039   L002022?:
03BD           1040   ;        robot.c:133: if (v1 > 0.7 && v2 >1) {
03BD 7433      1041            mov     a,#0x33
03BF C0E0      1042            push    acc
03C1 C0E0      1043            push    acc
03C3 C0E0      1044            push    acc
03C5 743F      1045            mov     a,#0x3F
03C7 C0E0      1046            push    acc
03C9 85E882    1047            mov     dpl,_main_v1_1_57
03CC 85E983    1048            mov     dph,(_main_v1_1_57 + 1)
03CF 85EAF0    1049            mov     b,(_main_v1_1_57 + 2)
03D2 E5EB      1050            mov     a,(_main_v1_1_57 + 3)
03D4 120100    1051            lcall   ___fsgt
03D7 AA82      1052            mov     r2,dpl
03D9 E581      1053            mov     a,sp
03DB 24FC      1054            add     a,#0xfc
03DD F581      1055            mov     sp,a
03DF EA        1056            mov     a,r2
03E0 7001      1057            jnz     L002084?
03E2 020100    1058            ljmp    L002033?
03E5           1059   L002084?:
03E5 E4        1060            clr     a
03E6 C0E0      1061            push    acc
03E8 C0E0      1062            push    acc
03EA 7480      1063            mov     a,#0x80
03EC C0E0      1064            push    acc
03EE 743F      1065            mov     a,#0x3F
03F0 C0E0      1066            push    acc
03F2 852882    1067            mov     dpl,_main_v2_1_57
03F5 852983    1068            mov     dph,(_main_v2_1_57 + 1)
03F8 852AF0    1069            mov     b,(_main_v2_1_57 + 2)
03FB E52B      1070            mov     a,(_main_v2_1_57 + 3)
03FD 120100    1071            lcall   ___fsgt
0400 AA82      1072            mov     r2,dpl
0402 E581      1073            mov     a,sp
0404 24FC      1074            add     a,#0xfc
0406 F581      1075            mov     sp,a
0408 EA        1076            mov     a,r2
0409 7001      1077            jnz     L002085?
040B 020100    1078            ljmp    L002033?
040E           1079   L002085?:
040E           1080   ;        robot.c:134: printf("\n\r INTERSECTION\n");
040E 74C0      1081            mov     a,#__str_3
0410 C0E0      1082            push    acc
0412 74A6      1083            mov     a,#(__str_3 >> 8)
0414 C0E0      1084            push    acc
0416 7480      1085            mov     a,#0x80
0418 C0E0      1086            push    acc
041A 120100    1087            lcall   _printf
041D 1581      1088            dec     sp
041F 1581      1089            dec     sp
0421 1581      1090            dec     sp
0423           1091   ;        robot.c:137: turncar(currentstate+2); //3 = forward right, 4 = backward right
0423 AA18      1092            mov     r2,_currentstate
0425 E518      1093            mov     a,_currentstate
0427 33        1094            rlc     a
0428 95E0      1095            subb    a,acc
042A FB        1096            mov     r3,a
042B 8A82      1097            mov     dpl,r2
042D 8B83      1098            mov     dph,r3
042F A3        1099            inc     dptr
0430 A3        1100            inc     dptr
0431 120100    1101            lcall   _turncar
0434           1102   ;        robot.c:138: currentcmd = 0;
0434 755800    1103            mov     _currentcmd,#0x00
0437           1104   ;        robot.c:140: break;
0437 020100    1105            ljmp    L002033?
043A           1106   ;        robot.c:143: case 3 :
043A           1107   L002026?:
043A           1108   ;        robot.c:145: currentstate = 1;
043A 751801    1109            mov     _currentstate,#0x01
043D           1110   ;        robot.c:146: currentcmd = 0;
043D 755800    1111            mov     _currentcmd,#0x00
0440           1112   ;        robot.c:147: break;
0440 020100    1113            ljmp    L002033?
0443           1114   ;        robot.c:150: case 4 :
0443           1115   L002027?:
0443           1116   ;        robot.c:152: currentstate = 2;
0443 751802    1117            mov     _currentstate,#0x02
0446           1118   ;        robot.c:153: currentcmd = 0;
0446 755800    1119            mov     _currentcmd,#0x00
0449           1120   ;        robot.c:154: break;
0449 020100    1121            ljmp    L002033?
044C           1122   ;        robot.c:157: case 5 :
044C           1123   L002028?:
044C           1124   ;        robot.c:159: currentstate = 3;
044C 751803    1125            mov     _currentstate,#0x03
044F           1126   ;        robot.c:160: currentcmd = 0;
044F 755800    1127            mov     _currentcmd,#0x00
0452           1128   ;        robot.c:161: break;
0452 020100    1129            ljmp    L002033?
0455           1130   ;        robot.c:164: case 6 :
0455           1131   L002029?:
0455           1132   ;        robot.c:165: uturn();
0455 120100    1133            lcall   _uturn
0458           1134   ;        robot.c:166: currentcmd = 0;
0458 755800    1135            mov     _currentcmd,#0x00
045B           1136   ;        robot.c:167: break;
045B 020100    1137            ljmp    L002033?
045E           1138   ;        robot.c:170: default: 
045E           1139   L002030?:
045E           1140   ;        robot.c:171: currentstate = 1;
045E 751801    1141            mov     _currentstate,#0x01
0461           1142   ;        robot.c:172: }
0461 020100    1143            ljmp    L002033?
0464           1144   ;------------------------------------------------------------
0464           1145   ;Allocation info for local variables in function 'Timer2_ISR'
0464           1146   ;------------------------------------------------------------
0464           1147   ;------------------------------------------------------------
0464           1148   ;        robot.c:176: void Timer2_ISR (void) interrupt 5 {
0464           1149   ;        -----------------------------------------
0464           1150   ;         function Timer2_ISR
0464           1151   ;        -----------------------------------------
0464           1152   _Timer2_ISR:
0464 C0E0      1153            push    acc
0466 C0F0      1154            push    b
0468 C0D0      1155            push    psw
046A 75D000    1156            mov     psw,#0x00
046D           1157   ;        robot.c:177: TF2H = 0; // Clear Timer2 interrupt flag
046D C2CF      1158            clr     _TF2H
046F           1159   ;        robot.c:179: pwm_count++;
046F 0558      1160            inc     _pwm_count
0471           1161   ;        robot.c:180: if(pwm_count>100) pwm_count=0;
0471 C3        1162            clr     c
0472 74E4      1163            mov     a,#(0x64 ^ 0x80)
0474 8558F0    1164            mov     b,_pwm_count
0477 63F080    1165            xrl     b,#0x80
047A 95F0      1166            subb    a,b
047C 5001      1167            jnc     L003002?
047E 755800    1168            mov     _pwm_count,#0x00
0481           1169   L003002?:
0481           1170   ;        robot.c:183: MOTOR_LEFT0 = pwm_count > pwm_Left0 ? 0 : 1; //p1.5
0481 C3        1171            clr     c
0482 E598      1172            mov     a,_pwm_Left0
0484 6480      1173            xrl     a,#0x80
0486 8558F0    1174            mov     b,_pwm_count
0489 63F080    1175            xrl     b,#0x80
048C 95F0      1176            subb    a,b
048E 92E8      1177            mov  _Timer2_ISR_sloc0_1_0,c
0490 B3        1178            cpl     c
0491 9295      1179            mov     _P1_5,c
0493           1180   ;        robot.c:184: MOTOR_LEFT1 = pwm_count > pwm_Left1 ? 0 : 1; //p1.6
0493 C3        1181            clr     c
0494 E558      1182            mov     a,_pwm_Left1
0496 6480      1183            xrl     a,#0x80
0498 8558F0    1184            mov     b,_pwm_count
049B 63F080    1185            xrl     b,#0x80
049E 95F0      1186            subb    a,b
04A0 92E8      1187            mov  _Timer2_ISR_sloc0_1_0,c
04A2 B3        1188            cpl     c
04A3 9296      1189            mov     _P1_6,c
04A5           1190   ;        robot.c:185: MOTOR_RIGHT0 = pwm_count > pwm_Right0 ? 0 : 1; //p2.0
04A5 C3        1191            clr     c
04A6 E518      1192            mov     a,_pwm_Right0
04A8 6480      1193            xrl     a,#0x80
04AA 8558F0    1194            mov     b,_pwm_count
04AD 63F080    1195            xrl     b,#0x80
04B0 95F0      1196            subb    a,b
04B2 92E8      1197            mov  _Timer2_ISR_sloc0_1_0,c
04B4 B3        1198            cpl     c
04B5 92A0      1199            mov     _P2_0,c
04B7           1200   ;        robot.c:186: MOTOR_RIGHT1 = pwm_count > pwm_Right1 ? 0 : 1; //p2.1
04B7 C3        1201            clr     c
04B8 E5D8      1202            mov     a,_pwm_Right1
04BA 6480      1203            xrl     a,#0x80
04BC 8558F0    1204            mov     b,_pwm_count
04BF 63F080    1205            xrl     b,#0x80
04C2 95F0      1206            subb    a,b
04C4 92E8      1207            mov  _Timer2_ISR_sloc0_1_0,c
04C6 B3        1208            cpl     c
04C7 92A1      1209            mov     _P2_1,c
04C9 D0D0      1210            pop     psw
04CB D0F0      1211            pop     b
04CD D0E0      1212            pop     acc
04CF 32        1213            reti
04D0           1214   ;        eliminated unneeded push/pop dpl
04D0           1215   ;        eliminated unneeded push/pop dph
04D0           1216   ;------------------------------------------------------------
04D0           1217   ;Allocation info for local variables in function 'forward_backward'
04D0           1218   ;------------------------------------------------------------
04D0           1219   ;direction                 Allocated to registers r2 
04D0           1220   ;------------------------------------------------------------
04D0           1221   ;        robot.c:193: void forward_backward(unsigned char direction) {
04D0           1222   ;        -----------------------------------------
04D0           1223   ;         function forward_backward
04D0           1224   ;        -----------------------------------------
04D0           1225   _forward_backward:
04D0           1226   ;        robot.c:194: if (direction == 0) { //p2.1,1.6 on
04D0 E582      1227            mov     a,dpl
04D2 FA        1228            mov     r2,a
04D3 7001      1229            jnz     L004004?
04D5           1230   ;        robot.c:195: pwm_Left0 = pwm_Right0 = -1;
04D5 7518FF    1231            mov     _pwm_Right0,#0xFF
04D8 7598FF    1232            mov     _pwm_Left0,#0xFF
04DB           1233   ;        robot.c:196: pwm_Left1 = pwm_Right1 = pwm_both;  //MOTOR_LEFT1 = MOTOR_RIGHT1 = pwm_both;
04DB 85D8D8    1234            mov     _pwm_Right1,_pwm_both
04DE 85D858    1235            mov     _pwm_Left1,_pwm_both
04E1 22        1236            ret
04E2           1237   L004004?:
04E2           1238   ;        robot.c:199: else if (direction == 1) { //p2.0,1.5 on
04E2 BA0140    1239            cjne    r2,#0x01,L004006?
04E5           1240   ;        robot.c:200: pwm_Left1 = pwm_Right1 = -1;
04E5 75D8FF    1241            mov     _pwm_Right1,#0xFF
04E8 7558FF    1242            mov     _pwm_Left1,#0xFF
04EB           1243   ;        robot.c:201: pwm_Left0 = pwm_Right0 = pwm_both; 
04EB 85D818    1244            mov     _pwm_Right0,_pwm_both
04EE 85D898    1245            mov     _pwm_Left0,_pwm_both
04F1           1246   L004006?:
04F1 22        1247            ret
04F2           1248   ;------------------------------------------------------------
04F2           1249   ;Allocation info for local variables in function 'readData'
04F2           1250   ;------------------------------------------------------------
04F2           1251   ;commandflag               Allocated to registers r2 r3 
04F2           1252   ;------------------------------------------------------------
04F2           1253   ;        robot.c:212: void readData (void) {
04F2           1254   ;        -----------------------------------------
04F2           1255   ;         function readData
04F2           1256   ;        -----------------------------------------
04F2           1257   _readData:
04F2           1258   ;        robot.c:213: int commandflag = 0;                                       //determines if there's a real command coming in or not
04F2 7A00      1259            mov     r2,#0x00
04F4 7B00      1260            mov     r3,#0x00
04F6           1261   ;        robot.c:216: if (COMMAND_PIN == 0) {                                    //0---
04F6 309080    1262            jnb     _P1_0,L005039?
04F9 020100    1263            ljmp    L005022?
04FC           1264   L005039?:
04FC           1265   ;        robot.c:217: waitms(CMDFRQ*1.5);
04FC 900069    1266            mov     dptr,#0x0069
04FF C002      1267            push    ar2
0501 C003      1268            push    ar3
0503 120100    1269            lcall   _waitms
0506 D003      1270            pop     ar3
0508 D002      1271            pop     ar2
050A           1272   ;        robot.c:218: if (COMMAND_PIN == 1) {                            //01--
050A 309000    1273            jnb     _P1_0,L005019?
050D           1274   ;        robot.c:219: waitms(CMDFRQ);
050D 900046    1275            mov     dptr,#0x0046
0510 C002      1276            push    ar2
0512 C003      1277            push    ar3
0514 120100    1278            lcall   _waitms
0517 D003      1279            pop     ar3
0519 D002      1280            pop     ar2
051B           1281   ;        robot.c:220: if (COMMAND_PIN == 0) {                    //010-
051B 209040    1282            jb      _P1_0,L005007?
051E           1283   ;        robot.c:221: waitms(CMDFRQ);
051E 900046    1284            mov     dptr,#0x0046
0521 C002      1285            push    ar2
0523 C003      1286            push    ar3
0525 120100    1287            lcall   _waitms
0528 D003      1288            pop     ar3
052A D002      1289            pop     ar2
052C           1290   ;        robot.c:222: if (COMMAND_PIN == 0)      currentcmd = 4;         //0100  
052C 209080    1291            jb      _P1_0,L005002?
052F 755804    1292            mov     _currentcmd,#0x04
0532 8001      1293            sjmp    L005022?
0534           1294   L005002?:
0534           1295   ;        robot.c:223: else                                       currentcmd = 5;         //0101
0534 755805    1296            mov     _currentcmd,#0x05
0537 8001      1297            sjmp    L005022?
0539           1298   L005007?:
0539           1299   ;        robot.c:226: waitms(CMDFRQ);
0539 900046    1300            mov     dptr,#0x0046
053C C002      1301            push    ar2
053E C003      1302            push    ar3
0540 120100    1303            lcall   _waitms
0543 D003      1304            pop     ar3
0545 D002      1305            pop     ar2
0547           1306   ;        robot.c:227: if (COMMAND_PIN == 0)      currentcmd = 6;         //0110
0547 2090C0    1307            jb      _P1_0,L005022?
054A 755806    1308            mov     _currentcmd,#0x06
054D 8001      1309            sjmp    L005022?
054F           1310   L005019?:
054F           1311   ;        robot.c:231: waitms(CMDFRQ);
054F 900046    1312            mov     dptr,#0x0046
0552 C002      1313            push    ar2
0554 C003      1314            push    ar3
0556 120100    1315            lcall   _waitms
0559 D003      1316            pop     ar3
055B D002      1317            pop     ar2
055D           1318   ;        robot.c:232: if (COMMAND_PIN == 1) {                    //001-
055D 3090C0    1319            jnb     _P1_0,L005016?
0560           1320   ;        robot.c:233: waitms(CMDFRQ);
0560 900046    1321            mov     dptr,#0x0046
0563 C002      1322            push    ar2
0565 C003      1323            push    ar3
0567 120100    1324            lcall   _waitms
056A D003      1325            pop     ar3
056C D002      1326            pop     ar2
056E           1327   ;        robot.c:234: if (COMMAND_PIN == 1)      currentcmd = 3;         //0011
056E 309000    1328            jnb     _P1_0,L005010?
0571 755803    1329            mov     _currentcmd,#0x03
0574 8001      1330            sjmp    L005022?
0576           1331   L005010?:
0576           1332   ;        robot.c:235: else                                       currentcmd = 2;         //0010
0576 755802    1333            mov     _currentcmd,#0x02
0579 8001      1334            sjmp    L005022?
057B           1335   L005016?:
057B           1336   ;        robot.c:238: waitms(CMDFRQ);
057B 900046    1337            mov     dptr,#0x0046
057E C002      1338            push    ar2
0580 C003      1339            push    ar3
0582 120100    1340            lcall   _waitms
0585 D003      1341            pop     ar3
0587 D002      1342            pop     ar2
0589           1343   ;        robot.c:239: if (COMMAND_PIN == 1)      currentcmd = 1; //0001
0589 309040    1344            jnb     _P1_0,L005013?
058C 755801    1345            mov     _currentcmd,#0x01
058F 8001      1346            sjmp    L005022?
0591           1347   L005013?:
0591           1348   ;        robot.c:241: commandflag = 1;
0591 7A01      1349            mov     r2,#0x01
0593 7B00      1350            mov     r3,#0x00
0595           1351   L005022?:
0595           1352   ;        robot.c:248: if (commandflag == 0)      {while (COMMAND_PIN == 0);} 
0595 EA        1353            mov     a,r2
0596 4B        1354            orl     a,r3
0597 7001      1355            jnz     L005028?
0599           1356   L005023?:
0599 3090C0    1357            jnb     _P1_0,L005023?
059C           1358   L005028?:
059C 22        1359            ret
059D           1360   ;------------------------------------------------------------
059D           1361   ;Allocation info for local variables in function 'linetrack'
059D           1362   ;------------------------------------------------------------
059D           1363   ;forwardbackward           Allocated with name '_linetrack_forwardbackward_1_87'
059D           1364   ;vleft                     Allocated with name '_linetrack_vleft_1_88'
059D           1365   ;vright                    Allocated with name '_linetrack_vright_1_88'
059D           1366   ;sloc0                     Allocated with name '_linetrack_sloc0_1_0'
059D           1367   ;------------------------------------------------------------
059D           1368   ;        robot.c:258: void linetrack (int forwardbackward) {
059D           1369   ;        -----------------------------------------
059D           1370   ;         function linetrack
059D           1371   ;        -----------------------------------------
059D           1372   _linetrack:
059D 858238    1373            mov     _linetrack_forwardbackward_1_87,dpl
05A0 858339    1374            mov     (_linetrack_forwardbackward_1_87 + 1),dph
05A3           1375   ;        robot.c:264: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
05A3 75820B    1376            mov     dpl,#0x0B
05A6 120100    1377            lcall   _Volts_at_Pin
05A9 858288    1378            mov     _linetrack_vleft_1_88,dpl
05AC 858389    1379            mov     (_linetrack_vleft_1_88 + 1),dph
05AF 85F08A    1380            mov     (_linetrack_vleft_1_88 + 2),b
05B2 F58B      1381            mov     (_linetrack_vleft_1_88 + 3),a
05B4           1382   ;        robot.c:265: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
05B4 75820C    1383            mov     dpl,#0x0C
05B7 120100    1384            lcall   _Volts_at_Pin
05BA 8582D8    1385            mov     _linetrack_vright_1_88,dpl
05BD 8583D9    1386            mov     (_linetrack_vright_1_88 + 1),dph
05C0 85F0DA    1387            mov     (_linetrack_vright_1_88 + 2),b
05C3 F5DB      1388            mov     (_linetrack_vright_1_88 + 3),a
05C5           1389   ;        robot.c:268: if (forwardbackward == 2) {
05C5 7402      1390            mov     a,#0x02
05C7 B53800    1391            cjne    a,_linetrack_forwardbackward_1_87,L006013?
05CA E4        1392            clr     a
05CB B53900    1393            cjne    a,(_linetrack_forwardbackward_1_87 + 1),L006013?
05CE 8001      1394            sjmp    L006014?
05D0           1395   L006013?:
05D0 8001      1396            sjmp    L006002?
05D2           1397   L006014?:
05D2           1398   ;        robot.c:269: vleft=Volts_at_Pin(LQFP32_MUX_P2_5);
05D2 75820D    1399            mov     dpl,#0x0D
05D5 120100    1400            lcall   _Volts_at_Pin
05D8 858288    1401            mov     _linetrack_vleft_1_88,dpl
05DB 858389    1402            mov     (_linetrack_vleft_1_88 + 1),dph
05DE 85F08A    1403            mov     (_linetrack_vleft_1_88 + 2),b
05E1 F58B      1404            mov     (_linetrack_vleft_1_88 + 3),a
05E3           1405   ;        robot.c:270: vright=Volts_at_Pin(LQFP32_MUX_P2_6);
05E3 75820E    1406            mov     dpl,#0x0E
05E6 120100    1407            lcall   _Volts_at_Pin
05E9 8582D8    1408            mov     _linetrack_vright_1_88,dpl
05EC 8583D9    1409            mov     (_linetrack_vright_1_88 + 1),dph
05EF 85F0DA    1410            mov     (_linetrack_vright_1_88 + 2),b
05F2 F5DB      1411            mov     (_linetrack_vright_1_88 + 3),a
05F4           1412   L006002?:
05F4           1413   ;        robot.c:274: pwm_Left0 = -1;
05F4 7598FF    1414            mov     _pwm_Left0,#0xFF
05F7           1415   ;        robot.c:275: pwm_Left1 = vright*vright*75/(vright*vright+vleft*vleft);
05F7 C0D8      1416            push    _linetrack_vright_1_88
05F9 C0D9      1417            push    (_linetrack_vright_1_88 + 1)
05FB C0DA      1418            push    (_linetrack_vright_1_88 + 2)
05FD C0DB      1419            push    (_linetrack_vright_1_88 + 3)
05FF 85D882    1420            mov     dpl,_linetrack_vright_1_88
0602 85D983    1421            mov     dph,(_linetrack_vright_1_88 + 1)
0605 85DAF0    1422            mov     b,(_linetrack_vright_1_88 + 2)
0608 E5DB      1423            mov     a,(_linetrack_vright_1_88 + 3)
060A 120100    1424            lcall   ___fsmul
060D AC82      1425            mov     r4,dpl
060F AD83      1426            mov     r5,dph
0611 AEF0      1427            mov     r6,b
0613 FF        1428            mov     r7,a
0614 E581      1429            mov     a,sp
0616 24FC      1430            add     a,#0xfc
0618 F581      1431            mov     sp,a
061A C004      1432            push    ar4
061C C005      1433            push    ar5
061E C006      1434            push    ar6
0620 C007      1435            push    ar7
0622 900000    1436            mov     dptr,#0x0000
0625 75F096    1437            mov     b,#0x96
0628 7442      1438            mov     a,#0x42
062A 120100    1439            lcall   ___fsmul
062D AC82      1440            mov     r4,dpl
062F AD83      1441            mov     r5,dph
0631 AEF0      1442            mov     r6,b
0633 FF        1443            mov     r7,a
0634 E581      1444            mov     a,sp
0636 24FC      1445            add     a,#0xfc
0638 F581      1446            mov     sp,a
063A C004      1447            push    ar4
063C C005      1448            push    ar5
063E C006      1449            push    ar6
0640 C007      1450            push    ar7
0642 C0D8      1451            push    _linetrack_vright_1_88
0644 C0D9      1452            push    (_linetrack_vright_1_88 + 1)
0646 C0DA      1453            push    (_linetrack_vright_1_88 + 2)
0648 C0DB      1454            push    (_linetrack_vright_1_88 + 3)
064A 85D882    1455            mov     dpl,_linetrack_vright_1_88
064D 85D983    1456            mov     dph,(_linetrack_vright_1_88 + 1)
0650 85DAF0    1457            mov     b,(_linetrack_vright_1_88 + 2)
0653 E5DB      1458            mov     a,(_linetrack_vright_1_88 + 3)
0655 120100    1459            lcall   ___fsmul
0658 858228    1460            mov     _linetrack_sloc0_1_0,dpl
065B 858329    1461            mov     (_linetrack_sloc0_1_0 + 1),dph
065E 85F02A    1462            mov     (_linetrack_sloc0_1_0 + 2),b
0661 F52B      1463            mov     (_linetrack_sloc0_1_0 + 3),a
0663 E581      1464            mov     a,sp
0665 24FC      1465            add     a,#0xfc
0667 F581      1466            mov     sp,a
0669 C088      1467            push    _linetrack_vleft_1_88
066B C089      1468            push    (_linetrack_vleft_1_88 + 1)
066D C08A      1469            push    (_linetrack_vleft_1_88 + 2)
066F C08B      1470            push    (_linetrack_vleft_1_88 + 3)
0671 858882    1471            mov     dpl,_linetrack_vleft_1_88
0674 858983    1472            mov     dph,(_linetrack_vleft_1_88 + 1)
0677 858AF0    1473            mov     b,(_linetrack_vleft_1_88 + 2)
067A E58B      1474            mov     a,(_linetrack_vleft_1_88 + 3)
067C 120100    1475            lcall   ___fsmul
067F AA82      1476            mov     r2,dpl
0681 AB83      1477            mov     r3,dph
0683 A8F0      1478            mov     r0,b
0685 F9        1479            mov     r1,a
0686 E581      1480            mov     a,sp
0688 24FC      1481            add     a,#0xfc
068A F581      1482            mov     sp,a
068C C002      1483            push    ar2
068E C003      1484            push    ar3
0690 C000      1485            push    ar0
0692 C001      1486            push    ar1
0694 852882    1487            mov     dpl,_linetrack_sloc0_1_0
0697 852983    1488            mov     dph,(_linetrack_sloc0_1_0 + 1)
069A 852AF0    1489            mov     b,(_linetrack_sloc0_1_0 + 2)
069D E52B      1490            mov     a,(_linetrack_sloc0_1_0 + 3)
069F 120100    1491            lcall   ___fsadd
06A2 AA82      1492            mov     r2,dpl
06A4 AB83      1493            mov     r3,dph
06A6 A8F0      1494            mov     r0,b
06A8 F9        1495            mov     r1,a
06A9 E581      1496            mov     a,sp
06AB 24FC      1497            add     a,#0xfc
06AD F581      1498            mov     sp,a
06AF D007      1499            pop     ar7
06B1 D006      1500            pop     ar6
06B3 D005      1501            pop     ar5
06B5 D004      1502            pop     ar4
06B7 C002      1503            push    ar2
06B9 C003      1504            push    ar3
06BB C000      1505            push    ar0
06BD C001      1506            push    ar1
06BF 8C82      1507            mov     dpl,r4
06C1 8D83      1508            mov     dph,r5
06C3 8EF0      1509            mov     b,r6
06C5 EF        1510            mov     a,r7
06C6 120100    1511            lcall   ___fsdiv
06C9 AA82      1512            mov     r2,dpl
06CB AB83      1513            mov     r3,dph
06CD ACF0      1514            mov     r4,b
06CF FD        1515            mov     r5,a
06D0 E581      1516            mov     a,sp
06D2 24FC      1517            add     a,#0xfc
06D4 F581      1518            mov     sp,a
06D6 8A82      1519            mov     dpl,r2
06D8 8B83      1520            mov     dph,r3
06DA 8CF0      1521            mov     b,r4
06DC ED        1522            mov     a,r5
06DD 120100    1523            lcall   ___fs2schar
06E0 858258    1524            mov     _pwm_Left1,dpl
06E3           1525   ;        robot.c:276: pwm_Right1 = -1;
06E3 75D8FF    1526            mov     _pwm_Right1,#0xFF
06E6           1527   ;        robot.c:277: pwm_Right0 = vleft*vleft*75/(vright*vright+vleft*vleft);
06E6 C088      1528            push    _linetrack_vleft_1_88
06E8 C089      1529            push    (_linetrack_vleft_1_88 + 1)
06EA C08A      1530            push    (_linetrack_vleft_1_88 + 2)
06EC C08B      1531            push    (_linetrack_vleft_1_88 + 3)
06EE 858882    1532            mov     dpl,_linetrack_vleft_1_88
06F1 858983    1533            mov     dph,(_linetrack_vleft_1_88 + 1)
06F4 858AF0    1534            mov     b,(_linetrack_vleft_1_88 + 2)
06F7 E58B      1535            mov     a,(_linetrack_vleft_1_88 + 3)
06F9 120100    1536            lcall   ___fsmul
06FC AA82      1537            mov     r2,dpl
06FE AB83      1538            mov     r3,dph
0700 ACF0      1539            mov     r4,b
0702 FD        1540            mov     r5,a
0703 E581      1541            mov     a,sp
0705 24FC      1542            add     a,#0xfc
0707 F581      1543            mov     sp,a
0709 C002      1544            push    ar2
070B C003      1545            push    ar3
070D C004      1546            push    ar4
070F C005      1547            push    ar5
0711 900000    1548            mov     dptr,#0x0000
0714 75F096    1549            mov     b,#0x96
0717 7442      1550            mov     a,#0x42
0719 120100    1551            lcall   ___fsmul
071C AA82      1552            mov     r2,dpl
071E AB83      1553            mov     r3,dph
0720 ACF0      1554            mov     r4,b
0722 FD        1555            mov     r5,a
0723 E581      1556            mov     a,sp
0725 24FC      1557            add     a,#0xfc
0727 F581      1558            mov     sp,a
0729 C002      1559            push    ar2
072B C003      1560            push    ar3
072D C004      1561            push    ar4
072F C005      1562            push    ar5
0731 C0D8      1563            push    _linetrack_vright_1_88
0733 C0D9      1564            push    (_linetrack_vright_1_88 + 1)
0735 C0DA      1565            push    (_linetrack_vright_1_88 + 2)
0737 C0DB      1566            push    (_linetrack_vright_1_88 + 3)
0739 85D882    1567            mov     dpl,_linetrack_vright_1_88
073C 85D983    1568            mov     dph,(_linetrack_vright_1_88 + 1)
073F 85DAF0    1569            mov     b,(_linetrack_vright_1_88 + 2)
0742 E5DB      1570            mov     a,(_linetrack_vright_1_88 + 3)
0744 120100    1571            lcall   ___fsmul
0747 858228    1572            mov     _linetrack_sloc0_1_0,dpl
074A 858329    1573            mov     (_linetrack_sloc0_1_0 + 1),dph
074D 85F02A    1574            mov     (_linetrack_sloc0_1_0 + 2),b
0750 F52B      1575            mov     (_linetrack_sloc0_1_0 + 3),a
0752 E581      1576            mov     a,sp
0754 24FC      1577            add     a,#0xfc
0756 F581      1578            mov     sp,a
0758 C088      1579            push    _linetrack_vleft_1_88
075A C089      1580            push    (_linetrack_vleft_1_88 + 1)
075C C08A      1581            push    (_linetrack_vleft_1_88 + 2)
075E C08B      1582            push    (_linetrack_vleft_1_88 + 3)
0760 858882    1583            mov     dpl,_linetrack_vleft_1_88
0763 858983    1584            mov     dph,(_linetrack_vleft_1_88 + 1)
0766 858AF0    1585            mov     b,(_linetrack_vleft_1_88 + 2)
0769 E58B      1586            mov     a,(_linetrack_vleft_1_88 + 3)
076B 120100    1587            lcall   ___fsmul
076E AE82      1588            mov     r6,dpl
0770 AF83      1589            mov     r7,dph
0772 A8F0      1590            mov     r0,b
0774 F9        1591            mov     r1,a
0775 E581      1592            mov     a,sp
0777 24FC      1593            add     a,#0xfc
0779 F581      1594            mov     sp,a
077B C006      1595            push    ar6
077D C007      1596            push    ar7
077F C000      1597            push    ar0
0781 C001      1598            push    ar1
0783 852882    1599            mov     dpl,_linetrack_sloc0_1_0
0786 852983    1600            mov     dph,(_linetrack_sloc0_1_0 + 1)
0789 852AF0    1601            mov     b,(_linetrack_sloc0_1_0 + 2)
078C E52B      1602            mov     a,(_linetrack_sloc0_1_0 + 3)
078E 120100    1603            lcall   ___fsadd
0791 AE82      1604            mov     r6,dpl
0793 AF83      1605            mov     r7,dph
0795 A8F0      1606            mov     r0,b
0797 F9        1607            mov     r1,a
0798 E581      1608            mov     a,sp
079A 24FC      1609            add     a,#0xfc
079C F581      1610            mov     sp,a
079E D005      1611            pop     ar5
07A0 D004      1612            pop     ar4
07A2 D003      1613            pop     ar3
07A4 D002      1614            pop     ar2
07A6 C006      1615            push    ar6
07A8 C007      1616            push    ar7
07AA C000      1617            push    ar0
07AC C001      1618            push    ar1
07AE 8A82      1619            mov     dpl,r2
07B0 8B83      1620            mov     dph,r3
07B2 8CF0      1621            mov     b,r4
07B4 ED        1622            mov     a,r5
07B5 120100    1623            lcall   ___fsdiv
07B8 AA82      1624            mov     r2,dpl
07BA AB83      1625            mov     r3,dph
07BC ACF0      1626            mov     r4,b
07BE FD        1627            mov     r5,a
07BF E581      1628            mov     a,sp
07C1 24FC      1629            add     a,#0xfc
07C3 F581      1630            mov     sp,a
07C5 8A82      1631            mov     dpl,r2
07C7 8B83      1632            mov     dph,r3
07C9 8CF0      1633            mov     b,r4
07CB ED        1634            mov     a,r5
07CC 120100    1635            lcall   ___fs2schar
07CF 858218    1636            mov     _pwm_Right0,dpl
07D2           1637   ;        robot.c:281: if ((forwardbackward == 1)||(forwardbackward == 3)) {
07D2 7401      1638            mov     a,#0x01
07D4 B538C0    1639            cjne    a,_linetrack_forwardbackward_1_87,L006015?
07D7 E4        1640            clr     a
07D8 B539C0    1641            cjne    a,(_linetrack_forwardbackward_1_87 + 1),L006015?
07DB 8001      1642            sjmp    L006005?
07DD           1643   L006015?:
07DD 7403      1644            mov     a,#0x03
07DF B53840    1645            cjne    a,_linetrack_forwardbackward_1_87,L006016?
07E2 E4        1646            clr     a
07E3 B53940    1647            cjne    a,(_linetrack_forwardbackward_1_87 + 1),L006016?
07E6 8001      1648            sjmp    L006017?
07E8           1649   L006016?:
07E8 22        1650            ret
07E9           1651   L006017?:
07E9           1652   L006005?:
07E9           1653   ;        robot.c:283: vleft=Volts_at_Pin(LQFP32_MUX_P2_5);
07E9 75820D    1654            mov     dpl,#0x0D
07EC 120100    1655            lcall   _Volts_at_Pin
07EF 858288    1656            mov     _linetrack_vleft_1_88,dpl
07F2 858389    1657            mov     (_linetrack_vleft_1_88 + 1),dph
07F5 85F08A    1658            mov     (_linetrack_vleft_1_88 + 2),b
07F8 F58B      1659            mov     (_linetrack_vleft_1_88 + 3),a
07FA           1660   ;        robot.c:284: vright=Volts_at_Pin(LQFP32_MUX_P2_6);
07FA 75820E    1661            mov     dpl,#0x0E
07FD 120100    1662            lcall   _Volts_at_Pin
0800 8582D8    1663            mov     _linetrack_vright_1_88,dpl
0803 8583D9    1664            mov     (_linetrack_vright_1_88 + 1),dph
0806 85F0DA    1665            mov     (_linetrack_vright_1_88 + 2),b
0809 F5DB      1666            mov     (_linetrack_vright_1_88 + 3),a
080B           1667   ;        robot.c:287: if (forwardbackward == 3) {
080B 7403      1668            mov     a,#0x03
080D B538C0    1669            cjne    a,_linetrack_forwardbackward_1_87,L006018?
0810 E4        1670            clr     a
0811 B539C0    1671            cjne    a,(_linetrack_forwardbackward_1_87 + 1),L006018?
0814 8001      1672            sjmp    L006019?
0816           1673   L006018?:
0816 8001      1674            sjmp    L006004?
0818           1675   L006019?:
0818           1676   ;        robot.c:288: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0818 75820B    1677            mov     dpl,#0x0B
081B 120100    1678            lcall   _Volts_at_Pin
081E 858288    1679            mov     _linetrack_vleft_1_88,dpl
0821 858389    1680            mov     (_linetrack_vleft_1_88 + 1),dph
0824 85F08A    1681            mov     (_linetrack_vleft_1_88 + 2),b
0827 F58B      1682            mov     (_linetrack_vleft_1_88 + 3),a
0829           1683   ;        robot.c:289: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0829 75820C    1684            mov     dpl,#0x0C
082C 120100    1685            lcall   _Volts_at_Pin
082F 8582D8    1686            mov     _linetrack_vright_1_88,dpl
0832 8583D9    1687            mov     (_linetrack_vright_1_88 + 1),dph
0835 85F0DA    1688            mov     (_linetrack_vright_1_88 + 2),b
0838 F5DB      1689            mov     (_linetrack_vright_1_88 + 3),a
083A           1690   L006004?:
083A           1691   ;        robot.c:293: pwm_Left1 = -1;
083A 7558FF    1692            mov     _pwm_Left1,#0xFF
083D           1693   ;        robot.c:294: pwm_Left0 = vright*vright*75/(vright*vright+vleft*vleft);
083D C0D8      1694            push    _linetrack_vright_1_88
083F C0D9      1695            push    (_linetrack_vright_1_88 + 1)
0841 C0DA      1696            push    (_linetrack_vright_1_88 + 2)
0843 C0DB      1697            push    (_linetrack_vright_1_88 + 3)
0845 85D882    1698            mov     dpl,_linetrack_vright_1_88
0848 85D983    1699            mov     dph,(_linetrack_vright_1_88 + 1)
084B 85DAF0    1700            mov     b,(_linetrack_vright_1_88 + 2)
084E E5DB      1701            mov     a,(_linetrack_vright_1_88 + 3)
0850 120100    1702            lcall   ___fsmul
0853 AA82      1703            mov     r2,dpl
0855 AB83      1704            mov     r3,dph
0857 ACF0      1705            mov     r4,b
0859 FD        1706            mov     r5,a
085A E581      1707            mov     a,sp
085C 24FC      1708            add     a,#0xfc
085E F581      1709            mov     sp,a
0860 C002      1710            push    ar2
0862 C003      1711            push    ar3
0864 C004      1712            push    ar4
0866 C005      1713            push    ar5
0868 900000    1714            mov     dptr,#0x0000
086B 75F096    1715            mov     b,#0x96
086E 7442      1716            mov     a,#0x42
0870 120100    1717            lcall   ___fsmul
0873 AA82      1718            mov     r2,dpl
0875 AB83      1719            mov     r3,dph
0877 ACF0      1720            mov     r4,b
0879 FD        1721            mov     r5,a
087A E581      1722            mov     a,sp
087C 24FC      1723            add     a,#0xfc
087E F581      1724            mov     sp,a
0880 C002      1725            push    ar2
0882 C003      1726            push    ar3
0884 C004      1727            push    ar4
0886 C005      1728            push    ar5
0888 C0D8      1729            push    _linetrack_vright_1_88
088A C0D9      1730            push    (_linetrack_vright_1_88 + 1)
088C C0DA      1731            push    (_linetrack_vright_1_88 + 2)
088E C0DB      1732            push    (_linetrack_vright_1_88 + 3)
0890 85D882    1733            mov     dpl,_linetrack_vright_1_88
0893 85D983    1734            mov     dph,(_linetrack_vright_1_88 + 1)
0896 85DAF0    1735            mov     b,(_linetrack_vright_1_88 + 2)
0899 E5DB      1736            mov     a,(_linetrack_vright_1_88 + 3)
089B 120100    1737            lcall   ___fsmul
089E 858228    1738            mov     _linetrack_sloc0_1_0,dpl
08A1 858329    1739            mov     (_linetrack_sloc0_1_0 + 1),dph
08A4 85F02A    1740            mov     (_linetrack_sloc0_1_0 + 2),b
08A7 F52B      1741            mov     (_linetrack_sloc0_1_0 + 3),a
08A9 E581      1742            mov     a,sp
08AB 24FC      1743            add     a,#0xfc
08AD F581      1744            mov     sp,a
08AF C088      1745            push    _linetrack_vleft_1_88
08B1 C089      1746            push    (_linetrack_vleft_1_88 + 1)
08B3 C08A      1747            push    (_linetrack_vleft_1_88 + 2)
08B5 C08B      1748            push    (_linetrack_vleft_1_88 + 3)
08B7 858882    1749            mov     dpl,_linetrack_vleft_1_88
08BA 858983    1750            mov     dph,(_linetrack_vleft_1_88 + 1)
08BD 858AF0    1751            mov     b,(_linetrack_vleft_1_88 + 2)
08C0 E58B      1752            mov     a,(_linetrack_vleft_1_88 + 3)
08C2 120100    1753            lcall   ___fsmul
08C5 AE82      1754            mov     r6,dpl
08C7 AF83      1755            mov     r7,dph
08C9 A8F0      1756            mov     r0,b
08CB F9        1757            mov     r1,a
08CC E581      1758            mov     a,sp
08CE 24FC      1759            add     a,#0xfc
08D0 F581      1760            mov     sp,a
08D2 C006      1761            push    ar6
08D4 C007      1762            push    ar7
08D6 C000      1763            push    ar0
08D8 C001      1764            push    ar1
08DA 852882    1765            mov     dpl,_linetrack_sloc0_1_0
08DD 852983    1766            mov     dph,(_linetrack_sloc0_1_0 + 1)
08E0 852AF0    1767            mov     b,(_linetrack_sloc0_1_0 + 2)
08E3 E52B      1768            mov     a,(_linetrack_sloc0_1_0 + 3)
08E5 120100    1769            lcall   ___fsadd
08E8 AE82      1770            mov     r6,dpl
08EA AF83      1771            mov     r7,dph
08EC A8F0      1772            mov     r0,b
08EE F9        1773            mov     r1,a
08EF E581      1774            mov     a,sp
08F1 24FC      1775            add     a,#0xfc
08F3 F581      1776            mov     sp,a
08F5 D005      1777            pop     ar5
08F7 D004      1778            pop     ar4
08F9 D003      1779            pop     ar3
08FB D002      1780            pop     ar2
08FD C006      1781            push    ar6
08FF C007      1782            push    ar7
0901 C000      1783            push    ar0
0903 C001      1784            push    ar1
0905 8A82      1785            mov     dpl,r2
0907 8B83      1786            mov     dph,r3
0909 8CF0      1787            mov     b,r4
090B ED        1788            mov     a,r5
090C 120100    1789            lcall   ___fsdiv
090F AA82      1790            mov     r2,dpl
0911 AB83      1791            mov     r3,dph
0913 ACF0      1792            mov     r4,b
0915 FD        1793            mov     r5,a
0916 E581      1794            mov     a,sp
0918 24FC      1795            add     a,#0xfc
091A F581      1796            mov     sp,a
091C 8A82      1797            mov     dpl,r2
091E 8B83      1798            mov     dph,r3
0920 8CF0      1799            mov     b,r4
0922 ED        1800            mov     a,r5
0923 120100    1801            lcall   ___fs2schar
0926 858298    1802            mov     _pwm_Left0,dpl
0929           1803   ;        robot.c:295: pwm_Right0 = -1;
0929 7518FF    1804            mov     _pwm_Right0,#0xFF
092C           1805   ;        robot.c:296: pwm_Right1 = vleft*vleft*75/(vright*vright+vleft*vleft);
092C C088      1806            push    _linetrack_vleft_1_88
092E C089      1807            push    (_linetrack_vleft_1_88 + 1)
0930 C08A      1808            push    (_linetrack_vleft_1_88 + 2)
0932 C08B      1809            push    (_linetrack_vleft_1_88 + 3)
0934 858882    1810            mov     dpl,_linetrack_vleft_1_88
0937 858983    1811            mov     dph,(_linetrack_vleft_1_88 + 1)
093A 858AF0    1812            mov     b,(_linetrack_vleft_1_88 + 2)
093D E58B      1813            mov     a,(_linetrack_vleft_1_88 + 3)
093F 120100    1814            lcall   ___fsmul
0942 AA82      1815            mov     r2,dpl
0944 AB83      1816            mov     r3,dph
0946 ACF0      1817            mov     r4,b
0948 FD        1818            mov     r5,a
0949 E581      1819            mov     a,sp
094B 24FC      1820            add     a,#0xfc
094D F581      1821            mov     sp,a
094F C002      1822            push    ar2
0951 C003      1823            push    ar3
0953 C004      1824            push    ar4
0955 C005      1825            push    ar5
0957 900000    1826            mov     dptr,#0x0000
095A 75F096    1827            mov     b,#0x96
095D 7442      1828            mov     a,#0x42
095F 120100    1829            lcall   ___fsmul
0962 AA82      1830            mov     r2,dpl
0964 AB83      1831            mov     r3,dph
0966 ACF0      1832            mov     r4,b
0968 FD        1833            mov     r5,a
0969 E581      1834            mov     a,sp
096B 24FC      1835            add     a,#0xfc
096D F581      1836            mov     sp,a
096F C002      1837            push    ar2
0971 C003      1838            push    ar3
0973 C004      1839            push    ar4
0975 C005      1840            push    ar5
0977 C0D8      1841            push    _linetrack_vright_1_88
0979 C0D9      1842            push    (_linetrack_vright_1_88 + 1)
097B C0DA      1843            push    (_linetrack_vright_1_88 + 2)
097D C0DB      1844            push    (_linetrack_vright_1_88 + 3)
097F 85D882    1845            mov     dpl,_linetrack_vright_1_88
0982 85D983    1846            mov     dph,(_linetrack_vright_1_88 + 1)
0985 85DAF0    1847            mov     b,(_linetrack_vright_1_88 + 2)
0988 E5DB      1848            mov     a,(_linetrack_vright_1_88 + 3)
098A 120100    1849            lcall   ___fsmul
098D 858228    1850            mov     _linetrack_sloc0_1_0,dpl
0990 858329    1851            mov     (_linetrack_sloc0_1_0 + 1),dph
0993 85F02A    1852            mov     (_linetrack_sloc0_1_0 + 2),b
0996 F52B      1853            mov     (_linetrack_sloc0_1_0 + 3),a
0998 E581      1854            mov     a,sp
099A 24FC      1855            add     a,#0xfc
099C F581      1856            mov     sp,a
099E C088      1857            push    _linetrack_vleft_1_88
09A0 C089      1858            push    (_linetrack_vleft_1_88 + 1)
09A2 C08A      1859            push    (_linetrack_vleft_1_88 + 2)
09A4 C08B      1860            push    (_linetrack_vleft_1_88 + 3)
09A6 858882    1861            mov     dpl,_linetrack_vleft_1_88
09A9 858983    1862            mov     dph,(_linetrack_vleft_1_88 + 1)
09AC 858AF0    1863            mov     b,(_linetrack_vleft_1_88 + 2)
09AF E58B      1864            mov     a,(_linetrack_vleft_1_88 + 3)
09B1 120100    1865            lcall   ___fsmul
09B4 AE82      1866            mov     r6,dpl
09B6 AF83      1867            mov     r7,dph
09B8 A8F0      1868            mov     r0,b
09BA F9        1869            mov     r1,a
09BB E581      1870            mov     a,sp
09BD 24FC      1871            add     a,#0xfc
09BF F581      1872            mov     sp,a
09C1 C006      1873            push    ar6
09C3 C007      1874            push    ar7
09C5 C000      1875            push    ar0
09C7 C001      1876            push    ar1
09C9 852882    1877            mov     dpl,_linetrack_sloc0_1_0
09CC 852983    1878            mov     dph,(_linetrack_sloc0_1_0 + 1)
09CF 852AF0    1879            mov     b,(_linetrack_sloc0_1_0 + 2)
09D2 E52B      1880            mov     a,(_linetrack_sloc0_1_0 + 3)
09D4 120100    1881            lcall   ___fsadd
09D7 AE82      1882            mov     r6,dpl
09D9 AF83      1883            mov     r7,dph
09DB A8F0      1884            mov     r0,b
09DD F9        1885            mov     r1,a
09DE E581      1886            mov     a,sp
09E0 24FC      1887            add     a,#0xfc
09E2 F581      1888            mov     sp,a
09E4 D005      1889            pop     ar5
09E6 D004      1890            pop     ar4
09E8 D003      1891            pop     ar3
09EA D002      1892            pop     ar2
09EC C006      1893            push    ar6
09EE C007      1894            push    ar7
09F0 C000      1895            push    ar0
09F2 C001      1896            push    ar1
09F4 8A82      1897            mov     dpl,r2
09F6 8B83      1898            mov     dph,r3
09F8 8CF0      1899            mov     b,r4
09FA ED        1900            mov     a,r5
09FB 120100    1901            lcall   ___fsdiv
09FE AA82      1902            mov     r2,dpl
0A00 AB83      1903            mov     r3,dph
0A02 ACF0      1904            mov     r4,b
0A04 FD        1905            mov     r5,a
0A05 E581      1906            mov     a,sp
0A07 24FC      1907            add     a,#0xfc
0A09 F581      1908            mov     sp,a
0A0B 8A82      1909            mov     dpl,r2
0A0D 8B83      1910            mov     dph,r3
0A0F 8CF0      1911            mov     b,r4
0A11 ED        1912            mov     a,r5
0A12 120100    1913            lcall   ___fs2schar
0A15 8582D8    1914            mov     _pwm_Right1,dpl
0A18 22        1915            ret
0A19           1916   ;------------------------------------------------------------
0A19           1917   ;Allocation info for local variables in function 'stopcar'
0A19           1918   ;------------------------------------------------------------
0A19           1919   ;------------------------------------------------------------
0A19           1920   ;        robot.c:308: void stopcar(void) {
0A19           1921   ;        -----------------------------------------
0A19           1922   ;         function stopcar
0A19           1923   ;        -----------------------------------------
0A19           1924   _stopcar:
0A19           1925   ;        robot.c:310: pwm_Left1 = -1;
0A19 7558FF    1926            mov     _pwm_Left1,#0xFF
0A1C           1927   ;        robot.c:311: pwm_Right1 = -1;
0A1C 75D8FF    1928            mov     _pwm_Right1,#0xFF
0A1F           1929   ;        robot.c:312: pwm_Left0 = -1;
0A1F 7598FF    1930            mov     _pwm_Left0,#0xFF
0A22           1931   ;        robot.c:313: pwm_Right0 = -1;
0A22 7518FF    1932            mov     _pwm_Right0,#0xFF
0A25 22        1933            ret
0A26           1934   ;------------------------------------------------------------
0A26           1935   ;Allocation info for local variables in function 'turncar'
0A26           1936   ;------------------------------------------------------------
0A26           1937   ;leftright                 Allocated to registers r2 r3 
0A26           1938   ;v                         Allocated with name '_turncar_v_1_95'
0A26           1939   ;direction                 Allocated with name '_turncar_direction_1_95'
0A26           1940   ;------------------------------------------------------------
0A26           1941   ;        robot.c:319: void turncar (int leftright) {
0A26           1942   ;        -----------------------------------------
0A26           1943   ;         function turncar
0A26           1944   ;        -----------------------------------------
0A26           1945   _turncar:
0A26 AA82      1946            mov     r2,dpl
0A28 AB83      1947            mov     r3,dph
0A2A           1948   ;        robot.c:326: pwm_Left0 = -1;
0A2A 7598FF    1949            mov     _pwm_Left0,#0xFF
0A2D           1950   ;        robot.c:327: pwm_Left1 = -1;
0A2D 7558FF    1951            mov     _pwm_Left1,#0xFF
0A30           1952   ;        robot.c:328: pwm_Right0 = -1;
0A30 7518FF    1953            mov     _pwm_Right0,#0xFF
0A33           1954   ;        robot.c:329: pwm_Right1 = -1;
0A33 75D8FF    1955            mov     _pwm_Right1,#0xFF
0A36           1956   ;        robot.c:331: direction = currentstate - 1;
0A36 E518      1957            mov     a,_currentstate
0A38 14        1958            dec     a
0A39 F5B8      1959            mov     _turncar_direction_1_95,a
0A3B           1960   ;        robot.c:334: if (leftright == 1) {
0A3B BA0180    1961            cjne    r2,#0x01,L008062?
0A3E BB0080    1962            cjne    r3,#0x00,L008062?
0A41 8001      1963            sjmp    L008063?
0A43           1964   L008062?:
0A43 020100    1965            ljmp    L008022?
0A46           1966   L008063?:
0A46           1967   ;        robot.c:336: pwm_Right0 = 100;
0A46 751864    1968            mov     _pwm_Right0,#0x64
0A49           1969   ;        robot.c:338: waitms(100);
0A49 900064    1970            mov     dptr,#0x0064
0A4C 120100    1971            lcall   _waitms
0A4F           1972   ;        robot.c:341: v= direction ? Volts_at_Pin(LQFP32_MUX_P2_4) : Volts_at_Pin(LQFP32_MUX_P2_6);
0A4F E5B8      1973            mov     a,_turncar_direction_1_95
0A51 6001      1974            jz      L008026?
0A53 75820C    1975            mov     dpl,#0x0C
0A56 120100    1976            lcall   _Volts_at_Pin
0A59 AC82      1977            mov     r4,dpl
0A5B AD83      1978            mov     r5,dph
0A5D AEF0      1979            mov     r6,b
0A5F FF        1980            mov     r7,a
0A60 8001      1981            sjmp    L008027?
0A62           1982   L008026?:
0A62 75820E    1983            mov     dpl,#0x0E
0A65 120100    1984            lcall   _Volts_at_Pin
0A68 AC82      1985            mov     r4,dpl
0A6A AD83      1986            mov     r5,dph
0A6C AEF0      1987            mov     r6,b
0A6E FF        1988            mov     r7,a
0A6F           1989   L008027?:
0A6F 8C68      1990            mov     _turncar_v_1_95,r4
0A71 8D69      1991            mov     (_turncar_v_1_95 + 1),r5
0A73 8E6A      1992            mov     (_turncar_v_1_95 + 2),r6
0A75 8F6B      1993            mov     (_turncar_v_1_95 + 3),r7
0A77           1994   ;        robot.c:343: while (v < 1.3) {
0A77           1995   L008001?:
0A77 7466      1996            mov     a,#0x66
0A79 C0E0      1997            push    acc
0A7B C0E0      1998            push    acc
0A7D 74A6      1999            mov     a,#0xA6
0A7F C0E0      2000            push    acc
0A81 743F      2001            mov     a,#0x3F
0A83 C0E0      2002            push    acc
0A85 856882    2003            mov     dpl,_turncar_v_1_95
0A88 856983    2004            mov     dph,(_turncar_v_1_95 + 1)
0A8B 856AF0    2005            mov     b,(_turncar_v_1_95 + 2)
0A8E E56B      2006            mov     a,(_turncar_v_1_95 + 3)
0A90 120100    2007            lcall   ___fslt
0A93 AC82      2008            mov     r4,dpl
0A95 E581      2009            mov     a,sp
0A97 24FC      2010            add     a,#0xfc
0A99 F581      2011            mov     sp,a
0A9B EC        2012            mov     a,r4
0A9C 6001      2013            jz      L008003?
0A9E           2014   ;        robot.c:345: v= direction ? Volts_at_Pin(LQFP32_MUX_P2_4) : Volts_at_Pin(LQFP32_MUX_P2_6);
0A9E E5B8      2015            mov     a,_turncar_direction_1_95
0AA0 6001      2016            jz      L008028?
0AA2 75820C    2017            mov     dpl,#0x0C
0AA5 120100    2018            lcall   _Volts_at_Pin
0AA8 AC82      2019            mov     r4,dpl
0AAA AD83      2020            mov     r5,dph
0AAC AEF0      2021            mov     r6,b
0AAE FF        2022            mov     r7,a
0AAF 8001      2023            sjmp    L008029?
0AB1           2024   L008028?:
0AB1 75820E    2025            mov     dpl,#0x0E
0AB4 120100    2026            lcall   _Volts_at_Pin
0AB7 AC82      2027            mov     r4,dpl
0AB9 AD83      2028            mov     r5,dph
0ABB AEF0      2029            mov     r6,b
0ABD FF        2030            mov     r7,a
0ABE           2031   L008029?:
0ABE 8C68      2032            mov     _turncar_v_1_95,r4
0AC0 8D69      2033            mov     (_turncar_v_1_95 + 1),r5
0AC2 8E6A      2034            mov     (_turncar_v_1_95 + 2),r6
0AC4 8F6B      2035            mov     (_turncar_v_1_95 + 3),r7
0AC6           2036   ;        robot.c:346: printf("Intersection voltage v = %f\r\n", v);
0AC6 C068      2037            push    _turncar_v_1_95
0AC8 C069      2038            push    (_turncar_v_1_95 + 1)
0ACA C06A      2039            push    (_turncar_v_1_95 + 2)
0ACC C06B      2040            push    (_turncar_v_1_95 + 3)
0ACE 7400      2041            mov     a,#__str_4
0AD0 C0E0      2042            push    acc
0AD2 74B1      2043            mov     a,#(__str_4 >> 8)
0AD4 C0E0      2044            push    acc
0AD6 7480      2045            mov     a,#0x80
0AD8 C0E0      2046            push    acc
0ADA 120100    2047            lcall   _printf
0ADD E581      2048            mov     a,sp
0ADF 24F9      2049            add     a,#0xf9
0AE1 F581      2050            mov     sp,a
0AE3 8001      2051            sjmp    L008001?
0AE5           2052   L008003?:
0AE5           2053   ;        robot.c:349: waitms(300);
0AE5 90012C    2054            mov     dptr,#0x012C
0AE8 120100    2055            lcall   _waitms
0AEB           2056   ;        robot.c:352: pwm_Right0 = -1; 
0AEB 7518FF    2057            mov     _pwm_Right0,#0xFF
0AEE           2058   ;        robot.c:353: pwm_Left0 = -1;            
0AEE 7598FF    2059            mov     _pwm_Left0,#0xFF
0AF1 22        2060            ret
0AF2           2061   L008022?:
0AF2           2062   ;        robot.c:357: else if (leftright == 3) {
0AF2 BA0340    2063            cjne    r2,#0x03,L008067?
0AF5 BB0040    2064            cjne    r3,#0x00,L008067?
0AF8 8001      2065            sjmp    L008068?
0AFA           2066   L008067?:
0AFA 020100    2067            ljmp    L008019?
0AFD           2068   L008068?:
0AFD           2069   ;        robot.c:359: pwm_Left1 = 75;
0AFD 75584B    2070            mov     _pwm_Left1,#0x4B
0B00           2071   ;        robot.c:361: waitms(200);
0B00 9000C8    2072            mov     dptr,#0x00C8
0B03 120100    2073            lcall   _waitms
0B06           2074   ;        robot.c:364: v= direction ? Volts_at_Pin(LQFP32_MUX_P2_3) : Volts_at_Pin(LQFP32_MUX_P2_5);
0B06 E5B8      2075            mov     a,_turncar_direction_1_95
0B08 6001      2076            jz      L008030?
0B0A 75820B    2077            mov     dpl,#0x0B
0B0D 120100    2078            lcall   _Volts_at_Pin
0B10 AC82      2079            mov     r4,dpl
0B12 AD83      2080            mov     r5,dph
0B14 AEF0      2081            mov     r6,b
0B16 FF        2082            mov     r7,a
0B17 8001      2083            sjmp    L008031?
0B19           2084   L008030?:
0B19 75820D    2085            mov     dpl,#0x0D
0B1C 120100    2086            lcall   _Volts_at_Pin
0B1F AC82      2087            mov     r4,dpl
0B21 AD83      2088            mov     r5,dph
0B23 AEF0      2089            mov     r6,b
0B25 FF        2090            mov     r7,a
0B26           2091   L008031?:
0B26 8C68      2092            mov     _turncar_v_1_95,r4
0B28 8D69      2093            mov     (_turncar_v_1_95 + 1),r5
0B2A 8E6A      2094            mov     (_turncar_v_1_95 + 2),r6
0B2C 8F6B      2095            mov     (_turncar_v_1_95 + 3),r7
0B2E           2096   ;        robot.c:366: while (v < 1.3) {
0B2E           2097   L008004?:
0B2E 7466      2098            mov     a,#0x66
0B30 C0E0      2099            push    acc
0B32 C0E0      2100            push    acc
0B34 74A6      2101            mov     a,#0xA6
0B36 C0E0      2102            push    acc
0B38 743F      2103            mov     a,#0x3F
0B3A C0E0      2104            push    acc
0B3C 856882    2105            mov     dpl,_turncar_v_1_95
0B3F 856983    2106            mov     dph,(_turncar_v_1_95 + 1)
0B42 856AF0    2107            mov     b,(_turncar_v_1_95 + 2)
0B45 E56B      2108            mov     a,(_turncar_v_1_95 + 3)
0B47 120100    2109            lcall   ___fslt
0B4A AC82      2110            mov     r4,dpl
0B4C E581      2111            mov     a,sp
0B4E 24FC      2112            add     a,#0xfc
0B50 F581      2113            mov     sp,a
0B52 EC        2114            mov     a,r4
0B53 6001      2115            jz      L008006?
0B55           2116   ;        robot.c:368: v= direction ? Volts_at_Pin(LQFP32_MUX_P2_3) : Volts_at_Pin(LQFP32_MUX_P2_5);
0B55 E5B8      2117            mov     a,_turncar_direction_1_95
0B57 6001      2118            jz      L008032?
0B59 75820B    2119            mov     dpl,#0x0B
0B5C 120100    2120            lcall   _Volts_at_Pin
0B5F AC82      2121            mov     r4,dpl
0B61 AD83      2122            mov     r5,dph
0B63 AEF0      2123            mov     r6,b
0B65 FF        2124            mov     r7,a
0B66 8001      2125            sjmp    L008033?
0B68           2126   L008032?:
0B68 75820D    2127            mov     dpl,#0x0D
0B6B 120100    2128            lcall   _Volts_at_Pin
0B6E AC82      2129            mov     r4,dpl
0B70 AD83      2130            mov     r5,dph
0B72 AEF0      2131            mov     r6,b
0B74 FF        2132            mov     r7,a
0B75           2133   L008033?:
0B75 8C68      2134            mov     _turncar_v_1_95,r4
0B77 8D69      2135            mov     (_turncar_v_1_95 + 1),r5
0B79 8E6A      2136            mov     (_turncar_v_1_95 + 2),r6
0B7B 8F6B      2137            mov     (_turncar_v_1_95 + 3),r7
0B7D           2138   ;        robot.c:369: printf("Intersection voltage v = %f\r\n", v);
0B7D C068      2139            push    _turncar_v_1_95
0B7F C069      2140            push    (_turncar_v_1_95 + 1)
0B81 C06A      2141            push    (_turncar_v_1_95 + 2)
0B83 C06B      2142            push    (_turncar_v_1_95 + 3)
0B85 7400      2143            mov     a,#__str_4
0B87 C0E0      2144            push    acc
0B89 74B1      2145            mov     a,#(__str_4 >> 8)
0B8B C0E0      2146            push    acc
0B8D 7480      2147            mov     a,#0x80
0B8F C0E0      2148            push    acc
0B91 120100    2149            lcall   _printf
0B94 E581      2150            mov     a,sp
0B96 24F9      2151            add     a,#0xf9
0B98 F581      2152            mov     sp,a
0B9A 8001      2153            sjmp    L008004?
0B9C           2154   L008006?:
0B9C           2155   ;        robot.c:375: pwm_Left1 = -1; 
0B9C 7558FF    2156            mov     _pwm_Left1,#0xFF
0B9F           2157   ;        robot.c:376: pwm_Right1 = -1; 
0B9F 75D8FF    2158            mov     _pwm_Right1,#0xFF
0BA2 22        2159            ret
0BA3           2160   L008019?:
0BA3           2161   ;        robot.c:378: else if (leftright == 2) {
0BA3 BA0280    2162            cjne    r2,#0x02,L008072?
0BA6 BB0080    2163            cjne    r3,#0x00,L008072?
0BA9 8001      2164            sjmp    L008073?
0BAB           2165   L008072?:
0BAB 020100    2166            ljmp    L008016?
0BAE           2167   L008073?:
0BAE           2168   ;        robot.c:380: pwm_Right1 = 100;
0BAE 75D864    2169            mov     _pwm_Right1,#0x64
0BB1           2170   ;        robot.c:382: waitms(100);
0BB1 900064    2171            mov     dptr,#0x0064
0BB4 120100    2172            lcall   _waitms
0BB7           2173   ;        robot.c:385: v= direction ? Volts_at_Pin(LQFP32_MUX_P2_4) : Volts_at_Pin(LQFP32_MUX_P2_6);
0BB7 E5B8      2174            mov     a,_turncar_direction_1_95
0BB9 6001      2175            jz      L008034?
0BBB 75820C    2176            mov     dpl,#0x0C
0BBE 120100    2177            lcall   _Volts_at_Pin
0BC1 AC82      2178            mov     r4,dpl
0BC3 AD83      2179            mov     r5,dph
0BC5 AEF0      2180            mov     r6,b
0BC7 FF        2181            mov     r7,a
0BC8 8001      2182            sjmp    L008035?
0BCA           2183   L008034?:
0BCA 75820E    2184            mov     dpl,#0x0E
0BCD 120100    2185            lcall   _Volts_at_Pin
0BD0 AC82      2186            mov     r4,dpl
0BD2 AD83      2187            mov     r5,dph
0BD4 AEF0      2188            mov     r6,b
0BD6 FF        2189            mov     r7,a
0BD7           2190   L008035?:
0BD7 8C68      2191            mov     _turncar_v_1_95,r4
0BD9 8D69      2192            mov     (_turncar_v_1_95 + 1),r5
0BDB 8E6A      2193            mov     (_turncar_v_1_95 + 2),r6
0BDD 8F6B      2194            mov     (_turncar_v_1_95 + 3),r7
0BDF           2195   ;        robot.c:386: printf("Intersection voltage v = %f\r\n", v);
0BDF C068      2196            push    _turncar_v_1_95
0BE1 C069      2197            push    (_turncar_v_1_95 + 1)
0BE3 C06A      2198            push    (_turncar_v_1_95 + 2)
0BE5 C06B      2199            push    (_turncar_v_1_95 + 3)
0BE7 7400      2200            mov     a,#__str_4
0BE9 C0E0      2201            push    acc
0BEB 74B1      2202            mov     a,#(__str_4 >> 8)
0BED C0E0      2203            push    acc
0BEF 7480      2204            mov     a,#0x80
0BF1 C0E0      2205            push    acc
0BF3 120100    2206            lcall   _printf
0BF6 E581      2207            mov     a,sp
0BF8 24F9      2208            add     a,#0xf9
0BFA F581      2209            mov     sp,a
0BFC           2210   ;        robot.c:388: while (v < 1) {
0BFC           2211   L008007?:
0BFC E4        2212            clr     a
0BFD C0E0      2213            push    acc
0BFF C0E0      2214            push    acc
0C01 7480      2215            mov     a,#0x80
0C03 C0E0      2216            push    acc
0C05 743F      2217            mov     a,#0x3F
0C07 C0E0      2218            push    acc
0C09 856882    2219            mov     dpl,_turncar_v_1_95
0C0C 856983    2220            mov     dph,(_turncar_v_1_95 + 1)
0C0F 856AF0    2221            mov     b,(_turncar_v_1_95 + 2)
0C12 E56B      2222            mov     a,(_turncar_v_1_95 + 3)
0C14 120100    2223            lcall   ___fslt
0C17 AC82      2224            mov     r4,dpl
0C19 E581      2225            mov     a,sp
0C1B 24FC      2226            add     a,#0xfc
0C1D F581      2227            mov     sp,a
0C1F EC        2228            mov     a,r4
0C20 6001      2229            jz      L008009?
0C22           2230   ;        robot.c:390: v= direction ? Volts_at_Pin(LQFP32_MUX_P2_4) : Volts_at_Pin(LQFP32_MUX_P2_6);
0C22 E5B8      2231            mov     a,_turncar_direction_1_95
0C24 6001      2232            jz      L008036?
0C26 75820C    2233            mov     dpl,#0x0C
0C29 120100    2234            lcall   _Volts_at_Pin
0C2C AC82      2235            mov     r4,dpl
0C2E AD83      2236            mov     r5,dph
0C30 AEF0      2237            mov     r6,b
0C32 FF        2238            mov     r7,a
0C33 8001      2239            sjmp    L008037?
0C35           2240   L008036?:
0C35 75820E    2241            mov     dpl,#0x0E
0C38 120100    2242            lcall   _Volts_at_Pin
0C3B AC82      2243            mov     r4,dpl
0C3D AD83      2244            mov     r5,dph
0C3F AEF0      2245            mov     r6,b
0C41 FF        2246            mov     r7,a
0C42           2247   L008037?:
0C42 8C68      2248            mov     _turncar_v_1_95,r4
0C44 8D69      2249            mov     (_turncar_v_1_95 + 1),r5
0C46 8E6A      2250            mov     (_turncar_v_1_95 + 2),r6
0C48 8F6B      2251            mov     (_turncar_v_1_95 + 3),r7
0C4A           2252   ;        robot.c:391: printf("Intersection voltage v = %f\r\n", v);
0C4A C068      2253            push    _turncar_v_1_95
0C4C C069      2254            push    (_turncar_v_1_95 + 1)
0C4E C06A      2255            push    (_turncar_v_1_95 + 2)
0C50 C06B      2256            push    (_turncar_v_1_95 + 3)
0C52 7400      2257            mov     a,#__str_4
0C54 C0E0      2258            push    acc
0C56 74B1      2259            mov     a,#(__str_4 >> 8)
0C58 C0E0      2260            push    acc
0C5A 7480      2261            mov     a,#0x80
0C5C C0E0      2262            push    acc
0C5E 120100    2263            lcall   _printf
0C61 E581      2264            mov     a,sp
0C63 24F9      2265            add     a,#0xf9
0C65 F581      2266            mov     sp,a
0C67 8001      2267            sjmp    L008007?
0C69           2268   L008009?:
0C69           2269   ;        robot.c:394: waitms(300);
0C69 90012C    2270            mov     dptr,#0x012C
0C6C 120100    2271            lcall   _waitms
0C6F           2272   ;        robot.c:397: pwm_Right1 = -1; 
0C6F 75D8FF    2273            mov     _pwm_Right1,#0xFF
0C72 22        2274            ret
0C73           2275   L008016?:
0C73           2276   ;        robot.c:399: else if (leftright == 4) {
0C73 BA04C0    2277            cjne    r2,#0x04,L008077?
0C76 BB00C0    2278            cjne    r3,#0x00,L008077?
0C79 8001      2279            sjmp    L008078?
0C7B           2280   L008077?:
0C7B 22        2281            ret
0C7C           2282   L008078?:
0C7C           2283   ;        robot.c:401: pwm_Left0 = 75;
0C7C 75984B    2284            mov     _pwm_Left0,#0x4B
0C7F           2285   ;        robot.c:403: waitms(200);
0C7F 9000C8    2286            mov     dptr,#0x00C8
0C82 120100    2287            lcall   _waitms
0C85           2288   ;        robot.c:406: v= direction ? Volts_at_Pin(LQFP32_MUX_P2_3) : Volts_at_Pin(LQFP32_MUX_P2_5);
0C85 E5B8      2289            mov     a,_turncar_direction_1_95
0C87 6001      2290            jz      L008038?
0C89 75820B    2291            mov     dpl,#0x0B
0C8C 120100    2292            lcall   _Volts_at_Pin
0C8F AA82      2293            mov     r2,dpl
0C91 AB83      2294            mov     r3,dph
0C93 ACF0      2295            mov     r4,b
0C95 FD        2296            mov     r5,a
0C96 8001      2297            sjmp    L008039?
0C98           2298   L008038?:
0C98 75820D    2299            mov     dpl,#0x0D
0C9B 120100    2300            lcall   _Volts_at_Pin
0C9E AA82      2301            mov     r2,dpl
0CA0 AB83      2302            mov     r3,dph
0CA2 ACF0      2303            mov     r4,b
0CA4 FD        2304            mov     r5,a
0CA5           2305   L008039?:
0CA5 8A68      2306            mov     _turncar_v_1_95,r2
0CA7 8B69      2307            mov     (_turncar_v_1_95 + 1),r3
0CA9 8C6A      2308            mov     (_turncar_v_1_95 + 2),r4
0CAB 8D6B      2309            mov     (_turncar_v_1_95 + 3),r5
0CAD           2310   ;        robot.c:408: while (v < 0.9) {
0CAD           2311   L008010?:
0CAD 7466      2312            mov     a,#0x66
0CAF C0E0      2313            push    acc
0CB1 C0E0      2314            push    acc
0CB3 C0E0      2315            push    acc
0CB5 743F      2316            mov     a,#0x3F
0CB7 C0E0      2317            push    acc
0CB9 856882    2318            mov     dpl,_turncar_v_1_95
0CBC 856983    2319            mov     dph,(_turncar_v_1_95 + 1)
0CBF 856AF0    2320            mov     b,(_turncar_v_1_95 + 2)
0CC2 E56B      2321            mov     a,(_turncar_v_1_95 + 3)
0CC4 120100    2322            lcall   ___fslt
0CC7 AA82      2323            mov     r2,dpl
0CC9 E581      2324            mov     a,sp
0CCB 24FC      2325            add     a,#0xfc
0CCD F581      2326            mov     sp,a
0CCF EA        2327            mov     a,r2
0CD0 6001      2328            jz      L008012?
0CD2           2329   ;        robot.c:410: v= direction ? Volts_at_Pin(LQFP32_MUX_P2_3) : Volts_at_Pin(LQFP32_MUX_P2_5);
0CD2 E5B8      2330            mov     a,_turncar_direction_1_95
0CD4 6001      2331            jz      L008040?
0CD6 75820B    2332            mov     dpl,#0x0B
0CD9 120100    2333            lcall   _Volts_at_Pin
0CDC AA82      2334            mov     r2,dpl
0CDE AB83      2335            mov     r3,dph
0CE0 ACF0      2336            mov     r4,b
0CE2 FD        2337            mov     r5,a
0CE3 8001      2338            sjmp    L008041?
0CE5           2339   L008040?:
0CE5 75820D    2340            mov     dpl,#0x0D
0CE8 120100    2341            lcall   _Volts_at_Pin
0CEB AA82      2342            mov     r2,dpl
0CED AB83      2343            mov     r3,dph
0CEF ACF0      2344            mov     r4,b
0CF1 FD        2345            mov     r5,a
0CF2           2346   L008041?:
0CF2 8A68      2347            mov     _turncar_v_1_95,r2
0CF4 8B69      2348            mov     (_turncar_v_1_95 + 1),r3
0CF6 8C6A      2349            mov     (_turncar_v_1_95 + 2),r4
0CF8 8D6B      2350            mov     (_turncar_v_1_95 + 3),r5
0CFA           2351   ;        robot.c:411: printf("Intersection voltage v = %f\r\n", v);
0CFA C068      2352            push    _turncar_v_1_95
0CFC C069      2353            push    (_turncar_v_1_95 + 1)
0CFE C06A      2354            push    (_turncar_v_1_95 + 2)
0D00 C06B      2355            push    (_turncar_v_1_95 + 3)
0D02 7400      2356            mov     a,#__str_4
0D04 C0E0      2357            push    acc
0D06 74B1      2358            mov     a,#(__str_4 >> 8)
0D08 C0E0      2359            push    acc
0D0A 7480      2360            mov     a,#0x80
0D0C C0E0      2361            push    acc
0D0E 120100    2362            lcall   _printf
0D11 E581      2363            mov     a,sp
0D13 24F9      2364            add     a,#0xf9
0D15 F581      2365            mov     sp,a
0D17 8001      2366            sjmp    L008010?
0D19           2367   L008012?:
0D19           2368   ;        robot.c:417: pwm_Left0 = -1; 
0D19 7598FF    2369            mov     _pwm_Left0,#0xFF
0D1C 22        2370            ret
0D1D           2371   ;------------------------------------------------------------
0D1D           2372   ;Allocation info for local variables in function 'uturn'
0D1D           2373   ;------------------------------------------------------------
0D1D           2374   ;vleft                     Allocated with name '_uturn_vleft_1_105'
0D1D           2375   ;vright                    Allocated with name '_uturn_vright_1_105'
0D1D           2376   ;------------------------------------------------------------
0D1D           2377   ;        robot.c:426: void uturn(void) {
0D1D           2378   ;        -----------------------------------------
0D1D           2379   ;         function uturn
0D1D           2380   ;        -----------------------------------------
0D1D           2381   _uturn:
0D1D           2382   ;        robot.c:430: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0D1D 75820B    2383            mov     dpl,#0x0B
0D20 120100    2384            lcall   _Volts_at_Pin
0D23 858208    2385            mov     _uturn_vleft_1_105,dpl
0D26 858309    2386            mov     (_uturn_vleft_1_105 + 1),dph
0D29 85F00A    2387            mov     (_uturn_vleft_1_105 + 2),b
0D2C F50B      2388            mov     (_uturn_vleft_1_105 + 3),a
0D2E           2389   ;        robot.c:431: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0D2E 75820C    2390            mov     dpl,#0x0C
0D31 120100    2391            lcall   _Volts_at_Pin
0D34 858258    2392            mov     _uturn_vright_1_105,dpl
0D37 858359    2393            mov     (_uturn_vright_1_105 + 1),dph
0D3A 85F05A    2394            mov     (_uturn_vright_1_105 + 2),b
0D3D F55B      2395            mov     (_uturn_vright_1_105 + 3),a
0D3F           2396   ;        robot.c:434: pwm_Left0 = -1;
0D3F 7598FF    2397            mov     _pwm_Left0,#0xFF
0D42           2398   ;        robot.c:435: pwm_Left1 = 50;
0D42 755832    2399            mov     _pwm_Left1,#0x32
0D45           2400   ;        robot.c:436: pwm_Right0 = -1;
0D45 7518FF    2401            mov     _pwm_Right0,#0xFF
0D48           2402   ;        robot.c:437: pwm_Right1 = 50;
0D48 75D832    2403            mov     _pwm_Right1,#0x32
0D4B           2404   ;        robot.c:440: waitms(4000);
0D4B 900FA0    2405            mov     dptr,#0x0FA0
0D4E 120100    2406            lcall   _waitms
0D51           2407   ;        robot.c:443: while (((vleft - vright) > 0.2) || ((vleft - vright) < (-0.2))) {
0D51           2408   L009002?:
0D51 C058      2409            push    _uturn_vright_1_105
0D53 C059      2410            push    (_uturn_vright_1_105 + 1)
0D55 C05A      2411            push    (_uturn_vright_1_105 + 2)
0D57 C05B      2412            push    (_uturn_vright_1_105 + 3)
0D59 850882    2413            mov     dpl,_uturn_vleft_1_105
0D5C 850983    2414            mov     dph,(_uturn_vleft_1_105 + 1)
0D5F 850AF0    2415            mov     b,(_uturn_vleft_1_105 + 2)
0D62 E50B      2416            mov     a,(_uturn_vleft_1_105 + 3)
0D64 120100    2417            lcall   ___fssub
0D67 AA82      2418            mov     r2,dpl
0D69 AB83      2419            mov     r3,dph
0D6B ACF0      2420            mov     r4,b
0D6D FD        2421            mov     r5,a
0D6E E581      2422            mov     a,sp
0D70 24FC      2423            add     a,#0xfc
0D72 F581      2424            mov     sp,a
0D74 74CD      2425            mov     a,#0xCD
0D76 C0E0      2426            push    acc
0D78 74CC      2427            mov     a,#0xCC
0D7A C0E0      2428            push    acc
0D7C 744C      2429            mov     a,#0x4C
0D7E C0E0      2430            push    acc
0D80 743E      2431            mov     a,#0x3E
0D82 C0E0      2432            push    acc
0D84 8A82      2433            mov     dpl,r2
0D86 8B83      2434            mov     dph,r3
0D88 8CF0      2435            mov     b,r4
0D8A ED        2436            mov     a,r5
0D8B 120100    2437            lcall   ___fsgt
0D8E AA82      2438            mov     r2,dpl
0D90 E581      2439            mov     a,sp
0D92 24FC      2440            add     a,#0xfc
0D94 F581      2441            mov     sp,a
0D96 EA        2442            mov     a,r2
0D97 7001      2443            jnz     L009003?
0D99 C058      2444            push    _uturn_vright_1_105
0D9B C059      2445            push    (_uturn_vright_1_105 + 1)
0D9D C05A      2446            push    (_uturn_vright_1_105 + 2)
0D9F C05B      2447            push    (_uturn_vright_1_105 + 3)
0DA1 850882    2448            mov     dpl,_uturn_vleft_1_105
0DA4 850983    2449            mov     dph,(_uturn_vleft_1_105 + 1)
0DA7 850AF0    2450            mov     b,(_uturn_vleft_1_105 + 2)
0DAA E50B      2451            mov     a,(_uturn_vleft_1_105 + 3)
0DAC 120100    2452            lcall   ___fssub
0DAF AA82      2453            mov     r2,dpl
0DB1 AB83      2454            mov     r3,dph
0DB3 ACF0      2455            mov     r4,b
0DB5 FD        2456            mov     r5,a
0DB6 E581      2457            mov     a,sp
0DB8 24FC      2458            add     a,#0xfc
0DBA F581      2459            mov     sp,a
0DBC 74CD      2460            mov     a,#0xCD
0DBE C0E0      2461            push    acc
0DC0 74CC      2462            mov     a,#0xCC
0DC2 C0E0      2463            push    acc
0DC4 744C      2464            mov     a,#0x4C
0DC6 C0E0      2465            push    acc
0DC8 74BE      2466            mov     a,#0xBE
0DCA C0E0      2467            push    acc
0DCC 8A82      2468            mov     dpl,r2
0DCE 8B83      2469            mov     dph,r3
0DD0 8CF0      2470            mov     b,r4
0DD2 ED        2471            mov     a,r5
0DD3 120100    2472            lcall   ___fslt
0DD6 AA82      2473            mov     r2,dpl
0DD8 E581      2474            mov     a,sp
0DDA 24FC      2475            add     a,#0xfc
0DDC F581      2476            mov     sp,a
0DDE EA        2477            mov     a,r2
0DDF 6001      2478            jz      L009005?
0DE1           2479   L009003?:
0DE1           2480   ;        robot.c:445: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0DE1 75820B    2481            mov     dpl,#0x0B
0DE4 120100    2482            lcall   _Volts_at_Pin
0DE7 858208    2483            mov     _uturn_vleft_1_105,dpl
0DEA 858309    2484            mov     (_uturn_vleft_1_105 + 1),dph
0DED 85F00A    2485            mov     (_uturn_vleft_1_105 + 2),b
0DF0 F50B      2486            mov     (_uturn_vleft_1_105 + 3),a
0DF2           2487   ;        robot.c:446: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0DF2 75820C    2488            mov     dpl,#0x0C
0DF5 120100    2489            lcall   _Volts_at_Pin
0DF8 858258    2490            mov     _uturn_vright_1_105,dpl
0DFB 858359    2491            mov     (_uturn_vright_1_105 + 1),dph
0DFE 85F05A    2492            mov     (_uturn_vright_1_105 + 2),b
0E01 F55B      2493            mov     (_uturn_vright_1_105 + 3),a
0E03 020100    2494            ljmp    L009002?
0E06           2495   L009005?:
0E06 22        2496            ret
0E07           2497   ;------------------------------------------------------------
0E07           2498   ;Allocation info for local variables in function 'movecar'
0E07           2499   ;------------------------------------------------------------
0E07           2500   ;power                     Allocated with name '_movecar_PARM_2'
0E07           2501   ;forback                   Allocated to registers r2 r3 
0E07           2502   ;------------------------------------------------------------
0E07           2503   ;        robot.c:453: void movecar (int forback, int power) {
0E07           2504   ;        -----------------------------------------
0E07           2505   ;         function movecar
0E07           2506   ;        -----------------------------------------
0E07           2507   _movecar:
0E07 AA82      2508            mov     r2,dpl
0E09 AB83      2509            mov     r3,dph
0E0B           2510   ;        robot.c:455: if (forback == 1) {
0E0B BA01C0    2511            cjne    r2,#0x01,L010004?
0E0E BB00C0    2512            cjne    r3,#0x00,L010004?
0E11           2513   ;        robot.c:456: pwm_Left1 = power;
0E11 AC58      2514            mov     r4,_movecar_PARM_2
0E13 8C58      2515            mov     _pwm_Left1,r4
0E15           2516   ;        robot.c:457: pwm_Left0 = -1;
0E15 7598FF    2517            mov     _pwm_Left0,#0xFF
0E18           2518   ;        robot.c:458: pwm_Right0 = power;
0E18 8C18      2519            mov     _pwm_Right0,r4
0E1A           2520   ;        robot.c:459: pwm_Right1 = -1;
0E1A 75D8FF    2521            mov     _pwm_Right1,#0xFF
0E1D 22        2522            ret
0E1E           2523   L010004?:
0E1E           2524   ;        robot.c:461: else if (forback == 2) {
0E1E BA0200    2525            cjne    r2,#0x02,L010006?
0E21 BB0000    2526            cjne    r3,#0x00,L010006?
0E24           2527   ;        robot.c:462: pwm_Left0 = power;
0E24 AA58      2528            mov     r2,_movecar_PARM_2
0E26 8A98      2529            mov     _pwm_Left0,r2
0E28           2530   ;        robot.c:463: pwm_Left1 = -1;
0E28 7558FF    2531            mov     _pwm_Left1,#0xFF
0E2B           2532   ;        robot.c:464: pwm_Right1 = power;
0E2B 8AD8      2533            mov     _pwm_Right1,r2
0E2D           2534   ;        robot.c:465: pwm_Right0 = -1;
0E2D 7518FF    2535            mov     _pwm_Right0,#0xFF
0E30           2536   L010006?:
0E30 22        2537            ret
0E31           2538            rseg R_CSEG
0E31           2539   
0000           2540            rseg R_XINIT
0000           2541   
0000           2542            rseg R_CONST
0000           2543   __str_0:
0000 1B        2544            db 0x1B
0001 5B324A    2545            db '[2J'
0004 00        2546            db 0x00
0005           2547   __str_1:
0005 66726F6E  2548            db 'frontL %f frontR %f backL %f backR %f command %1d'
     744C2025
     66206672
     6F6E7452
     20256620
     6261636B
     4C202566
     20626163
     6B522025
     6620636F
     6D6D616E
     64202531
     64
0036 0D        2549            db 0x0D
0037 0A        2550            db 0x0A
0038 00        2551            db 0x00
0039           2552   __str_2:
0039 0A        2553            db 0x0A
003A 494E5445  2554            db 'INTERSECTION'
     52534543
     54494F4E
0046 0A        2555            db 0x0A
0047 00        2556            db 0x00
0048           2557   __str_3:
0048 0A        2558            db 0x0A
0049 0D        2559            db 0x0D
004A 20494E54  2560            db ' INTERSECTION'
     45525345
     4354494F
     4E
0057 0A        2561            db 0x0A
0058 00        2562            db 0x00
0059           2563   __str_4:
0059 496E7465  2564            db 'Intersection voltage v = %f'
     72736563
     74696F6E
     20766F6C
     74616765
     2076203D
     202566
0074 0D        2565            db 0x0D
0075 0A        2566            db 0x0A
0076 00        2567            db 0x00
0077           2568   
002E           2569            CSEG
002E           2570   
002E           2571   end
