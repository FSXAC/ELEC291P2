0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Mon Apr 03 16:15:17 2017
0000              5   ;--------------------------------------------------------
                  5   $name robot
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _Timer2_ISR
0000             28            public _main
0000             29            public _currentstate
0000             30            public _currentcmd
0000             31            public _direction
0000             32            public _pwm_Right1
0000             33            public _pwm_Right0
0000             34            public _pwm_Left1
0000             35            public _pwm_Left0
0000             36            public _pwm_both
0000             37            public _mode
0000             38            public _pwm_count
0000             39            public _readData
0000             40            public _linetrack
0000             41            public _stopcar
0000             42            public _turncar
0000             43            public _uturn
0000             44   ;--------------------------------------------------------
0000             45   ; Special Function Registers
0000             46   ;--------------------------------------------------------
0000             47   _P0             DATA 0x80
0000             48   _SP             DATA 0x81
0000             49   _DPL            DATA 0x82
0000             50   _DPH            DATA 0x83
0000             51   _EMI0TC         DATA 0x84
0000             52   _EMI0CF         DATA 0x85
0000             53   _OSCLCN         DATA 0x86
0000             54   _PCON           DATA 0x87
0000             55   _TCON           DATA 0x88
0000             56   _TMOD           DATA 0x89
0000             57   _TL0            DATA 0x8a
0000             58   _TL1            DATA 0x8b
0000             59   _TH0            DATA 0x8c
0000             60   _TH1            DATA 0x8d
0000             61   _CKCON          DATA 0x8e
0000             62   _PSCTL          DATA 0x8f
0000             63   _P1             DATA 0x90
0000             64   _TMR3CN         DATA 0x91
0000             65   _TMR4CN         DATA 0x91
0000             66   _TMR3RLL        DATA 0x92
0000             67   _TMR4RLL        DATA 0x92
0000             68   _TMR3RLH        DATA 0x93
0000             69   _TMR4RLH        DATA 0x93
0000             70   _TMR3L          DATA 0x94
0000             71   _TMR4L          DATA 0x94
0000             72   _TMR3H          DATA 0x95
0000             73   _TMR4H          DATA 0x95
0000             74   _USB0ADR        DATA 0x96
0000             75   _USB0DAT        DATA 0x97
0000             76   _SCON           DATA 0x98
0000             77   _SCON0          DATA 0x98
0000             78   _SBUF           DATA 0x99
0000             79   _SBUF0          DATA 0x99
0000             80   _CPT1CN         DATA 0x9a
0000             81   _CPT0CN         DATA 0x9b
0000             82   _CPT1MD         DATA 0x9c
0000             83   _CPT0MD         DATA 0x9d
0000             84   _CPT1MX         DATA 0x9e
0000             85   _CPT0MX         DATA 0x9f
0000             86   _P2             DATA 0xa0
0000             87   _SPI0CFG        DATA 0xa1
0000             88   _SPI0CKR        DATA 0xa2
0000             89   _SPI0DAT        DATA 0xa3
0000             90   _P0MDOUT        DATA 0xa4
0000             91   _P1MDOUT        DATA 0xa5
0000             92   _P2MDOUT        DATA 0xa6
0000             93   _P3MDOUT        DATA 0xa7
0000             94   _IE             DATA 0xa8
0000             95   _CLKSEL         DATA 0xa9
0000             96   _EMI0CN         DATA 0xaa
0000             97   __XPAGE         DATA 0xaa
0000             98   _SBCON1         DATA 0xac
0000             99   _P4MDOUT        DATA 0xae
0000            100   _PFE0CN         DATA 0xaf
0000            101   _P3             DATA 0xb0
0000            102   _OSCXCN         DATA 0xb1
0000            103   _OSCICN         DATA 0xb2
0000            104   _OSCICL         DATA 0xb3
0000            105   _SBRLL1         DATA 0xb4
0000            106   _SBRLH1         DATA 0xb5
0000            107   _FLSCL          DATA 0xb6
0000            108   _FLKEY          DATA 0xb7
0000            109   _IP             DATA 0xb8
0000            110   _CLKMUL         DATA 0xb9
0000            111   _SMBTC          DATA 0xb9
0000            112   _AMX0N          DATA 0xba
0000            113   _AMX0P          DATA 0xbb
0000            114   _ADC0CF         DATA 0xbc
0000            115   _ADC0L          DATA 0xbd
0000            116   _ADC0H          DATA 0xbe
0000            117   _SFRPAGE        DATA 0xbf
0000            118   _SMB0CN         DATA 0xc0
0000            119   _SMB1CN         DATA 0xc0
0000            120   _SMB0CF         DATA 0xc1
0000            121   _SMB1CF         DATA 0xc1
0000            122   _SMB0DAT        DATA 0xc2
0000            123   _SMB1DAT        DATA 0xc2
0000            124   _ADC0GTL        DATA 0xc3
0000            125   _ADC0GTH        DATA 0xc4
0000            126   _ADC0LTL        DATA 0xc5
0000            127   _ADC0LTH        DATA 0xc6
0000            128   _P4             DATA 0xc7
0000            129   _TMR2CN         DATA 0xc8
0000            130   _TMR5CN         DATA 0xc8
0000            131   _REG01CN        DATA 0xc9
0000            132   _TMR2RLL        DATA 0xca
0000            133   _TMR5RLL        DATA 0xca
0000            134   _TMR2RLH        DATA 0xcb
0000            135   _TMR5RLH        DATA 0xcb
0000            136   _TMR2L          DATA 0xcc
0000            137   _TMR5L          DATA 0xcc
0000            138   _TMR2H          DATA 0xcd
0000            139   _TMR5H          DATA 0xcd
0000            140   _SMB0ADM        DATA 0xce
0000            141   _SMB1ADM        DATA 0xce
0000            142   _SMB0ADR        DATA 0xcf
0000            143   _SMB1ADR        DATA 0xcf
0000            144   _PSW            DATA 0xd0
0000            145   _REF0CN         DATA 0xd1
0000            146   _SCON1          DATA 0xd2
0000            147   _SBUF1          DATA 0xd3
0000            148   _P0SKIP         DATA 0xd4
0000            149   _P1SKIP         DATA 0xd5
0000            150   _P2SKIP         DATA 0xd6
0000            151   _USB0XCN        DATA 0xd7
0000            152   _PCA0CN         DATA 0xd8
0000            153   _PCA0MD         DATA 0xd9
0000            154   _PCA0CPM0       DATA 0xda
0000            155   _PCA0CPM1       DATA 0xdb
0000            156   _PCA0CPM2       DATA 0xdc
0000            157   _PCA0CPM3       DATA 0xdd
0000            158   _PCA0CPM4       DATA 0xde
0000            159   _P3SKIP         DATA 0xdf
0000            160   _ACC            DATA 0xe0
0000            161   _XBR0           DATA 0xe1
0000            162   _XBR1           DATA 0xe2
0000            163   _XBR2           DATA 0xe3
0000            164   _IT01CF         DATA 0xe4
0000            165   _CKCON1         DATA 0xe4
0000            166   _SMOD1          DATA 0xe5
0000            167   _EIE1           DATA 0xe6
0000            168   _EIE2           DATA 0xe7
0000            169   _ADC0CN         DATA 0xe8
0000            170   _PCA0CPL1       DATA 0xe9
0000            171   _PCA0CPH1       DATA 0xea
0000            172   _PCA0CPL2       DATA 0xeb
0000            173   _PCA0CPH2       DATA 0xec
0000            174   _PCA0CPL3       DATA 0xed
0000            175   _PCA0CPH3       DATA 0xee
0000            176   _RSTSRC         DATA 0xef
0000            177   _B              DATA 0xf0
0000            178   _P0MDIN         DATA 0xf1
0000            179   _P1MDIN         DATA 0xf2
0000            180   _P2MDIN         DATA 0xf3
0000            181   _P3MDIN         DATA 0xf4
0000            182   _P4MDIN         DATA 0xf5
0000            183   _EIP1           DATA 0xf6
0000            184   _EIP2           DATA 0xf7
0000            185   _SPI0CN         DATA 0xf8
0000            186   _PCA0L          DATA 0xf9
0000            187   _PCA0H          DATA 0xfa
0000            188   _PCA0CPL0       DATA 0xfb
0000            189   _PCA0CPH0       DATA 0xfc
0000            190   _PCA0CPL4       DATA 0xfd
0000            191   _PCA0CPH4       DATA 0xfe
0000            192   _VDM0CN         DATA 0xff
0000            193   _DPTR           DATA 0x8382
0000            194   _TMR2RL         DATA 0xcbca
0000            195   _TMR3RL         DATA 0x9392
0000            196   _TMR4RL         DATA 0x9392
0000            197   _TMR5RL         DATA 0xcbca
0000            198   _TMR2           DATA 0xcdcc
0000            199   _TMR3           DATA 0x9594
0000            200   _TMR4           DATA 0x9594
0000            201   _TMR5           DATA 0xcdcc
0000            202   _SBRL1          DATA 0xb5b4
0000            203   _ADC0           DATA 0xbebd
0000            204   _ADC0GT         DATA 0xc4c3
0000            205   _ADC0LT         DATA 0xc6c5
0000            206   _PCA0           DATA 0xfaf9
0000            207   _PCA0CP1        DATA 0xeae9
0000            208   _PCA0CP2        DATA 0xeceb
0000            209   _PCA0CP3        DATA 0xeeed
0000            210   _PCA0CP0        DATA 0xfcfb
0000            211   _PCA0CP4        DATA 0xfefd
0000            212   ;--------------------------------------------------------
0000            213   ; special function bits
0000            214   ;--------------------------------------------------------
0000            215   _P0_0           BIT 0x80
0000            216   _P0_1           BIT 0x81
0000            217   _P0_2           BIT 0x82
0000            218   _P0_3           BIT 0x83
0000            219   _P0_4           BIT 0x84
0000            220   _P0_5           BIT 0x85
0000            221   _P0_6           BIT 0x86
0000            222   _P0_7           BIT 0x87
0000            223   _TF1            BIT 0x8f
0000            224   _TR1            BIT 0x8e
0000            225   _TF0            BIT 0x8d
0000            226   _TR0            BIT 0x8c
0000            227   _IE1            BIT 0x8b
0000            228   _IT1            BIT 0x8a
0000            229   _IE0            BIT 0x89
0000            230   _IT0            BIT 0x88
0000            231   _P1_0           BIT 0x90
0000            232   _P1_1           BIT 0x91
0000            233   _P1_2           BIT 0x92
0000            234   _P1_3           BIT 0x93
0000            235   _P1_4           BIT 0x94
0000            236   _P1_5           BIT 0x95
0000            237   _P1_6           BIT 0x96
0000            238   _P1_7           BIT 0x97
0000            239   _S0MODE         BIT 0x9f
0000            240   _SCON0_6        BIT 0x9e
0000            241   _MCE0           BIT 0x9d
0000            242   _REN0           BIT 0x9c
0000            243   _TB80           BIT 0x9b
0000            244   _RB80           BIT 0x9a
0000            245   _TI0            BIT 0x99
0000            246   _RI0            BIT 0x98
0000            247   _SCON_6         BIT 0x9e
0000            248   _MCE            BIT 0x9d
0000            249   _REN            BIT 0x9c
0000            250   _TB8            BIT 0x9b
0000            251   _RB8            BIT 0x9a
0000            252   _TI             BIT 0x99
0000            253   _RI             BIT 0x98
0000            254   _P2_0           BIT 0xa0
0000            255   _P2_1           BIT 0xa1
0000            256   _P2_2           BIT 0xa2
0000            257   _P2_3           BIT 0xa3
0000            258   _P2_4           BIT 0xa4
0000            259   _P2_5           BIT 0xa5
0000            260   _P2_6           BIT 0xa6
0000            261   _P2_7           BIT 0xa7
0000            262   _EA             BIT 0xaf
0000            263   _ESPI0          BIT 0xae
0000            264   _ET2            BIT 0xad
0000            265   _ES0            BIT 0xac
0000            266   _ET1            BIT 0xab
0000            267   _EX1            BIT 0xaa
0000            268   _ET0            BIT 0xa9
0000            269   _EX0            BIT 0xa8
0000            270   _P3_0           BIT 0xb0
0000            271   _P3_1           BIT 0xb1
0000            272   _P3_2           BIT 0xb2
0000            273   _P3_3           BIT 0xb3
0000            274   _P3_4           BIT 0xb4
0000            275   _P3_5           BIT 0xb5
0000            276   _P3_6           BIT 0xb6
0000            277   _P3_7           BIT 0xb7
0000            278   _IP_7           BIT 0xbf
0000            279   _PSPI0          BIT 0xbe
0000            280   _PT2            BIT 0xbd
0000            281   _PS0            BIT 0xbc
0000            282   _PT1            BIT 0xbb
0000            283   _PX1            BIT 0xba
0000            284   _PT0            BIT 0xb9
0000            285   _PX0            BIT 0xb8
0000            286   _MASTER0        BIT 0xc7
0000            287   _TXMODE0        BIT 0xc6
0000            288   _STA0           BIT 0xc5
0000            289   _STO0           BIT 0xc4
0000            290   _ACKRQ0         BIT 0xc3
0000            291   _ARBLOST0       BIT 0xc2
0000            292   _ACK0           BIT 0xc1
0000            293   _SI0            BIT 0xc0
0000            294   _MASTER1        BIT 0xc7
0000            295   _TXMODE1        BIT 0xc6
0000            296   _STA1           BIT 0xc5
0000            297   _STO1           BIT 0xc4
0000            298   _ACKRQ1         BIT 0xc3
0000            299   _ARBLOST1       BIT 0xc2
0000            300   _ACK1           BIT 0xc1
0000            301   _SI1            BIT 0xc0
0000            302   _TF2            BIT 0xcf
0000            303   _TF2H           BIT 0xcf
0000            304   _TF2L           BIT 0xce
0000            305   _TF2LEN         BIT 0xcd
0000            306   _TF2CEN         BIT 0xcc
0000            307   _T2SPLIT        BIT 0xcb
0000            308   _TR2            BIT 0xca
0000            309   _T2CSS          BIT 0xc9
0000            310   _T2XCLK         BIT 0xc8
0000            311   _TF5H           BIT 0xcf
0000            312   _TF5L           BIT 0xce
0000            313   _TF5LEN         BIT 0xcd
0000            314   _TMR5CN_4       BIT 0xcc
0000            315   _T5SPLIT        BIT 0xcb
0000            316   _TR5            BIT 0xca
0000            317   _TMR5CN_1       BIT 0xc9
0000            318   _T5XCLK         BIT 0xc8
0000            319   _CY             BIT 0xd7
0000            320   _AC             BIT 0xd6
0000            321   _F0             BIT 0xd5
0000            322   _RS1            BIT 0xd4
0000            323   _RS0            BIT 0xd3
0000            324   _OV             BIT 0xd2
0000            325   _F1             BIT 0xd1
0000            326   _PARITY         BIT 0xd0
0000            327   _CF             BIT 0xdf
0000            328   _CR             BIT 0xde
0000            329   _PCA0CN_5       BIT 0xde
0000            330   _CCF4           BIT 0xdc
0000            331   _CCF3           BIT 0xdb
0000            332   _CCF2           BIT 0xda
0000            333   _CCF1           BIT 0xd9
0000            334   _CCF0           BIT 0xd8
0000            335   _ACC_7          BIT 0xe7
0000            336   _ACC_6          BIT 0xe6
0000            337   _ACC_5          BIT 0xe5
0000            338   _ACC_4          BIT 0xe4
0000            339   _ACC_3          BIT 0xe3
0000            340   _ACC_2          BIT 0xe2
0000            341   _ACC_1          BIT 0xe1
0000            342   _ACC_0          BIT 0xe0
0000            343   _AD0EN          BIT 0xef
0000            344   _AD0TM          BIT 0xee
0000            345   _AD0INT         BIT 0xed
0000            346   _AD0BUSY        BIT 0xec
0000            347   _AD0WINT        BIT 0xeb
0000            348   _AD0CM2         BIT 0xea
0000            349   _AD0CM1         BIT 0xe9
0000            350   _AD0CM0         BIT 0xe8
0000            351   _B_7            BIT 0xf7
0000            352   _B_6            BIT 0xf6
0000            353   _B_5            BIT 0xf5
0000            354   _B_4            BIT 0xf4
0000            355   _B_3            BIT 0xf3
0000            356   _B_2            BIT 0xf2
0000            357   _B_1            BIT 0xf1
0000            358   _B_0            BIT 0xf0
0000            359   _SPIF           BIT 0xff
0000            360   _WCOL           BIT 0xfe
0000            361   _MODF           BIT 0xfd
0000            362   _RXOVRN         BIT 0xfc
0000            363   _NSSMD1         BIT 0xfb
0000            364   _NSSMD0         BIT 0xfa
0000            365   _TXBMT          BIT 0xf9
0000            366   _SPIEN          BIT 0xf8
0000            367   ;--------------------------------------------------------
0000            368   ; overlayable register banks
0000            369   ;--------------------------------------------------------
0000            370            rbank0 segment data overlay
0000            371   ;--------------------------------------------------------
0000            372   ; internal ram data
0000            373   ;--------------------------------------------------------
0000            374            rseg R_DSEG
0000            375   _pwm_count:
0000            376            ds 1
0001            377   _mode:
0001            378            ds 1
0002            379   _pwm_both:
0002            380            ds 1
0003            381   _pwm_Left0:
0003            382            ds 1
0004            383   _pwm_Left1:
0004            384            ds 1
0005            385   _pwm_Right0:
0005            386            ds 1
0006            387   _pwm_Right1:
0006            388            ds 1
0007            389   _direction:
0007            390            ds 1
0008            391   _currentcmd:
0008            392            ds 1
0009            393   _currentstate:
0009            394            ds 1
000A            395   _main_v1_1_57:
000A            396            ds 4
000E            397   _main_v2_1_57:
000E            398            ds 4
0012            399   _main_sloc0_1_0:
0012            400            ds 2
0014            401   _main_sloc1_1_0:
0014            402            ds 2
0016            403   _main_sloc2_1_0:
0016            404            ds 2
0018            405   _main_sloc3_1_0:
0018            406            ds 2
001A            407   _main_sloc4_1_0:
001A            408            ds 2
001C            409   _main_sloc5_1_0:
001C            410            ds 2
001E            411   _main_sloc6_1_0:
001E            412            ds 4
0022            413   _main_sloc7_1_0:
0022            414            ds 4
0026            415   _linetrack_vleft_1_76:
0026            416            ds 4
002A            417   _linetrack_vright_1_76:
002A            418            ds 4
002E            419   _linetrack_sloc0_1_0:
002E            420            ds 4
0032            421   _linetrack_sloc1_1_0:
0032            422            ds 4
0036            423   _turncar_v_1_82:
0036            424            ds 4
003A            425   _turncar_direction_1_82:
003A            426            ds 1
003B            427   _uturn_vleft_1_92:
003B            428            ds 4
003F            429   _uturn_vright_1_92:
003F            430            ds 4
0043            431   ;--------------------------------------------------------
0043            432   ; overlayable items in internal ram 
0043            433   ;--------------------------------------------------------
0000            434            rseg R_OSEG
0000            435   ;--------------------------------------------------------
0000            436   ; indirectly addressable internal ram data
0000            437   ;--------------------------------------------------------
0000            438            rseg R_ISEG
0000            439   ;--------------------------------------------------------
0000            440   ; absolute internal ram data
0000            441   ;--------------------------------------------------------
0000            442            DSEG
0000            443   ;--------------------------------------------------------
0000            444   ; bit data
0000            445   ;--------------------------------------------------------
0000            446            rseg R_BSEG
0000            447   _main_sloc8_1_0:
0000            448            DBIT    1
0001            449   _Timer2_ISR_sloc0_1_0:
0001            450            DBIT    1
0002            451   ;--------------------------------------------------------
0002            452   ; paged external ram data
0002            453   ;--------------------------------------------------------
0000            454            rseg R_PSEG
0000            455   ;--------------------------------------------------------
0000            456   ; external ram data
0000            457   ;--------------------------------------------------------
0000            458            rseg R_XSEG
0000            459   ;--------------------------------------------------------
0000            460   ; absolute external ram data
0000            461   ;--------------------------------------------------------
0000            462            XSEG
0000            463   ;--------------------------------------------------------
0000            464   ; external initialized ram data
0000            465   ;--------------------------------------------------------
0000            466            rseg R_IXSEG
0000            467            rseg R_HOME
0000            468            rseg R_GSINIT
0000            469            rseg R_CSEG
0000            470   ;--------------------------------------------------------
0000            471   ; Reset entry point and interrupt vectors
0000            472   ;--------------------------------------------------------
0000            473            CSEG at 0x0000
0000 020100     474            ljmp    _crt0
002B            475            CSEG at 0x002b
002B 020100     476            ljmp    _Timer2_ISR
002E            477   ;--------------------------------------------------------
002E            478   ; global & static initialisations
002E            479   ;--------------------------------------------------------
0000            480            rseg R_HOME
0000            481            rseg R_GSINIT
0000            482            rseg R_GSINIT
0000            483   ;--------------------------------------------------------
0000            484   ; data variables initialization
0000            485   ;--------------------------------------------------------
0000            486            rseg R_DINIT
0000            487   ;        robot.c:8: volatile  char pwm_count=0;
0000 752000     488            mov     _pwm_count,#0x00
0003            489   ;        robot.c:9: volatile  char mode = 0;
0003 75F000     490            mov     _mode,#0x00
0006            491   ;        robot.c:10: volatile  char pwm_both =0;
0006 75B000     492            mov     _pwm_both,#0x00
0009            493   ;        robot.c:11: volatile  char pwm_Left0 = 0; //p1.5
0009 757000     494            mov     _pwm_Left0,#0x00
000C            495   ;        robot.c:12: volatile  char pwm_Left1 = 0; //p1.6
000C 753000     496            mov     _pwm_Left1,#0x00
000F            497   ;        robot.c:13: volatile  char pwm_Right0 = 0; //p2.0
000F 75F000     498            mov     _pwm_Right0,#0x00
0012            499   ;        robot.c:14: volatile  char pwm_Right1 = 0; //p2.1
0012 75B000     500            mov     _pwm_Right1,#0x00
0015            501   ;        robot.c:15: volatile  char direction = 0; // 1 for back 0 for forward
0015 757000     502            mov     _direction,#0x00
0018            503   ;        robot.c:17: volatile  char currentcmd = 0;
0018 753000     504            mov     _currentcmd,#0x00
001B            505   ;        robot.c:18: volatile  char currentstate = 1;
001B 75F001     506            mov     _currentstate,#0x01
001E            507            ; The linker places a 'ret' at the end of segment R_DINIT.
001E            508   ;--------------------------------------------------------
001E            509   ; code
001E            510   ;--------------------------------------------------------
0000            511            rseg R_CSEG
0000            512   ;------------------------------------------------------------
0000            513   ;Allocation info for local variables in function 'main'
0000            514   ;------------------------------------------------------------
0000            515   ;v1                        Allocated with name '_main_v1_1_57'
0000            516   ;v2                        Allocated with name '_main_v2_1_57'
0000            517   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0000            518   ;sloc1                     Allocated with name '_main_sloc1_1_0'
0000            519   ;sloc2                     Allocated with name '_main_sloc2_1_0'
0000            520   ;sloc3                     Allocated with name '_main_sloc3_1_0'
0000            521   ;sloc4                     Allocated with name '_main_sloc4_1_0'
0000            522   ;sloc5                     Allocated with name '_main_sloc5_1_0'
0000            523   ;sloc6                     Allocated with name '_main_sloc6_1_0'
0000            524   ;sloc7                     Allocated with name '_main_sloc7_1_0'
0000            525   ;------------------------------------------------------------
0000            526   ;        robot.c:20: void main(void) {
0000            527   ;        -----------------------------------------
0000            528   ;         function main
0000            529   ;        -----------------------------------------
0000            530   _main:
0000            531            using   0
0000            532   ;        robot.c:22: volatile float v1 = 0;
0000 752800     533            mov     _main_v1_1_57,#0x00
0003 752900     534            mov     (_main_v1_1_57 + 1),#0x00
0006 752A00     535            mov     (_main_v1_1_57 + 2),#0x00
0009 752B00     536            mov     (_main_v1_1_57 + 3),#0x00
000C            537   ;        robot.c:23: volatile float v2 = 0;
000C 756800     538            mov     _main_v2_1_57,#0x00
000F 756900     539            mov     (_main_v2_1_57 + 1),#0x00
0012 756A00     540            mov     (_main_v2_1_57 + 2),#0x00
0015 756B00     541            mov     (_main_v2_1_57 + 3),#0x00
0018            542   ;        robot.c:25: MOTOR_LEFT0 = 0;
0018 C295       543            clr     _P1_5
001A            544   ;        robot.c:26: MOTOR_LEFT1 = 0;
001A C296       545            clr     _P1_6
001C            546   ;        robot.c:27: MOTOR_RIGHT0 = 0;
001C C2A0       547            clr     _P2_0
001E            548   ;        robot.c:28: MOTOR_RIGHT1 = 0;
001E C2A1       549            clr     _P2_1
0020            550   ;        robot.c:31: currentstate = 1;           //1-FORWARD, 2-BACKWARDS, 3-STOPPED, 4-DEBUGGER
0020 75F001     551            mov     _currentstate,#0x01
0023            552   ;        robot.c:32: currentcmd = 0;             //0-NO COMMAND, 1-TURN LEFT, 2-TURN RIGHT, 3-FORWARDS, 4-BACKWARDS, 5-STOP, 6-UTURN
0023 753000     553            mov     _currentcmd,#0x00
0026            554   ;        robot.c:35: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0026 74E8       555            mov     a,#__str_0
0028 C0E0       556            push    acc
002A 7496       557            mov     a,#(__str_0 >> 8)
002C C0E0       558            push    acc
002E 7480       559            mov     a,#0x80
0030 C0E0       560            push    acc
0032 120100     561            lcall   _printf
0035 1581       562            dec     sp
0037 1581       563            dec     sp
0039 1581       564            dec     sp
003B            565   ;        robot.c:38: InitPinADC(2, 3); // Configure P2.3 as analog input (tank1)
003B 750003     566            mov     _InitPinADC_PARM_2,#0x03
003E 758202     567            mov     dpl,#0x02
0041 120100     568            lcall   _InitPinADC
0044            569   ;        robot.c:39: InitPinADC(2, 4); // Configure P2.4 as analog input         (tank1)
0044 750004     570            mov     _InitPinADC_PARM_2,#0x04
0047 758202     571            mov     dpl,#0x02
004A 120100     572            lcall   _InitPinADC
004D            573   ;        robot.c:40: InitPinADC(2, 5); // Configure P2.5 as analog input (tank2)
004D 750005     574            mov     _InitPinADC_PARM_2,#0x05
0050 758202     575            mov     dpl,#0x02
0053 120100     576            lcall   _InitPinADC
0056            577   ;        robot.c:41: InitPinADC(2, 6); // Configure P2.6 as analog input (tank2)
0056 750006     578            mov     _InitPinADC_PARM_2,#0x06
0059 758202     579            mov     dpl,#0x02
005C 120100     580            lcall   _InitPinADC
005F            581   ;        robot.c:44: InitADC();  
005F 120100     582            lcall   _InitADC
0062            583   ;        robot.c:47: while (1) {         
0062            584   L002034?:
0062            585   ;        robot.c:50: currentcmd = readData(); 
0062 120100     586            lcall   _readData
0065 858230     587            mov     _currentcmd,dpl
0068            588   ;        robot.c:53: printf("frontL %f frontR %f backL %f backR %f command %1d, state %1d left0 %3d left1 %3d right0 %3d right1 %3d\r", Volts_at_Pin(TANK_FL),Volts_at_Pin(TANK_FR),Volts_at_Pin(TANK_RL),Volts_at_Pin(TANK_RR), currentcmd, currentstate, pwm_Left0, pwm_Left1, pwm_Right0, pwm_Right1);
0068 85B0E8     589            mov     _main_sloc5_1_0,_pwm_Right1
006B E5B0       590            mov     a,_pwm_Right1
006D 33         591            rlc     a
006E 95E0       592            subb    a,acc
0070 F5E9       593            mov     (_main_sloc5_1_0 + 1),a
0072 85F0A8     594            mov     _main_sloc4_1_0,_pwm_Right0
0075 E5F0       595            mov     a,_pwm_Right0
0077 33         596            rlc     a
0078 95E0       597            subb    a,acc
007A F5A9       598            mov     (_main_sloc4_1_0 + 1),a
007C 853068     599            mov     _main_sloc3_1_0,_pwm_Left1
007F E530       600            mov     a,_pwm_Left1
0081 33         601            rlc     a
0082 95E0       602            subb    a,acc
0084 F569       603            mov     (_main_sloc3_1_0 + 1),a
0086 8570A8     604            mov     _main_sloc0_1_0,_pwm_Left0
0089 E570       605            mov     a,_pwm_Left0
008B 33         606            rlc     a
008C 95E0       607            subb    a,acc
008E F5A9       608            mov     (_main_sloc0_1_0 + 1),a
0090 85F0E8     609            mov     _main_sloc1_1_0,_currentstate
0093 E5F0       610            mov     a,_currentstate
0095 33         611            rlc     a
0096 95E0       612            subb    a,acc
0098 F5E9       613            mov     (_main_sloc1_1_0 + 1),a
009A 853028     614            mov     _main_sloc2_1_0,_currentcmd
009D E530       615            mov     a,_currentcmd
009F 33         616            rlc     a
00A0 95E0       617            subb    a,acc
00A2 F529       618            mov     (_main_sloc2_1_0 + 1),a
00A4 75820E     619            mov     dpl,#0x0E
00A7 120100     620            lcall   _Volts_at_Pin
00AA A882       621            mov     r0,dpl
00AC A983       622            mov     r1,dph
00AE AEF0       623            mov     r6,b
00B0 FF         624            mov     r7,a
00B1 75820D     625            mov     dpl,#0x0D
00B4 C006       626            push    ar6
00B6 C007       627            push    ar7
00B8 C000       628            push    ar0
00BA C001       629            push    ar1
00BC 120100     630            lcall   _Volts_at_Pin
00BF 858228     631            mov     _main_sloc6_1_0,dpl
00C2 858329     632            mov     (_main_sloc6_1_0 + 1),dph
00C5 85F02A     633            mov     (_main_sloc6_1_0 + 2),b
00C8 F52B       634            mov     (_main_sloc6_1_0 + 3),a
00CA 75820C     635            mov     dpl,#0x0C
00CD 120100     636            lcall   _Volts_at_Pin
00D0 858268     637            mov     _main_sloc7_1_0,dpl
00D3 858369     638            mov     (_main_sloc7_1_0 + 1),dph
00D6 85F06A     639            mov     (_main_sloc7_1_0 + 2),b
00D9 F56B       640            mov     (_main_sloc7_1_0 + 3),a
00DB 75820B     641            mov     dpl,#0x0B
00DE 120100     642            lcall   _Volts_at_Pin
00E1 AA82       643            mov     r2,dpl
00E3 AB83       644            mov     r3,dph
00E5 ACF0       645            mov     r4,b
00E7 FD         646            mov     r5,a
00E8 D001       647            pop     ar1
00EA D000       648            pop     ar0
00EC D007       649            pop     ar7
00EE D006       650            pop     ar6
00F0 C0E8       651            push    _main_sloc5_1_0
00F2 C0E9       652            push    (_main_sloc5_1_0 + 1)
00F4 C0A8       653            push    _main_sloc4_1_0
00F6 C0A9       654            push    (_main_sloc4_1_0 + 1)
00F8 C068       655            push    _main_sloc3_1_0
00FA C069       656            push    (_main_sloc3_1_0 + 1)
00FC C0A8       657            push    _main_sloc0_1_0
00FE C0A9       658            push    (_main_sloc0_1_0 + 1)
0100 C0E8       659            push    _main_sloc1_1_0
0102 C0E9       660            push    (_main_sloc1_1_0 + 1)
0104 C028       661            push    _main_sloc2_1_0
0106 C029       662            push    (_main_sloc2_1_0 + 1)
0108 C000       663            push    ar0
010A C001       664            push    ar1
010C C006       665            push    ar6
010E C007       666            push    ar7
0110 C028       667            push    _main_sloc6_1_0
0112 C029       668            push    (_main_sloc6_1_0 + 1)
0114 C02A       669            push    (_main_sloc6_1_0 + 2)
0116 C02B       670            push    (_main_sloc6_1_0 + 3)
0118 C068       671            push    _main_sloc7_1_0
011A C069       672            push    (_main_sloc7_1_0 + 1)
011C C06A       673            push    (_main_sloc7_1_0 + 2)
011E C06B       674            push    (_main_sloc7_1_0 + 3)
0120 C002       675            push    ar2
0122 C003       676            push    ar3
0124 C004       677            push    ar4
0126 C005       678            push    ar5
0128 74F8       679            mov     a,#__str_1
012A C0E0       680            push    acc
012C 7499       681            mov     a,#(__str_1 >> 8)
012E C0E0       682            push    acc
0130 7480       683            mov     a,#0x80
0132 C0E0       684            push    acc
0134 120100     685            lcall   _printf
0137 E581       686            mov     a,sp
0139 24E1       687            add     a,#0xe1
013B F581       688            mov     sp,a
013D            689   ;        robot.c:59: switch (currentstate) {
013D AAF0       690            mov     r2,_currentstate
013F BA0138     691            cjne    r2,#0x01,L002064?
0142 8001       692            sjmp    L002001?
0144            693   L002064?:
0144 BA02B8     694            cjne    r2,#0x02,L002065?
0147 8001       695            sjmp    L002002?
0149            696   L002065?:
0149            697   ;        robot.c:60: case FORWARD_STATE:
0149 BA0338     698            cjne    r2,#0x03,L002004?
014C 8001       699            sjmp    L002003?
014E            700   L002001?:
014E            701   ;        robot.c:61: linetrack(0);       // forwards
014E 900000     702            mov     dptr,#0x0000
0151 120100     703            lcall   _linetrack
0154            704   ;        robot.c:63: v1 = Volts_at_Pin(TANK_FL);
0154 75820B     705            mov     dpl,#0x0B
0157 120100     706            lcall   _Volts_at_Pin
015A 858228     707            mov     _main_v1_1_57,dpl
015D 858329     708            mov     (_main_v1_1_57 + 1),dph
0160 85F02A     709            mov     (_main_v1_1_57 + 2),b
0163 F52B       710            mov     (_main_v1_1_57 + 3),a
0165            711   ;        robot.c:64: v2 = Volts_at_Pin(TANK_FR);
0165 75820C     712            mov     dpl,#0x0C
0168 120100     713            lcall   _Volts_at_Pin
016B 858268     714            mov     _main_v2_1_57,dpl
016E 858369     715            mov     (_main_v2_1_57 + 1),dph
0171 85F06A     716            mov     (_main_v2_1_57 + 2),b
0174 F56B       717            mov     (_main_v2_1_57 + 3),a
0176            718   ;        robot.c:65: break;
0176            719   ;        robot.c:66: case REVERSE_STATE:
0176 8001       720            sjmp    L002004?
0178            721   L002002?:
0178            722   ;        robot.c:67: linetrack(1);       // backwards
0178 900001     723            mov     dptr,#0x0001
017B 120100     724            lcall   _linetrack
017E            725   ;        robot.c:69: v2 = Volts_at_Pin(TANK_RL);
017E 75820D     726            mov     dpl,#0x0D
0181 120100     727            lcall   _Volts_at_Pin
0184 858268     728            mov     _main_v2_1_57,dpl
0187 858369     729            mov     (_main_v2_1_57 + 1),dph
018A 85F06A     730            mov     (_main_v2_1_57 + 2),b
018D F56B       731            mov     (_main_v2_1_57 + 3),a
018F            732   ;        robot.c:70: v1 = Volts_at_Pin(TANK_RR);
018F 75820E     733            mov     dpl,#0x0E
0192 120100     734            lcall   _Volts_at_Pin
0195 858228     735            mov     _main_v1_1_57,dpl
0198 858329     736            mov     (_main_v1_1_57 + 1),dph
019B 85F02A     737            mov     (_main_v1_1_57 + 2),b
019E F52B       738            mov     (_main_v1_1_57 + 3),a
01A0            739   ;        robot.c:71: break;
01A0            740   ;        robot.c:72: case STOP_STATE:
01A0 8001       741            sjmp    L002004?
01A2            742   L002003?:
01A2            743   ;        robot.c:73: stopcar();          // stop car
01A2 120100     744            lcall   _stopcar
01A5            745   ;        robot.c:75: }
01A5            746   L002004?:
01A5            747   ;        robot.c:78: switch (currentcmd) {
01A5 E530       748            mov     a,_currentcmd
01A7 FA         749            mov     r2,a
01A8 30E7B8     750            jnb     acc.7,L002067?
01AB 020100     751            ljmp    L002031?
01AE            752   L002067?:
01AE C3         753            clr     c
01AF 7486       754            mov     a,#(0x06 ^ 0x80)
01B1 8AF0       755            mov     b,r2
01B3 63F080     756            xrl     b,#0x80
01B6 95F0       757            subb    a,b
01B8 5001       758            jnc     L002068?
01BA 020100     759            ljmp    L002031?
01BD            760   L002068?:
01BD EA         761            mov     a,r2
01BE 2A         762            add     a,r2
01BF 2A         763            add     a,r2
01C0 909C78     764            mov     dptr,#L002069?
01C3 73         765            jmp     @a+dptr
01C4            766   L002069?:
01C4 020100     767            ljmp    L002005?
01C7 020100     768            ljmp    L002019?
01CA 020100     769            ljmp    L002023?
01CD 020100     770            ljmp    L002027?
01D0 020100     771            ljmp    L002028?
01D3 020100     772            ljmp    L002029?
01D6 020100     773            ljmp    L002030?
01D9            774   ;        robot.c:80: case CMD_NONE:
01D9            775   L002005?:
01D9            776   ;        robot.c:82: if ((currentstate-1) ? 
01D9 AAF0       777            mov     r2,_currentstate
01DB E5F0       778            mov     a,_currentstate
01DD 33         779            rlc     a
01DE 95E0       780            subb    a,acc
01E0 FB         781            mov     r3,a
01E1 1A         782            dec     r2
01E2 BAFF78     783            cjne    r2,#0xff,L002070?
01E5 1B         784            dec     r3
01E6            785   L002070?:
01E6 EA         786            mov     a,r2
01E7 4B         787            orl     a,r3
01E8 6001       788            jz      L002038?
01EA            789   ;        robot.c:83: (v1 > 1.2 && v2 > 1.2) :
01EA 749A       790            mov     a,#0x9A
01EC C0E0       791            push    acc
01EE 7499       792            mov     a,#0x99
01F0 C0E0       793            push    acc
01F2 C0E0       794            push    acc
01F4 743F       795            mov     a,#0x3F
01F6 C0E0       796            push    acc
01F8 852882     797            mov     dpl,_main_v1_1_57
01FB 852983     798            mov     dph,(_main_v1_1_57 + 1)
01FE 852AF0     799            mov     b,(_main_v1_1_57 + 2)
0201 E52B       800            mov     a,(_main_v1_1_57 + 3)
0203 120100     801            lcall   ___fsgt
0206 AA82       802            mov     r2,dpl
0208 E581       803            mov     a,sp
020A 24FC       804            add     a,#0xfc
020C F581       805            mov     sp,a
020E EA         806            mov     a,r2
020F 6001       807            jz      L002040?
0211 749A       808            mov     a,#0x9A
0213 C0E0       809            push    acc
0215 7499       810            mov     a,#0x99
0217 C0E0       811            push    acc
0219 C0E0       812            push    acc
021B 743F       813            mov     a,#0x3F
021D C0E0       814            push    acc
021F 856882     815            mov     dpl,_main_v2_1_57
0222 856983     816            mov     dph,(_main_v2_1_57 + 1)
0225 856AF0     817            mov     b,(_main_v2_1_57 + 2)
0228 E56B       818            mov     a,(_main_v2_1_57 + 3)
022A 120100     819            lcall   ___fsgt
022D AA82       820            mov     r2,dpl
022F E581       821            mov     a,sp
0231 24FC       822            add     a,#0xfc
0233 F581       823            mov     sp,a
0235 EA         824            mov     a,r2
0236 7001       825            jnz     L002041?
0238            826   L002040?:
0238 7A00       827            mov     r2,#0x00
023A 8001       828            sjmp    L002042?
023C            829   L002041?:
023C 7A01       830            mov     r2,#0x01
023E            831   L002042?:
023E EA         832            mov     a,r2
023F 24FF       833            add     a,#0xff
0241 9218       834            mov     _main_sloc8_1_0,c
0243 8001       835            sjmp    L002039?
0245            836   L002038?:
0245            837   ;        robot.c:84: (v1 > 0.7 && v2 > 1)) {
0245 7433       838            mov     a,#0x33
0247 C0E0       839            push    acc
0249 C0E0       840            push    acc
024B C0E0       841            push    acc
024D 743F       842            mov     a,#0x3F
024F C0E0       843            push    acc
0251 852882     844            mov     dpl,_main_v1_1_57
0254 852983     845            mov     dph,(_main_v1_1_57 + 1)
0257 852AF0     846            mov     b,(_main_v1_1_57 + 2)
025A E52B       847            mov     a,(_main_v1_1_57 + 3)
025C 120100     848            lcall   ___fsgt
025F AA82       849            mov     r2,dpl
0261 E581       850            mov     a,sp
0263 24FC       851            add     a,#0xfc
0265 F581       852            mov     sp,a
0267 EA         853            mov     a,r2
0268 6001       854            jz      L002043?
026A E4         855            clr     a
026B C0E0       856            push    acc
026D C0E0       857            push    acc
026F 7480       858            mov     a,#0x80
0271 C0E0       859            push    acc
0273 743F       860            mov     a,#0x3F
0275 C0E0       861            push    acc
0277 856882     862            mov     dpl,_main_v2_1_57
027A 856983     863            mov     dph,(_main_v2_1_57 + 1)
027D 856AF0     864            mov     b,(_main_v2_1_57 + 2)
0280 E56B       865            mov     a,(_main_v2_1_57 + 3)
0282 120100     866            lcall   ___fsgt
0285 AA82       867            mov     r2,dpl
0287 E581       868            mov     a,sp
0289 24FC       869            add     a,#0xfc
028B F581       870            mov     sp,a
028D EA         871            mov     a,r2
028E 7001       872            jnz     L002044?
0290            873   L002043?:
0290 7A00       874            mov     r2,#0x00
0292 8001       875            sjmp    L002045?
0294            876   L002044?:
0294 7A01       877            mov     r2,#0x01
0296            878   L002045?:
0296 EA         879            mov     a,r2
0297 24FF       880            add     a,#0xff
0299 9218       881            mov     _main_sloc8_1_0,c
029B            882   L002039?:
029B 201800     883            jb      _main_sloc8_1_0,L002076?
029E 020100     884            ljmp    L002034?
02A1            885   L002076?:
02A1            886   ;        robot.c:85: printf("\nINTERSECTION\n");
02A1 7440       887            mov     a,#__str_2
02A3 C0E0       888            push    acc
02A5 74A1       889            mov     a,#(__str_2 >> 8)
02A7 C0E0       890            push    acc
02A9 7480       891            mov     a,#0x80
02AB C0E0       892            push    acc
02AD 120100     893            lcall   _printf
02B0 1581       894            dec     sp
02B2 1581       895            dec     sp
02B4 1581       896            dec     sp
02B6            897   ;        robot.c:87: if (currentstate == 1) {
02B6 7401       898            mov     a,#0x01
02B8 B5F080     899            cjne    a,_currentstate,L002015?
02BB            900   ;        robot.c:88: if (Volts_at_Pin(TANK_RL)>Volts_at_Pin(TANK_RR)) {
02BB 75820D     901            mov     dpl,#0x0D
02BE 120100     902            lcall   _Volts_at_Pin
02C1 AA82       903            mov     r2,dpl
02C3 AB83       904            mov     r3,dph
02C5 ACF0       905            mov     r4,b
02C7 FD         906            mov     r5,a
02C8 75820E     907            mov     dpl,#0x0E
02CB C002       908            push    ar2
02CD C003       909            push    ar3
02CF C004       910            push    ar4
02D1 C005       911            push    ar5
02D3 120100     912            lcall   _Volts_at_Pin
02D6 AE82       913            mov     r6,dpl
02D8 AF83       914            mov     r7,dph
02DA A8F0       915            mov     r0,b
02DC F9         916            mov     r1,a
02DD D005       917            pop     ar5
02DF D004       918            pop     ar4
02E1 D003       919            pop     ar3
02E3 D002       920            pop     ar2
02E5 C006       921            push    ar6
02E7 C007       922            push    ar7
02E9 C000       923            push    ar0
02EB C001       924            push    ar1
02ED 8A82       925            mov     dpl,r2
02EF 8B83       926            mov     dph,r3
02F1 8CF0       927            mov     b,r4
02F3 ED         928            mov     a,r5
02F4 120100     929            lcall   ___fsgt
02F7 AA82       930            mov     r2,dpl
02F9 E581       931            mov     a,sp
02FB 24FC       932            add     a,#0xfc
02FD F581       933            mov     sp,a
02FF EA         934            mov     a,r2
0300 6001       935            jz      L002007?
0302            936   ;        robot.c:89: pwm_Left1 = 50;
0302 753032     937            mov     _pwm_Left1,#0x32
0305            938   ;        robot.c:90: pwm_Left0 = -1;
0305 7570FF     939            mov     _pwm_Left0,#0xFF
0308            940   ;        robot.c:91: pwm_Right0 = 30;
0308 75F01E     941            mov     _pwm_Right0,#0x1E
030B            942   ;        robot.c:92: pwm_Right1 = -1;
030B 75B0FF     943            mov     _pwm_Right1,#0xFF
030E 8001       944            sjmp    L002016?
0310            945   L002007?:
0310            946   ;        robot.c:95: pwm_Left1 = 30;
0310 75301E     947            mov     _pwm_Left1,#0x1E
0313            948   ;        robot.c:96: pwm_Left0 = -1;
0313 7570FF     949            mov     _pwm_Left0,#0xFF
0316            950   ;        robot.c:97: pwm_Right0 = 50;
0316 75F032     951            mov     _pwm_Right0,#0x32
0319            952   ;        robot.c:98: pwm_Right1 = -1;
0319 75B0FF     953            mov     _pwm_Right1,#0xFF
031C 8001       954            sjmp    L002016?
031E            955   L002015?:
031E            956   ;        robot.c:100: } else if (currentstate == 2) {
031E 7402       957            mov     a,#0x02
0320 B5F000     958            cjne    a,_currentstate,L002016?
0323            959   ;        robot.c:101: if (Volts_at_Pin(TANK_FL)>Volts_at_Pin(TANK_FR)) {
0323 75820B     960            mov     dpl,#0x0B
0326 120100     961            lcall   _Volts_at_Pin
0329 AA82       962            mov     r2,dpl
032B AB83       963            mov     r3,dph
032D ACF0       964            mov     r4,b
032F FD         965            mov     r5,a
0330 75820C     966            mov     dpl,#0x0C
0333 C002       967            push    ar2
0335 C003       968            push    ar3
0337 C004       969            push    ar4
0339 C005       970            push    ar5
033B 120100     971            lcall   _Volts_at_Pin
033E AE82       972            mov     r6,dpl
0340 AF83       973            mov     r7,dph
0342 A8F0       974            mov     r0,b
0344 F9         975            mov     r1,a
0345 D005       976            pop     ar5
0347 D004       977            pop     ar4
0349 D003       978            pop     ar3
034B D002       979            pop     ar2
034D C006       980            push    ar6
034F C007       981            push    ar7
0351 C000       982            push    ar0
0353 C001       983            push    ar1
0355 8A82       984            mov     dpl,r2
0357 8B83       985            mov     dph,r3
0359 8CF0       986            mov     b,r4
035B ED         987            mov     a,r5
035C 120100     988            lcall   ___fsgt
035F AA82       989            mov     r2,dpl
0361 E581       990            mov     a,sp
0363 24FC       991            add     a,#0xfc
0365 F581       992            mov     sp,a
0367 EA         993            mov     a,r2
0368 6001       994            jz      L002010?
036A            995   ;        robot.c:102: pwm_Left0 = 50;
036A 757032     996            mov     _pwm_Left0,#0x32
036D            997   ;        robot.c:103: pwm_Left1 = -1;
036D 7530FF     998            mov     _pwm_Left1,#0xFF
0370            999   ;        robot.c:104: pwm_Right0 = -1;
0370 75F0FF    1000            mov     _pwm_Right0,#0xFF
0373           1001   ;        robot.c:105: pwm_Right1 = 30;
0373 75B01E    1002            mov     _pwm_Right1,#0x1E
0376 8001      1003            sjmp    L002016?
0378           1004   L002010?:
0378           1005   ;        robot.c:108: pwm_Left0 = 30;
0378 75701E    1006            mov     _pwm_Left0,#0x1E
037B           1007   ;        robot.c:109: pwm_Left1 = -1;
037B 7530FF    1008            mov     _pwm_Left1,#0xFF
037E           1009   ;        robot.c:110: pwm_Right0 = -1;
037E 75F0FF    1010            mov     _pwm_Right0,#0xFF
0381           1011   ;        robot.c:111: pwm_Right1 = 50;
0381 75B032    1012            mov     _pwm_Right1,#0x32
0384           1013   L002016?:
0384           1014   ;        robot.c:115: waitms(1500);
0384 9005DC    1015            mov     dptr,#0x05DC
0387 120100    1016            lcall   _waitms
038A           1017   ;        robot.c:117: break;
038A 020100    1018            ljmp    L002034?
038D           1019   ;        robot.c:119: case CMD_LEFT:
038D           1020   L002019?:
038D           1021   ;        robot.c:121: printf("Turn left at the next intersection\n");
038D 74C0      1022            mov     a,#__str_3
038F C0E0      1023            push    acc
0391 74A2      1024            mov     a,#(__str_3 >> 8)
0393 C0E0      1025            push    acc
0395 7480      1026            mov     a,#0x80
0397 C0E0      1027            push    acc
0399 120100    1028            lcall   _printf
039C 1581      1029            dec     sp
039E 1581      1030            dec     sp
03A0 1581      1031            dec     sp
03A2           1032   ;        robot.c:122: if (v1 > 0.7 && v2 >1)  {
03A2 7433      1033            mov     a,#0x33
03A4 C0E0      1034            push    acc
03A6 C0E0      1035            push    acc
03A8 C0E0      1036            push    acc
03AA 743F      1037            mov     a,#0x3F
03AC C0E0      1038            push    acc
03AE 852882    1039            mov     dpl,_main_v1_1_57
03B1 852983    1040            mov     dph,(_main_v1_1_57 + 1)
03B4 852AF0    1041            mov     b,(_main_v1_1_57 + 2)
03B7 E52B      1042            mov     a,(_main_v1_1_57 + 3)
03B9 120100    1043            lcall   ___fsgt
03BC AA82      1044            mov     r2,dpl
03BE E581      1045            mov     a,sp
03C0 24FC      1046            add     a,#0xfc
03C2 F581      1047            mov     sp,a
03C4 EA        1048            mov     a,r2
03C5 7001      1049            jnz     L002083?
03C7 020100    1050            ljmp    L002034?
03CA           1051   L002083?:
03CA E4        1052            clr     a
03CB C0E0      1053            push    acc
03CD C0E0      1054            push    acc
03CF 7480      1055            mov     a,#0x80
03D1 C0E0      1056            push    acc
03D3 743F      1057            mov     a,#0x3F
03D5 C0E0      1058            push    acc
03D7 856882    1059            mov     dpl,_main_v2_1_57
03DA 856983    1060            mov     dph,(_main_v2_1_57 + 1)
03DD 856AF0    1061            mov     b,(_main_v2_1_57 + 2)
03E0 E56B      1062            mov     a,(_main_v2_1_57 + 3)
03E2 120100    1063            lcall   ___fsgt
03E5 AA82      1064            mov     r2,dpl
03E7 E581      1065            mov     a,sp
03E9 24FC      1066            add     a,#0xfc
03EB F581      1067            mov     sp,a
03ED EA        1068            mov     a,r2
03EE 7001      1069            jnz     L002084?
03F0 020100    1070            ljmp    L002034?
03F3           1071   L002084?:
03F3           1072   ;        robot.c:123: printf("\n\r INTERSECTION\n");
03F3 7480      1073            mov     a,#__str_4
03F5 C0E0      1074            push    acc
03F7 74A3      1075            mov     a,#(__str_4 >> 8)
03F9 C0E0      1076            push    acc
03FB 7480      1077            mov     a,#0x80
03FD C0E0      1078            push    acc
03FF 120100    1079            lcall   _printf
0402 1581      1080            dec     sp
0404 1581      1081            dec     sp
0406 1581      1082            dec     sp
0408           1083   ;        robot.c:128: turncar(currentstate);
0408 AAF0      1084            mov     r2,_currentstate
040A E5F0      1085            mov     a,_currentstate
040C 33        1086            rlc     a
040D 95E0      1087            subb    a,acc
040F FB        1088            mov     r3,a
0410 8A82      1089            mov     dpl,r2
0412 8B83      1090            mov     dph,r3
0414 120100    1091            lcall   _turncar
0417           1092   ;        robot.c:129: currentcmd = 0;
0417 753000    1093            mov     _currentcmd,#0x00
041A           1094   ;        robot.c:131: break;
041A 020100    1095            ljmp    L002034?
041D           1096   ;        robot.c:134: case CMD_RIGHT:
041D           1097   L002023?:
041D           1098   ;        robot.c:136: printf("Turn right at the next intersection\n");
041D 74C0      1099            mov     a,#__str_5
041F C0E0      1100            push    acc
0421 74A3      1101            mov     a,#(__str_5 >> 8)
0423 C0E0      1102            push    acc
0425 7480      1103            mov     a,#0x80
0427 C0E0      1104            push    acc
0429 120100    1105            lcall   _printf
042C 1581      1106            dec     sp
042E 1581      1107            dec     sp
0430 1581      1108            dec     sp
0432           1109   ;        robot.c:137: if (v1 > 0.7 && v2 >1) {
0432 7433      1110            mov     a,#0x33
0434 C0E0      1111            push    acc
0436 C0E0      1112            push    acc
0438 C0E0      1113            push    acc
043A 743F      1114            mov     a,#0x3F
043C C0E0      1115            push    acc
043E 852882    1116            mov     dpl,_main_v1_1_57
0441 852983    1117            mov     dph,(_main_v1_1_57 + 1)
0444 852AF0    1118            mov     b,(_main_v1_1_57 + 2)
0447 E52B      1119            mov     a,(_main_v1_1_57 + 3)
0449 120100    1120            lcall   ___fsgt
044C AA82      1121            mov     r2,dpl
044E E581      1122            mov     a,sp
0450 24FC      1123            add     a,#0xfc
0452 F581      1124            mov     sp,a
0454 EA        1125            mov     a,r2
0455 7001      1126            jnz     L002085?
0457 020100    1127            ljmp    L002034?
045A           1128   L002085?:
045A E4        1129            clr     a
045B C0E0      1130            push    acc
045D C0E0      1131            push    acc
045F 7480      1132            mov     a,#0x80
0461 C0E0      1133            push    acc
0463 743F      1134            mov     a,#0x3F
0465 C0E0      1135            push    acc
0467 856882    1136            mov     dpl,_main_v2_1_57
046A 856983    1137            mov     dph,(_main_v2_1_57 + 1)
046D 856AF0    1138            mov     b,(_main_v2_1_57 + 2)
0470 E56B      1139            mov     a,(_main_v2_1_57 + 3)
0472 120100    1140            lcall   ___fsgt
0475 AA82      1141            mov     r2,dpl
0477 E581      1142            mov     a,sp
0479 24FC      1143            add     a,#0xfc
047B F581      1144            mov     sp,a
047D EA        1145            mov     a,r2
047E 7001      1146            jnz     L002086?
0480 020100    1147            ljmp    L002034?
0483           1148   L002086?:
0483           1149   ;        robot.c:138: printf("\n\r INTERSECTION\n");
0483 7480      1150            mov     a,#__str_4
0485 C0E0      1151            push    acc
0487 74A3      1152            mov     a,#(__str_4 >> 8)
0489 C0E0      1153            push    acc
048B 7480      1154            mov     a,#0x80
048D C0E0      1155            push    acc
048F 120100    1156            lcall   _printf
0492 1581      1157            dec     sp
0494 1581      1158            dec     sp
0496 1581      1159            dec     sp
0498           1160   ;        robot.c:140: turncar(currentstate + 2); //1 = right
0498 AAF0      1161            mov     r2,_currentstate
049A E5F0      1162            mov     a,_currentstate
049C 33        1163            rlc     a
049D 95E0      1164            subb    a,acc
049F FB        1165            mov     r3,a
04A0 8A82      1166            mov     dpl,r2
04A2 8B83      1167            mov     dph,r3
04A4 A3        1168            inc     dptr
04A5 A3        1169            inc     dptr
04A6 120100    1170            lcall   _turncar
04A9           1171   ;        robot.c:141: currentcmd = 0;
04A9 753000    1172            mov     _currentcmd,#0x00
04AC           1173   ;        robot.c:143: break;
04AC 020100    1174            ljmp    L002034?
04AF           1175   ;        robot.c:146: case CMD_FORWARD:
04AF           1176   L002027?:
04AF           1177   ;        robot.c:148: printf("GO!\n");
04AF 7480      1178            mov     a,#__str_6
04B1 C0E0      1179            push    acc
04B3 74A4      1180            mov     a,#(__str_6 >> 8)
04B5 C0E0      1181            push    acc
04B7 7480      1182            mov     a,#0x80
04B9 C0E0      1183            push    acc
04BB 120100    1184            lcall   _printf
04BE 1581      1185            dec     sp
04C0 1581      1186            dec     sp
04C2 1581      1187            dec     sp
04C4           1188   ;        robot.c:149: currentstate = 1;
04C4 75F001    1189            mov     _currentstate,#0x01
04C7           1190   ;        robot.c:150: currentcmd = 0;
04C7 753000    1191            mov     _currentcmd,#0x00
04CA           1192   ;        robot.c:151: break;
04CA 020100    1193            ljmp    L002034?
04CD           1194   ;        robot.c:154: case CMD_REVERSE:
04CD           1195   L002028?:
04CD           1196   ;        robot.c:156: printf("Reverse Reverse!\n");
04CD 74C0      1197            mov     a,#__str_7
04CF C0E0      1198            push    acc
04D1 74A4      1199            mov     a,#(__str_7 >> 8)
04D3 C0E0      1200            push    acc
04D5 7480      1201            mov     a,#0x80
04D7 C0E0      1202            push    acc
04D9 120100    1203            lcall   _printf
04DC 1581      1204            dec     sp
04DE 1581      1205            dec     sp
04E0 1581      1206            dec     sp
04E2           1207   ;        robot.c:157: currentstate = 2;
04E2 75F002    1208            mov     _currentstate,#0x02
04E5           1209   ;        robot.c:158: currentcmd = 0;
04E5 753000    1210            mov     _currentcmd,#0x00
04E8           1211   ;        robot.c:159: break;
04E8 020100    1212            ljmp    L002034?
04EB           1213   ;        robot.c:162: case CMD_STOP:
04EB           1214   L002029?:
04EB           1215   ;        robot.c:164: printf("HALT peasants!\n");
04EB 7400      1216            mov     a,#__str_8
04ED C0E0      1217            push    acc
04EF 74A5      1218            mov     a,#(__str_8 >> 8)
04F1 C0E0      1219            push    acc
04F3 7480      1220            mov     a,#0x80
04F5 C0E0      1221            push    acc
04F7 120100    1222            lcall   _printf
04FA 1581      1223            dec     sp
04FC 1581      1224            dec     sp
04FE 1581      1225            dec     sp
0500           1226   ;        robot.c:165: currentstate = 3;
0500 75F003    1227            mov     _currentstate,#0x03
0503           1228   ;        robot.c:166: currentcmd = 0;
0503 753000    1229            mov     _currentcmd,#0x00
0506           1230   ;        robot.c:167: break;
0506 020100    1231            ljmp    L002034?
0509           1232   ;        robot.c:170: case CMD_UTURN:
0509           1233   L002030?:
0509           1234   ;        robot.c:171: uturn();
0509 120100    1235            lcall   _uturn
050C           1236   ;        robot.c:172: printf("UTURN\n");
050C 7440      1237            mov     a,#__str_9
050E C0E0      1238            push    acc
0510 74A5      1239            mov     a,#(__str_9 >> 8)
0512 C0E0      1240            push    acc
0514 7480      1241            mov     a,#0x80
0516 C0E0      1242            push    acc
0518 120100    1243            lcall   _printf
051B 1581      1244            dec     sp
051D 1581      1245            dec     sp
051F 1581      1246            dec     sp
0521           1247   ;        robot.c:173: currentcmd = 0;
0521 753000    1248            mov     _currentcmd,#0x00
0524           1249   ;        robot.c:174: break;
0524 020100    1250            ljmp    L002034?
0527           1251   ;        robot.c:177: default: 
0527           1252   L002031?:
0527           1253   ;        robot.c:178: currentstate = 1;
0527 75F001    1254            mov     _currentstate,#0x01
052A           1255   ;        robot.c:179: }
052A 020100    1256            ljmp    L002034?
052D           1257   ;------------------------------------------------------------
052D           1258   ;Allocation info for local variables in function 'Timer2_ISR'
052D           1259   ;------------------------------------------------------------
052D           1260   ;------------------------------------------------------------
052D           1261   ;        robot.c:183: void Timer2_ISR (void) interrupt 5 {
052D           1262   ;        -----------------------------------------
052D           1263   ;         function Timer2_ISR
052D           1264   ;        -----------------------------------------
052D           1265   _Timer2_ISR:
052D C0E0      1266            push    acc
052F C0F0      1267            push    b
0531 C0D0      1268            push    psw
0533 75D000    1269            mov     psw,#0x00
0536           1270   ;        robot.c:184: TF2H = 0; // Clear Timer2 interrupt flag
0536 C2CF      1271            clr     _TF2H
0538           1272   ;        robot.c:186: pwm_count++;
0538 0520      1273            inc     _pwm_count
053A           1274   ;        robot.c:187: if(pwm_count>100) pwm_count=0;
053A C3        1275            clr     c
053B 74E4      1276            mov     a,#(0x64 ^ 0x80)
053D 8520F0    1277            mov     b,_pwm_count
0540 63F080    1278            xrl     b,#0x80
0543 95F0      1279            subb    a,b
0545 5001      1280            jnc     L003002?
0547 752000    1281            mov     _pwm_count,#0x00
054A           1282   L003002?:
054A           1283   ;        robot.c:190: MOTOR_LEFT0 = pwm_count > pwm_Left0 ? 0 : 1; //p1.5
054A C3        1284            clr     c
054B E570      1285            mov     a,_pwm_Left0
054D 6480      1286            xrl     a,#0x80
054F 8520F0    1287            mov     b,_pwm_count
0552 63F080    1288            xrl     b,#0x80
0555 95F0      1289            subb    a,b
0557 9268      1290            mov  _Timer2_ISR_sloc0_1_0,c
0559 B3        1291            cpl     c
055A 9295      1292            mov     _P1_5,c
055C           1293   ;        robot.c:191: MOTOR_LEFT1 = pwm_count > pwm_Left1 ? 0 : 1; //p1.6
055C C3        1294            clr     c
055D E530      1295            mov     a,_pwm_Left1
055F 6480      1296            xrl     a,#0x80
0561 8520F0    1297            mov     b,_pwm_count
0564 63F080    1298            xrl     b,#0x80
0567 95F0      1299            subb    a,b
0569 9268      1300            mov  _Timer2_ISR_sloc0_1_0,c
056B B3        1301            cpl     c
056C 9296      1302            mov     _P1_6,c
056E           1303   ;        robot.c:192: MOTOR_RIGHT0 = pwm_count > pwm_Right0 ? 0 : 1; //p2.0
056E C3        1304            clr     c
056F E5F0      1305            mov     a,_pwm_Right0
0571 6480      1306            xrl     a,#0x80
0573 8520F0    1307            mov     b,_pwm_count
0576 63F080    1308            xrl     b,#0x80
0579 95F0      1309            subb    a,b
057B 9268      1310            mov  _Timer2_ISR_sloc0_1_0,c
057D B3        1311            cpl     c
057E 92A0      1312            mov     _P2_0,c
0580           1313   ;        robot.c:193: MOTOR_RIGHT1 = pwm_count > pwm_Right1 ? 0 : 1; //p2.1
0580 C3        1314            clr     c
0581 E5B0      1315            mov     a,_pwm_Right1
0583 6480      1316            xrl     a,#0x80
0585 8520F0    1317            mov     b,_pwm_count
0588 63F080    1318            xrl     b,#0x80
058B 95F0      1319            subb    a,b
058D 9268      1320            mov  _Timer2_ISR_sloc0_1_0,c
058F B3        1321            cpl     c
0590 92A1      1322            mov     _P2_1,c
0592 D0D0      1323            pop     psw
0594 D0F0      1324            pop     b
0596 D0E0      1325            pop     acc
0598 32        1326            reti
0599           1327   ;        eliminated unneeded push/pop dpl
0599           1328   ;        eliminated unneeded push/pop dph
0599           1329   ;------------------------------------------------------------
0599           1330   ;Allocation info for local variables in function 'readData'
0599           1331   ;------------------------------------------------------------
0599           1332   ;command                   Allocated to registers r2 
0599           1333   ;------------------------------------------------------------
0599           1334   ;        robot.c:286: unsigned char readData(void) {
0599           1335   ;        -----------------------------------------
0599           1336   ;         function readData
0599           1337   ;        -----------------------------------------
0599           1338   _readData:
0599           1339   ;        robot.c:287: unsigned char command = 0;
0599 7A00      1340            mov     r2,#0x00
059B           1341   ;        robot.c:288: if (!COMMAND_PIN) {
059B 309100    1342            jnb     _P1_1,L004024?
059E 020100    1343            ljmp    L004008?
05A1           1344   L004024?:
05A1           1345   ;        robot.c:289: while (!COMMAND_PIN);
05A1           1346   L004001?:
05A1 309180    1347            jnb     _P1_1,L004001?
05A4           1348   ;        robot.c:290: P1_4 = 1;
05A4 D294      1349            setb    _P1_4
05A6           1350   ;        robot.c:291: waitms((int)(CMDFRQ + CMDFRQ/2));
05A6 900060    1351            mov     dptr,#0x0060
05A9 120100    1352            lcall   _waitms
05AC           1353   ;        robot.c:292: P1_4 = 0;
05AC C294      1354            clr     _P1_4
05AE           1355   ;        robot.c:293: command |= COMMAND_PIN<<2;
05AE A291      1356            mov     c,_P1_1
05B0 E4        1357            clr     a
05B1 33        1358            rlc     a
05B2 25E0      1359            add     a,acc
05B4 25E0      1360            add     a,acc
05B6 FA        1361            mov     r2,a
05B7           1362   ;        robot.c:294: waitms(CMDFRQ);
05B7 900040    1363            mov     dptr,#0x0040
05BA C002      1364            push    ar2
05BC 120100    1365            lcall   _waitms
05BF D002      1366            pop     ar2
05C1           1367   ;        robot.c:295: P1_4 = 1;
05C1 D294      1368            setb    _P1_4
05C3           1369   ;        robot.c:296: command |= COMMAND_PIN<<1;
05C3 A291      1370            mov     c,_P1_1
05C5 E4        1371            clr     a
05C6 33        1372            rlc     a
05C7 25E0      1373            add     a,acc
05C9 4202      1374            orl     ar2,a
05CB           1375   ;        robot.c:297: waitms(CMDFRQ);
05CB 900040    1376            mov     dptr,#0x0040
05CE C002      1377            push    ar2
05D0 120100    1378            lcall   _waitms
05D3 D002      1379            pop     ar2
05D5           1380   ;        robot.c:298: P1_4 = 0;
05D5 C294      1381            clr     _P1_4
05D7           1382   ;        robot.c:299: command |= COMMAND_PIN;
05D7 A291      1383            mov     c,_P1_1
05D9 E4        1384            clr     a
05DA 33        1385            rlc     a
05DB FB        1386            mov     r3,a
05DC 4202      1387            orl     ar2,a
05DE           1388   ;        robot.c:300: while (!COMMAND_PIN);
05DE           1389   L004004?:
05DE 3091C0    1390            jnb     _P1_1,L004004?
05E1           1391   ;        robot.c:304: (command & 0x01) ? '1' : '0');
05E1 EA        1392            mov     a,r2
05E2 30E000    1393            jnb     acc.0,L004011?
05E5 7B31      1394            mov     r3,#0x31
05E7 8001      1395            sjmp    L004012?
05E9           1396   L004011?:
05E9 7B30      1397            mov     r3,#0x30
05EB           1398   L004012?:
05EB EB        1399            mov     a,r3
05EC 33        1400            rlc     a
05ED 95E0      1401            subb    a,acc
05EF FC        1402            mov     r4,a
05F0           1403   ;        robot.c:303: (command & 0x02) ? '1' : '0',
05F0 EA        1404            mov     a,r2
05F1 30E180    1405            jnb     acc.1,L004013?
05F4 7D31      1406            mov     r5,#0x31
05F6 8001      1407            sjmp    L004014?
05F8           1408   L004013?:
05F8 7D30      1409            mov     r5,#0x30
05FA           1410   L004014?:
05FA ED        1411            mov     a,r5
05FB 33        1412            rlc     a
05FC 95E0      1413            subb    a,acc
05FE FE        1414            mov     r6,a
05FF           1415   ;        robot.c:302: (command & 0x04) ? '1' : '0',
05FF EA        1416            mov     a,r2
0600 30E200    1417            jnb     acc.2,L004015?
0603 7F31      1418            mov     r7,#0x31
0605 8001      1419            sjmp    L004016?
0607           1420   L004015?:
0607 7F30      1421            mov     r7,#0x30
0609           1422   L004016?:
0609 EF        1423            mov     a,r7
060A 33        1424            rlc     a
060B 95E0      1425            subb    a,acc
060D F8        1426            mov     r0,a
060E           1427   ;        robot.c:301: printf("\nCommand received: 0b_0%c%c%c\n", 
060E C002      1428            push    ar2
0610 C003      1429            push    ar3
0612 C004      1430            push    ar4
0614 C005      1431            push    ar5
0616 C006      1432            push    ar6
0618 C007      1433            push    ar7
061A C000      1434            push    ar0
061C 7480      1435            mov     a,#__str_10
061E C0E0      1436            push    acc
0620 74A8      1437            mov     a,#(__str_10 >> 8)
0622 C0E0      1438            push    acc
0624 7480      1439            mov     a,#0x80
0626 C0E0      1440            push    acc
0628 120100    1441            lcall   _printf
062B E581      1442            mov     a,sp
062D 24F7      1443            add     a,#0xf7
062F F581      1444            mov     sp,a
0631 D002      1445            pop     ar2
0633           1446   L004008?:
0633           1447   ;        robot.c:306: return command;
0633 8A82      1448            mov     dpl,r2
0635 22        1449            ret
0636           1450   ;------------------------------------------------------------
0636           1451   ;Allocation info for local variables in function 'linetrack'
0636           1452   ;------------------------------------------------------------
0636           1453   ;forwardbackward           Allocated to registers r2 r3 
0636           1454   ;vleft                     Allocated with name '_linetrack_vleft_1_76'
0636           1455   ;vright                    Allocated with name '_linetrack_vright_1_76'
0636           1456   ;sloc0                     Allocated with name '_linetrack_sloc0_1_0'
0636           1457   ;sloc1                     Allocated with name '_linetrack_sloc1_1_0'
0636           1458   ;------------------------------------------------------------
0636           1459   ;        robot.c:313: void linetrack (int forwardbackward) {
0636           1460   ;        -----------------------------------------
0636           1461   ;         function linetrack
0636           1462   ;        -----------------------------------------
0636           1463   _linetrack:
0636 AA82      1464            mov     r2,dpl
0638 AB83      1465            mov     r3,dph
063A           1466   ;        robot.c:321: if (forwardbackward == 0) {
063A EA        1467            mov     a,r2
063B 4B        1468            orl     a,r3
063C 6001      1469            jz      L005010?
063E 020100    1470            ljmp    L005004?
0641           1471   L005010?:
0641           1472   ;        robot.c:322: vleft=Volts_at_Pin(TANK_FL);
0641 75820B    1473            mov     dpl,#0x0B
0644 120100    1474            lcall   _Volts_at_Pin
0647 8582B8    1475            mov     _linetrack_vleft_1_76,dpl
064A 8583B9    1476            mov     (_linetrack_vleft_1_76 + 1),dph
064D 85F0BA    1477            mov     (_linetrack_vleft_1_76 + 2),b
0650 F5BB      1478            mov     (_linetrack_vleft_1_76 + 3),a
0652           1479   ;        robot.c:323: vright=Volts_at_Pin(TANK_FR);
0652 75820C    1480            mov     dpl,#0x0C
0655 120100    1481            lcall   _Volts_at_Pin
0658 858208    1482            mov     _linetrack_vright_1_76,dpl
065B 858309    1483            mov     (_linetrack_vright_1_76 + 1),dph
065E 85F00A    1484            mov     (_linetrack_vright_1_76 + 2),b
0661 F50B      1485            mov     (_linetrack_vright_1_76 + 3),a
0663           1486   ;        robot.c:326: pwm_Left0 = -1;
0663 7570FF    1487            mov     _pwm_Left0,#0xFF
0666           1488   ;        robot.c:327: pwm_Left1 = vright*vright*75/(vright*vright+vleft*vleft);
0666 C008      1489            push    _linetrack_vright_1_76
0668 C009      1490            push    (_linetrack_vright_1_76 + 1)
066A C00A      1491            push    (_linetrack_vright_1_76 + 2)
066C C00B      1492            push    (_linetrack_vright_1_76 + 3)
066E 850882    1493            mov     dpl,_linetrack_vright_1_76
0671 850983    1494            mov     dph,(_linetrack_vright_1_76 + 1)
0674 850AF0    1495            mov     b,(_linetrack_vright_1_76 + 2)
0677 E50B      1496            mov     a,(_linetrack_vright_1_76 + 3)
0679 120100    1497            lcall   ___fsmul
067C AC82      1498            mov     r4,dpl
067E AD83      1499            mov     r5,dph
0680 AEF0      1500            mov     r6,b
0682 FF        1501            mov     r7,a
0683 E581      1502            mov     a,sp
0685 24FC      1503            add     a,#0xfc
0687 F581      1504            mov     sp,a
0689 C004      1505            push    ar4
068B C005      1506            push    ar5
068D C006      1507            push    ar6
068F C007      1508            push    ar7
0691 900000    1509            mov     dptr,#0x0000
0694 75F096    1510            mov     b,#0x96
0697 7442      1511            mov     a,#0x42
0699 120100    1512            lcall   ___fsmul
069C 858258    1513            mov     _linetrack_sloc0_1_0,dpl
069F 858359    1514            mov     (_linetrack_sloc0_1_0 + 1),dph
06A2 85F05A    1515            mov     (_linetrack_sloc0_1_0 + 2),b
06A5 F55B      1516            mov     (_linetrack_sloc0_1_0 + 3),a
06A7 E581      1517            mov     a,sp
06A9 24FC      1518            add     a,#0xfc
06AB F581      1519            mov     sp,a
06AD C008      1520            push    _linetrack_vright_1_76
06AF C009      1521            push    (_linetrack_vright_1_76 + 1)
06B1 C00A      1522            push    (_linetrack_vright_1_76 + 2)
06B3 C00B      1523            push    (_linetrack_vright_1_76 + 3)
06B5 850882    1524            mov     dpl,_linetrack_vright_1_76
06B8 850983    1525            mov     dph,(_linetrack_vright_1_76 + 1)
06BB 850AF0    1526            mov     b,(_linetrack_vright_1_76 + 2)
06BE E50B      1527            mov     a,(_linetrack_vright_1_76 + 3)
06C0 120100    1528            lcall   ___fsmul
06C3 8582A8    1529            mov     _linetrack_sloc1_1_0,dpl
06C6 8583A9    1530            mov     (_linetrack_sloc1_1_0 + 1),dph
06C9 85F0AA    1531            mov     (_linetrack_sloc1_1_0 + 2),b
06CC F5AB      1532            mov     (_linetrack_sloc1_1_0 + 3),a
06CE E581      1533            mov     a,sp
06D0 24FC      1534            add     a,#0xfc
06D2 F581      1535            mov     sp,a
06D4 C0B8      1536            push    _linetrack_vleft_1_76
06D6 C0B9      1537            push    (_linetrack_vleft_1_76 + 1)
06D8 C0BA      1538            push    (_linetrack_vleft_1_76 + 2)
06DA C0BB      1539            push    (_linetrack_vleft_1_76 + 3)
06DC 85B882    1540            mov     dpl,_linetrack_vleft_1_76
06DF 85B983    1541            mov     dph,(_linetrack_vleft_1_76 + 1)
06E2 85BAF0    1542            mov     b,(_linetrack_vleft_1_76 + 2)
06E5 E5BB      1543            mov     a,(_linetrack_vleft_1_76 + 3)
06E7 120100    1544            lcall   ___fsmul
06EA AE82      1545            mov     r6,dpl
06EC AF83      1546            mov     r7,dph
06EE ACF0      1547            mov     r4,b
06F0 FD        1548            mov     r5,a
06F1 E581      1549            mov     a,sp
06F3 24FC      1550            add     a,#0xfc
06F5 F581      1551            mov     sp,a
06F7 C006      1552            push    ar6
06F9 C007      1553            push    ar7
06FB C004      1554            push    ar4
06FD C005      1555            push    ar5
06FF 85A882    1556            mov     dpl,_linetrack_sloc1_1_0
0702 85A983    1557            mov     dph,(_linetrack_sloc1_1_0 + 1)
0705 85AAF0    1558            mov     b,(_linetrack_sloc1_1_0 + 2)
0708 E5AB      1559            mov     a,(_linetrack_sloc1_1_0 + 3)
070A 120100    1560            lcall   ___fsadd
070D AC82      1561            mov     r4,dpl
070F AD83      1562            mov     r5,dph
0711 AEF0      1563            mov     r6,b
0713 FF        1564            mov     r7,a
0714 E581      1565            mov     a,sp
0716 24FC      1566            add     a,#0xfc
0718 F581      1567            mov     sp,a
071A C004      1568            push    ar4
071C C005      1569            push    ar5
071E C006      1570            push    ar6
0720 C007      1571            push    ar7
0722 855882    1572            mov     dpl,_linetrack_sloc0_1_0
0725 855983    1573            mov     dph,(_linetrack_sloc0_1_0 + 1)
0728 855AF0    1574            mov     b,(_linetrack_sloc0_1_0 + 2)
072B E55B      1575            mov     a,(_linetrack_sloc0_1_0 + 3)
072D 120100    1576            lcall   ___fsdiv
0730 AC82      1577            mov     r4,dpl
0732 AD83      1578            mov     r5,dph
0734 AEF0      1579            mov     r6,b
0736 FF        1580            mov     r7,a
0737 E581      1581            mov     a,sp
0739 24FC      1582            add     a,#0xfc
073B F581      1583            mov     sp,a
073D 8C82      1584            mov     dpl,r4
073F 8D83      1585            mov     dph,r5
0741 8EF0      1586            mov     b,r6
0743 EF        1587            mov     a,r7
0744 120100    1588            lcall   ___fs2schar
0747 858230    1589            mov     _pwm_Left1,dpl
074A           1590   ;        robot.c:328: pwm_Right1 = -1;
074A 75B0FF    1591            mov     _pwm_Right1,#0xFF
074D           1592   ;        robot.c:329: pwm_Right0 = vleft*vleft*75/(vright*vright+vleft*vleft);
074D C0B8      1593            push    _linetrack_vleft_1_76
074F C0B9      1594            push    (_linetrack_vleft_1_76 + 1)
0751 C0BA      1595            push    (_linetrack_vleft_1_76 + 2)
0753 C0BB      1596            push    (_linetrack_vleft_1_76 + 3)
0755 85B882    1597            mov     dpl,_linetrack_vleft_1_76
0758 85B983    1598            mov     dph,(_linetrack_vleft_1_76 + 1)
075B 85BAF0    1599            mov     b,(_linetrack_vleft_1_76 + 2)
075E E5BB      1600            mov     a,(_linetrack_vleft_1_76 + 3)
0760 120100    1601            lcall   ___fsmul
0763 AC82      1602            mov     r4,dpl
0765 AD83      1603            mov     r5,dph
0767 AEF0      1604            mov     r6,b
0769 FF        1605            mov     r7,a
076A E581      1606            mov     a,sp
076C 24FC      1607            add     a,#0xfc
076E F581      1608            mov     sp,a
0770 C004      1609            push    ar4
0772 C005      1610            push    ar5
0774 C006      1611            push    ar6
0776 C007      1612            push    ar7
0778 900000    1613            mov     dptr,#0x0000
077B 75F096    1614            mov     b,#0x96
077E 7442      1615            mov     a,#0x42
0780 120100    1616            lcall   ___fsmul
0783 8582A8    1617            mov     _linetrack_sloc1_1_0,dpl
0786 8583A9    1618            mov     (_linetrack_sloc1_1_0 + 1),dph
0789 85F0AA    1619            mov     (_linetrack_sloc1_1_0 + 2),b
078C F5AB      1620            mov     (_linetrack_sloc1_1_0 + 3),a
078E E581      1621            mov     a,sp
0790 24FC      1622            add     a,#0xfc
0792 F581      1623            mov     sp,a
0794 C008      1624            push    _linetrack_vright_1_76
0796 C009      1625            push    (_linetrack_vright_1_76 + 1)
0798 C00A      1626            push    (_linetrack_vright_1_76 + 2)
079A C00B      1627            push    (_linetrack_vright_1_76 + 3)
079C 850882    1628            mov     dpl,_linetrack_vright_1_76
079F 850983    1629            mov     dph,(_linetrack_vright_1_76 + 1)
07A2 850AF0    1630            mov     b,(_linetrack_vright_1_76 + 2)
07A5 E50B      1631            mov     a,(_linetrack_vright_1_76 + 3)
07A7 120100    1632            lcall   ___fsmul
07AA 858258    1633            mov     _linetrack_sloc0_1_0,dpl
07AD 858359    1634            mov     (_linetrack_sloc0_1_0 + 1),dph
07B0 85F05A    1635            mov     (_linetrack_sloc0_1_0 + 2),b
07B3 F55B      1636            mov     (_linetrack_sloc0_1_0 + 3),a
07B5 E581      1637            mov     a,sp
07B7 24FC      1638            add     a,#0xfc
07B9 F581      1639            mov     sp,a
07BB C0B8      1640            push    _linetrack_vleft_1_76
07BD C0B9      1641            push    (_linetrack_vleft_1_76 + 1)
07BF C0BA      1642            push    (_linetrack_vleft_1_76 + 2)
07C1 C0BB      1643            push    (_linetrack_vleft_1_76 + 3)
07C3 85B882    1644            mov     dpl,_linetrack_vleft_1_76
07C6 85B983    1645            mov     dph,(_linetrack_vleft_1_76 + 1)
07C9 85BAF0    1646            mov     b,(_linetrack_vleft_1_76 + 2)
07CC E5BB      1647            mov     a,(_linetrack_vleft_1_76 + 3)
07CE 120100    1648            lcall   ___fsmul
07D1 AE82      1649            mov     r6,dpl
07D3 AF83      1650            mov     r7,dph
07D5 ACF0      1651            mov     r4,b
07D7 FD        1652            mov     r5,a
07D8 E581      1653            mov     a,sp
07DA 24FC      1654            add     a,#0xfc
07DC F581      1655            mov     sp,a
07DE C006      1656            push    ar6
07E0 C007      1657            push    ar7
07E2 C004      1658            push    ar4
07E4 C005      1659            push    ar5
07E6 855882    1660            mov     dpl,_linetrack_sloc0_1_0
07E9 855983    1661            mov     dph,(_linetrack_sloc0_1_0 + 1)
07EC 855AF0    1662            mov     b,(_linetrack_sloc0_1_0 + 2)
07EF E55B      1663            mov     a,(_linetrack_sloc0_1_0 + 3)
07F1 120100    1664            lcall   ___fsadd
07F4 AC82      1665            mov     r4,dpl
07F6 AD83      1666            mov     r5,dph
07F8 AEF0      1667            mov     r6,b
07FA FF        1668            mov     r7,a
07FB E581      1669            mov     a,sp
07FD 24FC      1670            add     a,#0xfc
07FF F581      1671            mov     sp,a
0801 C004      1672            push    ar4
0803 C005      1673            push    ar5
0805 C006      1674            push    ar6
0807 C007      1675            push    ar7
0809 85A882    1676            mov     dpl,_linetrack_sloc1_1_0
080C 85A983    1677            mov     dph,(_linetrack_sloc1_1_0 + 1)
080F 85AAF0    1678            mov     b,(_linetrack_sloc1_1_0 + 2)
0812 E5AB      1679            mov     a,(_linetrack_sloc1_1_0 + 3)
0814 120100    1680            lcall   ___fsdiv
0817 AC82      1681            mov     r4,dpl
0819 AD83      1682            mov     r5,dph
081B AEF0      1683            mov     r6,b
081D FF        1684            mov     r7,a
081E E581      1685            mov     a,sp
0820 24FC      1686            add     a,#0xfc
0822 F581      1687            mov     sp,a
0824 8C82      1688            mov     dpl,r4
0826 8D83      1689            mov     dph,r5
0828 8EF0      1690            mov     b,r6
082A EF        1691            mov     a,r7
082B 120100    1692            lcall   ___fs2schar
082E 8582F0    1693            mov     _pwm_Right0,dpl
0831 22        1694            ret
0832           1695   L005004?:
0832           1696   ;        robot.c:330: } else if (forwardbackward == 1) {
0832 BA0140    1697            cjne    r2,#0x01,L005011?
0835 BB0040    1698            cjne    r3,#0x00,L005011?
0838 8001      1699            sjmp    L005012?
083A           1700   L005011?:
083A 22        1701            ret
083B           1702   L005012?:
083B           1703   ;        robot.c:333: vleft=Volts_at_Pin(TANK_RL);
083B 75820D    1704            mov     dpl,#0x0D
083E 120100    1705            lcall   _Volts_at_Pin
0841 8582B8    1706            mov     _linetrack_vleft_1_76,dpl
0844 8583B9    1707            mov     (_linetrack_vleft_1_76 + 1),dph
0847 85F0BA    1708            mov     (_linetrack_vleft_1_76 + 2),b
084A F5BB      1709            mov     (_linetrack_vleft_1_76 + 3),a
084C           1710   ;        robot.c:334: vright=Volts_at_Pin(TANK_RR);
084C 75820E    1711            mov     dpl,#0x0E
084F 120100    1712            lcall   _Volts_at_Pin
0852 858208    1713            mov     _linetrack_vright_1_76,dpl
0855 858309    1714            mov     (_linetrack_vright_1_76 + 1),dph
0858 85F00A    1715            mov     (_linetrack_vright_1_76 + 2),b
085B F50B      1716            mov     (_linetrack_vright_1_76 + 3),a
085D           1717   ;        robot.c:337: pwm_Left1 = -1;
085D 7530FF    1718            mov     _pwm_Left1,#0xFF
0860           1719   ;        robot.c:338: pwm_Left0 = vright*vright*75/(vright*vright+vleft*vleft);
0860 C008      1720            push    _linetrack_vright_1_76
0862 C009      1721            push    (_linetrack_vright_1_76 + 1)
0864 C00A      1722            push    (_linetrack_vright_1_76 + 2)
0866 C00B      1723            push    (_linetrack_vright_1_76 + 3)
0868 850882    1724            mov     dpl,_linetrack_vright_1_76
086B 850983    1725            mov     dph,(_linetrack_vright_1_76 + 1)
086E 850AF0    1726            mov     b,(_linetrack_vright_1_76 + 2)
0871 E50B      1727            mov     a,(_linetrack_vright_1_76 + 3)
0873 120100    1728            lcall   ___fsmul
0876 AA82      1729            mov     r2,dpl
0878 AB83      1730            mov     r3,dph
087A ACF0      1731            mov     r4,b
087C FD        1732            mov     r5,a
087D E581      1733            mov     a,sp
087F 24FC      1734            add     a,#0xfc
0881 F581      1735            mov     sp,a
0883 C002      1736            push    ar2
0885 C003      1737            push    ar3
0887 C004      1738            push    ar4
0889 C005      1739            push    ar5
088B 900000    1740            mov     dptr,#0x0000
088E 75F096    1741            mov     b,#0x96
0891 7442      1742            mov     a,#0x42
0893 120100    1743            lcall   ___fsmul
0896 AA82      1744            mov     r2,dpl
0898 AB83      1745            mov     r3,dph
089A ACF0      1746            mov     r4,b
089C FD        1747            mov     r5,a
089D E581      1748            mov     a,sp
089F 24FC      1749            add     a,#0xfc
08A1 F581      1750            mov     sp,a
08A3 C002      1751            push    ar2
08A5 C003      1752            push    ar3
08A7 C004      1753            push    ar4
08A9 C005      1754            push    ar5
08AB C008      1755            push    _linetrack_vright_1_76
08AD C009      1756            push    (_linetrack_vright_1_76 + 1)
08AF C00A      1757            push    (_linetrack_vright_1_76 + 2)
08B1 C00B      1758            push    (_linetrack_vright_1_76 + 3)
08B3 850882    1759            mov     dpl,_linetrack_vright_1_76
08B6 850983    1760            mov     dph,(_linetrack_vright_1_76 + 1)
08B9 850AF0    1761            mov     b,(_linetrack_vright_1_76 + 2)
08BC E50B      1762            mov     a,(_linetrack_vright_1_76 + 3)
08BE 120100    1763            lcall   ___fsmul
08C1 8582A8    1764            mov     _linetrack_sloc1_1_0,dpl
08C4 8583A9    1765            mov     (_linetrack_sloc1_1_0 + 1),dph
08C7 85F0AA    1766            mov     (_linetrack_sloc1_1_0 + 2),b
08CA F5AB      1767            mov     (_linetrack_sloc1_1_0 + 3),a
08CC E581      1768            mov     a,sp
08CE 24FC      1769            add     a,#0xfc
08D0 F581      1770            mov     sp,a
08D2 C0B8      1771            push    _linetrack_vleft_1_76
08D4 C0B9      1772            push    (_linetrack_vleft_1_76 + 1)
08D6 C0BA      1773            push    (_linetrack_vleft_1_76 + 2)
08D8 C0BB      1774            push    (_linetrack_vleft_1_76 + 3)
08DA 85B882    1775            mov     dpl,_linetrack_vleft_1_76
08DD 85B983    1776            mov     dph,(_linetrack_vleft_1_76 + 1)
08E0 85BAF0    1777            mov     b,(_linetrack_vleft_1_76 + 2)
08E3 E5BB      1778            mov     a,(_linetrack_vleft_1_76 + 3)
08E5 120100    1779            lcall   ___fsmul
08E8 AE82      1780            mov     r6,dpl
08EA AF83      1781            mov     r7,dph
08EC A8F0      1782            mov     r0,b
08EE F9        1783            mov     r1,a
08EF E581      1784            mov     a,sp
08F1 24FC      1785            add     a,#0xfc
08F3 F581      1786            mov     sp,a
08F5 C006      1787            push    ar6
08F7 C007      1788            push    ar7
08F9 C000      1789            push    ar0
08FB C001      1790            push    ar1
08FD 85A882    1791            mov     dpl,_linetrack_sloc1_1_0
0900 85A983    1792            mov     dph,(_linetrack_sloc1_1_0 + 1)
0903 85AAF0    1793            mov     b,(_linetrack_sloc1_1_0 + 2)
0906 E5AB      1794            mov     a,(_linetrack_sloc1_1_0 + 3)
0908 120100    1795            lcall   ___fsadd
090B AE82      1796            mov     r6,dpl
090D AF83      1797            mov     r7,dph
090F A8F0      1798            mov     r0,b
0911 F9        1799            mov     r1,a
0912 E581      1800            mov     a,sp
0914 24FC      1801            add     a,#0xfc
0916 F581      1802            mov     sp,a
0918 D005      1803            pop     ar5
091A D004      1804            pop     ar4
091C D003      1805            pop     ar3
091E D002      1806            pop     ar2
0920 C006      1807            push    ar6
0922 C007      1808            push    ar7
0924 C000      1809            push    ar0
0926 C001      1810            push    ar1
0928 8A82      1811            mov     dpl,r2
092A 8B83      1812            mov     dph,r3
092C 8CF0      1813            mov     b,r4
092E ED        1814            mov     a,r5
092F 120100    1815            lcall   ___fsdiv
0932 AA82      1816            mov     r2,dpl
0934 AB83      1817            mov     r3,dph
0936 ACF0      1818            mov     r4,b
0938 FD        1819            mov     r5,a
0939 E581      1820            mov     a,sp
093B 24FC      1821            add     a,#0xfc
093D F581      1822            mov     sp,a
093F 8A82      1823            mov     dpl,r2
0941 8B83      1824            mov     dph,r3
0943 8CF0      1825            mov     b,r4
0945 ED        1826            mov     a,r5
0946 120100    1827            lcall   ___fs2schar
0949 858270    1828            mov     _pwm_Left0,dpl
094C           1829   ;        robot.c:339: pwm_Right0 = -1;
094C 75F0FF    1830            mov     _pwm_Right0,#0xFF
094F           1831   ;        robot.c:340: pwm_Right1 = vleft*vleft*75/(vright*vright+vleft*vleft);
094F C0B8      1832            push    _linetrack_vleft_1_76
0951 C0B9      1833            push    (_linetrack_vleft_1_76 + 1)
0953 C0BA      1834            push    (_linetrack_vleft_1_76 + 2)
0955 C0BB      1835            push    (_linetrack_vleft_1_76 + 3)
0957 85B882    1836            mov     dpl,_linetrack_vleft_1_76
095A 85B983    1837            mov     dph,(_linetrack_vleft_1_76 + 1)
095D 85BAF0    1838            mov     b,(_linetrack_vleft_1_76 + 2)
0960 E5BB      1839            mov     a,(_linetrack_vleft_1_76 + 3)
0962 120100    1840            lcall   ___fsmul
0965 AA82      1841            mov     r2,dpl
0967 AB83      1842            mov     r3,dph
0969 ACF0      1843            mov     r4,b
096B FD        1844            mov     r5,a
096C E581      1845            mov     a,sp
096E 24FC      1846            add     a,#0xfc
0970 F581      1847            mov     sp,a
0972 C002      1848            push    ar2
0974 C003      1849            push    ar3
0976 C004      1850            push    ar4
0978 C005      1851            push    ar5
097A 900000    1852            mov     dptr,#0x0000
097D 75F096    1853            mov     b,#0x96
0980 7442      1854            mov     a,#0x42
0982 120100    1855            lcall   ___fsmul
0985 AA82      1856            mov     r2,dpl
0987 AB83      1857            mov     r3,dph
0989 ACF0      1858            mov     r4,b
098B FD        1859            mov     r5,a
098C E581      1860            mov     a,sp
098E 24FC      1861            add     a,#0xfc
0990 F581      1862            mov     sp,a
0992 C002      1863            push    ar2
0994 C003      1864            push    ar3
0996 C004      1865            push    ar4
0998 C005      1866            push    ar5
099A C008      1867            push    _linetrack_vright_1_76
099C C009      1868            push    (_linetrack_vright_1_76 + 1)
099E C00A      1869            push    (_linetrack_vright_1_76 + 2)
09A0 C00B      1870            push    (_linetrack_vright_1_76 + 3)
09A2 850882    1871            mov     dpl,_linetrack_vright_1_76
09A5 850983    1872            mov     dph,(_linetrack_vright_1_76 + 1)
09A8 850AF0    1873            mov     b,(_linetrack_vright_1_76 + 2)
09AB E50B      1874            mov     a,(_linetrack_vright_1_76 + 3)
09AD 120100    1875            lcall   ___fsmul
09B0 8582A8    1876            mov     _linetrack_sloc1_1_0,dpl
09B3 8583A9    1877            mov     (_linetrack_sloc1_1_0 + 1),dph
09B6 85F0AA    1878            mov     (_linetrack_sloc1_1_0 + 2),b
09B9 F5AB      1879            mov     (_linetrack_sloc1_1_0 + 3),a
09BB E581      1880            mov     a,sp
09BD 24FC      1881            add     a,#0xfc
09BF F581      1882            mov     sp,a
09C1 C0B8      1883            push    _linetrack_vleft_1_76
09C3 C0B9      1884            push    (_linetrack_vleft_1_76 + 1)
09C5 C0BA      1885            push    (_linetrack_vleft_1_76 + 2)
09C7 C0BB      1886            push    (_linetrack_vleft_1_76 + 3)
09C9 85B882    1887            mov     dpl,_linetrack_vleft_1_76
09CC 85B983    1888            mov     dph,(_linetrack_vleft_1_76 + 1)
09CF 85BAF0    1889            mov     b,(_linetrack_vleft_1_76 + 2)
09D2 E5BB      1890            mov     a,(_linetrack_vleft_1_76 + 3)
09D4 120100    1891            lcall   ___fsmul
09D7 AE82      1892            mov     r6,dpl
09D9 AF83      1893            mov     r7,dph
09DB A8F0      1894            mov     r0,b
09DD F9        1895            mov     r1,a
09DE E581      1896            mov     a,sp
09E0 24FC      1897            add     a,#0xfc
09E2 F581      1898            mov     sp,a
09E4 C006      1899            push    ar6
09E6 C007      1900            push    ar7
09E8 C000      1901            push    ar0
09EA C001      1902            push    ar1
09EC 85A882    1903            mov     dpl,_linetrack_sloc1_1_0
09EF 85A983    1904            mov     dph,(_linetrack_sloc1_1_0 + 1)
09F2 85AAF0    1905            mov     b,(_linetrack_sloc1_1_0 + 2)
09F5 E5AB      1906            mov     a,(_linetrack_sloc1_1_0 + 3)
09F7 120100    1907            lcall   ___fsadd
09FA AE82      1908            mov     r6,dpl
09FC AF83      1909            mov     r7,dph
09FE A8F0      1910            mov     r0,b
0A00 F9        1911            mov     r1,a
0A01 E581      1912            mov     a,sp
0A03 24FC      1913            add     a,#0xfc
0A05 F581      1914            mov     sp,a
0A07 D005      1915            pop     ar5
0A09 D004      1916            pop     ar4
0A0B D003      1917            pop     ar3
0A0D D002      1918            pop     ar2
0A0F C006      1919            push    ar6
0A11 C007      1920            push    ar7
0A13 C000      1921            push    ar0
0A15 C001      1922            push    ar1
0A17 8A82      1923            mov     dpl,r2
0A19 8B83      1924            mov     dph,r3
0A1B 8CF0      1925            mov     b,r4
0A1D ED        1926            mov     a,r5
0A1E 120100    1927            lcall   ___fsdiv
0A21 AA82      1928            mov     r2,dpl
0A23 AB83      1929            mov     r3,dph
0A25 ACF0      1930            mov     r4,b
0A27 FD        1931            mov     r5,a
0A28 E581      1932            mov     a,sp
0A2A 24FC      1933            add     a,#0xfc
0A2C F581      1934            mov     sp,a
0A2E 8A82      1935            mov     dpl,r2
0A30 8B83      1936            mov     dph,r3
0A32 8CF0      1937            mov     b,r4
0A34 ED        1938            mov     a,r5
0A35 120100    1939            lcall   ___fs2schar
0A38 8582B0    1940            mov     _pwm_Right1,dpl
0A3B 22        1941            ret
0A3C           1942   ;------------------------------------------------------------
0A3C           1943   ;Allocation info for local variables in function 'stopcar'
0A3C           1944   ;------------------------------------------------------------
0A3C           1945   ;------------------------------------------------------------
0A3C           1946   ;        robot.c:348: void stopcar(void) {
0A3C           1947   ;        -----------------------------------------
0A3C           1948   ;         function stopcar
0A3C           1949   ;        -----------------------------------------
0A3C           1950   _stopcar:
0A3C           1951   ;        robot.c:350: pwm_Left1 = -1;
0A3C 7530FF    1952            mov     _pwm_Left1,#0xFF
0A3F           1953   ;        robot.c:351: pwm_Right1 = -1;
0A3F 75B0FF    1954            mov     _pwm_Right1,#0xFF
0A42           1955   ;        robot.c:352: pwm_Left0 = -1;
0A42 7570FF    1956            mov     _pwm_Left0,#0xFF
0A45           1957   ;        robot.c:353: pwm_Right0 = -1;
0A45 75F0FF    1958            mov     _pwm_Right0,#0xFF
0A48 22        1959            ret
0A49           1960   ;------------------------------------------------------------
0A49           1961   ;Allocation info for local variables in function 'turncar'
0A49           1962   ;------------------------------------------------------------
0A49           1963   ;leftright                 Allocated to registers r2 r3 
0A49           1964   ;v                         Allocated with name '_turncar_v_1_82'
0A49           1965   ;direction                 Allocated with name '_turncar_direction_1_82'
0A49           1966   ;------------------------------------------------------------
0A49           1967   ;        robot.c:359: void turncar (int leftright) {
0A49           1968   ;        -----------------------------------------
0A49           1969   ;         function turncar
0A49           1970   ;        -----------------------------------------
0A49           1971   _turncar:
0A49 AA82      1972            mov     r2,dpl
0A4B AB83      1973            mov     r3,dph
0A4D           1974   ;        robot.c:368: pwm_Left0 = -1;
0A4D 7570FF    1975            mov     _pwm_Left0,#0xFF
0A50           1976   ;        robot.c:369: pwm_Left1 = -1;
0A50 7530FF    1977            mov     _pwm_Left1,#0xFF
0A53           1978   ;        robot.c:370: pwm_Right0 = -1;
0A53 75F0FF    1979            mov     _pwm_Right0,#0xFF
0A56           1980   ;        robot.c:371: pwm_Right1 = -1;
0A56 75B0FF    1981            mov     _pwm_Right1,#0xFF
0A59           1982   ;        robot.c:373: direction = currentstate - 1;
0A59 E5F0      1983            mov     a,_currentstate
0A5B 14        1984            dec     a
0A5C F538      1985            mov     _turncar_direction_1_82,a
0A5E           1986   ;        robot.c:376: if (leftright == 1) {
0A5E BA01C0    1987            cjne    r2,#0x01,L007062?
0A61 BB00C0    1988            cjne    r3,#0x00,L007062?
0A64 8001      1989            sjmp    L007063?
0A66           1990   L007062?:
0A66 020100    1991            ljmp    L007022?
0A69           1992   L007063?:
0A69           1993   ;        robot.c:378: pwm_Right0 = 100;
0A69 75F064    1994            mov     _pwm_Right0,#0x64
0A6C           1995   ;        robot.c:381: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0A6C E538      1996            mov     a,_turncar_direction_1_82
0A6E 6001      1997            jz      L007026?
0A70 75820C    1998            mov     dpl,#0x0C
0A73 120100    1999            lcall   _Volts_at_Pin
0A76 AC82      2000            mov     r4,dpl
0A78 AD83      2001            mov     r5,dph
0A7A AEF0      2002            mov     r6,b
0A7C FF        2003            mov     r7,a
0A7D 8001      2004            sjmp    L007027?
0A7F           2005   L007026?:
0A7F 75820E    2006            mov     dpl,#0x0E
0A82 120100    2007            lcall   _Volts_at_Pin
0A85 AC82      2008            mov     r4,dpl
0A87 AD83      2009            mov     r5,dph
0A89 AEF0      2010            mov     r6,b
0A8B FF        2011            mov     r7,a
0A8C           2012   L007027?:
0A8C 8CE8      2013            mov     _turncar_v_1_82,r4
0A8E 8DE9      2014            mov     (_turncar_v_1_82 + 1),r5
0A90 8EEA      2015            mov     (_turncar_v_1_82 + 2),r6
0A92 8FEB      2016            mov     (_turncar_v_1_82 + 3),r7
0A94           2017   ;        robot.c:383: while (v < 1.3) {
0A94           2018   L007001?:
0A94 7466      2019            mov     a,#0x66
0A96 C0E0      2020            push    acc
0A98 C0E0      2021            push    acc
0A9A 74A6      2022            mov     a,#0xA6
0A9C C0E0      2023            push    acc
0A9E 743F      2024            mov     a,#0x3F
0AA0 C0E0      2025            push    acc
0AA2 85E882    2026            mov     dpl,_turncar_v_1_82
0AA5 85E983    2027            mov     dph,(_turncar_v_1_82 + 1)
0AA8 85EAF0    2028            mov     b,(_turncar_v_1_82 + 2)
0AAB E5EB      2029            mov     a,(_turncar_v_1_82 + 3)
0AAD 120100    2030            lcall   ___fslt
0AB0 AC82      2031            mov     r4,dpl
0AB2 E581      2032            mov     a,sp
0AB4 24FC      2033            add     a,#0xfc
0AB6 F581      2034            mov     sp,a
0AB8 EC        2035            mov     a,r4
0AB9 6001      2036            jz      L007003?
0ABB           2037   ;        robot.c:385: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0ABB E538      2038            mov     a,_turncar_direction_1_82
0ABD 6001      2039            jz      L007028?
0ABF 75820C    2040            mov     dpl,#0x0C
0AC2 120100    2041            lcall   _Volts_at_Pin
0AC5 AC82      2042            mov     r4,dpl
0AC7 AD83      2043            mov     r5,dph
0AC9 AEF0      2044            mov     r6,b
0ACB FF        2045            mov     r7,a
0ACC 8001      2046            sjmp    L007029?
0ACE           2047   L007028?:
0ACE 75820E    2048            mov     dpl,#0x0E
0AD1 120100    2049            lcall   _Volts_at_Pin
0AD4 AC82      2050            mov     r4,dpl
0AD6 AD83      2051            mov     r5,dph
0AD8 AEF0      2052            mov     r6,b
0ADA FF        2053            mov     r7,a
0ADB           2054   L007029?:
0ADB 8CE8      2055            mov     _turncar_v_1_82,r4
0ADD 8DE9      2056            mov     (_turncar_v_1_82 + 1),r5
0ADF 8EEA      2057            mov     (_turncar_v_1_82 + 2),r6
0AE1 8FEB      2058            mov     (_turncar_v_1_82 + 3),r7
0AE3 8001      2059            sjmp    L007001?
0AE5           2060   L007003?:
0AE5           2061   ;        robot.c:389: waitms(300);
0AE5 90012C    2062            mov     dptr,#0x012C
0AE8 120100    2063            lcall   _waitms
0AEB           2064   ;        robot.c:392: pwm_Right0 = -1; 
0AEB 75F0FF    2065            mov     _pwm_Right0,#0xFF
0AEE 22        2066            ret
0AEF           2067   L007022?:
0AEF           2068   ;        robot.c:396: else if (leftright == 3) {
0AEF BA0340    2069            cjne    r2,#0x03,L007067?
0AF2 BB0040    2070            cjne    r3,#0x00,L007067?
0AF5 8001      2071            sjmp    L007068?
0AF7           2072   L007067?:
0AF7 020100    2073            ljmp    L007019?
0AFA           2074   L007068?:
0AFA           2075   ;        robot.c:398: pwm_Left1 = 75;
0AFA 75304B    2076            mov     _pwm_Left1,#0x4B
0AFD           2077   ;        robot.c:399: waitms(200);
0AFD 9000C8    2078            mov     dptr,#0x00C8
0B00 120100    2079            lcall   _waitms
0B03           2080   ;        robot.c:402: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0B03 E538      2081            mov     a,_turncar_direction_1_82
0B05 6001      2082            jz      L007030?
0B07 75820B    2083            mov     dpl,#0x0B
0B0A 120100    2084            lcall   _Volts_at_Pin
0B0D AC82      2085            mov     r4,dpl
0B0F AD83      2086            mov     r5,dph
0B11 AEF0      2087            mov     r6,b
0B13 FF        2088            mov     r7,a
0B14 8001      2089            sjmp    L007031?
0B16           2090   L007030?:
0B16 75820D    2091            mov     dpl,#0x0D
0B19 120100    2092            lcall   _Volts_at_Pin
0B1C AC82      2093            mov     r4,dpl
0B1E AD83      2094            mov     r5,dph
0B20 AEF0      2095            mov     r6,b
0B22 FF        2096            mov     r7,a
0B23           2097   L007031?:
0B23 8CE8      2098            mov     _turncar_v_1_82,r4
0B25 8DE9      2099            mov     (_turncar_v_1_82 + 1),r5
0B27 8EEA      2100            mov     (_turncar_v_1_82 + 2),r6
0B29 8FEB      2101            mov     (_turncar_v_1_82 + 3),r7
0B2B           2102   ;        robot.c:404: while (v < 1.3) {
0B2B           2103   L007004?:
0B2B 7466      2104            mov     a,#0x66
0B2D C0E0      2105            push    acc
0B2F C0E0      2106            push    acc
0B31 74A6      2107            mov     a,#0xA6
0B33 C0E0      2108            push    acc
0B35 743F      2109            mov     a,#0x3F
0B37 C0E0      2110            push    acc
0B39 85E882    2111            mov     dpl,_turncar_v_1_82
0B3C 85E983    2112            mov     dph,(_turncar_v_1_82 + 1)
0B3F 85EAF0    2113            mov     b,(_turncar_v_1_82 + 2)
0B42 E5EB      2114            mov     a,(_turncar_v_1_82 + 3)
0B44 120100    2115            lcall   ___fslt
0B47 AC82      2116            mov     r4,dpl
0B49 E581      2117            mov     a,sp
0B4B 24FC      2118            add     a,#0xfc
0B4D F581      2119            mov     sp,a
0B4F EC        2120            mov     a,r4
0B50 6001      2121            jz      L007006?
0B52           2122   ;        robot.c:406: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0B52 E538      2123            mov     a,_turncar_direction_1_82
0B54 6001      2124            jz      L007032?
0B56 75820B    2125            mov     dpl,#0x0B
0B59 120100    2126            lcall   _Volts_at_Pin
0B5C AC82      2127            mov     r4,dpl
0B5E AD83      2128            mov     r5,dph
0B60 AEF0      2129            mov     r6,b
0B62 FF        2130            mov     r7,a
0B63 8001      2131            sjmp    L007033?
0B65           2132   L007032?:
0B65 75820D    2133            mov     dpl,#0x0D
0B68 120100    2134            lcall   _Volts_at_Pin
0B6B AC82      2135            mov     r4,dpl
0B6D AD83      2136            mov     r5,dph
0B6F AEF0      2137            mov     r6,b
0B71 FF        2138            mov     r7,a
0B72           2139   L007033?:
0B72 8CE8      2140            mov     _turncar_v_1_82,r4
0B74 8DE9      2141            mov     (_turncar_v_1_82 + 1),r5
0B76 8EEA      2142            mov     (_turncar_v_1_82 + 2),r6
0B78 8FEB      2143            mov     (_turncar_v_1_82 + 3),r7
0B7A 8001      2144            sjmp    L007004?
0B7C           2145   L007006?:
0B7C           2146   ;        robot.c:410: pwm_Left1 = -1; 
0B7C 7530FF    2147            mov     _pwm_Left1,#0xFF
0B7F 22        2148            ret
0B80           2149   L007019?:
0B80           2150   ;        robot.c:414: else if (leftright == 2) {
0B80 BA0280    2151            cjne    r2,#0x02,L007072?
0B83 BB0080    2152            cjne    r3,#0x00,L007072?
0B86 8001      2153            sjmp    L007073?
0B88           2154   L007072?:
0B88 020100    2155            ljmp    L007016?
0B8B           2156   L007073?:
0B8B           2157   ;        robot.c:416: pwm_Right1 = 100;
0B8B 75B064    2158            mov     _pwm_Right1,#0x64
0B8E           2159   ;        robot.c:419: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0B8E E538      2160            mov     a,_turncar_direction_1_82
0B90 6001      2161            jz      L007034?
0B92 75820C    2162            mov     dpl,#0x0C
0B95 120100    2163            lcall   _Volts_at_Pin
0B98 AC82      2164            mov     r4,dpl
0B9A AD83      2165            mov     r5,dph
0B9C AEF0      2166            mov     r6,b
0B9E FF        2167            mov     r7,a
0B9F 8001      2168            sjmp    L007035?
0BA1           2169   L007034?:
0BA1 75820E    2170            mov     dpl,#0x0E
0BA4 120100    2171            lcall   _Volts_at_Pin
0BA7 AC82      2172            mov     r4,dpl
0BA9 AD83      2173            mov     r5,dph
0BAB AEF0      2174            mov     r6,b
0BAD FF        2175            mov     r7,a
0BAE           2176   L007035?:
0BAE 8CE8      2177            mov     _turncar_v_1_82,r4
0BB0 8DE9      2178            mov     (_turncar_v_1_82 + 1),r5
0BB2 8EEA      2179            mov     (_turncar_v_1_82 + 2),r6
0BB4 8FEB      2180            mov     (_turncar_v_1_82 + 3),r7
0BB6           2181   ;        robot.c:421: while (v < 0.9) {
0BB6           2182   L007007?:
0BB6 7466      2183            mov     a,#0x66
0BB8 C0E0      2184            push    acc
0BBA C0E0      2185            push    acc
0BBC C0E0      2186            push    acc
0BBE 743F      2187            mov     a,#0x3F
0BC0 C0E0      2188            push    acc
0BC2 85E882    2189            mov     dpl,_turncar_v_1_82
0BC5 85E983    2190            mov     dph,(_turncar_v_1_82 + 1)
0BC8 85EAF0    2191            mov     b,(_turncar_v_1_82 + 2)
0BCB E5EB      2192            mov     a,(_turncar_v_1_82 + 3)
0BCD 120100    2193            lcall   ___fslt
0BD0 AC82      2194            mov     r4,dpl
0BD2 E581      2195            mov     a,sp
0BD4 24FC      2196            add     a,#0xfc
0BD6 F581      2197            mov     sp,a
0BD8 EC        2198            mov     a,r4
0BD9 6001      2199            jz      L007009?
0BDB           2200   ;        robot.c:423: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0BDB E538      2201            mov     a,_turncar_direction_1_82
0BDD 6001      2202            jz      L007036?
0BDF 75820C    2203            mov     dpl,#0x0C
0BE2 120100    2204            lcall   _Volts_at_Pin
0BE5 AC82      2205            mov     r4,dpl
0BE7 AD83      2206            mov     r5,dph
0BE9 AEF0      2207            mov     r6,b
0BEB FF        2208            mov     r7,a
0BEC 8001      2209            sjmp    L007037?
0BEE           2210   L007036?:
0BEE 75820E    2211            mov     dpl,#0x0E
0BF1 120100    2212            lcall   _Volts_at_Pin
0BF4 AC82      2213            mov     r4,dpl
0BF6 AD83      2214            mov     r5,dph
0BF8 AEF0      2215            mov     r6,b
0BFA FF        2216            mov     r7,a
0BFB           2217   L007037?:
0BFB 8CE8      2218            mov     _turncar_v_1_82,r4
0BFD 8DE9      2219            mov     (_turncar_v_1_82 + 1),r5
0BFF 8EEA      2220            mov     (_turncar_v_1_82 + 2),r6
0C01 8FEB      2221            mov     (_turncar_v_1_82 + 3),r7
0C03 8001      2222            sjmp    L007007?
0C05           2223   L007009?:
0C05           2224   ;        robot.c:427: waitms(300);
0C05 90012C    2225            mov     dptr,#0x012C
0C08 120100    2226            lcall   _waitms
0C0B           2227   ;        robot.c:430: pwm_Right1 = -1; 
0C0B 75B0FF    2228            mov     _pwm_Right1,#0xFF
0C0E 22        2229            ret
0C0F           2230   L007016?:
0C0F           2231   ;        robot.c:434: else if (leftright == 4) {
0C0F BA04C0    2232            cjne    r2,#0x04,L007077?
0C12 BB00C0    2233            cjne    r3,#0x00,L007077?
0C15 8001      2234            sjmp    L007078?
0C17           2235   L007077?:
0C17 22        2236            ret
0C18           2237   L007078?:
0C18           2238   ;        robot.c:436: pwm_Left0 = 75;
0C18 75704B    2239            mov     _pwm_Left0,#0x4B
0C1B           2240   ;        robot.c:437: waitms(200);
0C1B 9000C8    2241            mov     dptr,#0x00C8
0C1E 120100    2242            lcall   _waitms
0C21           2243   ;        robot.c:440: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0C21 E538      2244            mov     a,_turncar_direction_1_82
0C23 6001      2245            jz      L007038?
0C25 75820B    2246            mov     dpl,#0x0B
0C28 120100    2247            lcall   _Volts_at_Pin
0C2B AA82      2248            mov     r2,dpl
0C2D AB83      2249            mov     r3,dph
0C2F ACF0      2250            mov     r4,b
0C31 FD        2251            mov     r5,a
0C32 8001      2252            sjmp    L007039?
0C34           2253   L007038?:
0C34 75820D    2254            mov     dpl,#0x0D
0C37 120100    2255            lcall   _Volts_at_Pin
0C3A AA82      2256            mov     r2,dpl
0C3C AB83      2257            mov     r3,dph
0C3E ACF0      2258            mov     r4,b
0C40 FD        2259            mov     r5,a
0C41           2260   L007039?:
0C41 8AE8      2261            mov     _turncar_v_1_82,r2
0C43 8BE9      2262            mov     (_turncar_v_1_82 + 1),r3
0C45 8CEA      2263            mov     (_turncar_v_1_82 + 2),r4
0C47 8DEB      2264            mov     (_turncar_v_1_82 + 3),r5
0C49           2265   ;        robot.c:442: while (v < 0.9) {
0C49           2266   L007010?:
0C49 7466      2267            mov     a,#0x66
0C4B C0E0      2268            push    acc
0C4D C0E0      2269            push    acc
0C4F C0E0      2270            push    acc
0C51 743F      2271            mov     a,#0x3F
0C53 C0E0      2272            push    acc
0C55 85E882    2273            mov     dpl,_turncar_v_1_82
0C58 85E983    2274            mov     dph,(_turncar_v_1_82 + 1)
0C5B 85EAF0    2275            mov     b,(_turncar_v_1_82 + 2)
0C5E E5EB      2276            mov     a,(_turncar_v_1_82 + 3)
0C60 120100    2277            lcall   ___fslt
0C63 AA82      2278            mov     r2,dpl
0C65 E581      2279            mov     a,sp
0C67 24FC      2280            add     a,#0xfc
0C69 F581      2281            mov     sp,a
0C6B EA        2282            mov     a,r2
0C6C 6001      2283            jz      L007012?
0C6E           2284   ;        robot.c:444: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0C6E E538      2285            mov     a,_turncar_direction_1_82
0C70 6001      2286            jz      L007040?
0C72 75820B    2287            mov     dpl,#0x0B
0C75 120100    2288            lcall   _Volts_at_Pin
0C78 AA82      2289            mov     r2,dpl
0C7A AB83      2290            mov     r3,dph
0C7C ACF0      2291            mov     r4,b
0C7E FD        2292            mov     r5,a
0C7F 8001      2293            sjmp    L007041?
0C81           2294   L007040?:
0C81 75820D    2295            mov     dpl,#0x0D
0C84 120100    2296            lcall   _Volts_at_Pin
0C87 AA82      2297            mov     r2,dpl
0C89 AB83      2298            mov     r3,dph
0C8B ACF0      2299            mov     r4,b
0C8D FD        2300            mov     r5,a
0C8E           2301   L007041?:
0C8E 8AE8      2302            mov     _turncar_v_1_82,r2
0C90 8BE9      2303            mov     (_turncar_v_1_82 + 1),r3
0C92 8CEA      2304            mov     (_turncar_v_1_82 + 2),r4
0C94 8DEB      2305            mov     (_turncar_v_1_82 + 3),r5
0C96 8001      2306            sjmp    L007010?
0C98           2307   L007012?:
0C98           2308   ;        robot.c:448: pwm_Left0 = -1; 
0C98 7570FF    2309            mov     _pwm_Left0,#0xFF
0C9B 22        2310            ret
0C9C           2311   ;------------------------------------------------------------
0C9C           2312   ;Allocation info for local variables in function 'uturn'
0C9C           2313   ;------------------------------------------------------------
0C9C           2314   ;vleft                     Allocated with name '_uturn_vleft_1_92'
0C9C           2315   ;vright                    Allocated with name '_uturn_vright_1_92'
0C9C           2316   ;------------------------------------------------------------
0C9C           2317   ;        robot.c:455: void uturn(void) {
0C9C           2318   ;        -----------------------------------------
0C9C           2319   ;         function uturn
0C9C           2320   ;        -----------------------------------------
0C9C           2321   _uturn:
0C9C           2322   ;        robot.c:459: vleft = Volts_at_Pin(TANK_FL);
0C9C 75820B    2323            mov     dpl,#0x0B
0C9F 120100    2324            lcall   _Volts_at_Pin
0CA2 858288    2325            mov     _uturn_vleft_1_92,dpl
0CA5 858389    2326            mov     (_uturn_vleft_1_92 + 1),dph
0CA8 85F08A    2327            mov     (_uturn_vleft_1_92 + 2),b
0CAB F58B      2328            mov     (_uturn_vleft_1_92 + 3),a
0CAD           2329   ;        robot.c:460: vright = Volts_at_Pin(TANK_FR);
0CAD 75820C    2330            mov     dpl,#0x0C
0CB0 120100    2331            lcall   _Volts_at_Pin
0CB3 8582D8    2332            mov     _uturn_vright_1_92,dpl
0CB6 8583D9    2333            mov     (_uturn_vright_1_92 + 1),dph
0CB9 85F0DA    2334            mov     (_uturn_vright_1_92 + 2),b
0CBC F5DB      2335            mov     (_uturn_vright_1_92 + 3),a
0CBE           2336   ;        robot.c:463: pwm_Left0 = -1;
0CBE 7570FF    2337            mov     _pwm_Left0,#0xFF
0CC1           2338   ;        robot.c:464: pwm_Left1 = 50;
0CC1 753032    2339            mov     _pwm_Left1,#0x32
0CC4           2340   ;        robot.c:465: pwm_Right0 = -1;
0CC4 75F0FF    2341            mov     _pwm_Right0,#0xFF
0CC7           2342   ;        robot.c:466: pwm_Right1 = 50;
0CC7 75B032    2343            mov     _pwm_Right1,#0x32
0CCA           2344   ;        robot.c:469: waitms(3000);
0CCA 900BB8    2345            mov     dptr,#0x0BB8
0CCD 120100    2346            lcall   _waitms
0CD0           2347   ;        robot.c:471: while ((Volts_at_Pin(TANK_FL)-Volts_at_Pin(TANK_FR))<-0.3 || (Volts_at_Pin(TANK_FL)-Volts_at_Pin(TANK_FR))>0.3);
0CD0           2348   L008002?:
0CD0 75820B    2349            mov     dpl,#0x0B
0CD3 120100    2350            lcall   _Volts_at_Pin
0CD6 AA82      2351            mov     r2,dpl
0CD8 AB83      2352            mov     r3,dph
0CDA ACF0      2353            mov     r4,b
0CDC FD        2354            mov     r5,a
0CDD 75820C    2355            mov     dpl,#0x0C
0CE0 C002      2356            push    ar2
0CE2 C003      2357            push    ar3
0CE4 C004      2358            push    ar4
0CE6 C005      2359            push    ar5
0CE8 120100    2360            lcall   _Volts_at_Pin
0CEB AE82      2361            mov     r6,dpl
0CED AF83      2362            mov     r7,dph
0CEF A8F0      2363            mov     r0,b
0CF1 F9        2364            mov     r1,a
0CF2 D005      2365            pop     ar5
0CF4 D004      2366            pop     ar4
0CF6 D003      2367            pop     ar3
0CF8 D002      2368            pop     ar2
0CFA C006      2369            push    ar6
0CFC C007      2370            push    ar7
0CFE C000      2371            push    ar0
0D00 C001      2372            push    ar1
0D02 8A82      2373            mov     dpl,r2
0D04 8B83      2374            mov     dph,r3
0D06 8CF0      2375            mov     b,r4
0D08 ED        2376            mov     a,r5
0D09 120100    2377            lcall   ___fssub
0D0C AA82      2378            mov     r2,dpl
0D0E AB83      2379            mov     r3,dph
0D10 ACF0      2380            mov     r4,b
0D12 FD        2381            mov     r5,a
0D13 E581      2382            mov     a,sp
0D15 24FC      2383            add     a,#0xfc
0D17 F581      2384            mov     sp,a
0D19 749A      2385            mov     a,#0x9A
0D1B C0E0      2386            push    acc
0D1D 7499      2387            mov     a,#0x99
0D1F C0E0      2388            push    acc
0D21 C0E0      2389            push    acc
0D23 74BE      2390            mov     a,#0xBE
0D25 C0E0      2391            push    acc
0D27 8A82      2392            mov     dpl,r2
0D29 8B83      2393            mov     dph,r3
0D2B 8CF0      2394            mov     b,r4
0D2D ED        2395            mov     a,r5
0D2E 120100    2396            lcall   ___fslt
0D31 AA82      2397            mov     r2,dpl
0D33 E581      2398            mov     a,sp
0D35 24FC      2399            add     a,#0xfc
0D37 F581      2400            mov     sp,a
0D39 EA        2401            mov     a,r2
0D3A 7001      2402            jnz     L008002?
0D3C 75820B    2403            mov     dpl,#0x0B
0D3F 120100    2404            lcall   _Volts_at_Pin
0D42 AA82      2405            mov     r2,dpl
0D44 AB83      2406            mov     r3,dph
0D46 ACF0      2407            mov     r4,b
0D48 FD        2408            mov     r5,a
0D49 75820C    2409            mov     dpl,#0x0C
0D4C C002      2410            push    ar2
0D4E C003      2411            push    ar3
0D50 C004      2412            push    ar4
0D52 C005      2413            push    ar5
0D54 120100    2414            lcall   _Volts_at_Pin
0D57 AE82      2415            mov     r6,dpl
0D59 AF83      2416            mov     r7,dph
0D5B A8F0      2417            mov     r0,b
0D5D F9        2418            mov     r1,a
0D5E D005      2419            pop     ar5
0D60 D004      2420            pop     ar4
0D62 D003      2421            pop     ar3
0D64 D002      2422            pop     ar2
0D66 C006      2423            push    ar6
0D68 C007      2424            push    ar7
0D6A C000      2425            push    ar0
0D6C C001      2426            push    ar1
0D6E 8A82      2427            mov     dpl,r2
0D70 8B83      2428            mov     dph,r3
0D72 8CF0      2429            mov     b,r4
0D74 ED        2430            mov     a,r5
0D75 120100    2431            lcall   ___fssub
0D78 AA82      2432            mov     r2,dpl
0D7A AB83      2433            mov     r3,dph
0D7C ACF0      2434            mov     r4,b
0D7E FD        2435            mov     r5,a
0D7F E581      2436            mov     a,sp
0D81 24FC      2437            add     a,#0xfc
0D83 F581      2438            mov     sp,a
0D85 749A      2439            mov     a,#0x9A
0D87 C0E0      2440            push    acc
0D89 7499      2441            mov     a,#0x99
0D8B C0E0      2442            push    acc
0D8D C0E0      2443            push    acc
0D8F 743E      2444            mov     a,#0x3E
0D91 C0E0      2445            push    acc
0D93 8A82      2446            mov     dpl,r2
0D95 8B83      2447            mov     dph,r3
0D97 8CF0      2448            mov     b,r4
0D99 ED        2449            mov     a,r5
0D9A 120100    2450            lcall   ___fsgt
0D9D AA82      2451            mov     r2,dpl
0D9F E581      2452            mov     a,sp
0DA1 24FC      2453            add     a,#0xfc
0DA3 F581      2454            mov     sp,a
0DA5 EA        2455            mov     a,r2
0DA6 6001      2456            jz      L008010?
0DA8 020100    2457            ljmp    L008002?
0DAB           2458   L008010?:
0DAB 22        2459            ret
0DAC           2460            rseg R_CSEG
0DAC           2461   
0000           2462            rseg R_XINIT
0000           2463   
0000           2464            rseg R_CONST
0000           2465   __str_0:
0000 1B        2466            db 0x1B
0001 5B324A    2467            db '[2J'
0004 00        2468            db 0x00
0005           2469   __str_1:
0005 66726F6E  2470            db 'frontL %f frontR %f backL %f backR %f command %1d, state %1d'
     744C2025
     66206672
     6F6E7452
     20256620
     6261636B
     4C202566
     20626163
     6B522025
     6620636F
     6D6D616E
     64202531
     642C2073
     74617465
     20253164
0041 206C6566  2471            db ' left0 %3d left1 %3d right0 %3d right1 %3d'
     74302025
     3364206C
     65667431
     20253364
     20726967
     68743020
     25336420
     72696768
     74312025
     3364
006B 0D        2472            db 0x0D
006C 00        2473            db 0x00
006D           2474   __str_2:
006D 0A        2475            db 0x0A
006E 494E5445  2476            db 'INTERSECTION'
     52534543
     54494F4E
007A 0A        2477            db 0x0A
007B 00        2478            db 0x00
007C           2479   __str_3:
007C 5475726E  2480            db 'Turn left at the next intersection'
     206C6566
     74206174
     20746865
     206E6578
     7420696E
     74657273
     65637469
     6F6E
009E 0A        2481            db 0x0A
009F 00        2482            db 0x00
00A0           2483   __str_4:
00A0 0A        2484            db 0x0A
00A1 0D        2485            db 0x0D
00A2 20494E54  2486            db ' INTERSECTION'
     45525345
     4354494F
     4E
00AF 0A        2487            db 0x0A
00B0 00        2488            db 0x00
00B1           2489   __str_5:
00B1 5475726E  2490            db 'Turn right at the next intersection'
     20726967
     68742061
     74207468
     65206E65
     78742069
     6E746572
     73656374
     696F6E
00D4 0A        2491            db 0x0A
00D5 00        2492            db 0x00
00D6           2493   __str_6:
00D6 474F21    2494            db 'GO!'
00D9 0A        2495            db 0x0A
00DA 00        2496            db 0x00
00DB           2497   __str_7:
00DB 52657665  2498            db 'Reverse Reverse!'
     72736520
     52657665
     72736521
00EB 0A        2499            db 0x0A
00EC 00        2500            db 0x00
00ED           2501   __str_8:
00ED 48414C54  2502            db 'HALT peasants!'
     20706561
     73616E74
     7321
00FB 0A        2503            db 0x0A
00FC 00        2504            db 0x00
00FD           2505   __str_9:
00FD 55545552  2506            db 'UTURN'
     4E
0102 0A        2507            db 0x0A
0103 00        2508            db 0x00
0104           2509   __str_10:
0104 0A        2510            db 0x0A
0105 436F6D6D  2511            db 'Command received: 0b_0%c%c%c'
     616E6420
     72656365
     69766564
     3A203062
     5F302563
     25632563
0121 0A        2512            db 0x0A
0122 00        2513            db 0x00
0123           2514   
002E           2515            CSEG
002E           2516   
002E           2517   end
