0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Mon Apr 03 00:42:33 2017
0000              5   ;--------------------------------------------------------
                  5   $name robot
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _movecar_PARM_2
0000             28            public _Timer2_ISR
0000             29            public _main
0000             30            public _currentstate
0000             31            public _currentcmd
0000             32            public _direction
0000             33            public _pwm_Right1
0000             34            public _pwm_Right0
0000             35            public _pwm_Left1
0000             36            public _pwm_Left0
0000             37            public _pwm_both
0000             38            public _mode
0000             39            public _pwm_count
0000             40            public _forward_backward
0000             41            public _readData
0000             42            public _linetrack
0000             43            public _stopcar
0000             44            public _turncar
0000             45            public _uturn
0000             46            public _movecar
0000             47   ;--------------------------------------------------------
0000             48   ; Special Function Registers
0000             49   ;--------------------------------------------------------
0000             50   _P0             DATA 0x80
0000             51   _SP             DATA 0x81
0000             52   _DPL            DATA 0x82
0000             53   _DPH            DATA 0x83
0000             54   _EMI0TC         DATA 0x84
0000             55   _EMI0CF         DATA 0x85
0000             56   _OSCLCN         DATA 0x86
0000             57   _PCON           DATA 0x87
0000             58   _TCON           DATA 0x88
0000             59   _TMOD           DATA 0x89
0000             60   _TL0            DATA 0x8a
0000             61   _TL1            DATA 0x8b
0000             62   _TH0            DATA 0x8c
0000             63   _TH1            DATA 0x8d
0000             64   _CKCON          DATA 0x8e
0000             65   _PSCTL          DATA 0x8f
0000             66   _P1             DATA 0x90
0000             67   _TMR3CN         DATA 0x91
0000             68   _TMR4CN         DATA 0x91
0000             69   _TMR3RLL        DATA 0x92
0000             70   _TMR4RLL        DATA 0x92
0000             71   _TMR3RLH        DATA 0x93
0000             72   _TMR4RLH        DATA 0x93
0000             73   _TMR3L          DATA 0x94
0000             74   _TMR4L          DATA 0x94
0000             75   _TMR3H          DATA 0x95
0000             76   _TMR4H          DATA 0x95
0000             77   _USB0ADR        DATA 0x96
0000             78   _USB0DAT        DATA 0x97
0000             79   _SCON           DATA 0x98
0000             80   _SCON0          DATA 0x98
0000             81   _SBUF           DATA 0x99
0000             82   _SBUF0          DATA 0x99
0000             83   _CPT1CN         DATA 0x9a
0000             84   _CPT0CN         DATA 0x9b
0000             85   _CPT1MD         DATA 0x9c
0000             86   _CPT0MD         DATA 0x9d
0000             87   _CPT1MX         DATA 0x9e
0000             88   _CPT0MX         DATA 0x9f
0000             89   _P2             DATA 0xa0
0000             90   _SPI0CFG        DATA 0xa1
0000             91   _SPI0CKR        DATA 0xa2
0000             92   _SPI0DAT        DATA 0xa3
0000             93   _P0MDOUT        DATA 0xa4
0000             94   _P1MDOUT        DATA 0xa5
0000             95   _P2MDOUT        DATA 0xa6
0000             96   _P3MDOUT        DATA 0xa7
0000             97   _IE             DATA 0xa8
0000             98   _CLKSEL         DATA 0xa9
0000             99   _EMI0CN         DATA 0xaa
0000            100   __XPAGE         DATA 0xaa
0000            101   _SBCON1         DATA 0xac
0000            102   _P4MDOUT        DATA 0xae
0000            103   _PFE0CN         DATA 0xaf
0000            104   _P3             DATA 0xb0
0000            105   _OSCXCN         DATA 0xb1
0000            106   _OSCICN         DATA 0xb2
0000            107   _OSCICL         DATA 0xb3
0000            108   _SBRLL1         DATA 0xb4
0000            109   _SBRLH1         DATA 0xb5
0000            110   _FLSCL          DATA 0xb6
0000            111   _FLKEY          DATA 0xb7
0000            112   _IP             DATA 0xb8
0000            113   _CLKMUL         DATA 0xb9
0000            114   _SMBTC          DATA 0xb9
0000            115   _AMX0N          DATA 0xba
0000            116   _AMX0P          DATA 0xbb
0000            117   _ADC0CF         DATA 0xbc
0000            118   _ADC0L          DATA 0xbd
0000            119   _ADC0H          DATA 0xbe
0000            120   _SFRPAGE        DATA 0xbf
0000            121   _SMB0CN         DATA 0xc0
0000            122   _SMB1CN         DATA 0xc0
0000            123   _SMB0CF         DATA 0xc1
0000            124   _SMB1CF         DATA 0xc1
0000            125   _SMB0DAT        DATA 0xc2
0000            126   _SMB1DAT        DATA 0xc2
0000            127   _ADC0GTL        DATA 0xc3
0000            128   _ADC0GTH        DATA 0xc4
0000            129   _ADC0LTL        DATA 0xc5
0000            130   _ADC0LTH        DATA 0xc6
0000            131   _P4             DATA 0xc7
0000            132   _TMR2CN         DATA 0xc8
0000            133   _TMR5CN         DATA 0xc8
0000            134   _REG01CN        DATA 0xc9
0000            135   _TMR2RLL        DATA 0xca
0000            136   _TMR5RLL        DATA 0xca
0000            137   _TMR2RLH        DATA 0xcb
0000            138   _TMR5RLH        DATA 0xcb
0000            139   _TMR2L          DATA 0xcc
0000            140   _TMR5L          DATA 0xcc
0000            141   _TMR2H          DATA 0xcd
0000            142   _TMR5H          DATA 0xcd
0000            143   _SMB0ADM        DATA 0xce
0000            144   _SMB1ADM        DATA 0xce
0000            145   _SMB0ADR        DATA 0xcf
0000            146   _SMB1ADR        DATA 0xcf
0000            147   _PSW            DATA 0xd0
0000            148   _REF0CN         DATA 0xd1
0000            149   _SCON1          DATA 0xd2
0000            150   _SBUF1          DATA 0xd3
0000            151   _P0SKIP         DATA 0xd4
0000            152   _P1SKIP         DATA 0xd5
0000            153   _P2SKIP         DATA 0xd6
0000            154   _USB0XCN        DATA 0xd7
0000            155   _PCA0CN         DATA 0xd8
0000            156   _PCA0MD         DATA 0xd9
0000            157   _PCA0CPM0       DATA 0xda
0000            158   _PCA0CPM1       DATA 0xdb
0000            159   _PCA0CPM2       DATA 0xdc
0000            160   _PCA0CPM3       DATA 0xdd
0000            161   _PCA0CPM4       DATA 0xde
0000            162   _P3SKIP         DATA 0xdf
0000            163   _ACC            DATA 0xe0
0000            164   _XBR0           DATA 0xe1
0000            165   _XBR1           DATA 0xe2
0000            166   _XBR2           DATA 0xe3
0000            167   _IT01CF         DATA 0xe4
0000            168   _CKCON1         DATA 0xe4
0000            169   _SMOD1          DATA 0xe5
0000            170   _EIE1           DATA 0xe6
0000            171   _EIE2           DATA 0xe7
0000            172   _ADC0CN         DATA 0xe8
0000            173   _PCA0CPL1       DATA 0xe9
0000            174   _PCA0CPH1       DATA 0xea
0000            175   _PCA0CPL2       DATA 0xeb
0000            176   _PCA0CPH2       DATA 0xec
0000            177   _PCA0CPL3       DATA 0xed
0000            178   _PCA0CPH3       DATA 0xee
0000            179   _RSTSRC         DATA 0xef
0000            180   _B              DATA 0xf0
0000            181   _P0MDIN         DATA 0xf1
0000            182   _P1MDIN         DATA 0xf2
0000            183   _P2MDIN         DATA 0xf3
0000            184   _P3MDIN         DATA 0xf4
0000            185   _P4MDIN         DATA 0xf5
0000            186   _EIP1           DATA 0xf6
0000            187   _EIP2           DATA 0xf7
0000            188   _SPI0CN         DATA 0xf8
0000            189   _PCA0L          DATA 0xf9
0000            190   _PCA0H          DATA 0xfa
0000            191   _PCA0CPL0       DATA 0xfb
0000            192   _PCA0CPH0       DATA 0xfc
0000            193   _PCA0CPL4       DATA 0xfd
0000            194   _PCA0CPH4       DATA 0xfe
0000            195   _VDM0CN         DATA 0xff
0000            196   _DPTR           DATA 0x8382
0000            197   _TMR2RL         DATA 0xcbca
0000            198   _TMR3RL         DATA 0x9392
0000            199   _TMR4RL         DATA 0x9392
0000            200   _TMR5RL         DATA 0xcbca
0000            201   _TMR2           DATA 0xcdcc
0000            202   _TMR3           DATA 0x9594
0000            203   _TMR4           DATA 0x9594
0000            204   _TMR5           DATA 0xcdcc
0000            205   _SBRL1          DATA 0xb5b4
0000            206   _ADC0           DATA 0xbebd
0000            207   _ADC0GT         DATA 0xc4c3
0000            208   _ADC0LT         DATA 0xc6c5
0000            209   _PCA0           DATA 0xfaf9
0000            210   _PCA0CP1        DATA 0xeae9
0000            211   _PCA0CP2        DATA 0xeceb
0000            212   _PCA0CP3        DATA 0xeeed
0000            213   _PCA0CP0        DATA 0xfcfb
0000            214   _PCA0CP4        DATA 0xfefd
0000            215   ;--------------------------------------------------------
0000            216   ; special function bits
0000            217   ;--------------------------------------------------------
0000            218   _P0_0           BIT 0x80
0000            219   _P0_1           BIT 0x81
0000            220   _P0_2           BIT 0x82
0000            221   _P0_3           BIT 0x83
0000            222   _P0_4           BIT 0x84
0000            223   _P0_5           BIT 0x85
0000            224   _P0_6           BIT 0x86
0000            225   _P0_7           BIT 0x87
0000            226   _TF1            BIT 0x8f
0000            227   _TR1            BIT 0x8e
0000            228   _TF0            BIT 0x8d
0000            229   _TR0            BIT 0x8c
0000            230   _IE1            BIT 0x8b
0000            231   _IT1            BIT 0x8a
0000            232   _IE0            BIT 0x89
0000            233   _IT0            BIT 0x88
0000            234   _P1_0           BIT 0x90
0000            235   _P1_1           BIT 0x91
0000            236   _P1_2           BIT 0x92
0000            237   _P1_3           BIT 0x93
0000            238   _P1_4           BIT 0x94
0000            239   _P1_5           BIT 0x95
0000            240   _P1_6           BIT 0x96
0000            241   _P1_7           BIT 0x97
0000            242   _S0MODE         BIT 0x9f
0000            243   _SCON0_6        BIT 0x9e
0000            244   _MCE0           BIT 0x9d
0000            245   _REN0           BIT 0x9c
0000            246   _TB80           BIT 0x9b
0000            247   _RB80           BIT 0x9a
0000            248   _TI0            BIT 0x99
0000            249   _RI0            BIT 0x98
0000            250   _SCON_6         BIT 0x9e
0000            251   _MCE            BIT 0x9d
0000            252   _REN            BIT 0x9c
0000            253   _TB8            BIT 0x9b
0000            254   _RB8            BIT 0x9a
0000            255   _TI             BIT 0x99
0000            256   _RI             BIT 0x98
0000            257   _P2_0           BIT 0xa0
0000            258   _P2_1           BIT 0xa1
0000            259   _P2_2           BIT 0xa2
0000            260   _P2_3           BIT 0xa3
0000            261   _P2_4           BIT 0xa4
0000            262   _P2_5           BIT 0xa5
0000            263   _P2_6           BIT 0xa6
0000            264   _P2_7           BIT 0xa7
0000            265   _EA             BIT 0xaf
0000            266   _ESPI0          BIT 0xae
0000            267   _ET2            BIT 0xad
0000            268   _ES0            BIT 0xac
0000            269   _ET1            BIT 0xab
0000            270   _EX1            BIT 0xaa
0000            271   _ET0            BIT 0xa9
0000            272   _EX0            BIT 0xa8
0000            273   _P3_0           BIT 0xb0
0000            274   _P3_1           BIT 0xb1
0000            275   _P3_2           BIT 0xb2
0000            276   _P3_3           BIT 0xb3
0000            277   _P3_4           BIT 0xb4
0000            278   _P3_5           BIT 0xb5
0000            279   _P3_6           BIT 0xb6
0000            280   _P3_7           BIT 0xb7
0000            281   _IP_7           BIT 0xbf
0000            282   _PSPI0          BIT 0xbe
0000            283   _PT2            BIT 0xbd
0000            284   _PS0            BIT 0xbc
0000            285   _PT1            BIT 0xbb
0000            286   _PX1            BIT 0xba
0000            287   _PT0            BIT 0xb9
0000            288   _PX0            BIT 0xb8
0000            289   _MASTER0        BIT 0xc7
0000            290   _TXMODE0        BIT 0xc6
0000            291   _STA0           BIT 0xc5
0000            292   _STO0           BIT 0xc4
0000            293   _ACKRQ0         BIT 0xc3
0000            294   _ARBLOST0       BIT 0xc2
0000            295   _ACK0           BIT 0xc1
0000            296   _SI0            BIT 0xc0
0000            297   _MASTER1        BIT 0xc7
0000            298   _TXMODE1        BIT 0xc6
0000            299   _STA1           BIT 0xc5
0000            300   _STO1           BIT 0xc4
0000            301   _ACKRQ1         BIT 0xc3
0000            302   _ARBLOST1       BIT 0xc2
0000            303   _ACK1           BIT 0xc1
0000            304   _SI1            BIT 0xc0
0000            305   _TF2            BIT 0xcf
0000            306   _TF2H           BIT 0xcf
0000            307   _TF2L           BIT 0xce
0000            308   _TF2LEN         BIT 0xcd
0000            309   _TF2CEN         BIT 0xcc
0000            310   _T2SPLIT        BIT 0xcb
0000            311   _TR2            BIT 0xca
0000            312   _T2CSS          BIT 0xc9
0000            313   _T2XCLK         BIT 0xc8
0000            314   _TF5H           BIT 0xcf
0000            315   _TF5L           BIT 0xce
0000            316   _TF5LEN         BIT 0xcd
0000            317   _TMR5CN_4       BIT 0xcc
0000            318   _T5SPLIT        BIT 0xcb
0000            319   _TR5            BIT 0xca
0000            320   _TMR5CN_1       BIT 0xc9
0000            321   _T5XCLK         BIT 0xc8
0000            322   _CY             BIT 0xd7
0000            323   _AC             BIT 0xd6
0000            324   _F0             BIT 0xd5
0000            325   _RS1            BIT 0xd4
0000            326   _RS0            BIT 0xd3
0000            327   _OV             BIT 0xd2
0000            328   _F1             BIT 0xd1
0000            329   _PARITY         BIT 0xd0
0000            330   _CF             BIT 0xdf
0000            331   _CR             BIT 0xde
0000            332   _PCA0CN_5       BIT 0xde
0000            333   _CCF4           BIT 0xdc
0000            334   _CCF3           BIT 0xdb
0000            335   _CCF2           BIT 0xda
0000            336   _CCF1           BIT 0xd9
0000            337   _CCF0           BIT 0xd8
0000            338   _ACC_7          BIT 0xe7
0000            339   _ACC_6          BIT 0xe6
0000            340   _ACC_5          BIT 0xe5
0000            341   _ACC_4          BIT 0xe4
0000            342   _ACC_3          BIT 0xe3
0000            343   _ACC_2          BIT 0xe2
0000            344   _ACC_1          BIT 0xe1
0000            345   _ACC_0          BIT 0xe0
0000            346   _AD0EN          BIT 0xef
0000            347   _AD0TM          BIT 0xee
0000            348   _AD0INT         BIT 0xed
0000            349   _AD0BUSY        BIT 0xec
0000            350   _AD0WINT        BIT 0xeb
0000            351   _AD0CM2         BIT 0xea
0000            352   _AD0CM1         BIT 0xe9
0000            353   _AD0CM0         BIT 0xe8
0000            354   _B_7            BIT 0xf7
0000            355   _B_6            BIT 0xf6
0000            356   _B_5            BIT 0xf5
0000            357   _B_4            BIT 0xf4
0000            358   _B_3            BIT 0xf3
0000            359   _B_2            BIT 0xf2
0000            360   _B_1            BIT 0xf1
0000            361   _B_0            BIT 0xf0
0000            362   _SPIF           BIT 0xff
0000            363   _WCOL           BIT 0xfe
0000            364   _MODF           BIT 0xfd
0000            365   _RXOVRN         BIT 0xfc
0000            366   _NSSMD1         BIT 0xfb
0000            367   _NSSMD0         BIT 0xfa
0000            368   _TXBMT          BIT 0xf9
0000            369   _SPIEN          BIT 0xf8
0000            370   ;--------------------------------------------------------
0000            371   ; overlayable register banks
0000            372   ;--------------------------------------------------------
0000            373            rbank0 segment data overlay
0000            374   ;--------------------------------------------------------
0000            375   ; internal ram data
0000            376   ;--------------------------------------------------------
0000            377            rseg R_DSEG
0000            378   _pwm_count:
0000            379            ds 1
0001            380   _mode:
0001            381            ds 1
0002            382   _pwm_both:
0002            383            ds 1
0003            384   _pwm_Left0:
0003            385            ds 1
0004            386   _pwm_Left1:
0004            387            ds 1
0005            388   _pwm_Right0:
0005            389            ds 1
0006            390   _pwm_Right1:
0006            391            ds 1
0007            392   _direction:
0007            393            ds 1
0008            394   _currentcmd:
0008            395            ds 1
0009            396   _currentstate:
0009            397            ds 1
000A            398   _main_v1_1_57:
000A            399            ds 4
000E            400   _main_v2_1_57:
000E            401            ds 4
0012            402   _main_sloc0_1_0:
0012            403            ds 2
0014            404   _main_sloc1_1_0:
0014            405            ds 4
0018            406   _main_sloc2_1_0:
0018            407            ds 4
001C            408   _linetrack_forwardbackward_1_78:
001C            409            ds 2
001E            410   _linetrack_vleft_1_79:
001E            411            ds 4
0022            412   _linetrack_vright_1_79:
0022            413            ds 4
0026            414   _linetrack_sloc0_1_0:
0026            415            ds 4
002A            416   _turncar_v_1_86:
002A            417            ds 4
002E            418   _turncar_direction_1_86:
002E            419            ds 1
002F            420   _uturn_vleft_1_92:
002F            421            ds 4
0033            422   _uturn_vright_1_92:
0033            423            ds 4
0037            424   ;--------------------------------------------------------
0037            425   ; overlayable items in internal ram 
0037            426   ;--------------------------------------------------------
0000            427            rseg    R_OSEG
0000            428            rseg    R_OSEG
0000            429   _movecar_PARM_2:
0000            430            ds 2
0002            431   ;--------------------------------------------------------
0002            432   ; indirectly addressable internal ram data
0002            433   ;--------------------------------------------------------
0000            434            rseg R_ISEG
0000            435   ;--------------------------------------------------------
0000            436   ; absolute internal ram data
0000            437   ;--------------------------------------------------------
0000            438            DSEG
0000            439   ;--------------------------------------------------------
0000            440   ; bit data
0000            441   ;--------------------------------------------------------
0000            442            rseg R_BSEG
0000            443   _Timer2_ISR_sloc0_1_0:
0000            444            DBIT    1
0001            445   ;--------------------------------------------------------
0001            446   ; paged external ram data
0001            447   ;--------------------------------------------------------
0000            448            rseg R_PSEG
0000            449   ;--------------------------------------------------------
0000            450   ; external ram data
0000            451   ;--------------------------------------------------------
0000            452            rseg R_XSEG
0000            453   ;--------------------------------------------------------
0000            454   ; absolute external ram data
0000            455   ;--------------------------------------------------------
0000            456            XSEG
0000            457   ;--------------------------------------------------------
0000            458   ; external initialized ram data
0000            459   ;--------------------------------------------------------
0000            460            rseg R_IXSEG
0000            461            rseg R_HOME
0000            462            rseg R_GSINIT
0000            463            rseg R_CSEG
0000            464   ;--------------------------------------------------------
0000            465   ; Reset entry point and interrupt vectors
0000            466   ;--------------------------------------------------------
0000            467            CSEG at 0x0000
0000 020100     468            ljmp    _crt0
002B            469            CSEG at 0x002b
002B 020100     470            ljmp    _Timer2_ISR
002E            471   ;--------------------------------------------------------
002E            472   ; global & static initialisations
002E            473   ;--------------------------------------------------------
0000            474            rseg R_HOME
0000            475            rseg R_GSINIT
0000            476            rseg R_GSINIT
0000            477   ;--------------------------------------------------------
0000            478   ; data variables initialization
0000            479   ;--------------------------------------------------------
0000            480            rseg R_DINIT
0000            481   ;        robot.c:10: volatile  char pwm_count=0;
0000 756000     482            mov     _pwm_count,#0x00
0003            483   ;        robot.c:11: volatile  char mode = 0;
0003 752000     484            mov     _mode,#0x00
0006            485   ;        robot.c:12: volatile  char pwm_both =0;
0006 75F000     486            mov     _pwm_both,#0x00
0009            487   ;        robot.c:13: volatile  char pwm_Left0 = 0; //p1.5
0009 75B000     488            mov     _pwm_Left0,#0x00
000C            489   ;        robot.c:14: volatile  char pwm_Left1 = 0; //p1.6
000C 757000     490            mov     _pwm_Left1,#0x00
000F            491   ;        robot.c:15: volatile  char pwm_Right0 = 0; //p2.0
000F 753000     492            mov     _pwm_Right0,#0x00
0012            493   ;        robot.c:16: volatile  char pwm_Right1 = 0; //p2.1
0012 75F000     494            mov     _pwm_Right1,#0x00
0015            495   ;        robot.c:17: volatile  char direction = 0; // 1 for back 0 for forward
0015 75B000     496            mov     _direction,#0x00
0018            497   ;        robot.c:19: volatile  char currentcmd = 0;
0018 757000     498            mov     _currentcmd,#0x00
001B            499   ;        robot.c:20: volatile  char currentstate = 1;
001B 753001     500            mov     _currentstate,#0x01
001E            501            ; The linker places a 'ret' at the end of segment R_DINIT.
001E            502   ;--------------------------------------------------------
001E            503   ; code
001E            504   ;--------------------------------------------------------
0000            505            rseg R_CSEG
0000            506   ;------------------------------------------------------------
0000            507   ;Allocation info for local variables in function 'main'
0000            508   ;------------------------------------------------------------
0000            509   ;v1                        Allocated with name '_main_v1_1_57'
0000            510   ;v2                        Allocated with name '_main_v2_1_57'
0000            511   ;i                         Allocated to registers 
0000            512   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0000            513   ;sloc1                     Allocated with name '_main_sloc1_1_0'
0000            514   ;sloc2                     Allocated with name '_main_sloc2_1_0'
0000            515   ;------------------------------------------------------------
0000            516   ;        robot.c:22: void main(void) {
0000            517   ;        -----------------------------------------
0000            518   ;         function main
0000            519   ;        -----------------------------------------
0000            520   _main:
0000            521            using   0
0000            522   ;        robot.c:24: volatile float v1 = 0;
0000 75F000     523            mov     _main_v1_1_57,#0x00
0003 75F100     524            mov     (_main_v1_1_57 + 1),#0x00
0006 75F200     525            mov     (_main_v1_1_57 + 2),#0x00
0009 75F300     526            mov     (_main_v1_1_57 + 3),#0x00
000C            527   ;        robot.c:25: volatile float v2 = 0;
000C 753000     528            mov     _main_v2_1_57,#0x00
000F 753100     529            mov     (_main_v2_1_57 + 1),#0x00
0012 753200     530            mov     (_main_v2_1_57 + 2),#0x00
0015 753300     531            mov     (_main_v2_1_57 + 3),#0x00
0018            532   ;        robot.c:28: MOTOR_LEFT0 = 0;
0018 C295       533            clr     _P1_5
001A            534   ;        robot.c:29: MOTOR_LEFT1 = 0;
001A C296       535            clr     _P1_6
001C            536   ;        robot.c:30: MOTOR_RIGHT0 = 0;
001C C2A0       537            clr     _P2_0
001E            538   ;        robot.c:31: MOTOR_RIGHT1 = 0;
001E C2A1       539            clr     _P2_1
0020            540   ;        robot.c:34: currentstate = 1;           //1-FORWARD, 2-BACKWARDS, 3-STOPPED, 4-DEBUGGER
0020 753001     541            mov     _currentstate,#0x01
0023            542   ;        robot.c:35: currentcmd = 0;             //0-NO COMMAND, 1-TURN LEFT, 2-TURN RIGHT, 3-FORWARDS, 4-BACKWARDS, 5-STOP, 6-UTURN
0023 757000     543            mov     _currentcmd,#0x00
0026            544   ;        robot.c:38: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0026 7430       545            mov     a,#__str_0
0028 C0E0       546            push    acc
002A 7496       547            mov     a,#(__str_0 >> 8)
002C C0E0       548            push    acc
002E 7480       549            mov     a,#0x80
0030 C0E0       550            push    acc
0032 120100     551            lcall   _printf
0035 1581       552            dec     sp
0037 1581       553            dec     sp
0039 1581       554            dec     sp
003B            555   ;        robot.c:41: InitPinADC(2, 3); // Configure P2.3 as analog input (tank1)
003B 750003     556            mov     _InitPinADC_PARM_2,#0x03
003E 758202     557            mov     dpl,#0x02
0041 120100     558            lcall   _InitPinADC
0044            559   ;        robot.c:42: InitPinADC(2, 4); // Configure P2.4 as analog input         (tank1)
0044 750004     560            mov     _InitPinADC_PARM_2,#0x04
0047 758202     561            mov     dpl,#0x02
004A 120100     562            lcall   _InitPinADC
004D            563   ;        robot.c:43: InitPinADC(2, 5); // Configure P2.5 as analog input (tank2)
004D 750005     564            mov     _InitPinADC_PARM_2,#0x05
0050 758202     565            mov     dpl,#0x02
0053 120100     566            lcall   _InitPinADC
0056            567   ;        robot.c:44: InitPinADC(2, 6); // Configure P2.6 as analog input (tank2)
0056 750006     568            mov     _InitPinADC_PARM_2,#0x06
0059 758202     569            mov     dpl,#0x02
005C 120100     570            lcall   _InitPinADC
005F            571   ;        robot.c:47: InitADC();
005F 120100     572            lcall   _InitADC
0062            573   ;        robot.c:51: while (1) {         
0062            574   L002029?:
0062            575   ;        robot.c:54: currentcmd = readData(); 
0062 120100     576            lcall   _readData
0065 858270     577            mov     _currentcmd,dpl
0068            578   ;        robot.c:58: printf("frontL %f frontR %f backL %f backR %f command %1d\r", Volts_at_Pin(LQFP32_MUX_P2_3),Volts_at_Pin(LQFP32_MUX_P2_4),Volts_at_Pin(LQFP32_MUX_P2_5),Volts_at_Pin(LQFP32_MUX_P2_6), currentcmd);
0068 857070     579            mov     _main_sloc0_1_0,_currentcmd
006B E570       580            mov     a,_currentcmd
006D 33         581            rlc     a
006E 95E0       582            subb    a,acc
0070 F571       583            mov     (_main_sloc0_1_0 + 1),a
0072 75820E     584            mov     dpl,#0x0E
0075 120100     585            lcall   _Volts_at_Pin
0078 AC82       586            mov     r4,dpl
007A AD83       587            mov     r5,dph
007C AEF0       588            mov     r6,b
007E FF         589            mov     r7,a
007F 75820D     590            mov     dpl,#0x0D
0082 C004       591            push    ar4
0084 C005       592            push    ar5
0086 C006       593            push    ar6
0088 C007       594            push    ar7
008A 120100     595            lcall   _Volts_at_Pin
008D 8582B0     596            mov     _main_sloc1_1_0,dpl
0090 8583B1     597            mov     (_main_sloc1_1_0 + 1),dph
0093 85F0B2     598            mov     (_main_sloc1_1_0 + 2),b
0096 F5B3       599            mov     (_main_sloc1_1_0 + 3),a
0098 75820C     600            mov     dpl,#0x0C
009B 120100     601            lcall   _Volts_at_Pin
009E 8582F0     602            mov     _main_sloc2_1_0,dpl
00A1 8583F1     603            mov     (_main_sloc2_1_0 + 1),dph
00A4 85F0F2     604            mov     (_main_sloc2_1_0 + 2),b
00A7 F5F3       605            mov     (_main_sloc2_1_0 + 3),a
00A9 75820B     606            mov     dpl,#0x0B
00AC 120100     607            lcall   _Volts_at_Pin
00AF AA82       608            mov     r2,dpl
00B1 AB83       609            mov     r3,dph
00B3 A8F0       610            mov     r0,b
00B5 F9         611            mov     r1,a
00B6 D007       612            pop     ar7
00B8 D006       613            pop     ar6
00BA D005       614            pop     ar5
00BC D004       615            pop     ar4
00BE C070       616            push    _main_sloc0_1_0
00C0 C071       617            push    (_main_sloc0_1_0 + 1)
00C2 C004       618            push    ar4
00C4 C005       619            push    ar5
00C6 C006       620            push    ar6
00C8 C007       621            push    ar7
00CA C0B0       622            push    _main_sloc1_1_0
00CC C0B1       623            push    (_main_sloc1_1_0 + 1)
00CE C0B2       624            push    (_main_sloc1_1_0 + 2)
00D0 C0B3       625            push    (_main_sloc1_1_0 + 3)
00D2 C0F0       626            push    _main_sloc2_1_0
00D4 C0F1       627            push    (_main_sloc2_1_0 + 1)
00D6 C0F2       628            push    (_main_sloc2_1_0 + 2)
00D8 C0F3       629            push    (_main_sloc2_1_0 + 3)
00DA C002       630            push    ar2
00DC C003       631            push    ar3
00DE C000       632            push    ar0
00E0 C001       633            push    ar1
00E2 7440       634            mov     a,#__str_1
00E4 C0E0       635            push    acc
00E6 7499       636            mov     a,#(__str_1 >> 8)
00E8 C0E0       637            push    acc
00EA 7480       638            mov     a,#0x80
00EC C0E0       639            push    acc
00EE 120100     640            lcall   _printf
00F1 E581       641            mov     a,sp
00F3 24EB       642            add     a,#0xeb
00F5 F581       643            mov     sp,a
00F7            644   ;        robot.c:59: waitms(100);
00F7 900064     645            mov     dptr,#0x0064
00FA 120100     646            lcall   _waitms
00FD            647   ;        robot.c:60: continue;           
00FD            648   ;        robot.c:166: }
00FD 020100     649            ljmp    L002029?
0100            650   ;------------------------------------------------------------
0100            651   ;Allocation info for local variables in function 'Timer2_ISR'
0100            652   ;------------------------------------------------------------
0100            653   ;------------------------------------------------------------
0100            654   ;        robot.c:170: void Timer2_ISR (void) interrupt 5 {
0100            655   ;        -----------------------------------------
0100            656   ;         function Timer2_ISR
0100            657   ;        -----------------------------------------
0100            658   _Timer2_ISR:
0100 C0E0       659            push    acc
0102 C0F0       660            push    b
0104 C0D0       661            push    psw
0106 75D000     662            mov     psw,#0x00
0109            663   ;        robot.c:171: TF2H = 0; // Clear Timer2 interrupt flag
0109 C2CF       664            clr     _TF2H
010B            665   ;        robot.c:173: pwm_count++;
010B 0560       666            inc     _pwm_count
010D            667   ;        robot.c:174: if(pwm_count>100) pwm_count=0;
010D C3         668            clr     c
010E 74E4       669            mov     a,#(0x64 ^ 0x80)
0110 8560F0     670            mov     b,_pwm_count
0113 63F080     671            xrl     b,#0x80
0116 95F0       672            subb    a,b
0118 5001       673            jnc     L003002?
011A 756000     674            mov     _pwm_count,#0x00
011D            675   L003002?:
011D            676   ;        robot.c:177: MOTOR_LEFT0 = pwm_count > pwm_Left0 ? 0 : 1; //p1.5
011D C3         677            clr     c
011E E5B0       678            mov     a,_pwm_Left0
0120 6480       679            xrl     a,#0x80
0122 8560F0     680            mov     b,_pwm_count
0125 63F080     681            xrl     b,#0x80
0128 95F0       682            subb    a,b
012A 92B0       683            mov  _Timer2_ISR_sloc0_1_0,c
012C B3         684            cpl     c
012D 9295       685            mov     _P1_5,c
012F            686   ;        robot.c:178: MOTOR_LEFT1 = pwm_count > pwm_Left1 ? 0 : 1; //p1.6
012F C3         687            clr     c
0130 E570       688            mov     a,_pwm_Left1
0132 6480       689            xrl     a,#0x80
0134 8560F0     690            mov     b,_pwm_count
0137 63F080     691            xrl     b,#0x80
013A 95F0       692            subb    a,b
013C 92B0       693            mov  _Timer2_ISR_sloc0_1_0,c
013E B3         694            cpl     c
013F 9296       695            mov     _P1_6,c
0141            696   ;        robot.c:179: MOTOR_RIGHT0 = pwm_count > pwm_Right0 ? 0 : 1; //p2.0
0141 C3         697            clr     c
0142 E530       698            mov     a,_pwm_Right0
0144 6480       699            xrl     a,#0x80
0146 8560F0     700            mov     b,_pwm_count
0149 63F080     701            xrl     b,#0x80
014C 95F0       702            subb    a,b
014E 92B0       703            mov  _Timer2_ISR_sloc0_1_0,c
0150 B3         704            cpl     c
0151 92A0       705            mov     _P2_0,c
0153            706   ;        robot.c:180: MOTOR_RIGHT1 = pwm_count > pwm_Right1 ? 0 : 1; //p2.1
0153 C3         707            clr     c
0154 E5F0       708            mov     a,_pwm_Right1
0156 6480       709            xrl     a,#0x80
0158 8560F0     710            mov     b,_pwm_count
015B 63F080     711            xrl     b,#0x80
015E 95F0       712            subb    a,b
0160 92B0       713            mov  _Timer2_ISR_sloc0_1_0,c
0162 B3         714            cpl     c
0163 92A1       715            mov     _P2_1,c
0165 D0D0       716            pop     psw
0167 D0F0       717            pop     b
0169 D0E0       718            pop     acc
016B 32         719            reti
016C            720   ;        eliminated unneeded push/pop dpl
016C            721   ;        eliminated unneeded push/pop dph
016C            722   ;------------------------------------------------------------
016C            723   ;Allocation info for local variables in function 'forward_backward'
016C            724   ;------------------------------------------------------------
016C            725   ;direction                 Allocated to registers r2 
016C            726   ;------------------------------------------------------------
016C            727   ;        robot.c:187: void forward_backward(unsigned char direction) {
016C            728   ;        -----------------------------------------
016C            729   ;         function forward_backward
016C            730   ;        -----------------------------------------
016C            731   _forward_backward:
016C            732   ;        robot.c:188: if (direction == 0) { //p2.1,1.6 on
016C E582       733            mov     a,dpl
016E FA         734            mov     r2,a
016F 7001       735            jnz     L004004?
0171            736   ;        robot.c:189: pwm_Left0 = pwm_Right0 = -1;
0171 7530FF     737            mov     _pwm_Right0,#0xFF
0174 75B0FF     738            mov     _pwm_Left0,#0xFF
0177            739   ;        robot.c:190: pwm_Left1 = pwm_Right1 = pwm_both;  //MOTOR_LEFT1 = MOTOR_RIGHT1 = pwm_both;
0177 85F0F0     740            mov     _pwm_Right1,_pwm_both
017A 85F070     741            mov     _pwm_Left1,_pwm_both
017D 22         742            ret
017E            743   L004004?:
017E            744   ;        robot.c:193: else if (direction == 1) { //p2.0,1.5 on
017E BA0180     745            cjne    r2,#0x01,L004006?
0181            746   ;        robot.c:194: pwm_Left1 = pwm_Right1 = -1;
0181 75F0FF     747            mov     _pwm_Right1,#0xFF
0184 7570FF     748            mov     _pwm_Left1,#0xFF
0187            749   ;        robot.c:195: pwm_Left0 = pwm_Right0 = pwm_both; 
0187 85F030     750            mov     _pwm_Right0,_pwm_both
018A 85F0B0     751            mov     _pwm_Left0,_pwm_both
018D            752   L004006?:
018D 22         753            ret
018E            754   ;------------------------------------------------------------
018E            755   ;Allocation info for local variables in function 'readData'
018E            756   ;------------------------------------------------------------
018E            757   ;index                     Allocated to registers r3 
018E            758   ;command                   Allocated to registers r2 
018E            759   ;------------------------------------------------------------
018E            760   ;        robot.c:247: unsigned char readData(void) {
018E            761   ;        -----------------------------------------
018E            762   ;         function readData
018E            763   ;        -----------------------------------------
018E            764   _readData:
018E            765   ;        robot.c:249: unsigned char command = 0;
018E 7A00       766            mov     r2,#0x00
0190            767   ;        robot.c:250: if (!COMMAND_PIN) {
0190 2091C0     768            jb      _P1_1,L005002?
0193            769   ;        robot.c:251: waitms(CMDFRQ*1.5);
0193 900069     770            mov     dptr,#0x0069
0196 C002       771            push    ar2
0198 120100     772            lcall   _waitms
019B D002       773            pop     ar2
019D 7B01       774            mov     r3,#0x01
019F            775   L005011?:
019F            776   ;        robot.c:252: for (; index < 4; index++) {
019F BB0440     777            cjne    r3,#0x04,L005027?
01A2            778   L005027?:
01A2 5001       779            jnc     L005002?
01A4            780   ;        robot.c:254: printf("*****%d:::%d*****\n", index, COMMAND_PIN);
01A4 A291       781            mov     c,_P1_1
01A6 E4         782            clr     a
01A7 33         783            rlc     a
01A8 FC         784            mov     r4,a
01A9 7D00       785            mov     r5,#0x00
01AB 8B06       786            mov     ar6,r3
01AD 7F00       787            mov     r7,#0x00
01AF C002       788            push    ar2
01B1 C003       789            push    ar3
01B3 C004       790            push    ar4
01B5 C005       791            push    ar5
01B7 C006       792            push    ar6
01B9 C007       793            push    ar7
01BB 7480       794            mov     a,#__str_4
01BD C0E0       795            push    acc
01BF 749B       796            mov     a,#(__str_4 >> 8)
01C1 C0E0       797            push    acc
01C3 7480       798            mov     a,#0x80
01C5 C0E0       799            push    acc
01C7 120100     800            lcall   _printf
01CA E581       801            mov     a,sp
01CC 24F9       802            add     a,#0xf9
01CE F581       803            mov     sp,a
01D0 D003       804            pop     ar3
01D2 D002       805            pop     ar2
01D4            806   ;        robot.c:255: command |= COMMAND_PIN << index;
01D4 A291       807            mov     c,_P1_1
01D6 E4         808            clr     a
01D7 33         809            rlc     a
01D8 FC         810            mov     r4,a
01D9 8BF0       811            mov     b,r3
01DB 05F0       812            inc     b
01DD EC         813            mov     a,r4
01DE 8001       814            sjmp    L005031?
01E0            815   L005029?:
01E0 25E0       816            add     a,acc
01E2            817   L005031?:
01E2 D5F000     818            djnz    b,L005029?
01E5 4202       819            orl     ar2,a
01E7            820   ;        robot.c:256: waitms(CMDFRQ);
01E7 900046     821            mov     dptr,#0x0046
01EA C002       822            push    ar2
01EC C003       823            push    ar3
01EE 120100     824            lcall   _waitms
01F1 D003       825            pop     ar3
01F3 D002       826            pop     ar2
01F5            827   ;        robot.c:252: for (; index < 4; index++) {
01F5 0B         828            inc     r3
01F6 8001       829            sjmp    L005011?
01F8            830   L005002?:
01F8            831   ;        robot.c:261: if ((command == CMD_LEFT) ||
01F8 BA0140     832            cjne    r2,#0x01,L005032?
01FB 8001       833            sjmp    L005003?
01FD            834   L005032?:
01FD            835   ;        robot.c:262: (command == CMD_RIGHT) ||
01FD BA02C0     836            cjne    r2,#0x02,L005033?
0200 8001       837            sjmp    L005003?
0202            838   L005033?:
0202            839   ;        robot.c:263: (command == CMD_FORWARD) ||
0202 BA0300     840            cjne    r2,#0x03,L005034?
0205 8001       841            sjmp    L005003?
0207            842   L005034?:
0207            843   ;        robot.c:264: (command == CMD_REVERSE) ||
0207 BA0440     844            cjne    r2,#0x04,L005035?
020A 8001       845            sjmp    L005003?
020C            846   L005035?:
020C            847   ;        robot.c:265: (command == CMD_STOP) ||
020C BA0580     848            cjne    r2,#0x05,L005036?
020F 8001       849            sjmp    L005003?
0211            850   L005036?:
0211            851   ;        robot.c:266: (command == CMD_UTURN))    {
0211 BA06C0     852            cjne    r2,#0x06,L005004?
0214            853   L005003?:
0214            854   ;        robot.c:267: printf("Command received: 0x%02x\n", command);
0214 8A03       855            mov     ar3,r2
0216 7C00       856            mov     r4,#0x00
0218 C002       857            push    ar2
021A C003       858            push    ar3
021C C004       859            push    ar4
021E 7400       860            mov     a,#__str_5
0220 C0E0       861            push    acc
0222 749E       862            mov     a,#(__str_5 >> 8)
0224 C0E0       863            push    acc
0226 7480       864            mov     a,#0x80
0228 C0E0       865            push    acc
022A 120100     866            lcall   _printf
022D E581       867            mov     a,sp
022F 24FB       868            add     a,#0xfb
0231 F581       869            mov     sp,a
0233 D002       870            pop     ar2
0235            871   ;        robot.c:268: return command;
0235 8A82       872            mov     dpl,r2
0237            873   ;        robot.c:270: else return CMD_NONE;
0237 22         874            ret
0238            875   L005004?:
0238 758200     876            mov     dpl,#0x00
023B 22         877            ret
023C            878   ;------------------------------------------------------------
023C            879   ;Allocation info for local variables in function 'linetrack'
023C            880   ;------------------------------------------------------------
023C            881   ;forwardbackward           Allocated with name '_linetrack_forwardbackward_1_78'
023C            882   ;vleft                     Allocated with name '_linetrack_vleft_1_79'
023C            883   ;vright                    Allocated with name '_linetrack_vright_1_79'
023C            884   ;sloc0                     Allocated with name '_linetrack_sloc0_1_0'
023C            885   ;------------------------------------------------------------
023C            886   ;        robot.c:277: void linetrack (int forwardbackward) {
023C            887   ;        -----------------------------------------
023C            888   ;         function linetrack
023C            889   ;        -----------------------------------------
023C            890   _linetrack:
023C 858240     891            mov     _linetrack_forwardbackward_1_78,dpl
023F 858341     892            mov     (_linetrack_forwardbackward_1_78 + 1),dph
0242            893   ;        robot.c:283: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0242 75820B     894            mov     dpl,#0x0B
0245 120100     895            lcall   _Volts_at_Pin
0248 858290     896            mov     _linetrack_vleft_1_79,dpl
024B 858391     897            mov     (_linetrack_vleft_1_79 + 1),dph
024E 85F092     898            mov     (_linetrack_vleft_1_79 + 2),b
0251 F593       899            mov     (_linetrack_vleft_1_79 + 3),a
0253            900   ;        robot.c:284: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0253 75820C     901            mov     dpl,#0x0C
0256 120100     902            lcall   _Volts_at_Pin
0259 8582E0     903            mov     _linetrack_vright_1_79,dpl
025C 8583E1     904            mov     (_linetrack_vright_1_79 + 1),dph
025F 85F0E2     905            mov     (_linetrack_vright_1_79 + 2),b
0262 F5E3       906            mov     (_linetrack_vright_1_79 + 3),a
0264            907   ;        robot.c:287: if (forwardbackward == 2) {
0264 7402       908            mov     a,#0x02
0266 B54040     909            cjne    a,_linetrack_forwardbackward_1_78,L006013?
0269 E4         910            clr     a
026A B54140     911            cjne    a,(_linetrack_forwardbackward_1_78 + 1),L006013?
026D 8001       912            sjmp    L006014?
026F            913   L006013?:
026F 8001       914            sjmp    L006002?
0271            915   L006014?:
0271            916   ;        robot.c:288: vleft=Volts_at_Pin(LQFP32_MUX_P2_5);
0271 75820D     917            mov     dpl,#0x0D
0274 120100     918            lcall   _Volts_at_Pin
0277 858290     919            mov     _linetrack_vleft_1_79,dpl
027A 858391     920            mov     (_linetrack_vleft_1_79 + 1),dph
027D 85F092     921            mov     (_linetrack_vleft_1_79 + 2),b
0280 F593       922            mov     (_linetrack_vleft_1_79 + 3),a
0282            923   ;        robot.c:289: vright=Volts_at_Pin(LQFP32_MUX_P2_6);
0282 75820E     924            mov     dpl,#0x0E
0285 120100     925            lcall   _Volts_at_Pin
0288 8582E0     926            mov     _linetrack_vright_1_79,dpl
028B 8583E1     927            mov     (_linetrack_vright_1_79 + 1),dph
028E 85F0E2     928            mov     (_linetrack_vright_1_79 + 2),b
0291 F5E3       929            mov     (_linetrack_vright_1_79 + 3),a
0293            930   L006002?:
0293            931   ;        robot.c:293: pwm_Left0 = -1;
0293 75B0FF     932            mov     _pwm_Left0,#0xFF
0296            933   ;        robot.c:294: pwm_Left1 = vright*vright*75/(vright*vright+vleft*vleft);
0296 C0E0       934            push    _linetrack_vright_1_79
0298 C0E1       935            push    (_linetrack_vright_1_79 + 1)
029A C0E2       936            push    (_linetrack_vright_1_79 + 2)
029C C0E3       937            push    (_linetrack_vright_1_79 + 3)
029E 85E082     938            mov     dpl,_linetrack_vright_1_79
02A1 85E183     939            mov     dph,(_linetrack_vright_1_79 + 1)
02A4 85E2F0     940            mov     b,(_linetrack_vright_1_79 + 2)
02A7 E5E3       941            mov     a,(_linetrack_vright_1_79 + 3)
02A9 120100     942            lcall   ___fsmul
02AC AC82       943            mov     r4,dpl
02AE AD83       944            mov     r5,dph
02B0 AEF0       945            mov     r6,b
02B2 FF         946            mov     r7,a
02B3 E581       947            mov     a,sp
02B5 24FC       948            add     a,#0xfc
02B7 F581       949            mov     sp,a
02B9 C004       950            push    ar4
02BB C005       951            push    ar5
02BD C006       952            push    ar6
02BF C007       953            push    ar7
02C1 900000     954            mov     dptr,#0x0000
02C4 75F096     955            mov     b,#0x96
02C7 7442       956            mov     a,#0x42
02C9 120100     957            lcall   ___fsmul
02CC AC82       958            mov     r4,dpl
02CE AD83       959            mov     r5,dph
02D0 AEF0       960            mov     r6,b
02D2 FF         961            mov     r7,a
02D3 E581       962            mov     a,sp
02D5 24FC       963            add     a,#0xfc
02D7 F581       964            mov     sp,a
02D9 C004       965            push    ar4
02DB C005       966            push    ar5
02DD C006       967            push    ar6
02DF C007       968            push    ar7
02E1 C0E0       969            push    _linetrack_vright_1_79
02E3 C0E1       970            push    (_linetrack_vright_1_79 + 1)
02E5 C0E2       971            push    (_linetrack_vright_1_79 + 2)
02E7 C0E3       972            push    (_linetrack_vright_1_79 + 3)
02E9 85E082     973            mov     dpl,_linetrack_vright_1_79
02EC 85E183     974            mov     dph,(_linetrack_vright_1_79 + 1)
02EF 85E2F0     975            mov     b,(_linetrack_vright_1_79 + 2)
02F2 E5E3       976            mov     a,(_linetrack_vright_1_79 + 3)
02F4 120100     977            lcall   ___fsmul
02F7 858230     978            mov     _linetrack_sloc0_1_0,dpl
02FA 858331     979            mov     (_linetrack_sloc0_1_0 + 1),dph
02FD 85F032     980            mov     (_linetrack_sloc0_1_0 + 2),b
0300 F533       981            mov     (_linetrack_sloc0_1_0 + 3),a
0302 E581       982            mov     a,sp
0304 24FC       983            add     a,#0xfc
0306 F581       984            mov     sp,a
0308 C090       985            push    _linetrack_vleft_1_79
030A C091       986            push    (_linetrack_vleft_1_79 + 1)
030C C092       987            push    (_linetrack_vleft_1_79 + 2)
030E C093       988            push    (_linetrack_vleft_1_79 + 3)
0310 859082     989            mov     dpl,_linetrack_vleft_1_79
0313 859183     990            mov     dph,(_linetrack_vleft_1_79 + 1)
0316 8592F0     991            mov     b,(_linetrack_vleft_1_79 + 2)
0319 E593       992            mov     a,(_linetrack_vleft_1_79 + 3)
031B 120100     993            lcall   ___fsmul
031E AA82       994            mov     r2,dpl
0320 AB83       995            mov     r3,dph
0322 A8F0       996            mov     r0,b
0324 F9         997            mov     r1,a
0325 E581       998            mov     a,sp
0327 24FC       999            add     a,#0xfc
0329 F581      1000            mov     sp,a
032B C002      1001            push    ar2
032D C003      1002            push    ar3
032F C000      1003            push    ar0
0331 C001      1004            push    ar1
0333 853082    1005            mov     dpl,_linetrack_sloc0_1_0
0336 853183    1006            mov     dph,(_linetrack_sloc0_1_0 + 1)
0339 8532F0    1007            mov     b,(_linetrack_sloc0_1_0 + 2)
033C E533      1008            mov     a,(_linetrack_sloc0_1_0 + 3)
033E 120100    1009            lcall   ___fsadd
0341 AA82      1010            mov     r2,dpl
0343 AB83      1011            mov     r3,dph
0345 A8F0      1012            mov     r0,b
0347 F9        1013            mov     r1,a
0348 E581      1014            mov     a,sp
034A 24FC      1015            add     a,#0xfc
034C F581      1016            mov     sp,a
034E D007      1017            pop     ar7
0350 D006      1018            pop     ar6
0352 D005      1019            pop     ar5
0354 D004      1020            pop     ar4
0356 C002      1021            push    ar2
0358 C003      1022            push    ar3
035A C000      1023            push    ar0
035C C001      1024            push    ar1
035E 8C82      1025            mov     dpl,r4
0360 8D83      1026            mov     dph,r5
0362 8EF0      1027            mov     b,r6
0364 EF        1028            mov     a,r7
0365 120100    1029            lcall   ___fsdiv
0368 AA82      1030            mov     r2,dpl
036A AB83      1031            mov     r3,dph
036C ACF0      1032            mov     r4,b
036E FD        1033            mov     r5,a
036F E581      1034            mov     a,sp
0371 24FC      1035            add     a,#0xfc
0373 F581      1036            mov     sp,a
0375 8A82      1037            mov     dpl,r2
0377 8B83      1038            mov     dph,r3
0379 8CF0      1039            mov     b,r4
037B ED        1040            mov     a,r5
037C 120100    1041            lcall   ___fs2schar
037F 858270    1042            mov     _pwm_Left1,dpl
0382           1043   ;        robot.c:295: pwm_Right1 = -1;
0382 75F0FF    1044            mov     _pwm_Right1,#0xFF
0385           1045   ;        robot.c:296: pwm_Right0 = vleft*vleft*75/(vright*vright+vleft*vleft);
0385 C090      1046            push    _linetrack_vleft_1_79
0387 C091      1047            push    (_linetrack_vleft_1_79 + 1)
0389 C092      1048            push    (_linetrack_vleft_1_79 + 2)
038B C093      1049            push    (_linetrack_vleft_1_79 + 3)
038D 859082    1050            mov     dpl,_linetrack_vleft_1_79
0390 859183    1051            mov     dph,(_linetrack_vleft_1_79 + 1)
0393 8592F0    1052            mov     b,(_linetrack_vleft_1_79 + 2)
0396 E593      1053            mov     a,(_linetrack_vleft_1_79 + 3)
0398 120100    1054            lcall   ___fsmul
039B AA82      1055            mov     r2,dpl
039D AB83      1056            mov     r3,dph
039F ACF0      1057            mov     r4,b
03A1 FD        1058            mov     r5,a
03A2 E581      1059            mov     a,sp
03A4 24FC      1060            add     a,#0xfc
03A6 F581      1061            mov     sp,a
03A8 C002      1062            push    ar2
03AA C003      1063            push    ar3
03AC C004      1064            push    ar4
03AE C005      1065            push    ar5
03B0 900000    1066            mov     dptr,#0x0000
03B3 75F096    1067            mov     b,#0x96
03B6 7442      1068            mov     a,#0x42
03B8 120100    1069            lcall   ___fsmul
03BB AA82      1070            mov     r2,dpl
03BD AB83      1071            mov     r3,dph
03BF ACF0      1072            mov     r4,b
03C1 FD        1073            mov     r5,a
03C2 E581      1074            mov     a,sp
03C4 24FC      1075            add     a,#0xfc
03C6 F581      1076            mov     sp,a
03C8 C002      1077            push    ar2
03CA C003      1078            push    ar3
03CC C004      1079            push    ar4
03CE C005      1080            push    ar5
03D0 C0E0      1081            push    _linetrack_vright_1_79
03D2 C0E1      1082            push    (_linetrack_vright_1_79 + 1)
03D4 C0E2      1083            push    (_linetrack_vright_1_79 + 2)
03D6 C0E3      1084            push    (_linetrack_vright_1_79 + 3)
03D8 85E082    1085            mov     dpl,_linetrack_vright_1_79
03DB 85E183    1086            mov     dph,(_linetrack_vright_1_79 + 1)
03DE 85E2F0    1087            mov     b,(_linetrack_vright_1_79 + 2)
03E1 E5E3      1088            mov     a,(_linetrack_vright_1_79 + 3)
03E3 120100    1089            lcall   ___fsmul
03E6 858230    1090            mov     _linetrack_sloc0_1_0,dpl
03E9 858331    1091            mov     (_linetrack_sloc0_1_0 + 1),dph
03EC 85F032    1092            mov     (_linetrack_sloc0_1_0 + 2),b
03EF F533      1093            mov     (_linetrack_sloc0_1_0 + 3),a
03F1 E581      1094            mov     a,sp
03F3 24FC      1095            add     a,#0xfc
03F5 F581      1096            mov     sp,a
03F7 C090      1097            push    _linetrack_vleft_1_79
03F9 C091      1098            push    (_linetrack_vleft_1_79 + 1)
03FB C092      1099            push    (_linetrack_vleft_1_79 + 2)
03FD C093      1100            push    (_linetrack_vleft_1_79 + 3)
03FF 859082    1101            mov     dpl,_linetrack_vleft_1_79
0402 859183    1102            mov     dph,(_linetrack_vleft_1_79 + 1)
0405 8592F0    1103            mov     b,(_linetrack_vleft_1_79 + 2)
0408 E593      1104            mov     a,(_linetrack_vleft_1_79 + 3)
040A 120100    1105            lcall   ___fsmul
040D AE82      1106            mov     r6,dpl
040F AF83      1107            mov     r7,dph
0411 A8F0      1108            mov     r0,b
0413 F9        1109            mov     r1,a
0414 E581      1110            mov     a,sp
0416 24FC      1111            add     a,#0xfc
0418 F581      1112            mov     sp,a
041A C006      1113            push    ar6
041C C007      1114            push    ar7
041E C000      1115            push    ar0
0420 C001      1116            push    ar1
0422 853082    1117            mov     dpl,_linetrack_sloc0_1_0
0425 853183    1118            mov     dph,(_linetrack_sloc0_1_0 + 1)
0428 8532F0    1119            mov     b,(_linetrack_sloc0_1_0 + 2)
042B E533      1120            mov     a,(_linetrack_sloc0_1_0 + 3)
042D 120100    1121            lcall   ___fsadd
0430 AE82      1122            mov     r6,dpl
0432 AF83      1123            mov     r7,dph
0434 A8F0      1124            mov     r0,b
0436 F9        1125            mov     r1,a
0437 E581      1126            mov     a,sp
0439 24FC      1127            add     a,#0xfc
043B F581      1128            mov     sp,a
043D D005      1129            pop     ar5
043F D004      1130            pop     ar4
0441 D003      1131            pop     ar3
0443 D002      1132            pop     ar2
0445 C006      1133            push    ar6
0447 C007      1134            push    ar7
0449 C000      1135            push    ar0
044B C001      1136            push    ar1
044D 8A82      1137            mov     dpl,r2
044F 8B83      1138            mov     dph,r3
0451 8CF0      1139            mov     b,r4
0453 ED        1140            mov     a,r5
0454 120100    1141            lcall   ___fsdiv
0457 AA82      1142            mov     r2,dpl
0459 AB83      1143            mov     r3,dph
045B ACF0      1144            mov     r4,b
045D FD        1145            mov     r5,a
045E E581      1146            mov     a,sp
0460 24FC      1147            add     a,#0xfc
0462 F581      1148            mov     sp,a
0464 8A82      1149            mov     dpl,r2
0466 8B83      1150            mov     dph,r3
0468 8CF0      1151            mov     b,r4
046A ED        1152            mov     a,r5
046B 120100    1153            lcall   ___fs2schar
046E 858230    1154            mov     _pwm_Right0,dpl
0471           1155   ;        robot.c:300: if ((forwardbackward == 1)||(forwardbackward == 3)) {
0471 7401      1156            mov     a,#0x01
0473 B54000    1157            cjne    a,_linetrack_forwardbackward_1_78,L006015?
0476 E4        1158            clr     a
0477 B54100    1159            cjne    a,(_linetrack_forwardbackward_1_78 + 1),L006015?
047A 8001      1160            sjmp    L006005?
047C           1161   L006015?:
047C 7403      1162            mov     a,#0x03
047E B54080    1163            cjne    a,_linetrack_forwardbackward_1_78,L006016?
0481 E4        1164            clr     a
0482 B54180    1165            cjne    a,(_linetrack_forwardbackward_1_78 + 1),L006016?
0485 8001      1166            sjmp    L006017?
0487           1167   L006016?:
0487 22        1168            ret
0488           1169   L006017?:
0488           1170   L006005?:
0488           1171   ;        robot.c:302: vleft=Volts_at_Pin(LQFP32_MUX_P2_5);
0488 75820D    1172            mov     dpl,#0x0D
048B 120100    1173            lcall   _Volts_at_Pin
048E 858290    1174            mov     _linetrack_vleft_1_79,dpl
0491 858391    1175            mov     (_linetrack_vleft_1_79 + 1),dph
0494 85F092    1176            mov     (_linetrack_vleft_1_79 + 2),b
0497 F593      1177            mov     (_linetrack_vleft_1_79 + 3),a
0499           1178   ;        robot.c:303: vright=Volts_at_Pin(LQFP32_MUX_P2_6);
0499 75820E    1179            mov     dpl,#0x0E
049C 120100    1180            lcall   _Volts_at_Pin
049F 8582E0    1181            mov     _linetrack_vright_1_79,dpl
04A2 8583E1    1182            mov     (_linetrack_vright_1_79 + 1),dph
04A5 85F0E2    1183            mov     (_linetrack_vright_1_79 + 2),b
04A8 F5E3      1184            mov     (_linetrack_vright_1_79 + 3),a
04AA           1185   ;        robot.c:306: if (forwardbackward == 3) {
04AA 7403      1186            mov     a,#0x03
04AC B54000    1187            cjne    a,_linetrack_forwardbackward_1_78,L006018?
04AF E4        1188            clr     a
04B0 B54100    1189            cjne    a,(_linetrack_forwardbackward_1_78 + 1),L006018?
04B3 8001      1190            sjmp    L006019?
04B5           1191   L006018?:
04B5 8001      1192            sjmp    L006004?
04B7           1193   L006019?:
04B7           1194   ;        robot.c:307: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
04B7 75820B    1195            mov     dpl,#0x0B
04BA 120100    1196            lcall   _Volts_at_Pin
04BD 858290    1197            mov     _linetrack_vleft_1_79,dpl
04C0 858391    1198            mov     (_linetrack_vleft_1_79 + 1),dph
04C3 85F092    1199            mov     (_linetrack_vleft_1_79 + 2),b
04C6 F593      1200            mov     (_linetrack_vleft_1_79 + 3),a
04C8           1201   ;        robot.c:308: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
04C8 75820C    1202            mov     dpl,#0x0C
04CB 120100    1203            lcall   _Volts_at_Pin
04CE 8582E0    1204            mov     _linetrack_vright_1_79,dpl
04D1 8583E1    1205            mov     (_linetrack_vright_1_79 + 1),dph
04D4 85F0E2    1206            mov     (_linetrack_vright_1_79 + 2),b
04D7 F5E3      1207            mov     (_linetrack_vright_1_79 + 3),a
04D9           1208   L006004?:
04D9           1209   ;        robot.c:312: pwm_Left1 = -1;
04D9 7570FF    1210            mov     _pwm_Left1,#0xFF
04DC           1211   ;        robot.c:313: pwm_Left0 = vright*vright*75/(vright*vright+vleft*vleft);
04DC C0E0      1212            push    _linetrack_vright_1_79
04DE C0E1      1213            push    (_linetrack_vright_1_79 + 1)
04E0 C0E2      1214            push    (_linetrack_vright_1_79 + 2)
04E2 C0E3      1215            push    (_linetrack_vright_1_79 + 3)
04E4 85E082    1216            mov     dpl,_linetrack_vright_1_79
04E7 85E183    1217            mov     dph,(_linetrack_vright_1_79 + 1)
04EA 85E2F0    1218            mov     b,(_linetrack_vright_1_79 + 2)
04ED E5E3      1219            mov     a,(_linetrack_vright_1_79 + 3)
04EF 120100    1220            lcall   ___fsmul
04F2 AA82      1221            mov     r2,dpl
04F4 AB83      1222            mov     r3,dph
04F6 ACF0      1223            mov     r4,b
04F8 FD        1224            mov     r5,a
04F9 E581      1225            mov     a,sp
04FB 24FC      1226            add     a,#0xfc
04FD F581      1227            mov     sp,a
04FF C002      1228            push    ar2
0501 C003      1229            push    ar3
0503 C004      1230            push    ar4
0505 C005      1231            push    ar5
0507 900000    1232            mov     dptr,#0x0000
050A 75F096    1233            mov     b,#0x96
050D 7442      1234            mov     a,#0x42
050F 120100    1235            lcall   ___fsmul
0512 AA82      1236            mov     r2,dpl
0514 AB83      1237            mov     r3,dph
0516 ACF0      1238            mov     r4,b
0518 FD        1239            mov     r5,a
0519 E581      1240            mov     a,sp
051B 24FC      1241            add     a,#0xfc
051D F581      1242            mov     sp,a
051F C002      1243            push    ar2
0521 C003      1244            push    ar3
0523 C004      1245            push    ar4
0525 C005      1246            push    ar5
0527 C0E0      1247            push    _linetrack_vright_1_79
0529 C0E1      1248            push    (_linetrack_vright_1_79 + 1)
052B C0E2      1249            push    (_linetrack_vright_1_79 + 2)
052D C0E3      1250            push    (_linetrack_vright_1_79 + 3)
052F 85E082    1251            mov     dpl,_linetrack_vright_1_79
0532 85E183    1252            mov     dph,(_linetrack_vright_1_79 + 1)
0535 85E2F0    1253            mov     b,(_linetrack_vright_1_79 + 2)
0538 E5E3      1254            mov     a,(_linetrack_vright_1_79 + 3)
053A 120100    1255            lcall   ___fsmul
053D 858230    1256            mov     _linetrack_sloc0_1_0,dpl
0540 858331    1257            mov     (_linetrack_sloc0_1_0 + 1),dph
0543 85F032    1258            mov     (_linetrack_sloc0_1_0 + 2),b
0546 F533      1259            mov     (_linetrack_sloc0_1_0 + 3),a
0548 E581      1260            mov     a,sp
054A 24FC      1261            add     a,#0xfc
054C F581      1262            mov     sp,a
054E C090      1263            push    _linetrack_vleft_1_79
0550 C091      1264            push    (_linetrack_vleft_1_79 + 1)
0552 C092      1265            push    (_linetrack_vleft_1_79 + 2)
0554 C093      1266            push    (_linetrack_vleft_1_79 + 3)
0556 859082    1267            mov     dpl,_linetrack_vleft_1_79
0559 859183    1268            mov     dph,(_linetrack_vleft_1_79 + 1)
055C 8592F0    1269            mov     b,(_linetrack_vleft_1_79 + 2)
055F E593      1270            mov     a,(_linetrack_vleft_1_79 + 3)
0561 120100    1271            lcall   ___fsmul
0564 AE82      1272            mov     r6,dpl
0566 AF83      1273            mov     r7,dph
0568 A8F0      1274            mov     r0,b
056A F9        1275            mov     r1,a
056B E581      1276            mov     a,sp
056D 24FC      1277            add     a,#0xfc
056F F581      1278            mov     sp,a
0571 C006      1279            push    ar6
0573 C007      1280            push    ar7
0575 C000      1281            push    ar0
0577 C001      1282            push    ar1
0579 853082    1283            mov     dpl,_linetrack_sloc0_1_0
057C 853183    1284            mov     dph,(_linetrack_sloc0_1_0 + 1)
057F 8532F0    1285            mov     b,(_linetrack_sloc0_1_0 + 2)
0582 E533      1286            mov     a,(_linetrack_sloc0_1_0 + 3)
0584 120100    1287            lcall   ___fsadd
0587 AE82      1288            mov     r6,dpl
0589 AF83      1289            mov     r7,dph
058B A8F0      1290            mov     r0,b
058D F9        1291            mov     r1,a
058E E581      1292            mov     a,sp
0590 24FC      1293            add     a,#0xfc
0592 F581      1294            mov     sp,a
0594 D005      1295            pop     ar5
0596 D004      1296            pop     ar4
0598 D003      1297            pop     ar3
059A D002      1298            pop     ar2
059C C006      1299            push    ar6
059E C007      1300            push    ar7
05A0 C000      1301            push    ar0
05A2 C001      1302            push    ar1
05A4 8A82      1303            mov     dpl,r2
05A6 8B83      1304            mov     dph,r3
05A8 8CF0      1305            mov     b,r4
05AA ED        1306            mov     a,r5
05AB 120100    1307            lcall   ___fsdiv
05AE AA82      1308            mov     r2,dpl
05B0 AB83      1309            mov     r3,dph
05B2 ACF0      1310            mov     r4,b
05B4 FD        1311            mov     r5,a
05B5 E581      1312            mov     a,sp
05B7 24FC      1313            add     a,#0xfc
05B9 F581      1314            mov     sp,a
05BB 8A82      1315            mov     dpl,r2
05BD 8B83      1316            mov     dph,r3
05BF 8CF0      1317            mov     b,r4
05C1 ED        1318            mov     a,r5
05C2 120100    1319            lcall   ___fs2schar
05C5 8582B0    1320            mov     _pwm_Left0,dpl
05C8           1321   ;        robot.c:314: pwm_Right0 = -1;
05C8 7530FF    1322            mov     _pwm_Right0,#0xFF
05CB           1323   ;        robot.c:315: pwm_Right1 = vleft*vleft*75/(vright*vright+vleft*vleft);
05CB C090      1324            push    _linetrack_vleft_1_79
05CD C091      1325            push    (_linetrack_vleft_1_79 + 1)
05CF C092      1326            push    (_linetrack_vleft_1_79 + 2)
05D1 C093      1327            push    (_linetrack_vleft_1_79 + 3)
05D3 859082    1328            mov     dpl,_linetrack_vleft_1_79
05D6 859183    1329            mov     dph,(_linetrack_vleft_1_79 + 1)
05D9 8592F0    1330            mov     b,(_linetrack_vleft_1_79 + 2)
05DC E593      1331            mov     a,(_linetrack_vleft_1_79 + 3)
05DE 120100    1332            lcall   ___fsmul
05E1 AA82      1333            mov     r2,dpl
05E3 AB83      1334            mov     r3,dph
05E5 ACF0      1335            mov     r4,b
05E7 FD        1336            mov     r5,a
05E8 E581      1337            mov     a,sp
05EA 24FC      1338            add     a,#0xfc
05EC F581      1339            mov     sp,a
05EE C002      1340            push    ar2
05F0 C003      1341            push    ar3
05F2 C004      1342            push    ar4
05F4 C005      1343            push    ar5
05F6 900000    1344            mov     dptr,#0x0000
05F9 75F096    1345            mov     b,#0x96
05FC 7442      1346            mov     a,#0x42
05FE 120100    1347            lcall   ___fsmul
0601 AA82      1348            mov     r2,dpl
0603 AB83      1349            mov     r3,dph
0605 ACF0      1350            mov     r4,b
0607 FD        1351            mov     r5,a
0608 E581      1352            mov     a,sp
060A 24FC      1353            add     a,#0xfc
060C F581      1354            mov     sp,a
060E C002      1355            push    ar2
0610 C003      1356            push    ar3
0612 C004      1357            push    ar4
0614 C005      1358            push    ar5
0616 C0E0      1359            push    _linetrack_vright_1_79
0618 C0E1      1360            push    (_linetrack_vright_1_79 + 1)
061A C0E2      1361            push    (_linetrack_vright_1_79 + 2)
061C C0E3      1362            push    (_linetrack_vright_1_79 + 3)
061E 85E082    1363            mov     dpl,_linetrack_vright_1_79
0621 85E183    1364            mov     dph,(_linetrack_vright_1_79 + 1)
0624 85E2F0    1365            mov     b,(_linetrack_vright_1_79 + 2)
0627 E5E3      1366            mov     a,(_linetrack_vright_1_79 + 3)
0629 120100    1367            lcall   ___fsmul
062C 858230    1368            mov     _linetrack_sloc0_1_0,dpl
062F 858331    1369            mov     (_linetrack_sloc0_1_0 + 1),dph
0632 85F032    1370            mov     (_linetrack_sloc0_1_0 + 2),b
0635 F533      1371            mov     (_linetrack_sloc0_1_0 + 3),a
0637 E581      1372            mov     a,sp
0639 24FC      1373            add     a,#0xfc
063B F581      1374            mov     sp,a
063D C090      1375            push    _linetrack_vleft_1_79
063F C091      1376            push    (_linetrack_vleft_1_79 + 1)
0641 C092      1377            push    (_linetrack_vleft_1_79 + 2)
0643 C093      1378            push    (_linetrack_vleft_1_79 + 3)
0645 859082    1379            mov     dpl,_linetrack_vleft_1_79
0648 859183    1380            mov     dph,(_linetrack_vleft_1_79 + 1)
064B 8592F0    1381            mov     b,(_linetrack_vleft_1_79 + 2)
064E E593      1382            mov     a,(_linetrack_vleft_1_79 + 3)
0650 120100    1383            lcall   ___fsmul
0653 AE82      1384            mov     r6,dpl
0655 AF83      1385            mov     r7,dph
0657 A8F0      1386            mov     r0,b
0659 F9        1387            mov     r1,a
065A E581      1388            mov     a,sp
065C 24FC      1389            add     a,#0xfc
065E F581      1390            mov     sp,a
0660 C006      1391            push    ar6
0662 C007      1392            push    ar7
0664 C000      1393            push    ar0
0666 C001      1394            push    ar1
0668 853082    1395            mov     dpl,_linetrack_sloc0_1_0
066B 853183    1396            mov     dph,(_linetrack_sloc0_1_0 + 1)
066E 8532F0    1397            mov     b,(_linetrack_sloc0_1_0 + 2)
0671 E533      1398            mov     a,(_linetrack_sloc0_1_0 + 3)
0673 120100    1399            lcall   ___fsadd
0676 AE82      1400            mov     r6,dpl
0678 AF83      1401            mov     r7,dph
067A A8F0      1402            mov     r0,b
067C F9        1403            mov     r1,a
067D E581      1404            mov     a,sp
067F 24FC      1405            add     a,#0xfc
0681 F581      1406            mov     sp,a
0683 D005      1407            pop     ar5
0685 D004      1408            pop     ar4
0687 D003      1409            pop     ar3
0689 D002      1410            pop     ar2
068B C006      1411            push    ar6
068D C007      1412            push    ar7
068F C000      1413            push    ar0
0691 C001      1414            push    ar1
0693 8A82      1415            mov     dpl,r2
0695 8B83      1416            mov     dph,r3
0697 8CF0      1417            mov     b,r4
0699 ED        1418            mov     a,r5
069A 120100    1419            lcall   ___fsdiv
069D AA82      1420            mov     r2,dpl
069F AB83      1421            mov     r3,dph
06A1 ACF0      1422            mov     r4,b
06A3 FD        1423            mov     r5,a
06A4 E581      1424            mov     a,sp
06A6 24FC      1425            add     a,#0xfc
06A8 F581      1426            mov     sp,a
06AA 8A82      1427            mov     dpl,r2
06AC 8B83      1428            mov     dph,r3
06AE 8CF0      1429            mov     b,r4
06B0 ED        1430            mov     a,r5
06B1 120100    1431            lcall   ___fs2schar
06B4 8582F0    1432            mov     _pwm_Right1,dpl
06B7 22        1433            ret
06B8           1434   ;------------------------------------------------------------
06B8           1435   ;Allocation info for local variables in function 'stopcar'
06B8           1436   ;------------------------------------------------------------
06B8           1437   ;------------------------------------------------------------
06B8           1438   ;        robot.c:327: void stopcar(void) {
06B8           1439   ;        -----------------------------------------
06B8           1440   ;         function stopcar
06B8           1441   ;        -----------------------------------------
06B8           1442   _stopcar:
06B8           1443   ;        robot.c:329: pwm_Left1 = -1;
06B8 7570FF    1444            mov     _pwm_Left1,#0xFF
06BB           1445   ;        robot.c:330: pwm_Right1 = -1;
06BB 75F0FF    1446            mov     _pwm_Right1,#0xFF
06BE           1447   ;        robot.c:331: pwm_Left0 = -1;
06BE 75B0FF    1448            mov     _pwm_Left0,#0xFF
06C1           1449   ;        robot.c:332: pwm_Right0 = -1;
06C1 7530FF    1450            mov     _pwm_Right0,#0xFF
06C4 22        1451            ret
06C5           1452   ;------------------------------------------------------------
06C5           1453   ;Allocation info for local variables in function 'turncar'
06C5           1454   ;------------------------------------------------------------
06C5           1455   ;leftright                 Allocated to registers r2 r3 
06C5           1456   ;v                         Allocated with name '_turncar_v_1_86'
06C5           1457   ;direction                 Allocated with name '_turncar_direction_1_86'
06C5           1458   ;------------------------------------------------------------
06C5           1459   ;        robot.c:338: void turncar (int leftright) {
06C5           1460   ;        -----------------------------------------
06C5           1461   ;         function turncar
06C5           1462   ;        -----------------------------------------
06C5           1463   _turncar:
06C5 AA82      1464            mov     r2,dpl
06C7 AB83      1465            mov     r3,dph
06C9           1466   ;        robot.c:344: pwm_Left0 = -1;
06C9 75B0FF    1467            mov     _pwm_Left0,#0xFF
06CC           1468   ;        robot.c:345: pwm_Left1 = -1;
06CC 7570FF    1469            mov     _pwm_Left1,#0xFF
06CF           1470   ;        robot.c:346: pwm_Right0 = -1;
06CF 7530FF    1471            mov     _pwm_Right0,#0xFF
06D2           1472   ;        robot.c:347: pwm_Right1 = -1;
06D2 75F0FF    1473            mov     _pwm_Right1,#0xFF
06D5           1474   ;        robot.c:349: direction = currentstate - 1;
06D5 E530      1475            mov     a,_currentstate
06D7 14        1476            dec     a
06D8 F5C0      1477            mov     _turncar_direction_1_86,a
06DA           1478   ;        robot.c:352: if (leftright == 0) {
06DA EA        1479            mov     a,r2
06DB 4B        1480            orl     a,r3
06DC 6001      1481            jz      L008032?
06DE 020100    1482            ljmp    L008010?
06E1           1483   L008032?:
06E1           1484   ;        robot.c:354: pwm_Right0 = 100;
06E1 753064    1485            mov     _pwm_Right0,#0x64
06E4           1486   ;        robot.c:358: v= direction ? Volts_at_Pin(LQFP32_MUX_P2_4) : Volts_at_Pin(LQFP32_MUX_P2_6);
06E4 E5C0      1487            mov     a,_turncar_direction_1_86
06E6 6001      1488            jz      L008014?
06E8 75820C    1489            mov     dpl,#0x0C
06EB 120100    1490            lcall   _Volts_at_Pin
06EE AC82      1491            mov     r4,dpl
06F0 AD83      1492            mov     r5,dph
06F2 AEF0      1493            mov     r6,b
06F4 FF        1494            mov     r7,a
06F5 8001      1495            sjmp    L008015?
06F7           1496   L008014?:
06F7 75820E    1497            mov     dpl,#0x0E
06FA 120100    1498            lcall   _Volts_at_Pin
06FD AC82      1499            mov     r4,dpl
06FF AD83      1500            mov     r5,dph
0701 AEF0      1501            mov     r6,b
0703 FF        1502            mov     r7,a
0704           1503   L008015?:
0704 8C70      1504            mov     _turncar_v_1_86,r4
0706 8D71      1505            mov     (_turncar_v_1_86 + 1),r5
0708 8E72      1506            mov     (_turncar_v_1_86 + 2),r6
070A 8F73      1507            mov     (_turncar_v_1_86 + 3),r7
070C           1508   ;        robot.c:360: while (v < 1.5) {
070C           1509   L008001?:
070C E4        1510            clr     a
070D C0E0      1511            push    acc
070F C0E0      1512            push    acc
0711 74C0      1513            mov     a,#0xC0
0713 C0E0      1514            push    acc
0715 743F      1515            mov     a,#0x3F
0717 C0E0      1516            push    acc
0719 857082    1517            mov     dpl,_turncar_v_1_86
071C 857183    1518            mov     dph,(_turncar_v_1_86 + 1)
071F 8572F0    1519            mov     b,(_turncar_v_1_86 + 2)
0722 E573      1520            mov     a,(_turncar_v_1_86 + 3)
0724 120100    1521            lcall   ___fslt
0727 AC82      1522            mov     r4,dpl
0729 E581      1523            mov     a,sp
072B 24FC      1524            add     a,#0xfc
072D F581      1525            mov     sp,a
072F EC        1526            mov     a,r4
0730 6001      1527            jz      L008003?
0732           1528   ;        robot.c:362: v= direction ? Volts_at_Pin(LQFP32_MUX_P2_4) : Volts_at_Pin(LQFP32_MUX_P2_6);
0732 E5C0      1529            mov     a,_turncar_direction_1_86
0734 6001      1530            jz      L008016?
0736 75820C    1531            mov     dpl,#0x0C
0739 120100    1532            lcall   _Volts_at_Pin
073C AC82      1533            mov     r4,dpl
073E AD83      1534            mov     r5,dph
0740 AEF0      1535            mov     r6,b
0742 FF        1536            mov     r7,a
0743 8001      1537            sjmp    L008017?
0745           1538   L008016?:
0745 75820E    1539            mov     dpl,#0x0E
0748 120100    1540            lcall   _Volts_at_Pin
074B AC82      1541            mov     r4,dpl
074D AD83      1542            mov     r5,dph
074F AEF0      1543            mov     r6,b
0751 FF        1544            mov     r7,a
0752           1545   L008017?:
0752 8C70      1546            mov     _turncar_v_1_86,r4
0754 8D71      1547            mov     (_turncar_v_1_86 + 1),r5
0756 8E72      1548            mov     (_turncar_v_1_86 + 2),r6
0758 8F73      1549            mov     (_turncar_v_1_86 + 3),r7
075A 8001      1550            sjmp    L008001?
075C           1551   L008003?:
075C           1552   ;        robot.c:365: waitms(300);
075C 90012C    1553            mov     dptr,#0x012C
075F 120100    1554            lcall   _waitms
0762           1555   ;        robot.c:368: pwm_Right0 = -1; 
0762 7530FF    1556            mov     _pwm_Right0,#0xFF
0765           1557   ;        robot.c:369: pwm_Left0 = -1;            
0765 75B0FF    1558            mov     _pwm_Left0,#0xFF
0768 22        1559            ret
0769           1560   L008010?:
0769           1561   ;        robot.c:373: else if (leftright == 1) {
0769 BA0100    1562            cjne    r2,#0x01,L008036?
076C BB0000    1563            cjne    r3,#0x00,L008036?
076F 8001      1564            sjmp    L008037?
0771           1565   L008036?:
0771 22        1566            ret
0772           1567   L008037?:
0772           1568   ;        robot.c:375: pwm_Left1 = 100;
0772 757064    1569            mov     _pwm_Left1,#0x64
0775           1570   ;        robot.c:379: v= direction ? Volts_at_Pin(LQFP32_MUX_P2_3) : Volts_at_Pin(LQFP32_MUX_P2_5);
0775 E5C0      1571            mov     a,_turncar_direction_1_86
0777 6001      1572            jz      L008018?
0779 75820B    1573            mov     dpl,#0x0B
077C 120100    1574            lcall   _Volts_at_Pin
077F AA82      1575            mov     r2,dpl
0781 AB83      1576            mov     r3,dph
0783 ACF0      1577            mov     r4,b
0785 FD        1578            mov     r5,a
0786 8001      1579            sjmp    L008019?
0788           1580   L008018?:
0788 75820D    1581            mov     dpl,#0x0D
078B 120100    1582            lcall   _Volts_at_Pin
078E AA82      1583            mov     r2,dpl
0790 AB83      1584            mov     r3,dph
0792 ACF0      1585            mov     r4,b
0794 FD        1586            mov     r5,a
0795           1587   L008019?:
0795 8A70      1588            mov     _turncar_v_1_86,r2
0797 8B71      1589            mov     (_turncar_v_1_86 + 1),r3
0799 8C72      1590            mov     (_turncar_v_1_86 + 2),r4
079B 8D73      1591            mov     (_turncar_v_1_86 + 3),r5
079D           1592   ;        robot.c:381: while (v < 1.5) {
079D           1593   L008004?:
079D E4        1594            clr     a
079E C0E0      1595            push    acc
07A0 C0E0      1596            push    acc
07A2 74C0      1597            mov     a,#0xC0
07A4 C0E0      1598            push    acc
07A6 743F      1599            mov     a,#0x3F
07A8 C0E0      1600            push    acc
07AA 857082    1601            mov     dpl,_turncar_v_1_86
07AD 857183    1602            mov     dph,(_turncar_v_1_86 + 1)
07B0 8572F0    1603            mov     b,(_turncar_v_1_86 + 2)
07B3 E573      1604            mov     a,(_turncar_v_1_86 + 3)
07B5 120100    1605            lcall   ___fslt
07B8 AA82      1606            mov     r2,dpl
07BA E581      1607            mov     a,sp
07BC 24FC      1608            add     a,#0xfc
07BE F581      1609            mov     sp,a
07C0 EA        1610            mov     a,r2
07C1 6001      1611            jz      L008006?
07C3           1612   ;        robot.c:383: v= direction ? Volts_at_Pin(LQFP32_MUX_P2_3) : Volts_at_Pin(LQFP32_MUX_P2_5);
07C3 E5C0      1613            mov     a,_turncar_direction_1_86
07C5 6001      1614            jz      L008020?
07C7 75820B    1615            mov     dpl,#0x0B
07CA 120100    1616            lcall   _Volts_at_Pin
07CD AA82      1617            mov     r2,dpl
07CF AB83      1618            mov     r3,dph
07D1 ACF0      1619            mov     r4,b
07D3 FD        1620            mov     r5,a
07D4 8001      1621            sjmp    L008021?
07D6           1622   L008020?:
07D6 75820D    1623            mov     dpl,#0x0D
07D9 120100    1624            lcall   _Volts_at_Pin
07DC AA82      1625            mov     r2,dpl
07DE AB83      1626            mov     r3,dph
07E0 ACF0      1627            mov     r4,b
07E2 FD        1628            mov     r5,a
07E3           1629   L008021?:
07E3 8A70      1630            mov     _turncar_v_1_86,r2
07E5 8B71      1631            mov     (_turncar_v_1_86 + 1),r3
07E7 8C72      1632            mov     (_turncar_v_1_86 + 2),r4
07E9 8D73      1633            mov     (_turncar_v_1_86 + 3),r5
07EB 8001      1634            sjmp    L008004?
07ED           1635   L008006?:
07ED           1636   ;        robot.c:386: waitms(300);
07ED 90012C    1637            mov     dptr,#0x012C
07F0 120100    1638            lcall   _waitms
07F3           1639   ;        robot.c:389: pwm_Left1 = -1; 
07F3 7570FF    1640            mov     _pwm_Left1,#0xFF
07F6           1641   ;        robot.c:390: pwm_Right1 = -1; 
07F6 75F0FF    1642            mov     _pwm_Right1,#0xFF
07F9 22        1643            ret
07FA           1644   ;------------------------------------------------------------
07FA           1645   ;Allocation info for local variables in function 'uturn'
07FA           1646   ;------------------------------------------------------------
07FA           1647   ;vleft                     Allocated with name '_uturn_vleft_1_92'
07FA           1648   ;vright                    Allocated with name '_uturn_vright_1_92'
07FA           1649   ;------------------------------------------------------------
07FA           1650   ;        robot.c:398: void uturn(void) {
07FA           1651   ;        -----------------------------------------
07FA           1652   ;         function uturn
07FA           1653   ;        -----------------------------------------
07FA           1654   _uturn:
07FA           1655   ;        robot.c:402: vleft = Volts_at_Pin(LQFP32_MUX_P2_3);
07FA 75820B    1656            mov     dpl,#0x0B
07FD 120100    1657            lcall   _Volts_at_Pin
0800 858210    1658            mov     _uturn_vleft_1_92,dpl
0803 858311    1659            mov     (_uturn_vleft_1_92 + 1),dph
0806 85F012    1660            mov     (_uturn_vleft_1_92 + 2),b
0809 F513      1661            mov     (_uturn_vleft_1_92 + 3),a
080B           1662   ;        robot.c:403: vright = Volts_at_Pin(LQFP32_MUX_P2_4);
080B 75820C    1663            mov     dpl,#0x0C
080E 120100    1664            lcall   _Volts_at_Pin
0811 858260    1665            mov     _uturn_vright_1_92,dpl
0814 858361    1666            mov     (_uturn_vright_1_92 + 1),dph
0817 85F062    1667            mov     (_uturn_vright_1_92 + 2),b
081A F563      1668            mov     (_uturn_vright_1_92 + 3),a
081C           1669   ;        robot.c:406: pwm_Left0 = -1;
081C 75B0FF    1670            mov     _pwm_Left0,#0xFF
081F           1671   ;        robot.c:407: pwm_Left1 = 50;
081F 757032    1672            mov     _pwm_Left1,#0x32
0822           1673   ;        robot.c:408: pwm_Right0 = -1;
0822 7530FF    1674            mov     _pwm_Right0,#0xFF
0825           1675   ;        robot.c:409: pwm_Right1 = 50;
0825 75F032    1676            mov     _pwm_Right1,#0x32
0828           1677   ;        robot.c:412: waitms(4000);
0828 900FA0    1678            mov     dptr,#0x0FA0
082B 120100    1679            lcall   _waitms
082E           1680   ;        robot.c:415: while (((vleft - vright) > 0.2) || ((vleft - vright) < (-0.2))) {
082E           1681   L009002?:
082E C060      1682            push    _uturn_vright_1_92
0830 C061      1683            push    (_uturn_vright_1_92 + 1)
0832 C062      1684            push    (_uturn_vright_1_92 + 2)
0834 C063      1685            push    (_uturn_vright_1_92 + 3)
0836 851082    1686            mov     dpl,_uturn_vleft_1_92
0839 851183    1687            mov     dph,(_uturn_vleft_1_92 + 1)
083C 8512F0    1688            mov     b,(_uturn_vleft_1_92 + 2)
083F E513      1689            mov     a,(_uturn_vleft_1_92 + 3)
0841 120100    1690            lcall   ___fssub
0844 AA82      1691            mov     r2,dpl
0846 AB83      1692            mov     r3,dph
0848 ACF0      1693            mov     r4,b
084A FD        1694            mov     r5,a
084B E581      1695            mov     a,sp
084D 24FC      1696            add     a,#0xfc
084F F581      1697            mov     sp,a
0851 74CD      1698            mov     a,#0xCD
0853 C0E0      1699            push    acc
0855 74CC      1700            mov     a,#0xCC
0857 C0E0      1701            push    acc
0859 744C      1702            mov     a,#0x4C
085B C0E0      1703            push    acc
085D 743E      1704            mov     a,#0x3E
085F C0E0      1705            push    acc
0861 8A82      1706            mov     dpl,r2
0863 8B83      1707            mov     dph,r3
0865 8CF0      1708            mov     b,r4
0867 ED        1709            mov     a,r5
0868 120100    1710            lcall   ___fsgt
086B AA82      1711            mov     r2,dpl
086D E581      1712            mov     a,sp
086F 24FC      1713            add     a,#0xfc
0871 F581      1714            mov     sp,a
0873 EA        1715            mov     a,r2
0874 7001      1716            jnz     L009003?
0876 C060      1717            push    _uturn_vright_1_92
0878 C061      1718            push    (_uturn_vright_1_92 + 1)
087A C062      1719            push    (_uturn_vright_1_92 + 2)
087C C063      1720            push    (_uturn_vright_1_92 + 3)
087E 851082    1721            mov     dpl,_uturn_vleft_1_92
0881 851183    1722            mov     dph,(_uturn_vleft_1_92 + 1)
0884 8512F0    1723            mov     b,(_uturn_vleft_1_92 + 2)
0887 E513      1724            mov     a,(_uturn_vleft_1_92 + 3)
0889 120100    1725            lcall   ___fssub
088C AA82      1726            mov     r2,dpl
088E AB83      1727            mov     r3,dph
0890 ACF0      1728            mov     r4,b
0892 FD        1729            mov     r5,a
0893 E581      1730            mov     a,sp
0895 24FC      1731            add     a,#0xfc
0897 F581      1732            mov     sp,a
0899 74CD      1733            mov     a,#0xCD
089B C0E0      1734            push    acc
089D 74CC      1735            mov     a,#0xCC
089F C0E0      1736            push    acc
08A1 744C      1737            mov     a,#0x4C
08A3 C0E0      1738            push    acc
08A5 74BE      1739            mov     a,#0xBE
08A7 C0E0      1740            push    acc
08A9 8A82      1741            mov     dpl,r2
08AB 8B83      1742            mov     dph,r3
08AD 8CF0      1743            mov     b,r4
08AF ED        1744            mov     a,r5
08B0 120100    1745            lcall   ___fslt
08B3 AA82      1746            mov     r2,dpl
08B5 E581      1747            mov     a,sp
08B7 24FC      1748            add     a,#0xfc
08B9 F581      1749            mov     sp,a
08BB EA        1750            mov     a,r2
08BC 6001      1751            jz      L009005?
08BE           1752   L009003?:
08BE           1753   ;        robot.c:417: vleft  = Volts_at_Pin(LQFP32_MUX_P2_3);
08BE 75820B    1754            mov     dpl,#0x0B
08C1 120100    1755            lcall   _Volts_at_Pin
08C4 858210    1756            mov     _uturn_vleft_1_92,dpl
08C7 858311    1757            mov     (_uturn_vleft_1_92 + 1),dph
08CA 85F012    1758            mov     (_uturn_vleft_1_92 + 2),b
08CD F513      1759            mov     (_uturn_vleft_1_92 + 3),a
08CF           1760   ;        robot.c:418: vright = Volts_at_Pin(LQFP32_MUX_P2_4);
08CF 75820C    1761            mov     dpl,#0x0C
08D2 120100    1762            lcall   _Volts_at_Pin
08D5 858260    1763            mov     _uturn_vright_1_92,dpl
08D8 858361    1764            mov     (_uturn_vright_1_92 + 1),dph
08DB 85F062    1765            mov     (_uturn_vright_1_92 + 2),b
08DE F563      1766            mov     (_uturn_vright_1_92 + 3),a
08E0 020100    1767            ljmp    L009002?
08E3           1768   L009005?:
08E3 22        1769            ret
08E4           1770   ;------------------------------------------------------------
08E4           1771   ;Allocation info for local variables in function 'movecar'
08E4           1772   ;------------------------------------------------------------
08E4           1773   ;power                     Allocated with name '_movecar_PARM_2'
08E4           1774   ;forback                   Allocated to registers r2 r3 
08E4           1775   ;------------------------------------------------------------
08E4           1776   ;        robot.c:425: void movecar (int forback, int power) {
08E4           1777   ;        -----------------------------------------
08E4           1778   ;         function movecar
08E4           1779   ;        -----------------------------------------
08E4           1780   _movecar:
08E4 AA82      1781            mov     r2,dpl
08E6 AB83      1782            mov     r3,dph
08E8           1783   ;        robot.c:427: if (forback == 1) {
08E8 BA0140    1784            cjne    r2,#0x01,L010004?
08EB BB0040    1785            cjne    r3,#0x00,L010004?
08EE           1786   ;        robot.c:428: pwm_Left1 = power;
08EE AC70      1787            mov     r4,_movecar_PARM_2
08F0 8C70      1788            mov     _pwm_Left1,r4
08F2           1789   ;        robot.c:429: pwm_Left0 = -1;
08F2 75B0FF    1790            mov     _pwm_Left0,#0xFF
08F5           1791   ;        robot.c:430: pwm_Right0 = power;
08F5 8C30      1792            mov     _pwm_Right0,r4
08F7           1793   ;        robot.c:431: pwm_Right1 = -1;
08F7 75F0FF    1794            mov     _pwm_Right1,#0xFF
08FA 22        1795            ret
08FB           1796   L010004?:
08FB           1797   ;        robot.c:433: else if (forback == 2) {
08FB BA0280    1798            cjne    r2,#0x02,L010006?
08FE BB0080    1799            cjne    r3,#0x00,L010006?
0901           1800   ;        robot.c:434: pwm_Left0 = power;
0901 AA70      1801            mov     r2,_movecar_PARM_2
0903 8AB0      1802            mov     _pwm_Left0,r2
0905           1803   ;        robot.c:435: pwm_Left1 = -1;
0905 7570FF    1804            mov     _pwm_Left1,#0xFF
0908           1805   ;        robot.c:436: pwm_Right1 = power;
0908 8AF0      1806            mov     _pwm_Right1,r2
090A           1807   ;        robot.c:437: pwm_Right0 = -1;
090A 7530FF    1808            mov     _pwm_Right0,#0xFF
090D           1809   L010006?:
090D 22        1810            ret
090E           1811            rseg R_CSEG
090E           1812   
0000           1813            rseg R_XINIT
0000           1814   
0000           1815            rseg R_CONST
0000           1816   __str_0:
0000 1B        1817            db 0x1B
0001 5B324A    1818            db '[2J'
0004 00        1819            db 0x00
0005           1820   __str_1:
0005 66726F6E  1821            db 'frontL %f frontR %f backL %f backR %f command %1d'
     744C2025
     66206672
     6F6E7452
     20256620
     6261636B
     4C202566
     20626163
     6B522025
     6620636F
     6D6D616E
     64202531
     64
0036 0D        1822            db 0x0D
0037 00        1823            db 0x00
0038           1824   __str_2:
0038 0A        1825            db 0x0A
0039 494E5445  1826            db 'INTERSECTION'
     52534543
     54494F4E
0045 0A        1827            db 0x0A
0046 00        1828            db 0x00
0047           1829   __str_3:
0047 0A        1830            db 0x0A
0048 0D        1831            db 0x0D
0049 20494E54  1832            db ' INTERSECTION'
     45525345
     4354494F
     4E
0056 0A        1833            db 0x0A
0057 00        1834            db 0x00
0058           1835   __str_4:
0058 2A2A2A2A  1836            db '*****%d:::%d*****'
     2A25643A
     3A3A2564
     2A2A2A2A
     2A
0069 0A        1837            db 0x0A
006A 00        1838            db 0x00
006B           1839   __str_5:
006B 436F6D6D  1840            db 'Command received: 0x%02x'
     616E6420
     72656365
     69766564
     3A203078
     25303278
0083 0A        1841            db 0x0A
0084 00        1842            db 0x00
0085           1843   
002E           1844            CSEG
002E           1845   
002E           1846   end
