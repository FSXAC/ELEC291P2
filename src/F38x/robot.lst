0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Mon Apr 03 13:35:12 2017
0000              5   ;--------------------------------------------------------
                  5   $name robot
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _Timer2_ISR
0000             27            public _main
0000             28            public _currentstate
0000             29            public _currentcmd
0000             30            public _direction
0000             31            public _pwm_Right1
0000             32            public _pwm_Right0
0000             33            public _pwm_Left1
0000             34            public _pwm_Left0
0000             35            public _pwm_both
0000             36            public _mode
0000             37            public _pwm_count
0000             38            public _readData
0000             39            public _linetrack
0000             40            public _stopcar
0000             41            public _turncar
0000             42            public _uturn
0000             43   ;--------------------------------------------------------
0000             44   ; Special Function Registers
0000             45   ;--------------------------------------------------------
0000             46   _P0             DATA 0x80
0000             47   _SP             DATA 0x81
0000             48   _DPL            DATA 0x82
0000             49   _DPH            DATA 0x83
0000             50   _EMI0TC         DATA 0x84
0000             51   _EMI0CF         DATA 0x85
0000             52   _OSCLCN         DATA 0x86
0000             53   _PCON           DATA 0x87
0000             54   _TCON           DATA 0x88
0000             55   _TMOD           DATA 0x89
0000             56   _TL0            DATA 0x8a
0000             57   _TL1            DATA 0x8b
0000             58   _TH0            DATA 0x8c
0000             59   _TH1            DATA 0x8d
0000             60   _CKCON          DATA 0x8e
0000             61   _PSCTL          DATA 0x8f
0000             62   _P1             DATA 0x90
0000             63   _TMR3CN         DATA 0x91
0000             64   _TMR4CN         DATA 0x91
0000             65   _TMR3RLL        DATA 0x92
0000             66   _TMR4RLL        DATA 0x92
0000             67   _TMR3RLH        DATA 0x93
0000             68   _TMR4RLH        DATA 0x93
0000             69   _TMR3L          DATA 0x94
0000             70   _TMR4L          DATA 0x94
0000             71   _TMR3H          DATA 0x95
0000             72   _TMR4H          DATA 0x95
0000             73   _USB0ADR        DATA 0x96
0000             74   _USB0DAT        DATA 0x97
0000             75   _SCON           DATA 0x98
0000             76   _SCON0          DATA 0x98
0000             77   _SBUF           DATA 0x99
0000             78   _SBUF0          DATA 0x99
0000             79   _CPT1CN         DATA 0x9a
0000             80   _CPT0CN         DATA 0x9b
0000             81   _CPT1MD         DATA 0x9c
0000             82   _CPT0MD         DATA 0x9d
0000             83   _CPT1MX         DATA 0x9e
0000             84   _CPT0MX         DATA 0x9f
0000             85   _P2             DATA 0xa0
0000             86   _SPI0CFG        DATA 0xa1
0000             87   _SPI0CKR        DATA 0xa2
0000             88   _SPI0DAT        DATA 0xa3
0000             89   _P0MDOUT        DATA 0xa4
0000             90   _P1MDOUT        DATA 0xa5
0000             91   _P2MDOUT        DATA 0xa6
0000             92   _P3MDOUT        DATA 0xa7
0000             93   _IE             DATA 0xa8
0000             94   _CLKSEL         DATA 0xa9
0000             95   _EMI0CN         DATA 0xaa
0000             96   __XPAGE         DATA 0xaa
0000             97   _SBCON1         DATA 0xac
0000             98   _P4MDOUT        DATA 0xae
0000             99   _PFE0CN         DATA 0xaf
0000            100   _P3             DATA 0xb0
0000            101   _OSCXCN         DATA 0xb1
0000            102   _OSCICN         DATA 0xb2
0000            103   _OSCICL         DATA 0xb3
0000            104   _SBRLL1         DATA 0xb4
0000            105   _SBRLH1         DATA 0xb5
0000            106   _FLSCL          DATA 0xb6
0000            107   _FLKEY          DATA 0xb7
0000            108   _IP             DATA 0xb8
0000            109   _CLKMUL         DATA 0xb9
0000            110   _SMBTC          DATA 0xb9
0000            111   _AMX0N          DATA 0xba
0000            112   _AMX0P          DATA 0xbb
0000            113   _ADC0CF         DATA 0xbc
0000            114   _ADC0L          DATA 0xbd
0000            115   _ADC0H          DATA 0xbe
0000            116   _SFRPAGE        DATA 0xbf
0000            117   _SMB0CN         DATA 0xc0
0000            118   _SMB1CN         DATA 0xc0
0000            119   _SMB0CF         DATA 0xc1
0000            120   _SMB1CF         DATA 0xc1
0000            121   _SMB0DAT        DATA 0xc2
0000            122   _SMB1DAT        DATA 0xc2
0000            123   _ADC0GTL        DATA 0xc3
0000            124   _ADC0GTH        DATA 0xc4
0000            125   _ADC0LTL        DATA 0xc5
0000            126   _ADC0LTH        DATA 0xc6
0000            127   _P4             DATA 0xc7
0000            128   _TMR2CN         DATA 0xc8
0000            129   _TMR5CN         DATA 0xc8
0000            130   _REG01CN        DATA 0xc9
0000            131   _TMR2RLL        DATA 0xca
0000            132   _TMR5RLL        DATA 0xca
0000            133   _TMR2RLH        DATA 0xcb
0000            134   _TMR5RLH        DATA 0xcb
0000            135   _TMR2L          DATA 0xcc
0000            136   _TMR5L          DATA 0xcc
0000            137   _TMR2H          DATA 0xcd
0000            138   _TMR5H          DATA 0xcd
0000            139   _SMB0ADM        DATA 0xce
0000            140   _SMB1ADM        DATA 0xce
0000            141   _SMB0ADR        DATA 0xcf
0000            142   _SMB1ADR        DATA 0xcf
0000            143   _PSW            DATA 0xd0
0000            144   _REF0CN         DATA 0xd1
0000            145   _SCON1          DATA 0xd2
0000            146   _SBUF1          DATA 0xd3
0000            147   _P0SKIP         DATA 0xd4
0000            148   _P1SKIP         DATA 0xd5
0000            149   _P2SKIP         DATA 0xd6
0000            150   _USB0XCN        DATA 0xd7
0000            151   _PCA0CN         DATA 0xd8
0000            152   _PCA0MD         DATA 0xd9
0000            153   _PCA0CPM0       DATA 0xda
0000            154   _PCA0CPM1       DATA 0xdb
0000            155   _PCA0CPM2       DATA 0xdc
0000            156   _PCA0CPM3       DATA 0xdd
0000            157   _PCA0CPM4       DATA 0xde
0000            158   _P3SKIP         DATA 0xdf
0000            159   _ACC            DATA 0xe0
0000            160   _XBR0           DATA 0xe1
0000            161   _XBR1           DATA 0xe2
0000            162   _XBR2           DATA 0xe3
0000            163   _IT01CF         DATA 0xe4
0000            164   _CKCON1         DATA 0xe4
0000            165   _SMOD1          DATA 0xe5
0000            166   _EIE1           DATA 0xe6
0000            167   _EIE2           DATA 0xe7
0000            168   _ADC0CN         DATA 0xe8
0000            169   _PCA0CPL1       DATA 0xe9
0000            170   _PCA0CPH1       DATA 0xea
0000            171   _PCA0CPL2       DATA 0xeb
0000            172   _PCA0CPH2       DATA 0xec
0000            173   _PCA0CPL3       DATA 0xed
0000            174   _PCA0CPH3       DATA 0xee
0000            175   _RSTSRC         DATA 0xef
0000            176   _B              DATA 0xf0
0000            177   _P0MDIN         DATA 0xf1
0000            178   _P1MDIN         DATA 0xf2
0000            179   _P2MDIN         DATA 0xf3
0000            180   _P3MDIN         DATA 0xf4
0000            181   _P4MDIN         DATA 0xf5
0000            182   _EIP1           DATA 0xf6
0000            183   _EIP2           DATA 0xf7
0000            184   _SPI0CN         DATA 0xf8
0000            185   _PCA0L          DATA 0xf9
0000            186   _PCA0H          DATA 0xfa
0000            187   _PCA0CPL0       DATA 0xfb
0000            188   _PCA0CPH0       DATA 0xfc
0000            189   _PCA0CPL4       DATA 0xfd
0000            190   _PCA0CPH4       DATA 0xfe
0000            191   _VDM0CN         DATA 0xff
0000            192   _DPTR           DATA 0x8382
0000            193   _TMR2RL         DATA 0xcbca
0000            194   _TMR3RL         DATA 0x9392
0000            195   _TMR4RL         DATA 0x9392
0000            196   _TMR5RL         DATA 0xcbca
0000            197   _TMR2           DATA 0xcdcc
0000            198   _TMR3           DATA 0x9594
0000            199   _TMR4           DATA 0x9594
0000            200   _TMR5           DATA 0xcdcc
0000            201   _SBRL1          DATA 0xb5b4
0000            202   _ADC0           DATA 0xbebd
0000            203   _ADC0GT         DATA 0xc4c3
0000            204   _ADC0LT         DATA 0xc6c5
0000            205   _PCA0           DATA 0xfaf9
0000            206   _PCA0CP1        DATA 0xeae9
0000            207   _PCA0CP2        DATA 0xeceb
0000            208   _PCA0CP3        DATA 0xeeed
0000            209   _PCA0CP0        DATA 0xfcfb
0000            210   _PCA0CP4        DATA 0xfefd
0000            211   ;--------------------------------------------------------
0000            212   ; special function bits
0000            213   ;--------------------------------------------------------
0000            214   _P0_0           BIT 0x80
0000            215   _P0_1           BIT 0x81
0000            216   _P0_2           BIT 0x82
0000            217   _P0_3           BIT 0x83
0000            218   _P0_4           BIT 0x84
0000            219   _P0_5           BIT 0x85
0000            220   _P0_6           BIT 0x86
0000            221   _P0_7           BIT 0x87
0000            222   _TF1            BIT 0x8f
0000            223   _TR1            BIT 0x8e
0000            224   _TF0            BIT 0x8d
0000            225   _TR0            BIT 0x8c
0000            226   _IE1            BIT 0x8b
0000            227   _IT1            BIT 0x8a
0000            228   _IE0            BIT 0x89
0000            229   _IT0            BIT 0x88
0000            230   _P1_0           BIT 0x90
0000            231   _P1_1           BIT 0x91
0000            232   _P1_2           BIT 0x92
0000            233   _P1_3           BIT 0x93
0000            234   _P1_4           BIT 0x94
0000            235   _P1_5           BIT 0x95
0000            236   _P1_6           BIT 0x96
0000            237   _P1_7           BIT 0x97
0000            238   _S0MODE         BIT 0x9f
0000            239   _SCON0_6        BIT 0x9e
0000            240   _MCE0           BIT 0x9d
0000            241   _REN0           BIT 0x9c
0000            242   _TB80           BIT 0x9b
0000            243   _RB80           BIT 0x9a
0000            244   _TI0            BIT 0x99
0000            245   _RI0            BIT 0x98
0000            246   _SCON_6         BIT 0x9e
0000            247   _MCE            BIT 0x9d
0000            248   _REN            BIT 0x9c
0000            249   _TB8            BIT 0x9b
0000            250   _RB8            BIT 0x9a
0000            251   _TI             BIT 0x99
0000            252   _RI             BIT 0x98
0000            253   _P2_0           BIT 0xa0
0000            254   _P2_1           BIT 0xa1
0000            255   _P2_2           BIT 0xa2
0000            256   _P2_3           BIT 0xa3
0000            257   _P2_4           BIT 0xa4
0000            258   _P2_5           BIT 0xa5
0000            259   _P2_6           BIT 0xa6
0000            260   _P2_7           BIT 0xa7
0000            261   _EA             BIT 0xaf
0000            262   _ESPI0          BIT 0xae
0000            263   _ET2            BIT 0xad
0000            264   _ES0            BIT 0xac
0000            265   _ET1            BIT 0xab
0000            266   _EX1            BIT 0xaa
0000            267   _ET0            BIT 0xa9
0000            268   _EX0            BIT 0xa8
0000            269   _P3_0           BIT 0xb0
0000            270   _P3_1           BIT 0xb1
0000            271   _P3_2           BIT 0xb2
0000            272   _P3_3           BIT 0xb3
0000            273   _P3_4           BIT 0xb4
0000            274   _P3_5           BIT 0xb5
0000            275   _P3_6           BIT 0xb6
0000            276   _P3_7           BIT 0xb7
0000            277   _IP_7           BIT 0xbf
0000            278   _PSPI0          BIT 0xbe
0000            279   _PT2            BIT 0xbd
0000            280   _PS0            BIT 0xbc
0000            281   _PT1            BIT 0xbb
0000            282   _PX1            BIT 0xba
0000            283   _PT0            BIT 0xb9
0000            284   _PX0            BIT 0xb8
0000            285   _MASTER0        BIT 0xc7
0000            286   _TXMODE0        BIT 0xc6
0000            287   _STA0           BIT 0xc5
0000            288   _STO0           BIT 0xc4
0000            289   _ACKRQ0         BIT 0xc3
0000            290   _ARBLOST0       BIT 0xc2
0000            291   _ACK0           BIT 0xc1
0000            292   _SI0            BIT 0xc0
0000            293   _MASTER1        BIT 0xc7
0000            294   _TXMODE1        BIT 0xc6
0000            295   _STA1           BIT 0xc5
0000            296   _STO1           BIT 0xc4
0000            297   _ACKRQ1         BIT 0xc3
0000            298   _ARBLOST1       BIT 0xc2
0000            299   _ACK1           BIT 0xc1
0000            300   _SI1            BIT 0xc0
0000            301   _TF2            BIT 0xcf
0000            302   _TF2H           BIT 0xcf
0000            303   _TF2L           BIT 0xce
0000            304   _TF2LEN         BIT 0xcd
0000            305   _TF2CEN         BIT 0xcc
0000            306   _T2SPLIT        BIT 0xcb
0000            307   _TR2            BIT 0xca
0000            308   _T2CSS          BIT 0xc9
0000            309   _T2XCLK         BIT 0xc8
0000            310   _TF5H           BIT 0xcf
0000            311   _TF5L           BIT 0xce
0000            312   _TF5LEN         BIT 0xcd
0000            313   _TMR5CN_4       BIT 0xcc
0000            314   _T5SPLIT        BIT 0xcb
0000            315   _TR5            BIT 0xca
0000            316   _TMR5CN_1       BIT 0xc9
0000            317   _T5XCLK         BIT 0xc8
0000            318   _CY             BIT 0xd7
0000            319   _AC             BIT 0xd6
0000            320   _F0             BIT 0xd5
0000            321   _RS1            BIT 0xd4
0000            322   _RS0            BIT 0xd3
0000            323   _OV             BIT 0xd2
0000            324   _F1             BIT 0xd1
0000            325   _PARITY         BIT 0xd0
0000            326   _CF             BIT 0xdf
0000            327   _CR             BIT 0xde
0000            328   _PCA0CN_5       BIT 0xde
0000            329   _CCF4           BIT 0xdc
0000            330   _CCF3           BIT 0xdb
0000            331   _CCF2           BIT 0xda
0000            332   _CCF1           BIT 0xd9
0000            333   _CCF0           BIT 0xd8
0000            334   _ACC_7          BIT 0xe7
0000            335   _ACC_6          BIT 0xe6
0000            336   _ACC_5          BIT 0xe5
0000            337   _ACC_4          BIT 0xe4
0000            338   _ACC_3          BIT 0xe3
0000            339   _ACC_2          BIT 0xe2
0000            340   _ACC_1          BIT 0xe1
0000            341   _ACC_0          BIT 0xe0
0000            342   _AD0EN          BIT 0xef
0000            343   _AD0TM          BIT 0xee
0000            344   _AD0INT         BIT 0xed
0000            345   _AD0BUSY        BIT 0xec
0000            346   _AD0WINT        BIT 0xeb
0000            347   _AD0CM2         BIT 0xea
0000            348   _AD0CM1         BIT 0xe9
0000            349   _AD0CM0         BIT 0xe8
0000            350   _B_7            BIT 0xf7
0000            351   _B_6            BIT 0xf6
0000            352   _B_5            BIT 0xf5
0000            353   _B_4            BIT 0xf4
0000            354   _B_3            BIT 0xf3
0000            355   _B_2            BIT 0xf2
0000            356   _B_1            BIT 0xf1
0000            357   _B_0            BIT 0xf0
0000            358   _SPIF           BIT 0xff
0000            359   _WCOL           BIT 0xfe
0000            360   _MODF           BIT 0xfd
0000            361   _RXOVRN         BIT 0xfc
0000            362   _NSSMD1         BIT 0xfb
0000            363   _NSSMD0         BIT 0xfa
0000            364   _TXBMT          BIT 0xf9
0000            365   _SPIEN          BIT 0xf8
0000            366   ;--------------------------------------------------------
0000            367   ; overlayable register banks
0000            368   ;--------------------------------------------------------
0000            369            rbank0 segment data overlay
0000            370   ;--------------------------------------------------------
0000            371   ; internal ram data
0000            372   ;--------------------------------------------------------
0000            373            rseg R_DSEG
0000            374   _pwm_count:
0000            375            ds 1
0001            376   _mode:
0001            377            ds 1
0002            378   _pwm_both:
0002            379            ds 1
0003            380   _pwm_Left0:
0003            381            ds 1
0004            382   _pwm_Left1:
0004            383            ds 1
0005            384   _pwm_Right0:
0005            385            ds 1
0006            386   _pwm_Right1:
0006            387            ds 1
0007            388   _direction:
0007            389            ds 1
0008            390   _currentcmd:
0008            391            ds 1
0009            392   _currentstate:
0009            393            ds 1
000A            394   _main_v1_1_57:
000A            395            ds 4
000E            396   _main_v2_1_57:
000E            397            ds 4
0012            398   _linetrack_vleft_1_76:
0012            399            ds 4
0016            400   _linetrack_vright_1_76:
0016            401            ds 4
001A            402   _linetrack_sloc0_1_0:
001A            403            ds 4
001E            404   _linetrack_sloc1_1_0:
001E            405            ds 4
0022            406   _turncar_v_1_82:
0022            407            ds 4
0026            408   _turncar_direction_1_82:
0026            409            ds 1
0027            410   _uturn_vleft_1_92:
0027            411            ds 4
002B            412   _uturn_vright_1_92:
002B            413            ds 4
002F            414   ;--------------------------------------------------------
002F            415   ; overlayable items in internal ram 
002F            416   ;--------------------------------------------------------
0000            417            rseg R_OSEG
0000            418   ;--------------------------------------------------------
0000            419   ; indirectly addressable internal ram data
0000            420   ;--------------------------------------------------------
0000            421            rseg R_ISEG
0000            422   ;--------------------------------------------------------
0000            423   ; absolute internal ram data
0000            424   ;--------------------------------------------------------
0000            425            DSEG
0000            426   ;--------------------------------------------------------
0000            427   ; bit data
0000            428   ;--------------------------------------------------------
0000            429            rseg R_BSEG
0000            430   _main_sloc0_1_0:
0000            431            DBIT    1
0001            432   _Timer2_ISR_sloc0_1_0:
0001            433            DBIT    1
0002            434   ;--------------------------------------------------------
0002            435   ; paged external ram data
0002            436   ;--------------------------------------------------------
0000            437            rseg R_PSEG
0000            438   ;--------------------------------------------------------
0000            439   ; external ram data
0000            440   ;--------------------------------------------------------
0000            441            rseg R_XSEG
0000            442   ;--------------------------------------------------------
0000            443   ; absolute external ram data
0000            444   ;--------------------------------------------------------
0000            445            XSEG
0000            446   ;--------------------------------------------------------
0000            447   ; external initialized ram data
0000            448   ;--------------------------------------------------------
0000            449            rseg R_IXSEG
0000            450            rseg R_HOME
0000            451            rseg R_GSINIT
0000            452            rseg R_CSEG
0000            453   ;--------------------------------------------------------
0000            454   ; Reset entry point and interrupt vectors
0000            455   ;--------------------------------------------------------
0000            456            CSEG at 0x0000
0000 020100     457            ljmp    _crt0
002B            458            CSEG at 0x002b
002B 020100     459            ljmp    _Timer2_ISR
002E            460   ;--------------------------------------------------------
002E            461   ; global & static initialisations
002E            462   ;--------------------------------------------------------
0000            463            rseg R_HOME
0000            464            rseg R_GSINIT
0000            465            rseg R_GSINIT
0000            466   ;--------------------------------------------------------
0000            467   ; data variables initialization
0000            468   ;--------------------------------------------------------
0000            469            rseg R_DINIT
0000            470   ;        robot.c:8: volatile  char pwm_count=0;
0000 752000     471            mov     _pwm_count,#0x00
0003            472   ;        robot.c:9: volatile  char mode = 0;
0003 75F000     473            mov     _mode,#0x00
0006            474   ;        robot.c:10: volatile  char pwm_both =0;
0006 75B000     475            mov     _pwm_both,#0x00
0009            476   ;        robot.c:11: volatile  char pwm_Left0 = 0; //p1.5
0009 757000     477            mov     _pwm_Left0,#0x00
000C            478   ;        robot.c:12: volatile  char pwm_Left1 = 0; //p1.6
000C 753000     479            mov     _pwm_Left1,#0x00
000F            480   ;        robot.c:13: volatile  char pwm_Right0 = 0; //p2.0
000F 75F000     481            mov     _pwm_Right0,#0x00
0012            482   ;        robot.c:14: volatile  char pwm_Right1 = 0; //p2.1
0012 75B000     483            mov     _pwm_Right1,#0x00
0015            484   ;        robot.c:15: volatile  char direction = 0; // 1 for back 0 for forward
0015 757000     485            mov     _direction,#0x00
0018            486   ;        robot.c:17: volatile  char currentcmd = 0;
0018 753000     487            mov     _currentcmd,#0x00
001B            488   ;        robot.c:18: volatile  char currentstate = 1;
001B 75F001     489            mov     _currentstate,#0x01
001E            490            ; The linker places a 'ret' at the end of segment R_DINIT.
001E            491   ;--------------------------------------------------------
001E            492   ; code
001E            493   ;--------------------------------------------------------
0000            494            rseg R_CSEG
0000            495   ;------------------------------------------------------------
0000            496   ;Allocation info for local variables in function 'main'
0000            497   ;------------------------------------------------------------
0000            498   ;v1                        Allocated with name '_main_v1_1_57'
0000            499   ;v2                        Allocated with name '_main_v2_1_57'
0000            500   ;------------------------------------------------------------
0000            501   ;        robot.c:20: void main(void) {
0000            502   ;        -----------------------------------------
0000            503   ;         function main
0000            504   ;        -----------------------------------------
0000            505   _main:
0000            506            using   0
0000            507   ;        robot.c:22: volatile float v1 = 0;
0000 752800     508            mov     _main_v1_1_57,#0x00
0003 752900     509            mov     (_main_v1_1_57 + 1),#0x00
0006 752A00     510            mov     (_main_v1_1_57 + 2),#0x00
0009 752B00     511            mov     (_main_v1_1_57 + 3),#0x00
000C            512   ;        robot.c:23: volatile float v2 = 0;
000C 756800     513            mov     _main_v2_1_57,#0x00
000F 756900     514            mov     (_main_v2_1_57 + 1),#0x00
0012 756A00     515            mov     (_main_v2_1_57 + 2),#0x00
0015 756B00     516            mov     (_main_v2_1_57 + 3),#0x00
0018            517   ;        robot.c:25: MOTOR_LEFT0 = 0;
0018 C295       518            clr     _P1_5
001A            519   ;        robot.c:26: MOTOR_LEFT1 = 0;
001A C296       520            clr     _P1_6
001C            521   ;        robot.c:27: MOTOR_RIGHT0 = 0;
001C C2A0       522            clr     _P2_0
001E            523   ;        robot.c:28: MOTOR_RIGHT1 = 0;
001E C2A1       524            clr     _P2_1
0020            525   ;        robot.c:31: currentstate = 1;           //1-FORWARD, 2-BACKWARDS, 3-STOPPED, 4-DEBUGGER
0020 75F001     526            mov     _currentstate,#0x01
0023            527   ;        robot.c:32: currentcmd = 0;             //0-NO COMMAND, 1-TURN LEFT, 2-TURN RIGHT, 3-FORWARDS, 4-BACKWARDS, 5-STOP, 6-UTURN
0023 753000     528            mov     _currentcmd,#0x00
0026            529   ;        robot.c:35: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0026 74E8       530            mov     a,#__str_0
0028 C0E0       531            push    acc
002A 7494       532            mov     a,#(__str_0 >> 8)
002C C0E0       533            push    acc
002E 7480       534            mov     a,#0x80
0030 C0E0       535            push    acc
0032 120100     536            lcall   _printf
0035 1581       537            dec     sp
0037 1581       538            dec     sp
0039 1581       539            dec     sp
003B            540   ;        robot.c:38: InitPinADC(2, 3); // Configure P2.3 as analog input (tank1)
003B 750003     541            mov     _InitPinADC_PARM_2,#0x03
003E 758202     542            mov     dpl,#0x02
0041 120100     543            lcall   _InitPinADC
0044            544   ;        robot.c:39: InitPinADC(2, 4); // Configure P2.4 as analog input         (tank1)
0044 750004     545            mov     _InitPinADC_PARM_2,#0x04
0047 758202     546            mov     dpl,#0x02
004A 120100     547            lcall   _InitPinADC
004D            548   ;        robot.c:40: InitPinADC(2, 5); // Configure P2.5 as analog input (tank2)
004D 750005     549            mov     _InitPinADC_PARM_2,#0x05
0050 758202     550            mov     dpl,#0x02
0053 120100     551            lcall   _InitPinADC
0056            552   ;        robot.c:41: InitPinADC(2, 6); // Configure P2.6 as analog input (tank2)
0056 750006     553            mov     _InitPinADC_PARM_2,#0x06
0059 758202     554            mov     dpl,#0x02
005C 120100     555            lcall   _InitPinADC
005F            556   ;        robot.c:44: InitADC();  
005F 120100     557            lcall   _InitADC
0062            558   ;        robot.c:47: while (1) {         
0062            559   L002034?:
0062            560   ;        robot.c:50: currentcmd = readData(); 
0062 120100     561            lcall   _readData
0065 858230     562            mov     _currentcmd,dpl
0068            563   ;        robot.c:59: switch (currentstate) {
0068 AAF0       564            mov     r2,_currentstate
006A BA0138     565            cjne    r2,#0x01,L002064?
006D 8001       566            sjmp    L002001?
006F            567   L002064?:
006F BA02B8     568            cjne    r2,#0x02,L002065?
0072 8001       569            sjmp    L002002?
0074            570   L002065?:
0074            571   ;        robot.c:60: case FORWARD_STATE:
0074 BA0338     572            cjne    r2,#0x03,L002004?
0077 8001       573            sjmp    L002003?
0079            574   L002001?:
0079            575   ;        robot.c:61: linetrack(0);       // forwards
0079 900000     576            mov     dptr,#0x0000
007C 120100     577            lcall   _linetrack
007F            578   ;        robot.c:63: v1 = Volts_at_Pin(TANK_FL);
007F 75820B     579            mov     dpl,#0x0B
0082 120100     580            lcall   _Volts_at_Pin
0085 858228     581            mov     _main_v1_1_57,dpl
0088 858329     582            mov     (_main_v1_1_57 + 1),dph
008B 85F02A     583            mov     (_main_v1_1_57 + 2),b
008E F52B       584            mov     (_main_v1_1_57 + 3),a
0090            585   ;        robot.c:64: v2 = Volts_at_Pin(TANK_FR);
0090 75820C     586            mov     dpl,#0x0C
0093 120100     587            lcall   _Volts_at_Pin
0096 858268     588            mov     _main_v2_1_57,dpl
0099 858369     589            mov     (_main_v2_1_57 + 1),dph
009C 85F06A     590            mov     (_main_v2_1_57 + 2),b
009F F56B       591            mov     (_main_v2_1_57 + 3),a
00A1            592   ;        robot.c:65: break;
00A1            593   ;        robot.c:66: case REVERSE_STATE:
00A1 8001       594            sjmp    L002004?
00A3            595   L002002?:
00A3            596   ;        robot.c:67: linetrack(1);       // backwards
00A3 900001     597            mov     dptr,#0x0001
00A6 120100     598            lcall   _linetrack
00A9            599   ;        robot.c:69: v2 = Volts_at_Pin(TANK_RL);
00A9 75820D     600            mov     dpl,#0x0D
00AC 120100     601            lcall   _Volts_at_Pin
00AF 858268     602            mov     _main_v2_1_57,dpl
00B2 858369     603            mov     (_main_v2_1_57 + 1),dph
00B5 85F06A     604            mov     (_main_v2_1_57 + 2),b
00B8 F56B       605            mov     (_main_v2_1_57 + 3),a
00BA            606   ;        robot.c:70: v1 = Volts_at_Pin(TANK_RR);
00BA 75820E     607            mov     dpl,#0x0E
00BD 120100     608            lcall   _Volts_at_Pin
00C0 858228     609            mov     _main_v1_1_57,dpl
00C3 858329     610            mov     (_main_v1_1_57 + 1),dph
00C6 85F02A     611            mov     (_main_v1_1_57 + 2),b
00C9 F52B       612            mov     (_main_v1_1_57 + 3),a
00CB            613   ;        robot.c:71: break;
00CB            614   ;        robot.c:72: case STOP_STATE:
00CB 8001       615            sjmp    L002004?
00CD            616   L002003?:
00CD            617   ;        robot.c:73: stopcar();          // stop car
00CD 120100     618            lcall   _stopcar
00D0            619   ;        robot.c:75: }
00D0            620   L002004?:
00D0            621   ;        robot.c:78: switch (currentcmd) {
00D0 E530       622            mov     a,_currentcmd
00D2 FA         623            mov     r2,a
00D3 30E778     624            jnb     acc.7,L002067?
00D6 020100     625            ljmp    L002031?
00D9            626   L002067?:
00D9 C3         627            clr     c
00DA 7486       628            mov     a,#(0x06 ^ 0x80)
00DC 8AF0       629            mov     b,r2
00DE 63F080     630            xrl     b,#0x80
00E1 95F0       631            subb    a,b
00E3 5001       632            jnc     L002068?
00E5 020100     633            ljmp    L002031?
00E8            634   L002068?:
00E8 EA         635            mov     a,r2
00E9 2A         636            add     a,r2
00EA 2A         637            add     a,r2
00EB 909A38     638            mov     dptr,#L002069?
00EE 73         639            jmp     @a+dptr
00EF            640   L002069?:
00EF 020100     641            ljmp    L002005?
00F2 020100     642            ljmp    L002019?
00F5 020100     643            ljmp    L002023?
00F8 020100     644            ljmp    L002027?
00FB 020100     645            ljmp    L002028?
00FE 020100     646            ljmp    L002029?
0101 020100     647            ljmp    L002030?
0104            648   ;        robot.c:80: case CMD_NONE:
0104            649   L002005?:
0104            650   ;        robot.c:82: if ((currentstate-1) ? 
0104 AAF0       651            mov     r2,_currentstate
0106 E5F0       652            mov     a,_currentstate
0108 33         653            rlc     a
0109 95E0       654            subb    a,acc
010B FB         655            mov     r3,a
010C 1A         656            dec     r2
010D BAFF38     657            cjne    r2,#0xff,L002070?
0110 1B         658            dec     r3
0111            659   L002070?:
0111 EA         660            mov     a,r2
0112 4B         661            orl     a,r3
0113 6001       662            jz      L002038?
0115            663   ;        robot.c:83: (v1 > 1.2 && v2 > 1.2) :
0115 749A       664            mov     a,#0x9A
0117 C0E0       665            push    acc
0119 7499       666            mov     a,#0x99
011B C0E0       667            push    acc
011D C0E0       668            push    acc
011F 743F       669            mov     a,#0x3F
0121 C0E0       670            push    acc
0123 852882     671            mov     dpl,_main_v1_1_57
0126 852983     672            mov     dph,(_main_v1_1_57 + 1)
0129 852AF0     673            mov     b,(_main_v1_1_57 + 2)
012C E52B       674            mov     a,(_main_v1_1_57 + 3)
012E 120100     675            lcall   ___fsgt
0131 AA82       676            mov     r2,dpl
0133 E581       677            mov     a,sp
0135 24FC       678            add     a,#0xfc
0137 F581       679            mov     sp,a
0139 EA         680            mov     a,r2
013A 6001       681            jz      L002040?
013C 749A       682            mov     a,#0x9A
013E C0E0       683            push    acc
0140 7499       684            mov     a,#0x99
0142 C0E0       685            push    acc
0144 C0E0       686            push    acc
0146 743F       687            mov     a,#0x3F
0148 C0E0       688            push    acc
014A 856882     689            mov     dpl,_main_v2_1_57
014D 856983     690            mov     dph,(_main_v2_1_57 + 1)
0150 856AF0     691            mov     b,(_main_v2_1_57 + 2)
0153 E56B       692            mov     a,(_main_v2_1_57 + 3)
0155 120100     693            lcall   ___fsgt
0158 AA82       694            mov     r2,dpl
015A E581       695            mov     a,sp
015C 24FC       696            add     a,#0xfc
015E F581       697            mov     sp,a
0160 EA         698            mov     a,r2
0161 7001       699            jnz     L002041?
0163            700   L002040?:
0163 7A00       701            mov     r2,#0x00
0165 8001       702            sjmp    L002042?
0167            703   L002041?:
0167 7A01       704            mov     r2,#0x01
0169            705   L002042?:
0169 EA         706            mov     a,r2
016A 24FF       707            add     a,#0xff
016C 9218       708            mov     _main_sloc0_1_0,c
016E 8001       709            sjmp    L002039?
0170            710   L002038?:
0170            711   ;        robot.c:84: (v1 > 0.7 && v2 > 1)) {
0170 7433       712            mov     a,#0x33
0172 C0E0       713            push    acc
0174 C0E0       714            push    acc
0176 C0E0       715            push    acc
0178 743F       716            mov     a,#0x3F
017A C0E0       717            push    acc
017C 852882     718            mov     dpl,_main_v1_1_57
017F 852983     719            mov     dph,(_main_v1_1_57 + 1)
0182 852AF0     720            mov     b,(_main_v1_1_57 + 2)
0185 E52B       721            mov     a,(_main_v1_1_57 + 3)
0187 120100     722            lcall   ___fsgt
018A AA82       723            mov     r2,dpl
018C E581       724            mov     a,sp
018E 24FC       725            add     a,#0xfc
0190 F581       726            mov     sp,a
0192 EA         727            mov     a,r2
0193 6001       728            jz      L002043?
0195 E4         729            clr     a
0196 C0E0       730            push    acc
0198 C0E0       731            push    acc
019A 7480       732            mov     a,#0x80
019C C0E0       733            push    acc
019E 743F       734            mov     a,#0x3F
01A0 C0E0       735            push    acc
01A2 856882     736            mov     dpl,_main_v2_1_57
01A5 856983     737            mov     dph,(_main_v2_1_57 + 1)
01A8 856AF0     738            mov     b,(_main_v2_1_57 + 2)
01AB E56B       739            mov     a,(_main_v2_1_57 + 3)
01AD 120100     740            lcall   ___fsgt
01B0 AA82       741            mov     r2,dpl
01B2 E581       742            mov     a,sp
01B4 24FC       743            add     a,#0xfc
01B6 F581       744            mov     sp,a
01B8 EA         745            mov     a,r2
01B9 7001       746            jnz     L002044?
01BB            747   L002043?:
01BB 7A00       748            mov     r2,#0x00
01BD 8001       749            sjmp    L002045?
01BF            750   L002044?:
01BF 7A01       751            mov     r2,#0x01
01C1            752   L002045?:
01C1 EA         753            mov     a,r2
01C2 24FF       754            add     a,#0xff
01C4 9218       755            mov     _main_sloc0_1_0,c
01C6            756   L002039?:
01C6 2018B8     757            jb      _main_sloc0_1_0,L002076?
01C9 020100     758            ljmp    L002034?
01CC            759   L002076?:
01CC            760   ;        robot.c:85: printf("\nINTERSECTION\n");
01CC 74F8       761            mov     a,#__str_1
01CE C0E0       762            push    acc
01D0 749E       763            mov     a,#(__str_1 >> 8)
01D2 C0E0       764            push    acc
01D4 7480       765            mov     a,#0x80
01D6 C0E0       766            push    acc
01D8 120100     767            lcall   _printf
01DB 1581       768            dec     sp
01DD 1581       769            dec     sp
01DF 1581       770            dec     sp
01E1            771   ;        robot.c:87: if (currentstate == 1) {
01E1 7401       772            mov     a,#0x01
01E3 B5F038     773            cjne    a,_currentstate,L002015?
01E6            774   ;        robot.c:88: if (Volts_at_Pin(LQFP32_MUX_P2_5)>Volts_at_Pin(LQFP32_MUX_P2_6)) {
01E6 75820D     775            mov     dpl,#0x0D
01E9 120100     776            lcall   _Volts_at_Pin
01EC AA82       777            mov     r2,dpl
01EE AB83       778            mov     r3,dph
01F0 ACF0       779            mov     r4,b
01F2 FD         780            mov     r5,a
01F3 75820E     781            mov     dpl,#0x0E
01F6 C002       782            push    ar2
01F8 C003       783            push    ar3
01FA C004       784            push    ar4
01FC C005       785            push    ar5
01FE 120100     786            lcall   _Volts_at_Pin
0201 AE82       787            mov     r6,dpl
0203 AF83       788            mov     r7,dph
0205 A8F0       789            mov     r0,b
0207 F9         790            mov     r1,a
0208 D005       791            pop     ar5
020A D004       792            pop     ar4
020C D003       793            pop     ar3
020E D002       794            pop     ar2
0210 C006       795            push    ar6
0212 C007       796            push    ar7
0214 C000       797            push    ar0
0216 C001       798            push    ar1
0218 8A82       799            mov     dpl,r2
021A 8B83       800            mov     dph,r3
021C 8CF0       801            mov     b,r4
021E ED         802            mov     a,r5
021F 120100     803            lcall   ___fsgt
0222 AA82       804            mov     r2,dpl
0224 E581       805            mov     a,sp
0226 24FC       806            add     a,#0xfc
0228 F581       807            mov     sp,a
022A EA         808            mov     a,r2
022B 6001       809            jz      L002007?
022D            810   ;        robot.c:89: pwm_Left1 = 50;
022D 753032     811            mov     _pwm_Left1,#0x32
0230            812   ;        robot.c:90: pwm_Left0 = -1;
0230 7570FF     813            mov     _pwm_Left0,#0xFF
0233            814   ;        robot.c:91: pwm_Right0 = 30;
0233 75F01E     815            mov     _pwm_Right0,#0x1E
0236            816   ;        robot.c:92: pwm_Right1 = -1;
0236 75B0FF     817            mov     _pwm_Right1,#0xFF
0239 8001       818            sjmp    L002016?
023B            819   L002007?:
023B            820   ;        robot.c:95: pwm_Left1 = 30;
023B 75301E     821            mov     _pwm_Left1,#0x1E
023E            822   ;        robot.c:96: pwm_Left0 = -1;
023E 7570FF     823            mov     _pwm_Left0,#0xFF
0241            824   ;        robot.c:97: pwm_Right0 = 50;
0241 75F032     825            mov     _pwm_Right0,#0x32
0244            826   ;        robot.c:98: pwm_Right1 = -1;
0244 75B0FF     827            mov     _pwm_Right1,#0xFF
0247 8001       828            sjmp    L002016?
0249            829   L002015?:
0249            830   ;        robot.c:100: } else if (currentstate == 2) {
0249 7402       831            mov     a,#0x02
024B B5F0B8     832            cjne    a,_currentstate,L002016?
024E            833   ;        robot.c:101: if (Volts_at_Pin(TANK_FL)>Volts_at_Pin(TANK_FR)) {
024E 75820B     834            mov     dpl,#0x0B
0251 120100     835            lcall   _Volts_at_Pin
0254 AA82       836            mov     r2,dpl
0256 AB83       837            mov     r3,dph
0258 ACF0       838            mov     r4,b
025A FD         839            mov     r5,a
025B 75820C     840            mov     dpl,#0x0C
025E C002       841            push    ar2
0260 C003       842            push    ar3
0262 C004       843            push    ar4
0264 C005       844            push    ar5
0266 120100     845            lcall   _Volts_at_Pin
0269 AE82       846            mov     r6,dpl
026B AF83       847            mov     r7,dph
026D A8F0       848            mov     r0,b
026F F9         849            mov     r1,a
0270 D005       850            pop     ar5
0272 D004       851            pop     ar4
0274 D003       852            pop     ar3
0276 D002       853            pop     ar2
0278 C006       854            push    ar6
027A C007       855            push    ar7
027C C000       856            push    ar0
027E C001       857            push    ar1
0280 8A82       858            mov     dpl,r2
0282 8B83       859            mov     dph,r3
0284 8CF0       860            mov     b,r4
0286 ED         861            mov     a,r5
0287 120100     862            lcall   ___fsgt
028A AA82       863            mov     r2,dpl
028C E581       864            mov     a,sp
028E 24FC       865            add     a,#0xfc
0290 F581       866            mov     sp,a
0292 EA         867            mov     a,r2
0293 6001       868            jz      L002010?
0295            869   ;        robot.c:102: pwm_Left0 = 50;
0295 757032     870            mov     _pwm_Left0,#0x32
0298            871   ;        robot.c:103: pwm_Left1 = -1;
0298 7530FF     872            mov     _pwm_Left1,#0xFF
029B            873   ;        robot.c:104: pwm_Right0 = -1;
029B 75F0FF     874            mov     _pwm_Right0,#0xFF
029E            875   ;        robot.c:105: pwm_Right1 = 30;
029E 75B01E     876            mov     _pwm_Right1,#0x1E
02A1 8001       877            sjmp    L002016?
02A3            878   L002010?:
02A3            879   ;        robot.c:108: pwm_Left0 = 30;
02A3 75701E     880            mov     _pwm_Left0,#0x1E
02A6            881   ;        robot.c:109: pwm_Left1 = -1;
02A6 7530FF     882            mov     _pwm_Left1,#0xFF
02A9            883   ;        robot.c:110: pwm_Right0 = -1;
02A9 75F0FF     884            mov     _pwm_Right0,#0xFF
02AC            885   ;        robot.c:111: pwm_Right1 = 50;
02AC 75B032     886            mov     _pwm_Right1,#0x32
02AF            887   L002016?:
02AF            888   ;        robot.c:115: waitms(1500);
02AF 9005DC     889            mov     dptr,#0x05DC
02B2 120100     890            lcall   _waitms
02B5            891   ;        robot.c:117: break;
02B5 020100     892            ljmp    L002034?
02B8            893   ;        robot.c:119: case CMD_LEFT:
02B8            894   L002019?:
02B8            895   ;        robot.c:121: printf("Turn left at the next intersection\n");
02B8 7480       896            mov     a,#__str_2
02BA C0E0       897            push    acc
02BC 74A0       898            mov     a,#(__str_2 >> 8)
02BE C0E0       899            push    acc
02C0 7480       900            mov     a,#0x80
02C2 C0E0       901            push    acc
02C4 120100     902            lcall   _printf
02C7 1581       903            dec     sp
02C9 1581       904            dec     sp
02CB 1581       905            dec     sp
02CD            906   ;        robot.c:122: if (v1 > 0.7 && v2 >1)  {
02CD 7433       907            mov     a,#0x33
02CF C0E0       908            push    acc
02D1 C0E0       909            push    acc
02D3 C0E0       910            push    acc
02D5 743F       911            mov     a,#0x3F
02D7 C0E0       912            push    acc
02D9 852882     913            mov     dpl,_main_v1_1_57
02DC 852983     914            mov     dph,(_main_v1_1_57 + 1)
02DF 852AF0     915            mov     b,(_main_v1_1_57 + 2)
02E2 E52B       916            mov     a,(_main_v1_1_57 + 3)
02E4 120100     917            lcall   ___fsgt
02E7 AA82       918            mov     r2,dpl
02E9 E581       919            mov     a,sp
02EB 24FC       920            add     a,#0xfc
02ED F581       921            mov     sp,a
02EF EA         922            mov     a,r2
02F0 7001       923            jnz     L002083?
02F2 020100     924            ljmp    L002034?
02F5            925   L002083?:
02F5 E4         926            clr     a
02F6 C0E0       927            push    acc
02F8 C0E0       928            push    acc
02FA 7480       929            mov     a,#0x80
02FC C0E0       930            push    acc
02FE 743F       931            mov     a,#0x3F
0300 C0E0       932            push    acc
0302 856882     933            mov     dpl,_main_v2_1_57
0305 856983     934            mov     dph,(_main_v2_1_57 + 1)
0308 856AF0     935            mov     b,(_main_v2_1_57 + 2)
030B E56B       936            mov     a,(_main_v2_1_57 + 3)
030D 120100     937            lcall   ___fsgt
0310 AA82       938            mov     r2,dpl
0312 E581       939            mov     a,sp
0314 24FC       940            add     a,#0xfc
0316 F581       941            mov     sp,a
0318 EA         942            mov     a,r2
0319 7001       943            jnz     L002084?
031B 020100     944            ljmp    L002034?
031E            945   L002084?:
031E            946   ;        robot.c:123: printf("\n\r INTERSECTION\n");
031E 7440       947            mov     a,#__str_3
0320 C0E0       948            push    acc
0322 74A1       949            mov     a,#(__str_3 >> 8)
0324 C0E0       950            push    acc
0326 7480       951            mov     a,#0x80
0328 C0E0       952            push    acc
032A 120100     953            lcall   _printf
032D 1581       954            dec     sp
032F 1581       955            dec     sp
0331 1581       956            dec     sp
0333            957   ;        robot.c:128: turncar(currentstate);
0333 AAF0       958            mov     r2,_currentstate
0335 E5F0       959            mov     a,_currentstate
0337 33         960            rlc     a
0338 95E0       961            subb    a,acc
033A FB         962            mov     r3,a
033B 8A82       963            mov     dpl,r2
033D 8B83       964            mov     dph,r3
033F 120100     965            lcall   _turncar
0342            966   ;        robot.c:129: currentcmd = 0;
0342 753000     967            mov     _currentcmd,#0x00
0345            968   ;        robot.c:131: break;
0345 020100     969            ljmp    L002034?
0348            970   ;        robot.c:134: case CMD_RIGHT:
0348            971   L002023?:
0348            972   ;        robot.c:136: printf("Turn right at the next intersection\n");
0348 7480       973            mov     a,#__str_4
034A C0E0       974            push    acc
034C 74A1       975            mov     a,#(__str_4 >> 8)
034E C0E0       976            push    acc
0350 7480       977            mov     a,#0x80
0352 C0E0       978            push    acc
0354 120100     979            lcall   _printf
0357 1581       980            dec     sp
0359 1581       981            dec     sp
035B 1581       982            dec     sp
035D            983   ;        robot.c:137: if (v1 > 0.7 && v2 >1) {
035D 7433       984            mov     a,#0x33
035F C0E0       985            push    acc
0361 C0E0       986            push    acc
0363 C0E0       987            push    acc
0365 743F       988            mov     a,#0x3F
0367 C0E0       989            push    acc
0369 852882     990            mov     dpl,_main_v1_1_57
036C 852983     991            mov     dph,(_main_v1_1_57 + 1)
036F 852AF0     992            mov     b,(_main_v1_1_57 + 2)
0372 E52B       993            mov     a,(_main_v1_1_57 + 3)
0374 120100     994            lcall   ___fsgt
0377 AA82       995            mov     r2,dpl
0379 E581       996            mov     a,sp
037B 24FC       997            add     a,#0xfc
037D F581       998            mov     sp,a
037F EA         999            mov     a,r2
0380 7001      1000            jnz     L002085?
0382 020100    1001            ljmp    L002034?
0385           1002   L002085?:
0385 E4        1003            clr     a
0386 C0E0      1004            push    acc
0388 C0E0      1005            push    acc
038A 7480      1006            mov     a,#0x80
038C C0E0      1007            push    acc
038E 743F      1008            mov     a,#0x3F
0390 C0E0      1009            push    acc
0392 856882    1010            mov     dpl,_main_v2_1_57
0395 856983    1011            mov     dph,(_main_v2_1_57 + 1)
0398 856AF0    1012            mov     b,(_main_v2_1_57 + 2)
039B E56B      1013            mov     a,(_main_v2_1_57 + 3)
039D 120100    1014            lcall   ___fsgt
03A0 AA82      1015            mov     r2,dpl
03A2 E581      1016            mov     a,sp
03A4 24FC      1017            add     a,#0xfc
03A6 F581      1018            mov     sp,a
03A8 EA        1019            mov     a,r2
03A9 7001      1020            jnz     L002086?
03AB 020100    1021            ljmp    L002034?
03AE           1022   L002086?:
03AE           1023   ;        robot.c:138: printf("\n\r INTERSECTION\n");
03AE 7440      1024            mov     a,#__str_3
03B0 C0E0      1025            push    acc
03B2 74A1      1026            mov     a,#(__str_3 >> 8)
03B4 C0E0      1027            push    acc
03B6 7480      1028            mov     a,#0x80
03B8 C0E0      1029            push    acc
03BA 120100    1030            lcall   _printf
03BD 1581      1031            dec     sp
03BF 1581      1032            dec     sp
03C1 1581      1033            dec     sp
03C3           1034   ;        robot.c:140: turncar(currentstate + 2); //1 = right
03C3 AAF0      1035            mov     r2,_currentstate
03C5 E5F0      1036            mov     a,_currentstate
03C7 33        1037            rlc     a
03C8 95E0      1038            subb    a,acc
03CA FB        1039            mov     r3,a
03CB 8A82      1040            mov     dpl,r2
03CD 8B83      1041            mov     dph,r3
03CF A3        1042            inc     dptr
03D0 A3        1043            inc     dptr
03D1 120100    1044            lcall   _turncar
03D4           1045   ;        robot.c:141: currentcmd = 0;
03D4 753000    1046            mov     _currentcmd,#0x00
03D7           1047   ;        robot.c:143: break;
03D7 020100    1048            ljmp    L002034?
03DA           1049   ;        robot.c:146: case CMD_FORWARD:
03DA           1050   L002027?:
03DA           1051   ;        robot.c:148: printf("GO!\n");
03DA 7440      1052            mov     a,#__str_5
03DC C0E0      1053            push    acc
03DE 74A2      1054            mov     a,#(__str_5 >> 8)
03E0 C0E0      1055            push    acc
03E2 7480      1056            mov     a,#0x80
03E4 C0E0      1057            push    acc
03E6 120100    1058            lcall   _printf
03E9 1581      1059            dec     sp
03EB 1581      1060            dec     sp
03ED 1581      1061            dec     sp
03EF           1062   ;        robot.c:149: currentstate = 1;
03EF 75F001    1063            mov     _currentstate,#0x01
03F2           1064   ;        robot.c:150: currentcmd = 0;
03F2 753000    1065            mov     _currentcmd,#0x00
03F5           1066   ;        robot.c:151: break;
03F5 020100    1067            ljmp    L002034?
03F8           1068   ;        robot.c:154: case CMD_REVERSE:
03F8           1069   L002028?:
03F8           1070   ;        robot.c:156: printf("Reverse Reverse!\n");
03F8 7480      1071            mov     a,#__str_6
03FA C0E0      1072            push    acc
03FC 74A2      1073            mov     a,#(__str_6 >> 8)
03FE C0E0      1074            push    acc
0400 7480      1075            mov     a,#0x80
0402 C0E0      1076            push    acc
0404 120100    1077            lcall   _printf
0407 1581      1078            dec     sp
0409 1581      1079            dec     sp
040B 1581      1080            dec     sp
040D           1081   ;        robot.c:157: currentstate = 2;
040D 75F002    1082            mov     _currentstate,#0x02
0410           1083   ;        robot.c:158: currentcmd = 0;
0410 753000    1084            mov     _currentcmd,#0x00
0413           1085   ;        robot.c:159: break;
0413 020100    1086            ljmp    L002034?
0416           1087   ;        robot.c:162: case CMD_STOP:
0416           1088   L002029?:
0416           1089   ;        robot.c:164: printf("HALT peasants!\n");
0416 74C0      1090            mov     a,#__str_7
0418 C0E0      1091            push    acc
041A 74A2      1092            mov     a,#(__str_7 >> 8)
041C C0E0      1093            push    acc
041E 7480      1094            mov     a,#0x80
0420 C0E0      1095            push    acc
0422 120100    1096            lcall   _printf
0425 1581      1097            dec     sp
0427 1581      1098            dec     sp
0429 1581      1099            dec     sp
042B           1100   ;        robot.c:165: currentstate = 3;
042B 75F003    1101            mov     _currentstate,#0x03
042E           1102   ;        robot.c:166: currentcmd = 0;
042E 753000    1103            mov     _currentcmd,#0x00
0431           1104   ;        robot.c:167: break;
0431 020100    1105            ljmp    L002034?
0434           1106   ;        robot.c:170: case CMD_UTURN:
0434           1107   L002030?:
0434           1108   ;        robot.c:172: printf("UTURN\n");
0434 7400      1109            mov     a,#__str_8
0436 C0E0      1110            push    acc
0438 74A3      1111            mov     a,#(__str_8 >> 8)
043A C0E0      1112            push    acc
043C 7480      1113            mov     a,#0x80
043E C0E0      1114            push    acc
0440 120100    1115            lcall   _printf
0443 1581      1116            dec     sp
0445 1581      1117            dec     sp
0447 1581      1118            dec     sp
0449           1119   ;        robot.c:173: currentcmd = 0;
0449 753000    1120            mov     _currentcmd,#0x00
044C           1121   ;        robot.c:174: break;
044C 020100    1122            ljmp    L002034?
044F           1123   ;        robot.c:177: default: 
044F           1124   L002031?:
044F           1125   ;        robot.c:178: currentstate = 1;
044F 75F001    1126            mov     _currentstate,#0x01
0452           1127   ;        robot.c:179: }
0452 020100    1128            ljmp    L002034?
0455           1129   ;------------------------------------------------------------
0455           1130   ;Allocation info for local variables in function 'Timer2_ISR'
0455           1131   ;------------------------------------------------------------
0455           1132   ;------------------------------------------------------------
0455           1133   ;        robot.c:183: void Timer2_ISR (void) interrupt 5 {
0455           1134   ;        -----------------------------------------
0455           1135   ;         function Timer2_ISR
0455           1136   ;        -----------------------------------------
0455           1137   _Timer2_ISR:
0455 C0E0      1138            push    acc
0457 C0F0      1139            push    b
0459 C0D0      1140            push    psw
045B 75D000    1141            mov     psw,#0x00
045E           1142   ;        robot.c:184: TF2H = 0; // Clear Timer2 interrupt flag
045E C2CF      1143            clr     _TF2H
0460           1144   ;        robot.c:186: pwm_count++;
0460 0520      1145            inc     _pwm_count
0462           1146   ;        robot.c:187: if(pwm_count>100) pwm_count=0;
0462 C3        1147            clr     c
0463 74E4      1148            mov     a,#(0x64 ^ 0x80)
0465 8520F0    1149            mov     b,_pwm_count
0468 63F080    1150            xrl     b,#0x80
046B 95F0      1151            subb    a,b
046D 5001      1152            jnc     L003002?
046F 752000    1153            mov     _pwm_count,#0x00
0472           1154   L003002?:
0472           1155   ;        robot.c:190: MOTOR_LEFT0 = pwm_count > pwm_Left0 ? 0 : 1; //p1.5
0472 C3        1156            clr     c
0473 E570      1157            mov     a,_pwm_Left0
0475 6480      1158            xrl     a,#0x80
0477 8520F0    1159            mov     b,_pwm_count
047A 63F080    1160            xrl     b,#0x80
047D 95F0      1161            subb    a,b
047F 9268      1162            mov  _Timer2_ISR_sloc0_1_0,c
0481 B3        1163            cpl     c
0482 9295      1164            mov     _P1_5,c
0484           1165   ;        robot.c:191: MOTOR_LEFT1 = pwm_count > pwm_Left1 ? 0 : 1; //p1.6
0484 C3        1166            clr     c
0485 E530      1167            mov     a,_pwm_Left1
0487 6480      1168            xrl     a,#0x80
0489 8520F0    1169            mov     b,_pwm_count
048C 63F080    1170            xrl     b,#0x80
048F 95F0      1171            subb    a,b
0491 9268      1172            mov  _Timer2_ISR_sloc0_1_0,c
0493 B3        1173            cpl     c
0494 9296      1174            mov     _P1_6,c
0496           1175   ;        robot.c:192: MOTOR_RIGHT0 = pwm_count > pwm_Right0 ? 0 : 1; //p2.0
0496 C3        1176            clr     c
0497 E5F0      1177            mov     a,_pwm_Right0
0499 6480      1178            xrl     a,#0x80
049B 8520F0    1179            mov     b,_pwm_count
049E 63F080    1180            xrl     b,#0x80
04A1 95F0      1181            subb    a,b
04A3 9268      1182            mov  _Timer2_ISR_sloc0_1_0,c
04A5 B3        1183            cpl     c
04A6 92A0      1184            mov     _P2_0,c
04A8           1185   ;        robot.c:193: MOTOR_RIGHT1 = pwm_count > pwm_Right1 ? 0 : 1; //p2.1
04A8 C3        1186            clr     c
04A9 E5B0      1187            mov     a,_pwm_Right1
04AB 6480      1188            xrl     a,#0x80
04AD 8520F0    1189            mov     b,_pwm_count
04B0 63F080    1190            xrl     b,#0x80
04B3 95F0      1191            subb    a,b
04B5 9268      1192            mov  _Timer2_ISR_sloc0_1_0,c
04B7 B3        1193            cpl     c
04B8 92A1      1194            mov     _P2_1,c
04BA D0D0      1195            pop     psw
04BC D0F0      1196            pop     b
04BE D0E0      1197            pop     acc
04C0 32        1198            reti
04C1           1199   ;        eliminated unneeded push/pop dpl
04C1           1200   ;        eliminated unneeded push/pop dph
04C1           1201   ;------------------------------------------------------------
04C1           1202   ;Allocation info for local variables in function 'readData'
04C1           1203   ;------------------------------------------------------------
04C1           1204   ;command                   Allocated to registers r2 
04C1           1205   ;------------------------------------------------------------
04C1           1206   ;        robot.c:286: unsigned char readData(void) {
04C1           1207   ;        -----------------------------------------
04C1           1208   ;         function readData
04C1           1209   ;        -----------------------------------------
04C1           1210   _readData:
04C1           1211   ;        robot.c:287: unsigned char command = 0;
04C1 7A00      1212            mov     r2,#0x00
04C3           1213   ;        robot.c:288: if (!COMMAND_PIN) {
04C3 3091C0    1214            jnb     _P1_1,L004024?
04C6 020100    1215            ljmp    L004008?
04C9           1216   L004024?:
04C9           1217   ;        robot.c:289: while (!COMMAND_PIN);
04C9           1218   L004001?:
04C9 309140    1219            jnb     _P1_1,L004001?
04CC           1220   ;        robot.c:290: P1_4 = 1;
04CC D294      1221            setb    _P1_4
04CE           1222   ;        robot.c:291: waitms((int)(CMDFRQ + CMDFRQ/2));
04CE 900060    1223            mov     dptr,#0x0060
04D1 120100    1224            lcall   _waitms
04D4           1225   ;        robot.c:292: P1_4 = 0;
04D4 C294      1226            clr     _P1_4
04D6           1227   ;        robot.c:293: command |= COMMAND_PIN<<2;
04D6 A291      1228            mov     c,_P1_1
04D8 E4        1229            clr     a
04D9 33        1230            rlc     a
04DA 25E0      1231            add     a,acc
04DC 25E0      1232            add     a,acc
04DE FA        1233            mov     r2,a
04DF           1234   ;        robot.c:294: waitms(CMDFRQ);
04DF 900040    1235            mov     dptr,#0x0040
04E2 C002      1236            push    ar2
04E4 120100    1237            lcall   _waitms
04E7 D002      1238            pop     ar2
04E9           1239   ;        robot.c:295: P1_4 = 1;
04E9 D294      1240            setb    _P1_4
04EB           1241   ;        robot.c:296: command |= COMMAND_PIN<<1;
04EB A291      1242            mov     c,_P1_1
04ED E4        1243            clr     a
04EE 33        1244            rlc     a
04EF 25E0      1245            add     a,acc
04F1 4202      1246            orl     ar2,a
04F3           1247   ;        robot.c:297: waitms(CMDFRQ);
04F3 900040    1248            mov     dptr,#0x0040
04F6 C002      1249            push    ar2
04F8 120100    1250            lcall   _waitms
04FB D002      1251            pop     ar2
04FD           1252   ;        robot.c:298: P1_4 = 0;
04FD C294      1253            clr     _P1_4
04FF           1254   ;        robot.c:299: command |= COMMAND_PIN;
04FF A291      1255            mov     c,_P1_1
0501 E4        1256            clr     a
0502 33        1257            rlc     a
0503 FB        1258            mov     r3,a
0504 4202      1259            orl     ar2,a
0506           1260   ;        robot.c:300: while (!COMMAND_PIN);
0506           1261   L004004?:
0506 309180    1262            jnb     _P1_1,L004004?
0509           1263   ;        robot.c:304: (command & 0x01) ? '1' : '0');
0509 EA        1264            mov     a,r2
050A 30E0C0    1265            jnb     acc.0,L004011?
050D 7B31      1266            mov     r3,#0x31
050F 8001      1267            sjmp    L004012?
0511           1268   L004011?:
0511 7B30      1269            mov     r3,#0x30
0513           1270   L004012?:
0513 EB        1271            mov     a,r3
0514 33        1272            rlc     a
0515 95E0      1273            subb    a,acc
0517 FC        1274            mov     r4,a
0518           1275   ;        robot.c:303: (command & 0x02) ? '1' : '0',
0518 EA        1276            mov     a,r2
0519 30E140    1277            jnb     acc.1,L004013?
051C 7D31      1278            mov     r5,#0x31
051E 8001      1279            sjmp    L004014?
0520           1280   L004013?:
0520 7D30      1281            mov     r5,#0x30
0522           1282   L004014?:
0522 ED        1283            mov     a,r5
0523 33        1284            rlc     a
0524 95E0      1285            subb    a,acc
0526 FE        1286            mov     r6,a
0527           1287   ;        robot.c:302: (command & 0x04) ? '1' : '0',
0527 EA        1288            mov     a,r2
0528 30E2C0    1289            jnb     acc.2,L004015?
052B 7F31      1290            mov     r7,#0x31
052D 8001      1291            sjmp    L004016?
052F           1292   L004015?:
052F 7F30      1293            mov     r7,#0x30
0531           1294   L004016?:
0531 EF        1295            mov     a,r7
0532 33        1296            rlc     a
0533 95E0      1297            subb    a,acc
0535 F8        1298            mov     r0,a
0536           1299   ;        robot.c:301: printf("Command received: 0b_0%c%c%c\n", 
0536 C002      1300            push    ar2
0538 C003      1301            push    ar3
053A C004      1302            push    ar4
053C C005      1303            push    ar5
053E C006      1304            push    ar6
0540 C007      1305            push    ar7
0542 C000      1306            push    ar0
0544 7440      1307            mov     a,#__str_9
0546 C0E0      1308            push    acc
0548 74A6      1309            mov     a,#(__str_9 >> 8)
054A C0E0      1310            push    acc
054C 7480      1311            mov     a,#0x80
054E C0E0      1312            push    acc
0550 120100    1313            lcall   _printf
0553 E581      1314            mov     a,sp
0555 24F7      1315            add     a,#0xf7
0557 F581      1316            mov     sp,a
0559 D002      1317            pop     ar2
055B           1318   L004008?:
055B           1319   ;        robot.c:306: return command;
055B 8A82      1320            mov     dpl,r2
055D 22        1321            ret
055E           1322   ;------------------------------------------------------------
055E           1323   ;Allocation info for local variables in function 'linetrack'
055E           1324   ;------------------------------------------------------------
055E           1325   ;forwardbackward           Allocated to registers r2 r3 
055E           1326   ;vleft                     Allocated with name '_linetrack_vleft_1_76'
055E           1327   ;vright                    Allocated with name '_linetrack_vright_1_76'
055E           1328   ;sloc0                     Allocated with name '_linetrack_sloc0_1_0'
055E           1329   ;sloc1                     Allocated with name '_linetrack_sloc1_1_0'
055E           1330   ;------------------------------------------------------------
055E           1331   ;        robot.c:313: void linetrack (int forwardbackward) {
055E           1332   ;        -----------------------------------------
055E           1333   ;         function linetrack
055E           1334   ;        -----------------------------------------
055E           1335   _linetrack:
055E AA82      1336            mov     r2,dpl
0560 AB83      1337            mov     r3,dph
0562           1338   ;        robot.c:321: if (forwardbackward == 0) {
0562 EA        1339            mov     a,r2
0563 4B        1340            orl     a,r3
0564 6001      1341            jz      L005010?
0566 020100    1342            ljmp    L005004?
0569           1343   L005010?:
0569           1344   ;        robot.c:322: vleft=Volts_at_Pin(TANK_FL);
0569 75820B    1345            mov     dpl,#0x0B
056C 120100    1346            lcall   _Volts_at_Pin
056F 8582B8    1347            mov     _linetrack_vleft_1_76,dpl
0572 8583B9    1348            mov     (_linetrack_vleft_1_76 + 1),dph
0575 85F0BA    1349            mov     (_linetrack_vleft_1_76 + 2),b
0578 F5BB      1350            mov     (_linetrack_vleft_1_76 + 3),a
057A           1351   ;        robot.c:323: vright=Volts_at_Pin(TANK_FR);
057A 75820C    1352            mov     dpl,#0x0C
057D 120100    1353            lcall   _Volts_at_Pin
0580 858208    1354            mov     _linetrack_vright_1_76,dpl
0583 858309    1355            mov     (_linetrack_vright_1_76 + 1),dph
0586 85F00A    1356            mov     (_linetrack_vright_1_76 + 2),b
0589 F50B      1357            mov     (_linetrack_vright_1_76 + 3),a
058B           1358   ;        robot.c:326: pwm_Left0 = -1;
058B 7570FF    1359            mov     _pwm_Left0,#0xFF
058E           1360   ;        robot.c:327: pwm_Left1 = vright*vright*75/(vright*vright+vleft*vleft);
058E C008      1361            push    _linetrack_vright_1_76
0590 C009      1362            push    (_linetrack_vright_1_76 + 1)
0592 C00A      1363            push    (_linetrack_vright_1_76 + 2)
0594 C00B      1364            push    (_linetrack_vright_1_76 + 3)
0596 850882    1365            mov     dpl,_linetrack_vright_1_76
0599 850983    1366            mov     dph,(_linetrack_vright_1_76 + 1)
059C 850AF0    1367            mov     b,(_linetrack_vright_1_76 + 2)
059F E50B      1368            mov     a,(_linetrack_vright_1_76 + 3)
05A1 120100    1369            lcall   ___fsmul
05A4 AC82      1370            mov     r4,dpl
05A6 AD83      1371            mov     r5,dph
05A8 AEF0      1372            mov     r6,b
05AA FF        1373            mov     r7,a
05AB E581      1374            mov     a,sp
05AD 24FC      1375            add     a,#0xfc
05AF F581      1376            mov     sp,a
05B1 C004      1377            push    ar4
05B3 C005      1378            push    ar5
05B5 C006      1379            push    ar6
05B7 C007      1380            push    ar7
05B9 900000    1381            mov     dptr,#0x0000
05BC 75F096    1382            mov     b,#0x96
05BF 7442      1383            mov     a,#0x42
05C1 120100    1384            lcall   ___fsmul
05C4 858258    1385            mov     _linetrack_sloc0_1_0,dpl
05C7 858359    1386            mov     (_linetrack_sloc0_1_0 + 1),dph
05CA 85F05A    1387            mov     (_linetrack_sloc0_1_0 + 2),b
05CD F55B      1388            mov     (_linetrack_sloc0_1_0 + 3),a
05CF E581      1389            mov     a,sp
05D1 24FC      1390            add     a,#0xfc
05D3 F581      1391            mov     sp,a
05D5 C008      1392            push    _linetrack_vright_1_76
05D7 C009      1393            push    (_linetrack_vright_1_76 + 1)
05D9 C00A      1394            push    (_linetrack_vright_1_76 + 2)
05DB C00B      1395            push    (_linetrack_vright_1_76 + 3)
05DD 850882    1396            mov     dpl,_linetrack_vright_1_76
05E0 850983    1397            mov     dph,(_linetrack_vright_1_76 + 1)
05E3 850AF0    1398            mov     b,(_linetrack_vright_1_76 + 2)
05E6 E50B      1399            mov     a,(_linetrack_vright_1_76 + 3)
05E8 120100    1400            lcall   ___fsmul
05EB 8582A8    1401            mov     _linetrack_sloc1_1_0,dpl
05EE 8583A9    1402            mov     (_linetrack_sloc1_1_0 + 1),dph
05F1 85F0AA    1403            mov     (_linetrack_sloc1_1_0 + 2),b
05F4 F5AB      1404            mov     (_linetrack_sloc1_1_0 + 3),a
05F6 E581      1405            mov     a,sp
05F8 24FC      1406            add     a,#0xfc
05FA F581      1407            mov     sp,a
05FC C0B8      1408            push    _linetrack_vleft_1_76
05FE C0B9      1409            push    (_linetrack_vleft_1_76 + 1)
0600 C0BA      1410            push    (_linetrack_vleft_1_76 + 2)
0602 C0BB      1411            push    (_linetrack_vleft_1_76 + 3)
0604 85B882    1412            mov     dpl,_linetrack_vleft_1_76
0607 85B983    1413            mov     dph,(_linetrack_vleft_1_76 + 1)
060A 85BAF0    1414            mov     b,(_linetrack_vleft_1_76 + 2)
060D E5BB      1415            mov     a,(_linetrack_vleft_1_76 + 3)
060F 120100    1416            lcall   ___fsmul
0612 AE82      1417            mov     r6,dpl
0614 AF83      1418            mov     r7,dph
0616 ACF0      1419            mov     r4,b
0618 FD        1420            mov     r5,a
0619 E581      1421            mov     a,sp
061B 24FC      1422            add     a,#0xfc
061D F581      1423            mov     sp,a
061F C006      1424            push    ar6
0621 C007      1425            push    ar7
0623 C004      1426            push    ar4
0625 C005      1427            push    ar5
0627 85A882    1428            mov     dpl,_linetrack_sloc1_1_0
062A 85A983    1429            mov     dph,(_linetrack_sloc1_1_0 + 1)
062D 85AAF0    1430            mov     b,(_linetrack_sloc1_1_0 + 2)
0630 E5AB      1431            mov     a,(_linetrack_sloc1_1_0 + 3)
0632 120100    1432            lcall   ___fsadd
0635 AC82      1433            mov     r4,dpl
0637 AD83      1434            mov     r5,dph
0639 AEF0      1435            mov     r6,b
063B FF        1436            mov     r7,a
063C E581      1437            mov     a,sp
063E 24FC      1438            add     a,#0xfc
0640 F581      1439            mov     sp,a
0642 C004      1440            push    ar4
0644 C005      1441            push    ar5
0646 C006      1442            push    ar6
0648 C007      1443            push    ar7
064A 855882    1444            mov     dpl,_linetrack_sloc0_1_0
064D 855983    1445            mov     dph,(_linetrack_sloc0_1_0 + 1)
0650 855AF0    1446            mov     b,(_linetrack_sloc0_1_0 + 2)
0653 E55B      1447            mov     a,(_linetrack_sloc0_1_0 + 3)
0655 120100    1448            lcall   ___fsdiv
0658 AC82      1449            mov     r4,dpl
065A AD83      1450            mov     r5,dph
065C AEF0      1451            mov     r6,b
065E FF        1452            mov     r7,a
065F E581      1453            mov     a,sp
0661 24FC      1454            add     a,#0xfc
0663 F581      1455            mov     sp,a
0665 8C82      1456            mov     dpl,r4
0667 8D83      1457            mov     dph,r5
0669 8EF0      1458            mov     b,r6
066B EF        1459            mov     a,r7
066C 120100    1460            lcall   ___fs2schar
066F 858230    1461            mov     _pwm_Left1,dpl
0672           1462   ;        robot.c:328: pwm_Right1 = -1;
0672 75B0FF    1463            mov     _pwm_Right1,#0xFF
0675           1464   ;        robot.c:329: pwm_Right0 = vleft*vleft*75/(vright*vright+vleft*vleft);
0675 C0B8      1465            push    _linetrack_vleft_1_76
0677 C0B9      1466            push    (_linetrack_vleft_1_76 + 1)
0679 C0BA      1467            push    (_linetrack_vleft_1_76 + 2)
067B C0BB      1468            push    (_linetrack_vleft_1_76 + 3)
067D 85B882    1469            mov     dpl,_linetrack_vleft_1_76
0680 85B983    1470            mov     dph,(_linetrack_vleft_1_76 + 1)
0683 85BAF0    1471            mov     b,(_linetrack_vleft_1_76 + 2)
0686 E5BB      1472            mov     a,(_linetrack_vleft_1_76 + 3)
0688 120100    1473            lcall   ___fsmul
068B AC82      1474            mov     r4,dpl
068D AD83      1475            mov     r5,dph
068F AEF0      1476            mov     r6,b
0691 FF        1477            mov     r7,a
0692 E581      1478            mov     a,sp
0694 24FC      1479            add     a,#0xfc
0696 F581      1480            mov     sp,a
0698 C004      1481            push    ar4
069A C005      1482            push    ar5
069C C006      1483            push    ar6
069E C007      1484            push    ar7
06A0 900000    1485            mov     dptr,#0x0000
06A3 75F096    1486            mov     b,#0x96
06A6 7442      1487            mov     a,#0x42
06A8 120100    1488            lcall   ___fsmul
06AB 8582A8    1489            mov     _linetrack_sloc1_1_0,dpl
06AE 8583A9    1490            mov     (_linetrack_sloc1_1_0 + 1),dph
06B1 85F0AA    1491            mov     (_linetrack_sloc1_1_0 + 2),b
06B4 F5AB      1492            mov     (_linetrack_sloc1_1_0 + 3),a
06B6 E581      1493            mov     a,sp
06B8 24FC      1494            add     a,#0xfc
06BA F581      1495            mov     sp,a
06BC C008      1496            push    _linetrack_vright_1_76
06BE C009      1497            push    (_linetrack_vright_1_76 + 1)
06C0 C00A      1498            push    (_linetrack_vright_1_76 + 2)
06C2 C00B      1499            push    (_linetrack_vright_1_76 + 3)
06C4 850882    1500            mov     dpl,_linetrack_vright_1_76
06C7 850983    1501            mov     dph,(_linetrack_vright_1_76 + 1)
06CA 850AF0    1502            mov     b,(_linetrack_vright_1_76 + 2)
06CD E50B      1503            mov     a,(_linetrack_vright_1_76 + 3)
06CF 120100    1504            lcall   ___fsmul
06D2 858258    1505            mov     _linetrack_sloc0_1_0,dpl
06D5 858359    1506            mov     (_linetrack_sloc0_1_0 + 1),dph
06D8 85F05A    1507            mov     (_linetrack_sloc0_1_0 + 2),b
06DB F55B      1508            mov     (_linetrack_sloc0_1_0 + 3),a
06DD E581      1509            mov     a,sp
06DF 24FC      1510            add     a,#0xfc
06E1 F581      1511            mov     sp,a
06E3 C0B8      1512            push    _linetrack_vleft_1_76
06E5 C0B9      1513            push    (_linetrack_vleft_1_76 + 1)
06E7 C0BA      1514            push    (_linetrack_vleft_1_76 + 2)
06E9 C0BB      1515            push    (_linetrack_vleft_1_76 + 3)
06EB 85B882    1516            mov     dpl,_linetrack_vleft_1_76
06EE 85B983    1517            mov     dph,(_linetrack_vleft_1_76 + 1)
06F1 85BAF0    1518            mov     b,(_linetrack_vleft_1_76 + 2)
06F4 E5BB      1519            mov     a,(_linetrack_vleft_1_76 + 3)
06F6 120100    1520            lcall   ___fsmul
06F9 AE82      1521            mov     r6,dpl
06FB AF83      1522            mov     r7,dph
06FD ACF0      1523            mov     r4,b
06FF FD        1524            mov     r5,a
0700 E581      1525            mov     a,sp
0702 24FC      1526            add     a,#0xfc
0704 F581      1527            mov     sp,a
0706 C006      1528            push    ar6
0708 C007      1529            push    ar7
070A C004      1530            push    ar4
070C C005      1531            push    ar5
070E 855882    1532            mov     dpl,_linetrack_sloc0_1_0
0711 855983    1533            mov     dph,(_linetrack_sloc0_1_0 + 1)
0714 855AF0    1534            mov     b,(_linetrack_sloc0_1_0 + 2)
0717 E55B      1535            mov     a,(_linetrack_sloc0_1_0 + 3)
0719 120100    1536            lcall   ___fsadd
071C AC82      1537            mov     r4,dpl
071E AD83      1538            mov     r5,dph
0720 AEF0      1539            mov     r6,b
0722 FF        1540            mov     r7,a
0723 E581      1541            mov     a,sp
0725 24FC      1542            add     a,#0xfc
0727 F581      1543            mov     sp,a
0729 C004      1544            push    ar4
072B C005      1545            push    ar5
072D C006      1546            push    ar6
072F C007      1547            push    ar7
0731 85A882    1548            mov     dpl,_linetrack_sloc1_1_0
0734 85A983    1549            mov     dph,(_linetrack_sloc1_1_0 + 1)
0737 85AAF0    1550            mov     b,(_linetrack_sloc1_1_0 + 2)
073A E5AB      1551            mov     a,(_linetrack_sloc1_1_0 + 3)
073C 120100    1552            lcall   ___fsdiv
073F AC82      1553            mov     r4,dpl
0741 AD83      1554            mov     r5,dph
0743 AEF0      1555            mov     r6,b
0745 FF        1556            mov     r7,a
0746 E581      1557            mov     a,sp
0748 24FC      1558            add     a,#0xfc
074A F581      1559            mov     sp,a
074C 8C82      1560            mov     dpl,r4
074E 8D83      1561            mov     dph,r5
0750 8EF0      1562            mov     b,r6
0752 EF        1563            mov     a,r7
0753 120100    1564            lcall   ___fs2schar
0756 8582F0    1565            mov     _pwm_Right0,dpl
0759 22        1566            ret
075A           1567   L005004?:
075A           1568   ;        robot.c:330: } else if (forwardbackward == 1) {
075A BA0100    1569            cjne    r2,#0x01,L005011?
075D BB0000    1570            cjne    r3,#0x00,L005011?
0760 8001      1571            sjmp    L005012?
0762           1572   L005011?:
0762 22        1573            ret
0763           1574   L005012?:
0763           1575   ;        robot.c:333: vleft=Volts_at_Pin(TANK_RL);
0763 75820D    1576            mov     dpl,#0x0D
0766 120100    1577            lcall   _Volts_at_Pin
0769 8582B8    1578            mov     _linetrack_vleft_1_76,dpl
076C 8583B9    1579            mov     (_linetrack_vleft_1_76 + 1),dph
076F 85F0BA    1580            mov     (_linetrack_vleft_1_76 + 2),b
0772 F5BB      1581            mov     (_linetrack_vleft_1_76 + 3),a
0774           1582   ;        robot.c:334: vright=Volts_at_Pin(TANK_RR);
0774 75820E    1583            mov     dpl,#0x0E
0777 120100    1584            lcall   _Volts_at_Pin
077A 858208    1585            mov     _linetrack_vright_1_76,dpl
077D 858309    1586            mov     (_linetrack_vright_1_76 + 1),dph
0780 85F00A    1587            mov     (_linetrack_vright_1_76 + 2),b
0783 F50B      1588            mov     (_linetrack_vright_1_76 + 3),a
0785           1589   ;        robot.c:337: pwm_Left1 = -1;
0785 7530FF    1590            mov     _pwm_Left1,#0xFF
0788           1591   ;        robot.c:338: pwm_Left0 = vright*vright*75/(vright*vright+vleft*vleft);
0788 C008      1592            push    _linetrack_vright_1_76
078A C009      1593            push    (_linetrack_vright_1_76 + 1)
078C C00A      1594            push    (_linetrack_vright_1_76 + 2)
078E C00B      1595            push    (_linetrack_vright_1_76 + 3)
0790 850882    1596            mov     dpl,_linetrack_vright_1_76
0793 850983    1597            mov     dph,(_linetrack_vright_1_76 + 1)
0796 850AF0    1598            mov     b,(_linetrack_vright_1_76 + 2)
0799 E50B      1599            mov     a,(_linetrack_vright_1_76 + 3)
079B 120100    1600            lcall   ___fsmul
079E AA82      1601            mov     r2,dpl
07A0 AB83      1602            mov     r3,dph
07A2 ACF0      1603            mov     r4,b
07A4 FD        1604            mov     r5,a
07A5 E581      1605            mov     a,sp
07A7 24FC      1606            add     a,#0xfc
07A9 F581      1607            mov     sp,a
07AB C002      1608            push    ar2
07AD C003      1609            push    ar3
07AF C004      1610            push    ar4
07B1 C005      1611            push    ar5
07B3 900000    1612            mov     dptr,#0x0000
07B6 75F096    1613            mov     b,#0x96
07B9 7442      1614            mov     a,#0x42
07BB 120100    1615            lcall   ___fsmul
07BE AA82      1616            mov     r2,dpl
07C0 AB83      1617            mov     r3,dph
07C2 ACF0      1618            mov     r4,b
07C4 FD        1619            mov     r5,a
07C5 E581      1620            mov     a,sp
07C7 24FC      1621            add     a,#0xfc
07C9 F581      1622            mov     sp,a
07CB C002      1623            push    ar2
07CD C003      1624            push    ar3
07CF C004      1625            push    ar4
07D1 C005      1626            push    ar5
07D3 C008      1627            push    _linetrack_vright_1_76
07D5 C009      1628            push    (_linetrack_vright_1_76 + 1)
07D7 C00A      1629            push    (_linetrack_vright_1_76 + 2)
07D9 C00B      1630            push    (_linetrack_vright_1_76 + 3)
07DB 850882    1631            mov     dpl,_linetrack_vright_1_76
07DE 850983    1632            mov     dph,(_linetrack_vright_1_76 + 1)
07E1 850AF0    1633            mov     b,(_linetrack_vright_1_76 + 2)
07E4 E50B      1634            mov     a,(_linetrack_vright_1_76 + 3)
07E6 120100    1635            lcall   ___fsmul
07E9 8582A8    1636            mov     _linetrack_sloc1_1_0,dpl
07EC 8583A9    1637            mov     (_linetrack_sloc1_1_0 + 1),dph
07EF 85F0AA    1638            mov     (_linetrack_sloc1_1_0 + 2),b
07F2 F5AB      1639            mov     (_linetrack_sloc1_1_0 + 3),a
07F4 E581      1640            mov     a,sp
07F6 24FC      1641            add     a,#0xfc
07F8 F581      1642            mov     sp,a
07FA C0B8      1643            push    _linetrack_vleft_1_76
07FC C0B9      1644            push    (_linetrack_vleft_1_76 + 1)
07FE C0BA      1645            push    (_linetrack_vleft_1_76 + 2)
0800 C0BB      1646            push    (_linetrack_vleft_1_76 + 3)
0802 85B882    1647            mov     dpl,_linetrack_vleft_1_76
0805 85B983    1648            mov     dph,(_linetrack_vleft_1_76 + 1)
0808 85BAF0    1649            mov     b,(_linetrack_vleft_1_76 + 2)
080B E5BB      1650            mov     a,(_linetrack_vleft_1_76 + 3)
080D 120100    1651            lcall   ___fsmul
0810 AE82      1652            mov     r6,dpl
0812 AF83      1653            mov     r7,dph
0814 A8F0      1654            mov     r0,b
0816 F9        1655            mov     r1,a
0817 E581      1656            mov     a,sp
0819 24FC      1657            add     a,#0xfc
081B F581      1658            mov     sp,a
081D C006      1659            push    ar6
081F C007      1660            push    ar7
0821 C000      1661            push    ar0
0823 C001      1662            push    ar1
0825 85A882    1663            mov     dpl,_linetrack_sloc1_1_0
0828 85A983    1664            mov     dph,(_linetrack_sloc1_1_0 + 1)
082B 85AAF0    1665            mov     b,(_linetrack_sloc1_1_0 + 2)
082E E5AB      1666            mov     a,(_linetrack_sloc1_1_0 + 3)
0830 120100    1667            lcall   ___fsadd
0833 AE82      1668            mov     r6,dpl
0835 AF83      1669            mov     r7,dph
0837 A8F0      1670            mov     r0,b
0839 F9        1671            mov     r1,a
083A E581      1672            mov     a,sp
083C 24FC      1673            add     a,#0xfc
083E F581      1674            mov     sp,a
0840 D005      1675            pop     ar5
0842 D004      1676            pop     ar4
0844 D003      1677            pop     ar3
0846 D002      1678            pop     ar2
0848 C006      1679            push    ar6
084A C007      1680            push    ar7
084C C000      1681            push    ar0
084E C001      1682            push    ar1
0850 8A82      1683            mov     dpl,r2
0852 8B83      1684            mov     dph,r3
0854 8CF0      1685            mov     b,r4
0856 ED        1686            mov     a,r5
0857 120100    1687            lcall   ___fsdiv
085A AA82      1688            mov     r2,dpl
085C AB83      1689            mov     r3,dph
085E ACF0      1690            mov     r4,b
0860 FD        1691            mov     r5,a
0861 E581      1692            mov     a,sp
0863 24FC      1693            add     a,#0xfc
0865 F581      1694            mov     sp,a
0867 8A82      1695            mov     dpl,r2
0869 8B83      1696            mov     dph,r3
086B 8CF0      1697            mov     b,r4
086D ED        1698            mov     a,r5
086E 120100    1699            lcall   ___fs2schar
0871 858270    1700            mov     _pwm_Left0,dpl
0874           1701   ;        robot.c:339: pwm_Right0 = -1;
0874 75F0FF    1702            mov     _pwm_Right0,#0xFF
0877           1703   ;        robot.c:340: pwm_Right1 = vleft*vleft*75/(vright*vright+vleft*vleft);
0877 C0B8      1704            push    _linetrack_vleft_1_76
0879 C0B9      1705            push    (_linetrack_vleft_1_76 + 1)
087B C0BA      1706            push    (_linetrack_vleft_1_76 + 2)
087D C0BB      1707            push    (_linetrack_vleft_1_76 + 3)
087F 85B882    1708            mov     dpl,_linetrack_vleft_1_76
0882 85B983    1709            mov     dph,(_linetrack_vleft_1_76 + 1)
0885 85BAF0    1710            mov     b,(_linetrack_vleft_1_76 + 2)
0888 E5BB      1711            mov     a,(_linetrack_vleft_1_76 + 3)
088A 120100    1712            lcall   ___fsmul
088D AA82      1713            mov     r2,dpl
088F AB83      1714            mov     r3,dph
0891 ACF0      1715            mov     r4,b
0893 FD        1716            mov     r5,a
0894 E581      1717            mov     a,sp
0896 24FC      1718            add     a,#0xfc
0898 F581      1719            mov     sp,a
089A C002      1720            push    ar2
089C C003      1721            push    ar3
089E C004      1722            push    ar4
08A0 C005      1723            push    ar5
08A2 900000    1724            mov     dptr,#0x0000
08A5 75F096    1725            mov     b,#0x96
08A8 7442      1726            mov     a,#0x42
08AA 120100    1727            lcall   ___fsmul
08AD AA82      1728            mov     r2,dpl
08AF AB83      1729            mov     r3,dph
08B1 ACF0      1730            mov     r4,b
08B3 FD        1731            mov     r5,a
08B4 E581      1732            mov     a,sp
08B6 24FC      1733            add     a,#0xfc
08B8 F581      1734            mov     sp,a
08BA C002      1735            push    ar2
08BC C003      1736            push    ar3
08BE C004      1737            push    ar4
08C0 C005      1738            push    ar5
08C2 C008      1739            push    _linetrack_vright_1_76
08C4 C009      1740            push    (_linetrack_vright_1_76 + 1)
08C6 C00A      1741            push    (_linetrack_vright_1_76 + 2)
08C8 C00B      1742            push    (_linetrack_vright_1_76 + 3)
08CA 850882    1743            mov     dpl,_linetrack_vright_1_76
08CD 850983    1744            mov     dph,(_linetrack_vright_1_76 + 1)
08D0 850AF0    1745            mov     b,(_linetrack_vright_1_76 + 2)
08D3 E50B      1746            mov     a,(_linetrack_vright_1_76 + 3)
08D5 120100    1747            lcall   ___fsmul
08D8 8582A8    1748            mov     _linetrack_sloc1_1_0,dpl
08DB 8583A9    1749            mov     (_linetrack_sloc1_1_0 + 1),dph
08DE 85F0AA    1750            mov     (_linetrack_sloc1_1_0 + 2),b
08E1 F5AB      1751            mov     (_linetrack_sloc1_1_0 + 3),a
08E3 E581      1752            mov     a,sp
08E5 24FC      1753            add     a,#0xfc
08E7 F581      1754            mov     sp,a
08E9 C0B8      1755            push    _linetrack_vleft_1_76
08EB C0B9      1756            push    (_linetrack_vleft_1_76 + 1)
08ED C0BA      1757            push    (_linetrack_vleft_1_76 + 2)
08EF C0BB      1758            push    (_linetrack_vleft_1_76 + 3)
08F1 85B882    1759            mov     dpl,_linetrack_vleft_1_76
08F4 85B983    1760            mov     dph,(_linetrack_vleft_1_76 + 1)
08F7 85BAF0    1761            mov     b,(_linetrack_vleft_1_76 + 2)
08FA E5BB      1762            mov     a,(_linetrack_vleft_1_76 + 3)
08FC 120100    1763            lcall   ___fsmul
08FF AE82      1764            mov     r6,dpl
0901 AF83      1765            mov     r7,dph
0903 A8F0      1766            mov     r0,b
0905 F9        1767            mov     r1,a
0906 E581      1768            mov     a,sp
0908 24FC      1769            add     a,#0xfc
090A F581      1770            mov     sp,a
090C C006      1771            push    ar6
090E C007      1772            push    ar7
0910 C000      1773            push    ar0
0912 C001      1774            push    ar1
0914 85A882    1775            mov     dpl,_linetrack_sloc1_1_0
0917 85A983    1776            mov     dph,(_linetrack_sloc1_1_0 + 1)
091A 85AAF0    1777            mov     b,(_linetrack_sloc1_1_0 + 2)
091D E5AB      1778            mov     a,(_linetrack_sloc1_1_0 + 3)
091F 120100    1779            lcall   ___fsadd
0922 AE82      1780            mov     r6,dpl
0924 AF83      1781            mov     r7,dph
0926 A8F0      1782            mov     r0,b
0928 F9        1783            mov     r1,a
0929 E581      1784            mov     a,sp
092B 24FC      1785            add     a,#0xfc
092D F581      1786            mov     sp,a
092F D005      1787            pop     ar5
0931 D004      1788            pop     ar4
0933 D003      1789            pop     ar3
0935 D002      1790            pop     ar2
0937 C006      1791            push    ar6
0939 C007      1792            push    ar7
093B C000      1793            push    ar0
093D C001      1794            push    ar1
093F 8A82      1795            mov     dpl,r2
0941 8B83      1796            mov     dph,r3
0943 8CF0      1797            mov     b,r4
0945 ED        1798            mov     a,r5
0946 120100    1799            lcall   ___fsdiv
0949 AA82      1800            mov     r2,dpl
094B AB83      1801            mov     r3,dph
094D ACF0      1802            mov     r4,b
094F FD        1803            mov     r5,a
0950 E581      1804            mov     a,sp
0952 24FC      1805            add     a,#0xfc
0954 F581      1806            mov     sp,a
0956 8A82      1807            mov     dpl,r2
0958 8B83      1808            mov     dph,r3
095A 8CF0      1809            mov     b,r4
095C ED        1810            mov     a,r5
095D 120100    1811            lcall   ___fs2schar
0960 8582B0    1812            mov     _pwm_Right1,dpl
0963 22        1813            ret
0964           1814   ;------------------------------------------------------------
0964           1815   ;Allocation info for local variables in function 'stopcar'
0964           1816   ;------------------------------------------------------------
0964           1817   ;------------------------------------------------------------
0964           1818   ;        robot.c:348: void stopcar(void) {
0964           1819   ;        -----------------------------------------
0964           1820   ;         function stopcar
0964           1821   ;        -----------------------------------------
0964           1822   _stopcar:
0964           1823   ;        robot.c:350: pwm_Left1 = -1;
0964 7530FF    1824            mov     _pwm_Left1,#0xFF
0967           1825   ;        robot.c:351: pwm_Right1 = -1;
0967 75B0FF    1826            mov     _pwm_Right1,#0xFF
096A           1827   ;        robot.c:352: pwm_Left0 = -1;
096A 7570FF    1828            mov     _pwm_Left0,#0xFF
096D           1829   ;        robot.c:353: pwm_Right0 = -1;
096D 75F0FF    1830            mov     _pwm_Right0,#0xFF
0970 22        1831            ret
0971           1832   ;------------------------------------------------------------
0971           1833   ;Allocation info for local variables in function 'turncar'
0971           1834   ;------------------------------------------------------------
0971           1835   ;leftright                 Allocated to registers r2 r3 
0971           1836   ;v                         Allocated with name '_turncar_v_1_82'
0971           1837   ;direction                 Allocated with name '_turncar_direction_1_82'
0971           1838   ;------------------------------------------------------------
0971           1839   ;        robot.c:359: void turncar (int leftright) {
0971           1840   ;        -----------------------------------------
0971           1841   ;         function turncar
0971           1842   ;        -----------------------------------------
0971           1843   _turncar:
0971 AA82      1844            mov     r2,dpl
0973 AB83      1845            mov     r3,dph
0975           1846   ;        robot.c:368: pwm_Left0 = -1;
0975 7570FF    1847            mov     _pwm_Left0,#0xFF
0978           1848   ;        robot.c:369: pwm_Left1 = -1;
0978 7530FF    1849            mov     _pwm_Left1,#0xFF
097B           1850   ;        robot.c:370: pwm_Right0 = -1;
097B 75F0FF    1851            mov     _pwm_Right0,#0xFF
097E           1852   ;        robot.c:371: pwm_Right1 = -1;
097E 75B0FF    1853            mov     _pwm_Right1,#0xFF
0981           1854   ;        robot.c:373: direction = currentstate - 1;
0981 E5F0      1855            mov     a,_currentstate
0983 14        1856            dec     a
0984 F538      1857            mov     _turncar_direction_1_82,a
0986           1858   ;        robot.c:376: if (leftright == 1) {
0986 BA0180    1859            cjne    r2,#0x01,L007062?
0989 BB0080    1860            cjne    r3,#0x00,L007062?
098C 8001      1861            sjmp    L007063?
098E           1862   L007062?:
098E 020100    1863            ljmp    L007022?
0991           1864   L007063?:
0991           1865   ;        robot.c:378: pwm_Right0 = 100;
0991 75F064    1866            mov     _pwm_Right0,#0x64
0994           1867   ;        robot.c:381: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0994 E538      1868            mov     a,_turncar_direction_1_82
0996 6001      1869            jz      L007026?
0998 75820C    1870            mov     dpl,#0x0C
099B 120100    1871            lcall   _Volts_at_Pin
099E AC82      1872            mov     r4,dpl
09A0 AD83      1873            mov     r5,dph
09A2 AEF0      1874            mov     r6,b
09A4 FF        1875            mov     r7,a
09A5 8001      1876            sjmp    L007027?
09A7           1877   L007026?:
09A7 75820E    1878            mov     dpl,#0x0E
09AA 120100    1879            lcall   _Volts_at_Pin
09AD AC82      1880            mov     r4,dpl
09AF AD83      1881            mov     r5,dph
09B1 AEF0      1882            mov     r6,b
09B3 FF        1883            mov     r7,a
09B4           1884   L007027?:
09B4 8CE8      1885            mov     _turncar_v_1_82,r4
09B6 8DE9      1886            mov     (_turncar_v_1_82 + 1),r5
09B8 8EEA      1887            mov     (_turncar_v_1_82 + 2),r6
09BA 8FEB      1888            mov     (_turncar_v_1_82 + 3),r7
09BC           1889   ;        robot.c:383: while (v < 1.3) {
09BC           1890   L007001?:
09BC 7466      1891            mov     a,#0x66
09BE C0E0      1892            push    acc
09C0 C0E0      1893            push    acc
09C2 74A6      1894            mov     a,#0xA6
09C4 C0E0      1895            push    acc
09C6 743F      1896            mov     a,#0x3F
09C8 C0E0      1897            push    acc
09CA 85E882    1898            mov     dpl,_turncar_v_1_82
09CD 85E983    1899            mov     dph,(_turncar_v_1_82 + 1)
09D0 85EAF0    1900            mov     b,(_turncar_v_1_82 + 2)
09D3 E5EB      1901            mov     a,(_turncar_v_1_82 + 3)
09D5 120100    1902            lcall   ___fslt
09D8 AC82      1903            mov     r4,dpl
09DA E581      1904            mov     a,sp
09DC 24FC      1905            add     a,#0xfc
09DE F581      1906            mov     sp,a
09E0 EC        1907            mov     a,r4
09E1 6001      1908            jz      L007003?
09E3           1909   ;        robot.c:385: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
09E3 E538      1910            mov     a,_turncar_direction_1_82
09E5 6001      1911            jz      L007028?
09E7 75820C    1912            mov     dpl,#0x0C
09EA 120100    1913            lcall   _Volts_at_Pin
09ED AC82      1914            mov     r4,dpl
09EF AD83      1915            mov     r5,dph
09F1 AEF0      1916            mov     r6,b
09F3 FF        1917            mov     r7,a
09F4 8001      1918            sjmp    L007029?
09F6           1919   L007028?:
09F6 75820E    1920            mov     dpl,#0x0E
09F9 120100    1921            lcall   _Volts_at_Pin
09FC AC82      1922            mov     r4,dpl
09FE AD83      1923            mov     r5,dph
0A00 AEF0      1924            mov     r6,b
0A02 FF        1925            mov     r7,a
0A03           1926   L007029?:
0A03 8CE8      1927            mov     _turncar_v_1_82,r4
0A05 8DE9      1928            mov     (_turncar_v_1_82 + 1),r5
0A07 8EEA      1929            mov     (_turncar_v_1_82 + 2),r6
0A09 8FEB      1930            mov     (_turncar_v_1_82 + 3),r7
0A0B 8001      1931            sjmp    L007001?
0A0D           1932   L007003?:
0A0D           1933   ;        robot.c:389: waitms(300);
0A0D 90012C    1934            mov     dptr,#0x012C
0A10 120100    1935            lcall   _waitms
0A13           1936   ;        robot.c:392: pwm_Right0 = -1; 
0A13 75F0FF    1937            mov     _pwm_Right0,#0xFF
0A16 22        1938            ret
0A17           1939   L007022?:
0A17           1940   ;        robot.c:396: else if (leftright == 3) {
0A17 BA0300    1941            cjne    r2,#0x03,L007067?
0A1A BB0000    1942            cjne    r3,#0x00,L007067?
0A1D 8001      1943            sjmp    L007068?
0A1F           1944   L007067?:
0A1F 020100    1945            ljmp    L007019?
0A22           1946   L007068?:
0A22           1947   ;        robot.c:398: pwm_Left1 = 75;
0A22 75304B    1948            mov     _pwm_Left1,#0x4B
0A25           1949   ;        robot.c:399: waitms(200);
0A25 9000C8    1950            mov     dptr,#0x00C8
0A28 120100    1951            lcall   _waitms
0A2B           1952   ;        robot.c:402: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0A2B E538      1953            mov     a,_turncar_direction_1_82
0A2D 6001      1954            jz      L007030?
0A2F 75820B    1955            mov     dpl,#0x0B
0A32 120100    1956            lcall   _Volts_at_Pin
0A35 AC82      1957            mov     r4,dpl
0A37 AD83      1958            mov     r5,dph
0A39 AEF0      1959            mov     r6,b
0A3B FF        1960            mov     r7,a
0A3C 8001      1961            sjmp    L007031?
0A3E           1962   L007030?:
0A3E 75820D    1963            mov     dpl,#0x0D
0A41 120100    1964            lcall   _Volts_at_Pin
0A44 AC82      1965            mov     r4,dpl
0A46 AD83      1966            mov     r5,dph
0A48 AEF0      1967            mov     r6,b
0A4A FF        1968            mov     r7,a
0A4B           1969   L007031?:
0A4B 8CE8      1970            mov     _turncar_v_1_82,r4
0A4D 8DE9      1971            mov     (_turncar_v_1_82 + 1),r5
0A4F 8EEA      1972            mov     (_turncar_v_1_82 + 2),r6
0A51 8FEB      1973            mov     (_turncar_v_1_82 + 3),r7
0A53           1974   ;        robot.c:404: while (v < 1.3) {
0A53           1975   L007004?:
0A53 7466      1976            mov     a,#0x66
0A55 C0E0      1977            push    acc
0A57 C0E0      1978            push    acc
0A59 74A6      1979            mov     a,#0xA6
0A5B C0E0      1980            push    acc
0A5D 743F      1981            mov     a,#0x3F
0A5F C0E0      1982            push    acc
0A61 85E882    1983            mov     dpl,_turncar_v_1_82
0A64 85E983    1984            mov     dph,(_turncar_v_1_82 + 1)
0A67 85EAF0    1985            mov     b,(_turncar_v_1_82 + 2)
0A6A E5EB      1986            mov     a,(_turncar_v_1_82 + 3)
0A6C 120100    1987            lcall   ___fslt
0A6F AC82      1988            mov     r4,dpl
0A71 E581      1989            mov     a,sp
0A73 24FC      1990            add     a,#0xfc
0A75 F581      1991            mov     sp,a
0A77 EC        1992            mov     a,r4
0A78 6001      1993            jz      L007006?
0A7A           1994   ;        robot.c:406: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0A7A E538      1995            mov     a,_turncar_direction_1_82
0A7C 6001      1996            jz      L007032?
0A7E 75820B    1997            mov     dpl,#0x0B
0A81 120100    1998            lcall   _Volts_at_Pin
0A84 AC82      1999            mov     r4,dpl
0A86 AD83      2000            mov     r5,dph
0A88 AEF0      2001            mov     r6,b
0A8A FF        2002            mov     r7,a
0A8B 8001      2003            sjmp    L007033?
0A8D           2004   L007032?:
0A8D 75820D    2005            mov     dpl,#0x0D
0A90 120100    2006            lcall   _Volts_at_Pin
0A93 AC82      2007            mov     r4,dpl
0A95 AD83      2008            mov     r5,dph
0A97 AEF0      2009            mov     r6,b
0A99 FF        2010            mov     r7,a
0A9A           2011   L007033?:
0A9A 8CE8      2012            mov     _turncar_v_1_82,r4
0A9C 8DE9      2013            mov     (_turncar_v_1_82 + 1),r5
0A9E 8EEA      2014            mov     (_turncar_v_1_82 + 2),r6
0AA0 8FEB      2015            mov     (_turncar_v_1_82 + 3),r7
0AA2 8001      2016            sjmp    L007004?
0AA4           2017   L007006?:
0AA4           2018   ;        robot.c:410: pwm_Left1 = -1; 
0AA4 7530FF    2019            mov     _pwm_Left1,#0xFF
0AA7 22        2020            ret
0AA8           2021   L007019?:
0AA8           2022   ;        robot.c:414: else if (leftright == 2) {
0AA8 BA0240    2023            cjne    r2,#0x02,L007072?
0AAB BB0040    2024            cjne    r3,#0x00,L007072?
0AAE 8001      2025            sjmp    L007073?
0AB0           2026   L007072?:
0AB0 020100    2027            ljmp    L007016?
0AB3           2028   L007073?:
0AB3           2029   ;        robot.c:416: pwm_Right1 = 100;
0AB3 75B064    2030            mov     _pwm_Right1,#0x64
0AB6           2031   ;        robot.c:419: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0AB6 E538      2032            mov     a,_turncar_direction_1_82
0AB8 6001      2033            jz      L007034?
0ABA 75820C    2034            mov     dpl,#0x0C
0ABD 120100    2035            lcall   _Volts_at_Pin
0AC0 AC82      2036            mov     r4,dpl
0AC2 AD83      2037            mov     r5,dph
0AC4 AEF0      2038            mov     r6,b
0AC6 FF        2039            mov     r7,a
0AC7 8001      2040            sjmp    L007035?
0AC9           2041   L007034?:
0AC9 75820E    2042            mov     dpl,#0x0E
0ACC 120100    2043            lcall   _Volts_at_Pin
0ACF AC82      2044            mov     r4,dpl
0AD1 AD83      2045            mov     r5,dph
0AD3 AEF0      2046            mov     r6,b
0AD5 FF        2047            mov     r7,a
0AD6           2048   L007035?:
0AD6 8CE8      2049            mov     _turncar_v_1_82,r4
0AD8 8DE9      2050            mov     (_turncar_v_1_82 + 1),r5
0ADA 8EEA      2051            mov     (_turncar_v_1_82 + 2),r6
0ADC 8FEB      2052            mov     (_turncar_v_1_82 + 3),r7
0ADE           2053   ;        robot.c:421: while (v < 0.9) {
0ADE           2054   L007007?:
0ADE 7466      2055            mov     a,#0x66
0AE0 C0E0      2056            push    acc
0AE2 C0E0      2057            push    acc
0AE4 C0E0      2058            push    acc
0AE6 743F      2059            mov     a,#0x3F
0AE8 C0E0      2060            push    acc
0AEA 85E882    2061            mov     dpl,_turncar_v_1_82
0AED 85E983    2062            mov     dph,(_turncar_v_1_82 + 1)
0AF0 85EAF0    2063            mov     b,(_turncar_v_1_82 + 2)
0AF3 E5EB      2064            mov     a,(_turncar_v_1_82 + 3)
0AF5 120100    2065            lcall   ___fslt
0AF8 AC82      2066            mov     r4,dpl
0AFA E581      2067            mov     a,sp
0AFC 24FC      2068            add     a,#0xfc
0AFE F581      2069            mov     sp,a
0B00 EC        2070            mov     a,r4
0B01 6001      2071            jz      L007009?
0B03           2072   ;        robot.c:423: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0B03 E538      2073            mov     a,_turncar_direction_1_82
0B05 6001      2074            jz      L007036?
0B07 75820C    2075            mov     dpl,#0x0C
0B0A 120100    2076            lcall   _Volts_at_Pin
0B0D AC82      2077            mov     r4,dpl
0B0F AD83      2078            mov     r5,dph
0B11 AEF0      2079            mov     r6,b
0B13 FF        2080            mov     r7,a
0B14 8001      2081            sjmp    L007037?
0B16           2082   L007036?:
0B16 75820E    2083            mov     dpl,#0x0E
0B19 120100    2084            lcall   _Volts_at_Pin
0B1C AC82      2085            mov     r4,dpl
0B1E AD83      2086            mov     r5,dph
0B20 AEF0      2087            mov     r6,b
0B22 FF        2088            mov     r7,a
0B23           2089   L007037?:
0B23 8CE8      2090            mov     _turncar_v_1_82,r4
0B25 8DE9      2091            mov     (_turncar_v_1_82 + 1),r5
0B27 8EEA      2092            mov     (_turncar_v_1_82 + 2),r6
0B29 8FEB      2093            mov     (_turncar_v_1_82 + 3),r7
0B2B 8001      2094            sjmp    L007007?
0B2D           2095   L007009?:
0B2D           2096   ;        robot.c:427: waitms(300);
0B2D 90012C    2097            mov     dptr,#0x012C
0B30 120100    2098            lcall   _waitms
0B33           2099   ;        robot.c:430: pwm_Right1 = -1; 
0B33 75B0FF    2100            mov     _pwm_Right1,#0xFF
0B36 22        2101            ret
0B37           2102   L007016?:
0B37           2103   ;        robot.c:434: else if (leftright == 4) {
0B37 BA0480    2104            cjne    r2,#0x04,L007077?
0B3A BB0080    2105            cjne    r3,#0x00,L007077?
0B3D 8001      2106            sjmp    L007078?
0B3F           2107   L007077?:
0B3F 22        2108            ret
0B40           2109   L007078?:
0B40           2110   ;        robot.c:436: pwm_Left0 = 75;
0B40 75704B    2111            mov     _pwm_Left0,#0x4B
0B43           2112   ;        robot.c:437: waitms(200);
0B43 9000C8    2113            mov     dptr,#0x00C8
0B46 120100    2114            lcall   _waitms
0B49           2115   ;        robot.c:440: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0B49 E538      2116            mov     a,_turncar_direction_1_82
0B4B 6001      2117            jz      L007038?
0B4D 75820B    2118            mov     dpl,#0x0B
0B50 120100    2119            lcall   _Volts_at_Pin
0B53 AA82      2120            mov     r2,dpl
0B55 AB83      2121            mov     r3,dph
0B57 ACF0      2122            mov     r4,b
0B59 FD        2123            mov     r5,a
0B5A 8001      2124            sjmp    L007039?
0B5C           2125   L007038?:
0B5C 75820D    2126            mov     dpl,#0x0D
0B5F 120100    2127            lcall   _Volts_at_Pin
0B62 AA82      2128            mov     r2,dpl
0B64 AB83      2129            mov     r3,dph
0B66 ACF0      2130            mov     r4,b
0B68 FD        2131            mov     r5,a
0B69           2132   L007039?:
0B69 8AE8      2133            mov     _turncar_v_1_82,r2
0B6B 8BE9      2134            mov     (_turncar_v_1_82 + 1),r3
0B6D 8CEA      2135            mov     (_turncar_v_1_82 + 2),r4
0B6F 8DEB      2136            mov     (_turncar_v_1_82 + 3),r5
0B71           2137   ;        robot.c:442: while (v < 0.9) {
0B71           2138   L007010?:
0B71 7466      2139            mov     a,#0x66
0B73 C0E0      2140            push    acc
0B75 C0E0      2141            push    acc
0B77 C0E0      2142            push    acc
0B79 743F      2143            mov     a,#0x3F
0B7B C0E0      2144            push    acc
0B7D 85E882    2145            mov     dpl,_turncar_v_1_82
0B80 85E983    2146            mov     dph,(_turncar_v_1_82 + 1)
0B83 85EAF0    2147            mov     b,(_turncar_v_1_82 + 2)
0B86 E5EB      2148            mov     a,(_turncar_v_1_82 + 3)
0B88 120100    2149            lcall   ___fslt
0B8B AA82      2150            mov     r2,dpl
0B8D E581      2151            mov     a,sp
0B8F 24FC      2152            add     a,#0xfc
0B91 F581      2153            mov     sp,a
0B93 EA        2154            mov     a,r2
0B94 6001      2155            jz      L007012?
0B96           2156   ;        robot.c:444: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0B96 E538      2157            mov     a,_turncar_direction_1_82
0B98 6001      2158            jz      L007040?
0B9A 75820B    2159            mov     dpl,#0x0B
0B9D 120100    2160            lcall   _Volts_at_Pin
0BA0 AA82      2161            mov     r2,dpl
0BA2 AB83      2162            mov     r3,dph
0BA4 ACF0      2163            mov     r4,b
0BA6 FD        2164            mov     r5,a
0BA7 8001      2165            sjmp    L007041?
0BA9           2166   L007040?:
0BA9 75820D    2167            mov     dpl,#0x0D
0BAC 120100    2168            lcall   _Volts_at_Pin
0BAF AA82      2169            mov     r2,dpl
0BB1 AB83      2170            mov     r3,dph
0BB3 ACF0      2171            mov     r4,b
0BB5 FD        2172            mov     r5,a
0BB6           2173   L007041?:
0BB6 8AE8      2174            mov     _turncar_v_1_82,r2
0BB8 8BE9      2175            mov     (_turncar_v_1_82 + 1),r3
0BBA 8CEA      2176            mov     (_turncar_v_1_82 + 2),r4
0BBC 8DEB      2177            mov     (_turncar_v_1_82 + 3),r5
0BBE 8001      2178            sjmp    L007010?
0BC0           2179   L007012?:
0BC0           2180   ;        robot.c:448: pwm_Left0 = -1; 
0BC0 7570FF    2181            mov     _pwm_Left0,#0xFF
0BC3 22        2182            ret
0BC4           2183   ;------------------------------------------------------------
0BC4           2184   ;Allocation info for local variables in function 'uturn'
0BC4           2185   ;------------------------------------------------------------
0BC4           2186   ;vleft                     Allocated with name '_uturn_vleft_1_92'
0BC4           2187   ;vright                    Allocated with name '_uturn_vright_1_92'
0BC4           2188   ;------------------------------------------------------------
0BC4           2189   ;        robot.c:455: void uturn(void) {
0BC4           2190   ;        -----------------------------------------
0BC4           2191   ;         function uturn
0BC4           2192   ;        -----------------------------------------
0BC4           2193   _uturn:
0BC4           2194   ;        robot.c:459: vleft = Volts_at_Pin(TANK_FL);
0BC4 75820B    2195            mov     dpl,#0x0B
0BC7 120100    2196            lcall   _Volts_at_Pin
0BCA 858288    2197            mov     _uturn_vleft_1_92,dpl
0BCD 858389    2198            mov     (_uturn_vleft_1_92 + 1),dph
0BD0 85F08A    2199            mov     (_uturn_vleft_1_92 + 2),b
0BD3 F58B      2200            mov     (_uturn_vleft_1_92 + 3),a
0BD5           2201   ;        robot.c:460: vright = Volts_at_Pin(TANK_FR);
0BD5 75820C    2202            mov     dpl,#0x0C
0BD8 120100    2203            lcall   _Volts_at_Pin
0BDB 8582D8    2204            mov     _uturn_vright_1_92,dpl
0BDE 8583D9    2205            mov     (_uturn_vright_1_92 + 1),dph
0BE1 85F0DA    2206            mov     (_uturn_vright_1_92 + 2),b
0BE4 F5DB      2207            mov     (_uturn_vright_1_92 + 3),a
0BE6           2208   ;        robot.c:463: pwm_Left0 = -1;
0BE6 7570FF    2209            mov     _pwm_Left0,#0xFF
0BE9           2210   ;        robot.c:464: pwm_Left1 = 50;
0BE9 753032    2211            mov     _pwm_Left1,#0x32
0BEC           2212   ;        robot.c:465: pwm_Right0 = -1;
0BEC 75F0FF    2213            mov     _pwm_Right0,#0xFF
0BEF           2214   ;        robot.c:466: pwm_Right1 = 50;
0BEF 75B032    2215            mov     _pwm_Right1,#0x32
0BF2           2216   ;        robot.c:469: waitms(4000);
0BF2 900FA0    2217            mov     dptr,#0x0FA0
0BF5 120100    2218            lcall   _waitms
0BF8           2219   ;        robot.c:472: while (((vleft - vright) > 0.2) || ((vleft - vright) < (-0.2))) {
0BF8           2220   L008002?:
0BF8 C0D8      2221            push    _uturn_vright_1_92
0BFA C0D9      2222            push    (_uturn_vright_1_92 + 1)
0BFC C0DA      2223            push    (_uturn_vright_1_92 + 2)
0BFE C0DB      2224            push    (_uturn_vright_1_92 + 3)
0C00 858882    2225            mov     dpl,_uturn_vleft_1_92
0C03 858983    2226            mov     dph,(_uturn_vleft_1_92 + 1)
0C06 858AF0    2227            mov     b,(_uturn_vleft_1_92 + 2)
0C09 E58B      2228            mov     a,(_uturn_vleft_1_92 + 3)
0C0B 120100    2229            lcall   ___fssub
0C0E AA82      2230            mov     r2,dpl
0C10 AB83      2231            mov     r3,dph
0C12 ACF0      2232            mov     r4,b
0C14 FD        2233            mov     r5,a
0C15 E581      2234            mov     a,sp
0C17 24FC      2235            add     a,#0xfc
0C19 F581      2236            mov     sp,a
0C1B 74CD      2237            mov     a,#0xCD
0C1D C0E0      2238            push    acc
0C1F 74CC      2239            mov     a,#0xCC
0C21 C0E0      2240            push    acc
0C23 744C      2241            mov     a,#0x4C
0C25 C0E0      2242            push    acc
0C27 743E      2243            mov     a,#0x3E
0C29 C0E0      2244            push    acc
0C2B 8A82      2245            mov     dpl,r2
0C2D 8B83      2246            mov     dph,r3
0C2F 8CF0      2247            mov     b,r4
0C31 ED        2248            mov     a,r5
0C32 120100    2249            lcall   ___fsgt
0C35 AA82      2250            mov     r2,dpl
0C37 E581      2251            mov     a,sp
0C39 24FC      2252            add     a,#0xfc
0C3B F581      2253            mov     sp,a
0C3D EA        2254            mov     a,r2
0C3E 7001      2255            jnz     L008003?
0C40 C0D8      2256            push    _uturn_vright_1_92
0C42 C0D9      2257            push    (_uturn_vright_1_92 + 1)
0C44 C0DA      2258            push    (_uturn_vright_1_92 + 2)
0C46 C0DB      2259            push    (_uturn_vright_1_92 + 3)
0C48 858882    2260            mov     dpl,_uturn_vleft_1_92
0C4B 858983    2261            mov     dph,(_uturn_vleft_1_92 + 1)
0C4E 858AF0    2262            mov     b,(_uturn_vleft_1_92 + 2)
0C51 E58B      2263            mov     a,(_uturn_vleft_1_92 + 3)
0C53 120100    2264            lcall   ___fssub
0C56 AA82      2265            mov     r2,dpl
0C58 AB83      2266            mov     r3,dph
0C5A ACF0      2267            mov     r4,b
0C5C FD        2268            mov     r5,a
0C5D E581      2269            mov     a,sp
0C5F 24FC      2270            add     a,#0xfc
0C61 F581      2271            mov     sp,a
0C63 74CD      2272            mov     a,#0xCD
0C65 C0E0      2273            push    acc
0C67 74CC      2274            mov     a,#0xCC
0C69 C0E0      2275            push    acc
0C6B 744C      2276            mov     a,#0x4C
0C6D C0E0      2277            push    acc
0C6F 74BE      2278            mov     a,#0xBE
0C71 C0E0      2279            push    acc
0C73 8A82      2280            mov     dpl,r2
0C75 8B83      2281            mov     dph,r3
0C77 8CF0      2282            mov     b,r4
0C79 ED        2283            mov     a,r5
0C7A 120100    2284            lcall   ___fslt
0C7D AA82      2285            mov     r2,dpl
0C7F E581      2286            mov     a,sp
0C81 24FC      2287            add     a,#0xfc
0C83 F581      2288            mov     sp,a
0C85 EA        2289            mov     a,r2
0C86 6001      2290            jz      L008005?
0C88           2291   L008003?:
0C88           2292   ;        robot.c:474: vleft  = Volts_at_Pin(TANK_FL);
0C88 75820B    2293            mov     dpl,#0x0B
0C8B 120100    2294            lcall   _Volts_at_Pin
0C8E 858288    2295            mov     _uturn_vleft_1_92,dpl
0C91 858389    2296            mov     (_uturn_vleft_1_92 + 1),dph
0C94 85F08A    2297            mov     (_uturn_vleft_1_92 + 2),b
0C97 F58B      2298            mov     (_uturn_vleft_1_92 + 3),a
0C99           2299   ;        robot.c:475: vright = Volts_at_Pin(TANK_FR);
0C99 75820C    2300            mov     dpl,#0x0C
0C9C 120100    2301            lcall   _Volts_at_Pin
0C9F 8582D8    2302            mov     _uturn_vright_1_92,dpl
0CA2 8583D9    2303            mov     (_uturn_vright_1_92 + 1),dph
0CA5 85F0DA    2304            mov     (_uturn_vright_1_92 + 2),b
0CA8 F5DB      2305            mov     (_uturn_vright_1_92 + 3),a
0CAA 020100    2306            ljmp    L008002?
0CAD           2307   L008005?:
0CAD 22        2308            ret
0CAE           2309            rseg R_CSEG
0CAE           2310   
0000           2311            rseg R_XINIT
0000           2312   
0000           2313            rseg R_CONST
0000           2314   __str_0:
0000 1B        2315            db 0x1B
0001 5B324A    2316            db '[2J'
0004 00        2317            db 0x00
0005           2318   __str_1:
0005 0A        2319            db 0x0A
0006 494E5445  2320            db 'INTERSECTION'
     52534543
     54494F4E
0012 0A        2321            db 0x0A
0013 00        2322            db 0x00
0014           2323   __str_2:
0014 5475726E  2324            db 'Turn left at the next intersection'
     206C6566
     74206174
     20746865
     206E6578
     7420696E
     74657273
     65637469
     6F6E
0036 0A        2325            db 0x0A
0037 00        2326            db 0x00
0038           2327   __str_3:
0038 0A        2328            db 0x0A
0039 0D        2329            db 0x0D
003A 20494E54  2330            db ' INTERSECTION'
     45525345
     4354494F
     4E
0047 0A        2331            db 0x0A
0048 00        2332            db 0x00
0049           2333   __str_4:
0049 5475726E  2334            db 'Turn right at the next intersection'
     20726967
     68742061
     74207468
     65206E65
     78742069
     6E746572
     73656374
     696F6E
006C 0A        2335            db 0x0A
006D 00        2336            db 0x00
006E           2337   __str_5:
006E 474F21    2338            db 'GO!'
0071 0A        2339            db 0x0A
0072 00        2340            db 0x00
0073           2341   __str_6:
0073 52657665  2342            db 'Reverse Reverse!'
     72736520
     52657665
     72736521
0083 0A        2343            db 0x0A
0084 00        2344            db 0x00
0085           2345   __str_7:
0085 48414C54  2346            db 'HALT peasants!'
     20706561
     73616E74
     7321
0093 0A        2347            db 0x0A
0094 00        2348            db 0x00
0095           2349   __str_8:
0095 55545552  2350            db 'UTURN'
     4E
009A 0A        2351            db 0x0A
009B 00        2352            db 0x00
009C           2353   __str_9:
009C 436F6D6D  2354            db 'Command received: 0b_0%c%c%c'
     616E6420
     72656365
     69766564
     3A203062
     5F302563
     25632563
00B8 0A        2355            db 0x0A
00B9 00        2356            db 0x00
00BA           2357   
002E           2358            CSEG
002E           2359   
002E           2360   end
