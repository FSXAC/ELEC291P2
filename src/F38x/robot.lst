0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Mon Apr 03 19:56:59 2017
0000              5   ;--------------------------------------------------------
                  5   $name robot
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _Timer2_ISR
0000             28            public _main
0000             29            public _distance
0000             30            public _time
0000             31            public _overflow_count
0000             32            public _currentstate
0000             33            public _currentcmd
0000             34            public _direction
0000             35            public _pwm_Right1
0000             36            public _pwm_Right0
0000             37            public _pwm_Left1
0000             38            public _pwm_Left0
0000             39            public _pwm_both
0000             40            public _mode
0000             41            public _pwm_count
0000             42            public _readData
0000             43            public _linetrack
0000             44            public _stopcar
0000             45            public _turncar
0000             46            public _uturn
0000             47            public _Sonar_Reading
0000             48   ;--------------------------------------------------------
0000             49   ; Special Function Registers
0000             50   ;--------------------------------------------------------
0000             51   _P0             DATA 0x80
0000             52   _SP             DATA 0x81
0000             53   _DPL            DATA 0x82
0000             54   _DPH            DATA 0x83
0000             55   _EMI0TC         DATA 0x84
0000             56   _EMI0CF         DATA 0x85
0000             57   _OSCLCN         DATA 0x86
0000             58   _PCON           DATA 0x87
0000             59   _TCON           DATA 0x88
0000             60   _TMOD           DATA 0x89
0000             61   _TL0            DATA 0x8a
0000             62   _TL1            DATA 0x8b
0000             63   _TH0            DATA 0x8c
0000             64   _TH1            DATA 0x8d
0000             65   _CKCON          DATA 0x8e
0000             66   _PSCTL          DATA 0x8f
0000             67   _P1             DATA 0x90
0000             68   _TMR3CN         DATA 0x91
0000             69   _TMR4CN         DATA 0x91
0000             70   _TMR3RLL        DATA 0x92
0000             71   _TMR4RLL        DATA 0x92
0000             72   _TMR3RLH        DATA 0x93
0000             73   _TMR4RLH        DATA 0x93
0000             74   _TMR3L          DATA 0x94
0000             75   _TMR4L          DATA 0x94
0000             76   _TMR3H          DATA 0x95
0000             77   _TMR4H          DATA 0x95
0000             78   _USB0ADR        DATA 0x96
0000             79   _USB0DAT        DATA 0x97
0000             80   _SCON           DATA 0x98
0000             81   _SCON0          DATA 0x98
0000             82   _SBUF           DATA 0x99
0000             83   _SBUF0          DATA 0x99
0000             84   _CPT1CN         DATA 0x9a
0000             85   _CPT0CN         DATA 0x9b
0000             86   _CPT1MD         DATA 0x9c
0000             87   _CPT0MD         DATA 0x9d
0000             88   _CPT1MX         DATA 0x9e
0000             89   _CPT0MX         DATA 0x9f
0000             90   _P2             DATA 0xa0
0000             91   _SPI0CFG        DATA 0xa1
0000             92   _SPI0CKR        DATA 0xa2
0000             93   _SPI0DAT        DATA 0xa3
0000             94   _P0MDOUT        DATA 0xa4
0000             95   _P1MDOUT        DATA 0xa5
0000             96   _P2MDOUT        DATA 0xa6
0000             97   _P3MDOUT        DATA 0xa7
0000             98   _IE             DATA 0xa8
0000             99   _CLKSEL         DATA 0xa9
0000            100   _EMI0CN         DATA 0xaa
0000            101   __XPAGE         DATA 0xaa
0000            102   _SBCON1         DATA 0xac
0000            103   _P4MDOUT        DATA 0xae
0000            104   _PFE0CN         DATA 0xaf
0000            105   _P3             DATA 0xb0
0000            106   _OSCXCN         DATA 0xb1
0000            107   _OSCICN         DATA 0xb2
0000            108   _OSCICL         DATA 0xb3
0000            109   _SBRLL1         DATA 0xb4
0000            110   _SBRLH1         DATA 0xb5
0000            111   _FLSCL          DATA 0xb6
0000            112   _FLKEY          DATA 0xb7
0000            113   _IP             DATA 0xb8
0000            114   _CLKMUL         DATA 0xb9
0000            115   _SMBTC          DATA 0xb9
0000            116   _AMX0N          DATA 0xba
0000            117   _AMX0P          DATA 0xbb
0000            118   _ADC0CF         DATA 0xbc
0000            119   _ADC0L          DATA 0xbd
0000            120   _ADC0H          DATA 0xbe
0000            121   _SFRPAGE        DATA 0xbf
0000            122   _SMB0CN         DATA 0xc0
0000            123   _SMB1CN         DATA 0xc0
0000            124   _SMB0CF         DATA 0xc1
0000            125   _SMB1CF         DATA 0xc1
0000            126   _SMB0DAT        DATA 0xc2
0000            127   _SMB1DAT        DATA 0xc2
0000            128   _ADC0GTL        DATA 0xc3
0000            129   _ADC0GTH        DATA 0xc4
0000            130   _ADC0LTL        DATA 0xc5
0000            131   _ADC0LTH        DATA 0xc6
0000            132   _P4             DATA 0xc7
0000            133   _TMR2CN         DATA 0xc8
0000            134   _TMR5CN         DATA 0xc8
0000            135   _REG01CN        DATA 0xc9
0000            136   _TMR2RLL        DATA 0xca
0000            137   _TMR5RLL        DATA 0xca
0000            138   _TMR2RLH        DATA 0xcb
0000            139   _TMR5RLH        DATA 0xcb
0000            140   _TMR2L          DATA 0xcc
0000            141   _TMR5L          DATA 0xcc
0000            142   _TMR2H          DATA 0xcd
0000            143   _TMR5H          DATA 0xcd
0000            144   _SMB0ADM        DATA 0xce
0000            145   _SMB1ADM        DATA 0xce
0000            146   _SMB0ADR        DATA 0xcf
0000            147   _SMB1ADR        DATA 0xcf
0000            148   _PSW            DATA 0xd0
0000            149   _REF0CN         DATA 0xd1
0000            150   _SCON1          DATA 0xd2
0000            151   _SBUF1          DATA 0xd3
0000            152   _P0SKIP         DATA 0xd4
0000            153   _P1SKIP         DATA 0xd5
0000            154   _P2SKIP         DATA 0xd6
0000            155   _USB0XCN        DATA 0xd7
0000            156   _PCA0CN         DATA 0xd8
0000            157   _PCA0MD         DATA 0xd9
0000            158   _PCA0CPM0       DATA 0xda
0000            159   _PCA0CPM1       DATA 0xdb
0000            160   _PCA0CPM2       DATA 0xdc
0000            161   _PCA0CPM3       DATA 0xdd
0000            162   _PCA0CPM4       DATA 0xde
0000            163   _P3SKIP         DATA 0xdf
0000            164   _ACC            DATA 0xe0
0000            165   _XBR0           DATA 0xe1
0000            166   _XBR1           DATA 0xe2
0000            167   _XBR2           DATA 0xe3
0000            168   _IT01CF         DATA 0xe4
0000            169   _CKCON1         DATA 0xe4
0000            170   _SMOD1          DATA 0xe5
0000            171   _EIE1           DATA 0xe6
0000            172   _EIE2           DATA 0xe7
0000            173   _ADC0CN         DATA 0xe8
0000            174   _PCA0CPL1       DATA 0xe9
0000            175   _PCA0CPH1       DATA 0xea
0000            176   _PCA0CPL2       DATA 0xeb
0000            177   _PCA0CPH2       DATA 0xec
0000            178   _PCA0CPL3       DATA 0xed
0000            179   _PCA0CPH3       DATA 0xee
0000            180   _RSTSRC         DATA 0xef
0000            181   _B              DATA 0xf0
0000            182   _P0MDIN         DATA 0xf1
0000            183   _P1MDIN         DATA 0xf2
0000            184   _P2MDIN         DATA 0xf3
0000            185   _P3MDIN         DATA 0xf4
0000            186   _P4MDIN         DATA 0xf5
0000            187   _EIP1           DATA 0xf6
0000            188   _EIP2           DATA 0xf7
0000            189   _SPI0CN         DATA 0xf8
0000            190   _PCA0L          DATA 0xf9
0000            191   _PCA0H          DATA 0xfa
0000            192   _PCA0CPL0       DATA 0xfb
0000            193   _PCA0CPH0       DATA 0xfc
0000            194   _PCA0CPL4       DATA 0xfd
0000            195   _PCA0CPH4       DATA 0xfe
0000            196   _VDM0CN         DATA 0xff
0000            197   _DPTR           DATA 0x8382
0000            198   _TMR2RL         DATA 0xcbca
0000            199   _TMR3RL         DATA 0x9392
0000            200   _TMR4RL         DATA 0x9392
0000            201   _TMR5RL         DATA 0xcbca
0000            202   _TMR2           DATA 0xcdcc
0000            203   _TMR3           DATA 0x9594
0000            204   _TMR4           DATA 0x9594
0000            205   _TMR5           DATA 0xcdcc
0000            206   _SBRL1          DATA 0xb5b4
0000            207   _ADC0           DATA 0xbebd
0000            208   _ADC0GT         DATA 0xc4c3
0000            209   _ADC0LT         DATA 0xc6c5
0000            210   _PCA0           DATA 0xfaf9
0000            211   _PCA0CP1        DATA 0xeae9
0000            212   _PCA0CP2        DATA 0xeceb
0000            213   _PCA0CP3        DATA 0xeeed
0000            214   _PCA0CP0        DATA 0xfcfb
0000            215   _PCA0CP4        DATA 0xfefd
0000            216   ;--------------------------------------------------------
0000            217   ; special function bits
0000            218   ;--------------------------------------------------------
0000            219   _P0_0           BIT 0x80
0000            220   _P0_1           BIT 0x81
0000            221   _P0_2           BIT 0x82
0000            222   _P0_3           BIT 0x83
0000            223   _P0_4           BIT 0x84
0000            224   _P0_5           BIT 0x85
0000            225   _P0_6           BIT 0x86
0000            226   _P0_7           BIT 0x87
0000            227   _TF1            BIT 0x8f
0000            228   _TR1            BIT 0x8e
0000            229   _TF0            BIT 0x8d
0000            230   _TR0            BIT 0x8c
0000            231   _IE1            BIT 0x8b
0000            232   _IT1            BIT 0x8a
0000            233   _IE0            BIT 0x89
0000            234   _IT0            BIT 0x88
0000            235   _P1_0           BIT 0x90
0000            236   _P1_1           BIT 0x91
0000            237   _P1_2           BIT 0x92
0000            238   _P1_3           BIT 0x93
0000            239   _P1_4           BIT 0x94
0000            240   _P1_5           BIT 0x95
0000            241   _P1_6           BIT 0x96
0000            242   _P1_7           BIT 0x97
0000            243   _S0MODE         BIT 0x9f
0000            244   _SCON0_6        BIT 0x9e
0000            245   _MCE0           BIT 0x9d
0000            246   _REN0           BIT 0x9c
0000            247   _TB80           BIT 0x9b
0000            248   _RB80           BIT 0x9a
0000            249   _TI0            BIT 0x99
0000            250   _RI0            BIT 0x98
0000            251   _SCON_6         BIT 0x9e
0000            252   _MCE            BIT 0x9d
0000            253   _REN            BIT 0x9c
0000            254   _TB8            BIT 0x9b
0000            255   _RB8            BIT 0x9a
0000            256   _TI             BIT 0x99
0000            257   _RI             BIT 0x98
0000            258   _P2_0           BIT 0xa0
0000            259   _P2_1           BIT 0xa1
0000            260   _P2_2           BIT 0xa2
0000            261   _P2_3           BIT 0xa3
0000            262   _P2_4           BIT 0xa4
0000            263   _P2_5           BIT 0xa5
0000            264   _P2_6           BIT 0xa6
0000            265   _P2_7           BIT 0xa7
0000            266   _EA             BIT 0xaf
0000            267   _ESPI0          BIT 0xae
0000            268   _ET2            BIT 0xad
0000            269   _ES0            BIT 0xac
0000            270   _ET1            BIT 0xab
0000            271   _EX1            BIT 0xaa
0000            272   _ET0            BIT 0xa9
0000            273   _EX0            BIT 0xa8
0000            274   _P3_0           BIT 0xb0
0000            275   _P3_1           BIT 0xb1
0000            276   _P3_2           BIT 0xb2
0000            277   _P3_3           BIT 0xb3
0000            278   _P3_4           BIT 0xb4
0000            279   _P3_5           BIT 0xb5
0000            280   _P3_6           BIT 0xb6
0000            281   _P3_7           BIT 0xb7
0000            282   _IP_7           BIT 0xbf
0000            283   _PSPI0          BIT 0xbe
0000            284   _PT2            BIT 0xbd
0000            285   _PS0            BIT 0xbc
0000            286   _PT1            BIT 0xbb
0000            287   _PX1            BIT 0xba
0000            288   _PT0            BIT 0xb9
0000            289   _PX0            BIT 0xb8
0000            290   _MASTER0        BIT 0xc7
0000            291   _TXMODE0        BIT 0xc6
0000            292   _STA0           BIT 0xc5
0000            293   _STO0           BIT 0xc4
0000            294   _ACKRQ0         BIT 0xc3
0000            295   _ARBLOST0       BIT 0xc2
0000            296   _ACK0           BIT 0xc1
0000            297   _SI0            BIT 0xc0
0000            298   _MASTER1        BIT 0xc7
0000            299   _TXMODE1        BIT 0xc6
0000            300   _STA1           BIT 0xc5
0000            301   _STO1           BIT 0xc4
0000            302   _ACKRQ1         BIT 0xc3
0000            303   _ARBLOST1       BIT 0xc2
0000            304   _ACK1           BIT 0xc1
0000            305   _SI1            BIT 0xc0
0000            306   _TF2            BIT 0xcf
0000            307   _TF2H           BIT 0xcf
0000            308   _TF2L           BIT 0xce
0000            309   _TF2LEN         BIT 0xcd
0000            310   _TF2CEN         BIT 0xcc
0000            311   _T2SPLIT        BIT 0xcb
0000            312   _TR2            BIT 0xca
0000            313   _T2CSS          BIT 0xc9
0000            314   _T2XCLK         BIT 0xc8
0000            315   _TF5H           BIT 0xcf
0000            316   _TF5L           BIT 0xce
0000            317   _TF5LEN         BIT 0xcd
0000            318   _TMR5CN_4       BIT 0xcc
0000            319   _T5SPLIT        BIT 0xcb
0000            320   _TR5            BIT 0xca
0000            321   _TMR5CN_1       BIT 0xc9
0000            322   _T5XCLK         BIT 0xc8
0000            323   _CY             BIT 0xd7
0000            324   _AC             BIT 0xd6
0000            325   _F0             BIT 0xd5
0000            326   _RS1            BIT 0xd4
0000            327   _RS0            BIT 0xd3
0000            328   _OV             BIT 0xd2
0000            329   _F1             BIT 0xd1
0000            330   _PARITY         BIT 0xd0
0000            331   _CF             BIT 0xdf
0000            332   _CR             BIT 0xde
0000            333   _PCA0CN_5       BIT 0xde
0000            334   _CCF4           BIT 0xdc
0000            335   _CCF3           BIT 0xdb
0000            336   _CCF2           BIT 0xda
0000            337   _CCF1           BIT 0xd9
0000            338   _CCF0           BIT 0xd8
0000            339   _ACC_7          BIT 0xe7
0000            340   _ACC_6          BIT 0xe6
0000            341   _ACC_5          BIT 0xe5
0000            342   _ACC_4          BIT 0xe4
0000            343   _ACC_3          BIT 0xe3
0000            344   _ACC_2          BIT 0xe2
0000            345   _ACC_1          BIT 0xe1
0000            346   _ACC_0          BIT 0xe0
0000            347   _AD0EN          BIT 0xef
0000            348   _AD0TM          BIT 0xee
0000            349   _AD0INT         BIT 0xed
0000            350   _AD0BUSY        BIT 0xec
0000            351   _AD0WINT        BIT 0xeb
0000            352   _AD0CM2         BIT 0xea
0000            353   _AD0CM1         BIT 0xe9
0000            354   _AD0CM0         BIT 0xe8
0000            355   _B_7            BIT 0xf7
0000            356   _B_6            BIT 0xf6
0000            357   _B_5            BIT 0xf5
0000            358   _B_4            BIT 0xf4
0000            359   _B_3            BIT 0xf3
0000            360   _B_2            BIT 0xf2
0000            361   _B_1            BIT 0xf1
0000            362   _B_0            BIT 0xf0
0000            363   _SPIF           BIT 0xff
0000            364   _WCOL           BIT 0xfe
0000            365   _MODF           BIT 0xfd
0000            366   _RXOVRN         BIT 0xfc
0000            367   _NSSMD1         BIT 0xfb
0000            368   _NSSMD0         BIT 0xfa
0000            369   _TXBMT          BIT 0xf9
0000            370   _SPIEN          BIT 0xf8
0000            371   ;--------------------------------------------------------
0000            372   ; overlayable register banks
0000            373   ;--------------------------------------------------------
0000            374            rbank0 segment data overlay
0000            375   ;--------------------------------------------------------
0000            376   ; internal ram data
0000            377   ;--------------------------------------------------------
0000            378            rseg R_DSEG
0000            379   _pwm_count:
0000            380            ds 1
0001            381   _mode:
0001            382            ds 1
0002            383   _pwm_both:
0002            384            ds 1
0003            385   _pwm_Left0:
0003            386            ds 1
0004            387   _pwm_Left1:
0004            388            ds 1
0005            389   _pwm_Right0:
0005            390            ds 1
0006            391   _pwm_Right1:
0006            392            ds 1
0007            393   _direction:
0007            394            ds 1
0008            395   _currentcmd:
0008            396            ds 1
0009            397   _currentstate:
0009            398            ds 1
000A            399   _overflow_count:
000A            400            ds 1
000B            401   _time:
000B            402            ds 4
000F            403   _distance:
000F            404            ds 4
0013            405   _main_v1_1_59:
0013            406            ds 4
0017            407   _main_v2_1_59:
0017            408            ds 4
001B            409   _main_sloc0_1_0:
001B            410            ds 2
001D            411   _main_sloc1_1_0:
001D            412            ds 2
001F            413   _main_sloc2_1_0:
001F            414            ds 2
0021            415   _main_sloc3_1_0:
0021            416            ds 2
0023            417   _main_sloc4_1_0:
0023            418            ds 2
0025            419   _main_sloc5_1_0:
0025            420            ds 2
0027            421   _main_sloc6_1_0:
0027            422            ds 4
002B            423   _main_sloc7_1_0:
002B            424            ds 4
002F            425   _linetrack_vleft_1_80:
002F            426            ds 4
0033            427   _linetrack_vright_1_80:
0033            428            ds 4
0037            429   _linetrack_sloc0_1_0:
0037            430            ds 4
003B            431   _linetrack_sloc1_1_0:
003B            432            ds 4
003F            433   _turncar_v_1_86:
003F            434            ds 4
0043            435   _turncar_direction_1_86:
0043            436            ds 1
0044            437   _uturn_vleft_1_96:
0044            438            ds 4
0048            439   _uturn_vright_1_96:
0048            440            ds 4
004C            441   ;--------------------------------------------------------
004C            442   ; overlayable items in internal ram 
004C            443   ;--------------------------------------------------------
0000            444            rseg R_OSEG
0000            445   ;--------------------------------------------------------
0000            446   ; indirectly addressable internal ram data
0000            447   ;--------------------------------------------------------
0000            448            rseg R_ISEG
0000            449   ;--------------------------------------------------------
0000            450   ; absolute internal ram data
0000            451   ;--------------------------------------------------------
0000            452            DSEG
0000            453   ;--------------------------------------------------------
0000            454   ; bit data
0000            455   ;--------------------------------------------------------
0000            456            rseg R_BSEG
0000            457   _main_sloc8_1_0:
0000            458            DBIT    1
0001            459   _Timer2_ISR_sloc0_1_0:
0001            460            DBIT    1
0002            461   ;--------------------------------------------------------
0002            462   ; paged external ram data
0002            463   ;--------------------------------------------------------
0000            464            rseg R_PSEG
0000            465   ;--------------------------------------------------------
0000            466   ; external ram data
0000            467   ;--------------------------------------------------------
0000            468            rseg R_XSEG
0000            469   ;--------------------------------------------------------
0000            470   ; absolute external ram data
0000            471   ;--------------------------------------------------------
0000            472            XSEG
0000            473   ;--------------------------------------------------------
0000            474   ; external initialized ram data
0000            475   ;--------------------------------------------------------
0000            476            rseg R_IXSEG
0000            477            rseg R_HOME
0000            478            rseg R_GSINIT
0000            479            rseg R_CSEG
0000            480   ;--------------------------------------------------------
0000            481   ; Reset entry point and interrupt vectors
0000            482   ;--------------------------------------------------------
0000            483            CSEG at 0x0000
0000 020100     484            ljmp    _crt0
002B            485            CSEG at 0x002b
002B 020100     486            ljmp    _Timer2_ISR
002E            487   ;--------------------------------------------------------
002E            488   ; global & static initialisations
002E            489   ;--------------------------------------------------------
0000            490            rseg R_HOME
0000            491            rseg R_GSINIT
0000            492            rseg R_GSINIT
0000            493   ;--------------------------------------------------------
0000            494   ; data variables initialization
0000            495   ;--------------------------------------------------------
0000            496            rseg R_DINIT
0000            497   ;        robot.c:8: volatile  char pwm_count=0;
0000 75D800     498            mov     _pwm_count,#0x00
0003            499   ;        robot.c:9: volatile  char mode = 0;
0003 759800     500            mov     _mode,#0x00
0006            501   ;        robot.c:10: volatile  char pwm_both =0;
0006 755800     502            mov     _pwm_both,#0x00
0009            503   ;        robot.c:11: volatile  char pwm_Left0 = 0; //p1.5
0009 751800     504            mov     _pwm_Left0,#0x00
000C            505   ;        robot.c:12: volatile  char pwm_Left1 = 0; //p1.6
000C 75D800     506            mov     _pwm_Left1,#0x00
000F            507   ;        robot.c:13: volatile  char pwm_Right0 = 0; //p2.0
000F 759800     508            mov     _pwm_Right0,#0x00
0012            509   ;        robot.c:14: volatile  char pwm_Right1 = 0; //p2.1
0012 755800     510            mov     _pwm_Right1,#0x00
0015            511   ;        robot.c:15: volatile  char direction = 0; // 1 for back 0 for forward
0015 751800     512            mov     _direction,#0x00
0018            513   ;        robot.c:17: volatile  char currentcmd = 0;
0018 75D800     514            mov     _currentcmd,#0x00
001B            515   ;        robot.c:18: volatile  char currentstate = 1;
001B 759801     516            mov     _currentstate,#0x01
001E            517   ;        robot.c:21: volatile float time = 0.0f;
001E 751800     518            mov     _time,#0x00
0021 751900     519            mov     (_time + 1),#0x00
0024 751A00     520            mov     (_time + 2),#0x00
0027 751B00     521            mov     (_time + 3),#0x00
002A            522   ;        robot.c:22: volatile float distance = 0.0f;
002A 75D800     523            mov     _distance,#0x00
002D 75D900     524            mov     (_distance + 1),#0x00
0030 75DA00     525            mov     (_distance + 2),#0x00
0033 75DB00     526            mov     (_distance + 3),#0x00
0036            527            ; The linker places a 'ret' at the end of segment R_DINIT.
0036            528   ;--------------------------------------------------------
0036            529   ; code
0036            530   ;--------------------------------------------------------
0000            531            rseg R_CSEG
0000            532   ;------------------------------------------------------------
0000            533   ;Allocation info for local variables in function 'main'
0000            534   ;------------------------------------------------------------
0000            535   ;v1                        Allocated with name '_main_v1_1_59'
0000            536   ;v2                        Allocated with name '_main_v2_1_59'
0000            537   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0000            538   ;sloc1                     Allocated with name '_main_sloc1_1_0'
0000            539   ;sloc2                     Allocated with name '_main_sloc2_1_0'
0000            540   ;sloc3                     Allocated with name '_main_sloc3_1_0'
0000            541   ;sloc4                     Allocated with name '_main_sloc4_1_0'
0000            542   ;sloc5                     Allocated with name '_main_sloc5_1_0'
0000            543   ;sloc6                     Allocated with name '_main_sloc6_1_0'
0000            544   ;sloc7                     Allocated with name '_main_sloc7_1_0'
0000            545   ;------------------------------------------------------------
0000            546   ;        robot.c:24: void main(void) {
0000            547   ;        -----------------------------------------
0000            548   ;         function main
0000            549   ;        -----------------------------------------
0000            550   _main:
0000            551            using   0
0000            552   ;        robot.c:26: volatile float v1 = 0;
0000 751800     553            mov     _main_v1_1_59,#0x00
0003 751900     554            mov     (_main_v1_1_59 + 1),#0x00
0006 751A00     555            mov     (_main_v1_1_59 + 2),#0x00
0009 751B00     556            mov     (_main_v1_1_59 + 3),#0x00
000C            557   ;        robot.c:27: volatile float v2 = 0;
000C 755800     558            mov     _main_v2_1_59,#0x00
000F 755900     559            mov     (_main_v2_1_59 + 1),#0x00
0012 755A00     560            mov     (_main_v2_1_59 + 2),#0x00
0015 755B00     561            mov     (_main_v2_1_59 + 3),#0x00
0018            562   ;        robot.c:29: MOTOR_LEFT0 = 0;
0018 C295       563            clr     _P1_5
001A            564   ;        robot.c:30: MOTOR_LEFT1 = 0;
001A C296       565            clr     _P1_6
001C            566   ;        robot.c:31: MOTOR_RIGHT0 = 0;
001C C2A0       567            clr     _P2_0
001E            568   ;        robot.c:32: MOTOR_RIGHT1 = 0;
001E C2A1       569            clr     _P2_1
0020            570   ;        robot.c:35: currentstate = 1;           //1-FORWARD, 2-BACKWARDS, 3-STOPPED, 4-DEBUGGER
0020 759801     571            mov     _currentstate,#0x01
0023            572   ;        robot.c:36: currentcmd = 0;             //0-NO COMMAND, 1-TURN LEFT, 2-TURN RIGHT, 3-FORWARDS, 4-BACKWARDS, 5-STOP, 6-UTURN
0023 75D800     573            mov     _currentcmd,#0x00
0026            574   ;        robot.c:39: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0026 74D8       575            mov     a,#__str_0
0028 C0E0       576            push    acc
002A 749B       577            mov     a,#(__str_0 >> 8)
002C C0E0       578            push    acc
002E 7480       579            mov     a,#0x80
0030 C0E0       580            push    acc
0032 120100     581            lcall   _printf
0035 1581       582            dec     sp
0037 1581       583            dec     sp
0039 1581       584            dec     sp
003B            585   ;        robot.c:42: InitPinADC(2, 3); // Configure P2.3 as analog input (tank1)
003B 750003     586            mov     _InitPinADC_PARM_2,#0x03
003E 758202     587            mov     dpl,#0x02
0041 120100     588            lcall   _InitPinADC
0044            589   ;        robot.c:43: InitPinADC(2, 4); // Configure P2.4 as analog input         (tank1)
0044 750004     590            mov     _InitPinADC_PARM_2,#0x04
0047 758202     591            mov     dpl,#0x02
004A 120100     592            lcall   _InitPinADC
004D            593   ;        robot.c:44: InitPinADC(2, 5); // Configure P2.5 as analog input (tank2)
004D 750005     594            mov     _InitPinADC_PARM_2,#0x05
0050 758202     595            mov     dpl,#0x02
0053 120100     596            lcall   _InitPinADC
0056            597   ;        robot.c:45: InitPinADC(2, 6); // Configure P2.6 as analog input (tank2)
0056 750006     598            mov     _InitPinADC_PARM_2,#0x06
0059 758202     599            mov     dpl,#0x02
005C 120100     600            lcall   _InitPinADC
005F            601   ;        robot.c:48: InitADC();  
005F 120100     602            lcall   _InitADC
0062            603   ;        robot.c:51: while (1) {         
0062            604   L002039?:
0062            605   ;        robot.c:54: currentcmd = readData(currentcmd); 
0062 85D882     606            mov     dpl,_currentcmd
0065 120100     607            lcall   _readData
0068 8582D8     608            mov     _currentcmd,dpl
006B            609   ;        robot.c:57: printf("frontL %f frontR %f backL %f backR %f command %1d, state %1d left0 %3d left1 %3d right0 %3d right1 %3d\r", Volts_at_Pin(TANK_FL),Volts_at_Pin(TANK_FR),Volts_at_Pin(TANK_RL),Volts_at_Pin(TANK_RR), currentcmd, currentstate, pwm_Left0, pwm_Left1, pwm_Right0, pwm_Right1);
006B 8558D8     610            mov     _main_sloc5_1_0,_pwm_Right1
006E E558       611            mov     a,_pwm_Right1
0070 33         612            rlc     a
0071 95E0       613            subb    a,acc
0073 F5D9       614            mov     (_main_sloc5_1_0 + 1),a
0075 859898     615            mov     _main_sloc4_1_0,_pwm_Right0
0078 E598       616            mov     a,_pwm_Right0
007A 33         617            rlc     a
007B 95E0       618            subb    a,acc
007D F599       619            mov     (_main_sloc4_1_0 + 1),a
007F 85D858     620            mov     _main_sloc3_1_0,_pwm_Left1
0082 E5D8       621            mov     a,_pwm_Left1
0084 33         622            rlc     a
0085 95E0       623            subb    a,acc
0087 F559       624            mov     (_main_sloc3_1_0 + 1),a
0089 851898     625            mov     _main_sloc0_1_0,_pwm_Left0
008C E518       626            mov     a,_pwm_Left0
008E 33         627            rlc     a
008F 95E0       628            subb    a,acc
0091 F599       629            mov     (_main_sloc0_1_0 + 1),a
0093 8598D8     630            mov     _main_sloc1_1_0,_currentstate
0096 E598       631            mov     a,_currentstate
0098 33         632            rlc     a
0099 95E0       633            subb    a,acc
009B F5D9       634            mov     (_main_sloc1_1_0 + 1),a
009D 85D818     635            mov     _main_sloc2_1_0,_currentcmd
00A0 E5D8       636            mov     a,_currentcmd
00A2 33         637            rlc     a
00A3 95E0       638            subb    a,acc
00A5 F519       639            mov     (_main_sloc2_1_0 + 1),a
00A7 75820E     640            mov     dpl,#0x0E
00AA 120100     641            lcall   _Volts_at_Pin
00AD A882       642            mov     r0,dpl
00AF A983       643            mov     r1,dph
00B1 AEF0       644            mov     r6,b
00B3 FF         645            mov     r7,a
00B4 75820D     646            mov     dpl,#0x0D
00B7 C006       647            push    ar6
00B9 C007       648            push    ar7
00BB C000       649            push    ar0
00BD C001       650            push    ar1
00BF 120100     651            lcall   _Volts_at_Pin
00C2 858218     652            mov     _main_sloc6_1_0,dpl
00C5 858319     653            mov     (_main_sloc6_1_0 + 1),dph
00C8 85F01A     654            mov     (_main_sloc6_1_0 + 2),b
00CB F51B       655            mov     (_main_sloc6_1_0 + 3),a
00CD 75820C     656            mov     dpl,#0x0C
00D0 120100     657            lcall   _Volts_at_Pin
00D3 858258     658            mov     _main_sloc7_1_0,dpl
00D6 858359     659            mov     (_main_sloc7_1_0 + 1),dph
00D9 85F05A     660            mov     (_main_sloc7_1_0 + 2),b
00DC F55B       661            mov     (_main_sloc7_1_0 + 3),a
00DE 75820B     662            mov     dpl,#0x0B
00E1 120100     663            lcall   _Volts_at_Pin
00E4 AA82       664            mov     r2,dpl
00E6 AB83       665            mov     r3,dph
00E8 ACF0       666            mov     r4,b
00EA FD         667            mov     r5,a
00EB D001       668            pop     ar1
00ED D000       669            pop     ar0
00EF D007       670            pop     ar7
00F1 D006       671            pop     ar6
00F3 C0D8       672            push    _main_sloc5_1_0
00F5 C0D9       673            push    (_main_sloc5_1_0 + 1)
00F7 C098       674            push    _main_sloc4_1_0
00F9 C099       675            push    (_main_sloc4_1_0 + 1)
00FB C058       676            push    _main_sloc3_1_0
00FD C059       677            push    (_main_sloc3_1_0 + 1)
00FF C098       678            push    _main_sloc0_1_0
0101 C099       679            push    (_main_sloc0_1_0 + 1)
0103 C0D8       680            push    _main_sloc1_1_0
0105 C0D9       681            push    (_main_sloc1_1_0 + 1)
0107 C018       682            push    _main_sloc2_1_0
0109 C019       683            push    (_main_sloc2_1_0 + 1)
010B C000       684            push    ar0
010D C001       685            push    ar1
010F C006       686            push    ar6
0111 C007       687            push    ar7
0113 C018       688            push    _main_sloc6_1_0
0115 C019       689            push    (_main_sloc6_1_0 + 1)
0117 C01A       690            push    (_main_sloc6_1_0 + 2)
0119 C01B       691            push    (_main_sloc6_1_0 + 3)
011B C058       692            push    _main_sloc7_1_0
011D C059       693            push    (_main_sloc7_1_0 + 1)
011F C05A       694            push    (_main_sloc7_1_0 + 2)
0121 C05B       695            push    (_main_sloc7_1_0 + 3)
0123 C002       696            push    ar2
0125 C003       697            push    ar3
0127 C004       698            push    ar4
0129 C005       699            push    ar5
012B 74E8       700            mov     a,#__str_1
012D C0E0       701            push    acc
012F 749E       702            mov     a,#(__str_1 >> 8)
0131 C0E0       703            push    acc
0133 7480       704            mov     a,#0x80
0135 C0E0       705            push    acc
0137 120100     706            lcall   _printf
013A E581       707            mov     a,sp
013C 24E1       708            add     a,#0xe1
013E F581       709            mov     sp,a
0140            710   ;        robot.c:60: Sonar_Reading();
0140 120100     711            lcall   _Sonar_Reading
0143            712   ;        robot.c:61: if (distance < 7) {
0143 E4         713            clr     a
0144 C0E0       714            push    acc
0146 C0E0       715            push    acc
0148 74E0       716            mov     a,#0xE0
014A C0E0       717            push    acc
014C 7440       718            mov     a,#0x40
014E C0E0       719            push    acc
0150 85D882     720            mov     dpl,_distance
0153 85D983     721            mov     dph,(_distance + 1)
0156 85DAF0     722            mov     b,(_distance + 2)
0159 E5DB       723            mov     a,(_distance + 3)
015B 120100     724            lcall   ___fslt
015E AA82       725            mov     r2,dpl
0160 E581       726            mov     a,sp
0162 24FC       727            add     a,#0xfc
0164 F581       728            mov     sp,a
0166 EA         729            mov     a,r2
0167 6001       730            jz      L002005?
0169            731   ;        robot.c:62: currentstate = 3;           //code for testing
0169 759803     732            mov     _currentstate,#0x03
016C            733   ;        robot.c:63: stopcar();
016C 120100     734            lcall   _stopcar
016F            735   ;        robot.c:64: while (distance < 7) {
016F            736   L002001?:
016F E4         737            clr     a
0170 C0E0       738            push    acc
0172 C0E0       739            push    acc
0174 74E0       740            mov     a,#0xE0
0176 C0E0       741            push    acc
0178 7440       742            mov     a,#0x40
017A C0E0       743            push    acc
017C 85D882     744            mov     dpl,_distance
017F 85D983     745            mov     dph,(_distance + 1)
0182 85DAF0     746            mov     b,(_distance + 2)
0185 E5DB       747            mov     a,(_distance + 3)
0187 120100     748            lcall   ___fslt
018A AA82       749            mov     r2,dpl
018C E581       750            mov     a,sp
018E 24FC       751            add     a,#0xfc
0190 F581       752            mov     sp,a
0192 EA         753            mov     a,r2
0193 6001       754            jz      L002003?
0195            755   ;        robot.c:65: Sonar_Reading();
0195 120100     756            lcall   _Sonar_Reading
0198 8001       757            sjmp    L002001?
019A            758   L002003?:
019A            759   ;        robot.c:67: currentstate = 1;           //code for testing
019A 759801     760            mov     _currentstate,#0x01
019D            761   L002005?:
019D            762   ;        robot.c:71: switch (currentstate) {
019D AA98       763            mov     r2,_currentstate
019F BA0128     764            cjne    r2,#0x01,L002074?
01A2 8001       765            sjmp    L002006?
01A4            766   L002074?:
01A4 BA02A8     767            cjne    r2,#0x02,L002075?
01A7 8001       768            sjmp    L002007?
01A9            769   L002075?:
01A9            770   ;        robot.c:72: case FORWARD_STATE:
01A9 BA0328     771            cjne    r2,#0x03,L002009?
01AC 8001       772            sjmp    L002008?
01AE            773   L002006?:
01AE            774   ;        robot.c:73: linetrack(0);       // forwards
01AE 900000     775            mov     dptr,#0x0000
01B1 120100     776            lcall   _linetrack
01B4            777   ;        robot.c:75: v1 = Volts_at_Pin(TANK_FL);
01B4 75820B     778            mov     dpl,#0x0B
01B7 120100     779            lcall   _Volts_at_Pin
01BA 858218     780            mov     _main_v1_1_59,dpl
01BD 858319     781            mov     (_main_v1_1_59 + 1),dph
01C0 85F01A     782            mov     (_main_v1_1_59 + 2),b
01C3 F51B       783            mov     (_main_v1_1_59 + 3),a
01C5            784   ;        robot.c:76: v2 = Volts_at_Pin(TANK_FR);
01C5 75820C     785            mov     dpl,#0x0C
01C8 120100     786            lcall   _Volts_at_Pin
01CB 858258     787            mov     _main_v2_1_59,dpl
01CE 858359     788            mov     (_main_v2_1_59 + 1),dph
01D1 85F05A     789            mov     (_main_v2_1_59 + 2),b
01D4 F55B       790            mov     (_main_v2_1_59 + 3),a
01D6            791   ;        robot.c:77: break;
01D6            792   ;        robot.c:78: case REVERSE_STATE:
01D6 8001       793            sjmp    L002009?
01D8            794   L002007?:
01D8            795   ;        robot.c:79: linetrack(1);       // backwards
01D8 900001     796            mov     dptr,#0x0001
01DB 120100     797            lcall   _linetrack
01DE            798   ;        robot.c:81: v2 = Volts_at_Pin(TANK_RL);
01DE 75820D     799            mov     dpl,#0x0D
01E1 120100     800            lcall   _Volts_at_Pin
01E4 858258     801            mov     _main_v2_1_59,dpl
01E7 858359     802            mov     (_main_v2_1_59 + 1),dph
01EA 85F05A     803            mov     (_main_v2_1_59 + 2),b
01ED F55B       804            mov     (_main_v2_1_59 + 3),a
01EF            805   ;        robot.c:82: v1 = Volts_at_Pin(TANK_RR);
01EF 75820E     806            mov     dpl,#0x0E
01F2 120100     807            lcall   _Volts_at_Pin
01F5 858218     808            mov     _main_v1_1_59,dpl
01F8 858319     809            mov     (_main_v1_1_59 + 1),dph
01FB 85F01A     810            mov     (_main_v1_1_59 + 2),b
01FE F51B       811            mov     (_main_v1_1_59 + 3),a
0200            812   ;        robot.c:83: break;
0200            813   ;        robot.c:84: case STOP_STATE:
0200 8001       814            sjmp    L002009?
0202            815   L002008?:
0202            816   ;        robot.c:85: stopcar();          // stop car
0202 120100     817            lcall   _stopcar
0205            818   ;        robot.c:87: }
0205            819   L002009?:
0205            820   ;        robot.c:90: switch (currentcmd) {
0205 E5D8       821            mov     a,_currentcmd
0207 FA         822            mov     r2,a
0208 30E7A8     823            jnb     acc.7,L002077?
020B 020100     824            ljmp    L002036?
020E            825   L002077?:
020E C3         826            clr     c
020F 7486       827            mov     a,#(0x06 ^ 0x80)
0211 8AF0       828            mov     b,r2
0213 63F080     829            xrl     b,#0x80
0216 95F0       830            subb    a,b
0218 5001       831            jnc     L002078?
021A 020100     832            ljmp    L002036?
021D            833   L002078?:
021D EA         834            mov     a,r2
021E 2A         835            add     a,r2
021F 2A         836            add     a,r2
0220 90A268     837            mov     dptr,#L002079?
0223 73         838            jmp     @a+dptr
0224            839   L002079?:
0224 020100     840            ljmp    L002010?
0227 020100     841            ljmp    L002024?
022A 020100     842            ljmp    L002028?
022D 020100     843            ljmp    L002032?
0230 020100     844            ljmp    L002033?
0233 020100     845            ljmp    L002034?
0236 020100     846            ljmp    L002035?
0239            847   ;        robot.c:92: case CMD_NONE:
0239            848   L002010?:
0239            849   ;        robot.c:94: if ((currentstate-1) ? 
0239 AA98       850            mov     r2,_currentstate
023B E598       851            mov     a,_currentstate
023D 33         852            rlc     a
023E 95E0       853            subb    a,acc
0240 FB         854            mov     r3,a
0241 1A         855            dec     r2
0242 BAFF68     856            cjne    r2,#0xff,L002080?
0245 1B         857            dec     r3
0246            858   L002080?:
0246 EA         859            mov     a,r2
0247 4B         860            orl     a,r3
0248 6001       861            jz      L002043?
024A            862   ;        robot.c:95: (v1 > 1.2 && v2 > 1.2) :
024A 749A       863            mov     a,#0x9A
024C C0E0       864            push    acc
024E 7499       865            mov     a,#0x99
0250 C0E0       866            push    acc
0252 C0E0       867            push    acc
0254 743F       868            mov     a,#0x3F
0256 C0E0       869            push    acc
0258 851882     870            mov     dpl,_main_v1_1_59
025B 851983     871            mov     dph,(_main_v1_1_59 + 1)
025E 851AF0     872            mov     b,(_main_v1_1_59 + 2)
0261 E51B       873            mov     a,(_main_v1_1_59 + 3)
0263 120100     874            lcall   ___fsgt
0266 AA82       875            mov     r2,dpl
0268 E581       876            mov     a,sp
026A 24FC       877            add     a,#0xfc
026C F581       878            mov     sp,a
026E EA         879            mov     a,r2
026F 6001       880            jz      L002045?
0271 749A       881            mov     a,#0x9A
0273 C0E0       882            push    acc
0275 7499       883            mov     a,#0x99
0277 C0E0       884            push    acc
0279 C0E0       885            push    acc
027B 743F       886            mov     a,#0x3F
027D C0E0       887            push    acc
027F 855882     888            mov     dpl,_main_v2_1_59
0282 855983     889            mov     dph,(_main_v2_1_59 + 1)
0285 855AF0     890            mov     b,(_main_v2_1_59 + 2)
0288 E55B       891            mov     a,(_main_v2_1_59 + 3)
028A 120100     892            lcall   ___fsgt
028D AA82       893            mov     r2,dpl
028F E581       894            mov     a,sp
0291 24FC       895            add     a,#0xfc
0293 F581       896            mov     sp,a
0295 EA         897            mov     a,r2
0296 7001       898            jnz     L002046?
0298            899   L002045?:
0298 7A00       900            mov     r2,#0x00
029A 8001       901            sjmp    L002047?
029C            902   L002046?:
029C 7A01       903            mov     r2,#0x01
029E            904   L002047?:
029E EA         905            mov     a,r2
029F 24FF       906            add     a,#0xff
02A1 9208       907            mov     _main_sloc8_1_0,c
02A3 8001       908            sjmp    L002044?
02A5            909   L002043?:
02A5            910   ;        robot.c:96: (v1 > 0.7 && v2 > 1)) {
02A5 7433       911            mov     a,#0x33
02A7 C0E0       912            push    acc
02A9 C0E0       913            push    acc
02AB C0E0       914            push    acc
02AD 743F       915            mov     a,#0x3F
02AF C0E0       916            push    acc
02B1 851882     917            mov     dpl,_main_v1_1_59
02B4 851983     918            mov     dph,(_main_v1_1_59 + 1)
02B7 851AF0     919            mov     b,(_main_v1_1_59 + 2)
02BA E51B       920            mov     a,(_main_v1_1_59 + 3)
02BC 120100     921            lcall   ___fsgt
02BF AA82       922            mov     r2,dpl
02C1 E581       923            mov     a,sp
02C3 24FC       924            add     a,#0xfc
02C5 F581       925            mov     sp,a
02C7 EA         926            mov     a,r2
02C8 6001       927            jz      L002048?
02CA E4         928            clr     a
02CB C0E0       929            push    acc
02CD C0E0       930            push    acc
02CF 7480       931            mov     a,#0x80
02D1 C0E0       932            push    acc
02D3 743F       933            mov     a,#0x3F
02D5 C0E0       934            push    acc
02D7 855882     935            mov     dpl,_main_v2_1_59
02DA 855983     936            mov     dph,(_main_v2_1_59 + 1)
02DD 855AF0     937            mov     b,(_main_v2_1_59 + 2)
02E0 E55B       938            mov     a,(_main_v2_1_59 + 3)
02E2 120100     939            lcall   ___fsgt
02E5 AA82       940            mov     r2,dpl
02E7 E581       941            mov     a,sp
02E9 24FC       942            add     a,#0xfc
02EB F581       943            mov     sp,a
02ED EA         944            mov     a,r2
02EE 7001       945            jnz     L002049?
02F0            946   L002048?:
02F0 7A00       947            mov     r2,#0x00
02F2 8001       948            sjmp    L002050?
02F4            949   L002049?:
02F4 7A01       950            mov     r2,#0x01
02F6            951   L002050?:
02F6 EA         952            mov     a,r2
02F7 24FF       953            add     a,#0xff
02F9 9208       954            mov     _main_sloc8_1_0,c
02FB            955   L002044?:
02FB 2008E8     956            jb      _main_sloc8_1_0,L002086?
02FE 020100     957            ljmp    L002039?
0301            958   L002086?:
0301            959   ;        robot.c:97: printf("\nINTERSECTION\n");
0301 7428       960            mov     a,#__str_2
0303 C0E0       961            push    acc
0305 74A7       962            mov     a,#(__str_2 >> 8)
0307 C0E0       963            push    acc
0309 7480       964            mov     a,#0x80
030B C0E0       965            push    acc
030D 120100     966            lcall   _printf
0310 1581       967            dec     sp
0312 1581       968            dec     sp
0314 1581       969            dec     sp
0316            970   ;        robot.c:99: if (currentstate == 1) {
0316 7401       971            mov     a,#0x01
0318 B59868     972            cjne    a,_currentstate,L002020?
031B            973   ;        robot.c:100: if (Volts_at_Pin(TANK_RL)>Volts_at_Pin(TANK_RR)) {
031B 75820D     974            mov     dpl,#0x0D
031E 120100     975            lcall   _Volts_at_Pin
0321 AA82       976            mov     r2,dpl
0323 AB83       977            mov     r3,dph
0325 ACF0       978            mov     r4,b
0327 FD         979            mov     r5,a
0328 75820E     980            mov     dpl,#0x0E
032B C002       981            push    ar2
032D C003       982            push    ar3
032F C004       983            push    ar4
0331 C005       984            push    ar5
0333 120100     985            lcall   _Volts_at_Pin
0336 AE82       986            mov     r6,dpl
0338 AF83       987            mov     r7,dph
033A A8F0       988            mov     r0,b
033C F9         989            mov     r1,a
033D D005       990            pop     ar5
033F D004       991            pop     ar4
0341 D003       992            pop     ar3
0343 D002       993            pop     ar2
0345 C006       994            push    ar6
0347 C007       995            push    ar7
0349 C000       996            push    ar0
034B C001       997            push    ar1
034D 8A82       998            mov     dpl,r2
034F 8B83       999            mov     dph,r3
0351 8CF0      1000            mov     b,r4
0353 ED        1001            mov     a,r5
0354 120100    1002            lcall   ___fsgt
0357 AA82      1003            mov     r2,dpl
0359 E581      1004            mov     a,sp
035B 24FC      1005            add     a,#0xfc
035D F581      1006            mov     sp,a
035F EA        1007            mov     a,r2
0360 6001      1008            jz      L002012?
0362           1009   ;        robot.c:101: pwm_Left1 = 50;
0362 75D832    1010            mov     _pwm_Left1,#0x32
0365           1011   ;        robot.c:102: pwm_Left0 = -1;
0365 7518FF    1012            mov     _pwm_Left0,#0xFF
0368           1013   ;        robot.c:103: pwm_Right0 = 30;
0368 75981E    1014            mov     _pwm_Right0,#0x1E
036B           1015   ;        robot.c:104: pwm_Right1 = -1;
036B 7558FF    1016            mov     _pwm_Right1,#0xFF
036E 8001      1017            sjmp    L002021?
0370           1018   L002012?:
0370           1019   ;        robot.c:107: pwm_Left1 = 30;
0370 75D81E    1020            mov     _pwm_Left1,#0x1E
0373           1021   ;        robot.c:108: pwm_Left0 = -1;
0373 7518FF    1022            mov     _pwm_Left0,#0xFF
0376           1023   ;        robot.c:109: pwm_Right0 = 50;
0376 759832    1024            mov     _pwm_Right0,#0x32
0379           1025   ;        robot.c:110: pwm_Right1 = -1;
0379 7558FF    1026            mov     _pwm_Right1,#0xFF
037C 8001      1027            sjmp    L002021?
037E           1028   L002020?:
037E           1029   ;        robot.c:112: } else if (currentstate == 2) {
037E 7402      1030            mov     a,#0x02
0380 B598E8    1031            cjne    a,_currentstate,L002021?
0383           1032   ;        robot.c:113: if (Volts_at_Pin(TANK_FL)>Volts_at_Pin(TANK_FR)) {
0383 75820B    1033            mov     dpl,#0x0B
0386 120100    1034            lcall   _Volts_at_Pin
0389 AA82      1035            mov     r2,dpl
038B AB83      1036            mov     r3,dph
038D ACF0      1037            mov     r4,b
038F FD        1038            mov     r5,a
0390 75820C    1039            mov     dpl,#0x0C
0393 C002      1040            push    ar2
0395 C003      1041            push    ar3
0397 C004      1042            push    ar4
0399 C005      1043            push    ar5
039B 120100    1044            lcall   _Volts_at_Pin
039E AE82      1045            mov     r6,dpl
03A0 AF83      1046            mov     r7,dph
03A2 A8F0      1047            mov     r0,b
03A4 F9        1048            mov     r1,a
03A5 D005      1049            pop     ar5
03A7 D004      1050            pop     ar4
03A9 D003      1051            pop     ar3
03AB D002      1052            pop     ar2
03AD C006      1053            push    ar6
03AF C007      1054            push    ar7
03B1 C000      1055            push    ar0
03B3 C001      1056            push    ar1
03B5 8A82      1057            mov     dpl,r2
03B7 8B83      1058            mov     dph,r3
03B9 8CF0      1059            mov     b,r4
03BB ED        1060            mov     a,r5
03BC 120100    1061            lcall   ___fsgt
03BF AA82      1062            mov     r2,dpl
03C1 E581      1063            mov     a,sp
03C3 24FC      1064            add     a,#0xfc
03C5 F581      1065            mov     sp,a
03C7 EA        1066            mov     a,r2
03C8 6001      1067            jz      L002015?
03CA           1068   ;        robot.c:114: pwm_Left0 = 50;
03CA 751832    1069            mov     _pwm_Left0,#0x32
03CD           1070   ;        robot.c:115: pwm_Left1 = -1;
03CD 75D8FF    1071            mov     _pwm_Left1,#0xFF
03D0           1072   ;        robot.c:116: pwm_Right0 = -1;
03D0 7598FF    1073            mov     _pwm_Right0,#0xFF
03D3           1074   ;        robot.c:117: pwm_Right1 = 30;
03D3 75581E    1075            mov     _pwm_Right1,#0x1E
03D6 8001      1076            sjmp    L002021?
03D8           1077   L002015?:
03D8           1078   ;        robot.c:120: pwm_Left0 = 30;
03D8 75181E    1079            mov     _pwm_Left0,#0x1E
03DB           1080   ;        robot.c:121: pwm_Left1 = -1;
03DB 75D8FF    1081            mov     _pwm_Left1,#0xFF
03DE           1082   ;        robot.c:122: pwm_Right0 = -1;
03DE 7598FF    1083            mov     _pwm_Right0,#0xFF
03E1           1084   ;        robot.c:123: pwm_Right1 = 50;
03E1 755832    1085            mov     _pwm_Right1,#0x32
03E4           1086   L002021?:
03E4           1087   ;        robot.c:127: waitms(1500);
03E4 9005DC    1088            mov     dptr,#0x05DC
03E7 120100    1089            lcall   _waitms
03EA           1090   ;        robot.c:129: break;
03EA 020100    1091            ljmp    L002039?
03ED           1092   ;        robot.c:131: case CMD_LEFT:
03ED           1093   L002024?:
03ED           1094   ;        robot.c:133: printf("Turn left at the next intersection\n");
03ED 74A8      1095            mov     a,#__str_3
03EF C0E0      1096            push    acc
03F1 74A8      1097            mov     a,#(__str_3 >> 8)
03F3 C0E0      1098            push    acc
03F5 7480      1099            mov     a,#0x80
03F7 C0E0      1100            push    acc
03F9 120100    1101            lcall   _printf
03FC 1581      1102            dec     sp
03FE 1581      1103            dec     sp
0400 1581      1104            dec     sp
0402           1105   ;        robot.c:134: if (v1 > 0.7 && v2 >1)  {
0402 7433      1106            mov     a,#0x33
0404 C0E0      1107            push    acc
0406 C0E0      1108            push    acc
0408 C0E0      1109            push    acc
040A 743F      1110            mov     a,#0x3F
040C C0E0      1111            push    acc
040E 851882    1112            mov     dpl,_main_v1_1_59
0411 851983    1113            mov     dph,(_main_v1_1_59 + 1)
0414 851AF0    1114            mov     b,(_main_v1_1_59 + 2)
0417 E51B      1115            mov     a,(_main_v1_1_59 + 3)
0419 120100    1116            lcall   ___fsgt
041C AA82      1117            mov     r2,dpl
041E E581      1118            mov     a,sp
0420 24FC      1119            add     a,#0xfc
0422 F581      1120            mov     sp,a
0424 EA        1121            mov     a,r2
0425 7001      1122            jnz     L002093?
0427 020100    1123            ljmp    L002039?
042A           1124   L002093?:
042A E4        1125            clr     a
042B C0E0      1126            push    acc
042D C0E0      1127            push    acc
042F 7480      1128            mov     a,#0x80
0431 C0E0      1129            push    acc
0433 743F      1130            mov     a,#0x3F
0435 C0E0      1131            push    acc
0437 855882    1132            mov     dpl,_main_v2_1_59
043A 855983    1133            mov     dph,(_main_v2_1_59 + 1)
043D 855AF0    1134            mov     b,(_main_v2_1_59 + 2)
0440 E55B      1135            mov     a,(_main_v2_1_59 + 3)
0442 120100    1136            lcall   ___fsgt
0445 AA82      1137            mov     r2,dpl
0447 E581      1138            mov     a,sp
0449 24FC      1139            add     a,#0xfc
044B F581      1140            mov     sp,a
044D EA        1141            mov     a,r2
044E 7001      1142            jnz     L002094?
0450 020100    1143            ljmp    L002039?
0453           1144   L002094?:
0453           1145   ;        robot.c:135: printf("\n\r INTERSECTION\n");
0453 7468      1146            mov     a,#__str_4
0455 C0E0      1147            push    acc
0457 74A9      1148            mov     a,#(__str_4 >> 8)
0459 C0E0      1149            push    acc
045B 7480      1150            mov     a,#0x80
045D C0E0      1151            push    acc
045F 120100    1152            lcall   _printf
0462 1581      1153            dec     sp
0464 1581      1154            dec     sp
0466 1581      1155            dec     sp
0468           1156   ;        robot.c:140: turncar(currentstate);
0468 AA98      1157            mov     r2,_currentstate
046A E598      1158            mov     a,_currentstate
046C 33        1159            rlc     a
046D 95E0      1160            subb    a,acc
046F FB        1161            mov     r3,a
0470 8A82      1162            mov     dpl,r2
0472 8B83      1163            mov     dph,r3
0474 120100    1164            lcall   _turncar
0477           1165   ;        robot.c:141: currentcmd = 0;
0477 75D800    1166            mov     _currentcmd,#0x00
047A           1167   ;        robot.c:143: break;
047A 020100    1168            ljmp    L002039?
047D           1169   ;        robot.c:146: case CMD_RIGHT:
047D           1170   L002028?:
047D           1171   ;        robot.c:148: printf("\nTurn right at the next intersection\n");
047D 74A8      1172            mov     a,#__str_5
047F C0E0      1173            push    acc
0481 74A9      1174            mov     a,#(__str_5 >> 8)
0483 C0E0      1175            push    acc
0485 7480      1176            mov     a,#0x80
0487 C0E0      1177            push    acc
0489 120100    1178            lcall   _printf
048C 1581      1179            dec     sp
048E 1581      1180            dec     sp
0490 1581      1181            dec     sp
0492           1182   ;        robot.c:149: if (v1 > 0.7 && v2 >1) {
0492 7433      1183            mov     a,#0x33
0494 C0E0      1184            push    acc
0496 C0E0      1185            push    acc
0498 C0E0      1186            push    acc
049A 743F      1187            mov     a,#0x3F
049C C0E0      1188            push    acc
049E 851882    1189            mov     dpl,_main_v1_1_59
04A1 851983    1190            mov     dph,(_main_v1_1_59 + 1)
04A4 851AF0    1191            mov     b,(_main_v1_1_59 + 2)
04A7 E51B      1192            mov     a,(_main_v1_1_59 + 3)
04A9 120100    1193            lcall   ___fsgt
04AC AA82      1194            mov     r2,dpl
04AE E581      1195            mov     a,sp
04B0 24FC      1196            add     a,#0xfc
04B2 F581      1197            mov     sp,a
04B4 EA        1198            mov     a,r2
04B5 7001      1199            jnz     L002095?
04B7 020100    1200            ljmp    L002039?
04BA           1201   L002095?:
04BA E4        1202            clr     a
04BB C0E0      1203            push    acc
04BD C0E0      1204            push    acc
04BF 7480      1205            mov     a,#0x80
04C1 C0E0      1206            push    acc
04C3 743F      1207            mov     a,#0x3F
04C5 C0E0      1208            push    acc
04C7 855882    1209            mov     dpl,_main_v2_1_59
04CA 855983    1210            mov     dph,(_main_v2_1_59 + 1)
04CD 855AF0    1211            mov     b,(_main_v2_1_59 + 2)
04D0 E55B      1212            mov     a,(_main_v2_1_59 + 3)
04D2 120100    1213            lcall   ___fsgt
04D5 AA82      1214            mov     r2,dpl
04D7 E581      1215            mov     a,sp
04D9 24FC      1216            add     a,#0xfc
04DB F581      1217            mov     sp,a
04DD EA        1218            mov     a,r2
04DE 7001      1219            jnz     L002096?
04E0 020100    1220            ljmp    L002039?
04E3           1221   L002096?:
04E3           1222   ;        robot.c:150: printf("\n\r INTERSECTION\n");
04E3 7468      1223            mov     a,#__str_4
04E5 C0E0      1224            push    acc
04E7 74A9      1225            mov     a,#(__str_4 >> 8)
04E9 C0E0      1226            push    acc
04EB 7480      1227            mov     a,#0x80
04ED C0E0      1228            push    acc
04EF 120100    1229            lcall   _printf
04F2 1581      1230            dec     sp
04F4 1581      1231            dec     sp
04F6 1581      1232            dec     sp
04F8           1233   ;        robot.c:152: turncar(currentstate + 2); //1 = right
04F8 AA98      1234            mov     r2,_currentstate
04FA E598      1235            mov     a,_currentstate
04FC 33        1236            rlc     a
04FD 95E0      1237            subb    a,acc
04FF FB        1238            mov     r3,a
0500 8A82      1239            mov     dpl,r2
0502 8B83      1240            mov     dph,r3
0504 A3        1241            inc     dptr
0505 A3        1242            inc     dptr
0506 120100    1243            lcall   _turncar
0509           1244   ;        robot.c:153: currentcmd = 0;
0509 75D800    1245            mov     _currentcmd,#0x00
050C           1246   ;        robot.c:155: break;
050C 020100    1247            ljmp    L002039?
050F           1248   ;        robot.c:158: case CMD_FORWARD:
050F           1249   L002032?:
050F           1250   ;        robot.c:160: printf("\nGO!\n");
050F 7468      1251            mov     a,#__str_6
0511 C0E0      1252            push    acc
0513 74AA      1253            mov     a,#(__str_6 >> 8)
0515 C0E0      1254            push    acc
0517 7480      1255            mov     a,#0x80
0519 C0E0      1256            push    acc
051B 120100    1257            lcall   _printf
051E 1581      1258            dec     sp
0520 1581      1259            dec     sp
0522 1581      1260            dec     sp
0524           1261   ;        robot.c:161: currentstate = 1;
0524 759801    1262            mov     _currentstate,#0x01
0527           1263   ;        robot.c:162: currentcmd = 0;
0527 75D800    1264            mov     _currentcmd,#0x00
052A           1265   ;        robot.c:163: break;
052A 020100    1266            ljmp    L002039?
052D           1267   ;        robot.c:166: case CMD_REVERSE:
052D           1268   L002033?:
052D           1269   ;        robot.c:168: printf("\nReverse Reverse!\n");
052D 74A8      1270            mov     a,#__str_7
052F C0E0      1271            push    acc
0531 74AA      1272            mov     a,#(__str_7 >> 8)
0533 C0E0      1273            push    acc
0535 7480      1274            mov     a,#0x80
0537 C0E0      1275            push    acc
0539 120100    1276            lcall   _printf
053C 1581      1277            dec     sp
053E 1581      1278            dec     sp
0540 1581      1279            dec     sp
0542           1280   ;        robot.c:169: currentstate = 2;
0542 759802    1281            mov     _currentstate,#0x02
0545           1282   ;        robot.c:170: currentcmd = 0;
0545 75D800    1283            mov     _currentcmd,#0x00
0548           1284   ;        robot.c:171: break;
0548 020100    1285            ljmp    L002039?
054B           1286   ;        robot.c:174: case CMD_STOP:
054B           1287   L002034?:
054B           1288   ;        robot.c:176: printf("\nHALT peasants!\n");
054B 74E8      1289            mov     a,#__str_8
054D C0E0      1290            push    acc
054F 74AA      1291            mov     a,#(__str_8 >> 8)
0551 C0E0      1292            push    acc
0553 7480      1293            mov     a,#0x80
0555 C0E0      1294            push    acc
0557 120100    1295            lcall   _printf
055A 1581      1296            dec     sp
055C 1581      1297            dec     sp
055E 1581      1298            dec     sp
0560           1299   ;        robot.c:177: currentstate = 3;
0560 759803    1300            mov     _currentstate,#0x03
0563           1301   ;        robot.c:178: currentcmd = 0;
0563 75D800    1302            mov     _currentcmd,#0x00
0566           1303   ;        robot.c:179: break;
0566 020100    1304            ljmp    L002039?
0569           1305   ;        robot.c:182: case CMD_UTURN:
0569           1306   L002035?:
0569           1307   ;        robot.c:183: uturn();
0569 120100    1308            lcall   _uturn
056C           1309   ;        robot.c:184: printf("\nUTURN\n");
056C 7428      1310            mov     a,#__str_9
056E C0E0      1311            push    acc
0570 74AB      1312            mov     a,#(__str_9 >> 8)
0572 C0E0      1313            push    acc
0574 7480      1314            mov     a,#0x80
0576 C0E0      1315            push    acc
0578 120100    1316            lcall   _printf
057B 1581      1317            dec     sp
057D 1581      1318            dec     sp
057F 1581      1319            dec     sp
0581           1320   ;        robot.c:185: currentcmd = 0;
0581 75D800    1321            mov     _currentcmd,#0x00
0584           1322   ;        robot.c:186: break;
0584 020100    1323            ljmp    L002039?
0587           1324   ;        robot.c:189: default: 
0587           1325   L002036?:
0587           1326   ;        robot.c:190: currentstate = 1;
0587 759801    1327            mov     _currentstate,#0x01
058A           1328   ;        robot.c:191: }
058A 020100    1329            ljmp    L002039?
058D           1330   ;------------------------------------------------------------
058D           1331   ;Allocation info for local variables in function 'Timer2_ISR'
058D           1332   ;------------------------------------------------------------
058D           1333   ;------------------------------------------------------------
058D           1334   ;        robot.c:195: void Timer2_ISR (void) interrupt 5 {
058D           1335   ;        -----------------------------------------
058D           1336   ;         function Timer2_ISR
058D           1337   ;        -----------------------------------------
058D           1338   _Timer2_ISR:
058D C0E0      1339            push    acc
058F C0F0      1340            push    b
0591 C0D0      1341            push    psw
0593 75D000    1342            mov     psw,#0x00
0596           1343   ;        robot.c:196: TF2H = 0; // Clear Timer2 interrupt flag
0596 C2CF      1344            clr     _TF2H
0598           1345   ;        robot.c:198: pwm_count++;
0598 05D8      1346            inc     _pwm_count
059A           1347   ;        robot.c:199: if(pwm_count>100) pwm_count=0;
059A C3        1348            clr     c
059B 74E4      1349            mov     a,#(0x64 ^ 0x80)
059D 85D8F0    1350            mov     b,_pwm_count
05A0 63F080    1351            xrl     b,#0x80
05A3 95F0      1352            subb    a,b
05A5 5001      1353            jnc     L003002?
05A7 75D800    1354            mov     _pwm_count,#0x00
05AA           1355   L003002?:
05AA           1356   ;        robot.c:202: MOTOR_LEFT0 = pwm_count > pwm_Left0 ? 0 : 1; //p1.5
05AA C3        1357            clr     c
05AB E518      1358            mov     a,_pwm_Left0
05AD 6480      1359            xrl     a,#0x80
05AF 85D8F0    1360            mov     b,_pwm_count
05B2 63F080    1361            xrl     b,#0x80
05B5 95F0      1362            subb    a,b
05B7 9258      1363            mov  _Timer2_ISR_sloc0_1_0,c
05B9 B3        1364            cpl     c
05BA 9295      1365            mov     _P1_5,c
05BC           1366   ;        robot.c:203: MOTOR_LEFT1 = pwm_count > pwm_Left1 ? 0 : 1; //p1.6
05BC C3        1367            clr     c
05BD E5D8      1368            mov     a,_pwm_Left1
05BF 6480      1369            xrl     a,#0x80
05C1 85D8F0    1370            mov     b,_pwm_count
05C4 63F080    1371            xrl     b,#0x80
05C7 95F0      1372            subb    a,b
05C9 9258      1373            mov  _Timer2_ISR_sloc0_1_0,c
05CB B3        1374            cpl     c
05CC 9296      1375            mov     _P1_6,c
05CE           1376   ;        robot.c:204: MOTOR_RIGHT0 = pwm_count > pwm_Right0 ? 0 : 1; //p2.0
05CE C3        1377            clr     c
05CF E598      1378            mov     a,_pwm_Right0
05D1 6480      1379            xrl     a,#0x80
05D3 85D8F0    1380            mov     b,_pwm_count
05D6 63F080    1381            xrl     b,#0x80
05D9 95F0      1382            subb    a,b
05DB 9258      1383            mov  _Timer2_ISR_sloc0_1_0,c
05DD B3        1384            cpl     c
05DE 92A0      1385            mov     _P2_0,c
05E0           1386   ;        robot.c:205: MOTOR_RIGHT1 = pwm_count > pwm_Right1 ? 0 : 1; //p2.1
05E0 C3        1387            clr     c
05E1 E558      1388            mov     a,_pwm_Right1
05E3 6480      1389            xrl     a,#0x80
05E5 85D8F0    1390            mov     b,_pwm_count
05E8 63F080    1391            xrl     b,#0x80
05EB 95F0      1392            subb    a,b
05ED 9258      1393            mov  _Timer2_ISR_sloc0_1_0,c
05EF B3        1394            cpl     c
05F0 92A1      1395            mov     _P2_1,c
05F2 D0D0      1396            pop     psw
05F4 D0F0      1397            pop     b
05F6 D0E0      1398            pop     acc
05F8 32        1399            reti
05F9           1400   ;        eliminated unneeded push/pop dpl
05F9           1401   ;        eliminated unneeded push/pop dph
05F9           1402   ;------------------------------------------------------------
05F9           1403   ;Allocation info for local variables in function 'readData'
05F9           1404   ;------------------------------------------------------------
05F9           1405   ;prevcommand               Allocated to registers r2 
05F9           1406   ;command                   Allocated to registers r3 
05F9           1407   ;------------------------------------------------------------
05F9           1408   ;        robot.c:298: unsigned char readData(unsigned char prevcommand) {
05F9           1409   ;        -----------------------------------------
05F9           1410   ;         function readData
05F9           1411   ;        -----------------------------------------
05F9           1412   _readData:
05F9 AA82      1413            mov     r2,dpl
05FB           1414   ;        robot.c:299: unsigned char command = prevcommand;
05FB 8A03      1415            mov     ar3,r2
05FD           1416   ;        robot.c:300: if (!COMMAND_PIN) {
05FD 3091E8    1417            jnb     _P1_1,L004028?
0600 020100    1418            ljmp    L004010?
0603           1419   L004028?:
0603           1420   ;        robot.c:302: while (!COMMAND_PIN);
0603           1421   L004001?:
0603 309168    1422            jnb     _P1_1,L004001?
0606           1423   ;        robot.c:303: P1_4 = 1;
0606 D294      1424            setb    _P1_4
0608           1425   ;        robot.c:304: waitms((int)(CMDFRQ + CMDFRQ/2));
0608 900060    1426            mov     dptr,#0x0060
060B C002      1427            push    ar2
060D 120100    1428            lcall   _waitms
0610           1429   ;        robot.c:305: P1_4 = 0;
0610 C294      1430            clr     _P1_4
0612           1431   ;        robot.c:306: command |= COMMAND_PIN<<2;
0612 A291      1432            mov     c,_P1_1
0614 E4        1433            clr     a
0615 33        1434            rlc     a
0616 25E0      1435            add     a,acc
0618 25E0      1436            add     a,acc
061A FB        1437            mov     r3,a
061B           1438   ;        robot.c:307: waitms(CMDFRQ);
061B 900040    1439            mov     dptr,#0x0040
061E C003      1440            push    ar3
0620 120100    1441            lcall   _waitms
0623 D003      1442            pop     ar3
0625           1443   ;        robot.c:308: P1_4 = 1;
0625 D294      1444            setb    _P1_4
0627           1445   ;        robot.c:309: command |= COMMAND_PIN<<1;
0627 A291      1446            mov     c,_P1_1
0629 E4        1447            clr     a
062A 33        1448            rlc     a
062B 25E0      1449            add     a,acc
062D 4203      1450            orl     ar3,a
062F           1451   ;        robot.c:310: waitms(CMDFRQ);
062F 900040    1452            mov     dptr,#0x0040
0632 C003      1453            push    ar3
0634 120100    1454            lcall   _waitms
0637 D003      1455            pop     ar3
0639 D002      1456            pop     ar2
063B           1457   ;        robot.c:311: P1_4 = 0;
063B C294      1458            clr     _P1_4
063D           1459   ;        robot.c:312: command |= COMMAND_PIN;
063D A291      1460            mov     c,_P1_1
063F E4        1461            clr     a
0640 33        1462            rlc     a
0641 FC        1463            mov     r4,a
0642 4203      1464            orl     ar3,a
0644           1465   ;        robot.c:313: while (!COMMAND_PIN);
0644           1466   L004004?:
0644 3091A8    1467            jnb     _P1_1,L004004?
0647           1468   ;        robot.c:317: (command & 0x01) ? '1' : '0');
0647 EB        1469            mov     a,r3
0648 30E0E8    1470            jnb     acc.0,L004013?
064B 7C31      1471            mov     r4,#0x31
064D 8001      1472            sjmp    L004014?
064F           1473   L004013?:
064F 7C30      1474            mov     r4,#0x30
0651           1475   L004014?:
0651 EC        1476            mov     a,r4
0652 33        1477            rlc     a
0653 95E0      1478            subb    a,acc
0655 FD        1479            mov     r5,a
0656           1480   ;        robot.c:316: (command & 0x02) ? '1' : '0',
0656 EB        1481            mov     a,r3
0657 30E168    1482            jnb     acc.1,L004015?
065A 7E31      1483            mov     r6,#0x31
065C 8001      1484            sjmp    L004016?
065E           1485   L004015?:
065E 7E30      1486            mov     r6,#0x30
0660           1487   L004016?:
0660 EE        1488            mov     a,r6
0661 33        1489            rlc     a
0662 95E0      1490            subb    a,acc
0664 FF        1491            mov     r7,a
0665           1492   ;        robot.c:315: (command & 0x04) ? '1' : '0',
0665 EB        1493            mov     a,r3
0666 30E2E8    1494            jnb     acc.2,L004017?
0669 7831      1495            mov     r0,#0x31
066B 8001      1496            sjmp    L004018?
066D           1497   L004017?:
066D 7830      1498            mov     r0,#0x30
066F           1499   L004018?:
066F E8        1500            mov     a,r0
0670 33        1501            rlc     a
0671 95E0      1502            subb    a,acc
0673 F9        1503            mov     r1,a
0674           1504   ;        robot.c:314: printf("\nCommand received: 0b_0%c%c%c\n", 
0674 C002      1505            push    ar2
0676 C003      1506            push    ar3
0678 C004      1507            push    ar4
067A C005      1508            push    ar5
067C C006      1509            push    ar6
067E C007      1510            push    ar7
0680 C000      1511            push    ar0
0682 C001      1512            push    ar1
0684 7468      1513            mov     a,#__str_10
0686 C0E0      1514            push    acc
0688 74AE      1515            mov     a,#(__str_10 >> 8)
068A C0E0      1516            push    acc
068C 7480      1517            mov     a,#0x80
068E C0E0      1518            push    acc
0690 120100    1519            lcall   _printf
0693 E581      1520            mov     a,sp
0695 24F7      1521            add     a,#0xf7
0697 F581      1522            mov     sp,a
0699 D003      1523            pop     ar3
069B D002      1524            pop     ar2
069D           1525   ;        robot.c:318: if (command > 6) command = prevcommand; 
069D EB        1526            mov     a,r3
069E 24F9      1527            add     a,#0xff - 0x06
06A0 5001      1528            jnc     L004010?
06A2 8A03      1529            mov     ar3,r2
06A4           1530   L004010?:
06A4           1531   ;        robot.c:321: return command;
06A4 8B82      1532            mov     dpl,r3
06A6 22        1533            ret
06A7           1534   ;------------------------------------------------------------
06A7           1535   ;Allocation info for local variables in function 'linetrack'
06A7           1536   ;------------------------------------------------------------
06A7           1537   ;forwardbackward           Allocated to registers r2 r3 
06A7           1538   ;vleft                     Allocated with name '_linetrack_vleft_1_80'
06A7           1539   ;vright                    Allocated with name '_linetrack_vright_1_80'
06A7           1540   ;sloc0                     Allocated with name '_linetrack_sloc0_1_0'
06A7           1541   ;sloc1                     Allocated with name '_linetrack_sloc1_1_0'
06A7           1542   ;------------------------------------------------------------
06A7           1543   ;        robot.c:328: void linetrack (int forwardbackward) {
06A7           1544   ;        -----------------------------------------
06A7           1545   ;         function linetrack
06A7           1546   ;        -----------------------------------------
06A7           1547   _linetrack:
06A7 AA82      1548            mov     r2,dpl
06A9 AB83      1549            mov     r3,dph
06AB           1550   ;        robot.c:336: if (forwardbackward == 0) {
06AB EA        1551            mov     a,r2
06AC 4B        1552            orl     a,r3
06AD 6001      1553            jz      L005010?
06AF 020100    1554            ljmp    L005004?
06B2           1555   L005010?:
06B2           1556   ;        robot.c:337: vleft=Volts_at_Pin(TANK_FL);
06B2 75820B    1557            mov     dpl,#0x0B
06B5 120100    1558            lcall   _Volts_at_Pin
06B8 8582A8    1559            mov     _linetrack_vleft_1_80,dpl
06BB 8583A9    1560            mov     (_linetrack_vleft_1_80 + 1),dph
06BE 85F0AA    1561            mov     (_linetrack_vleft_1_80 + 2),b
06C1 F5AB      1562            mov     (_linetrack_vleft_1_80 + 3),a
06C3           1563   ;        robot.c:338: vright=Volts_at_Pin(TANK_FR);
06C3 75820C    1564            mov     dpl,#0x0C
06C6 120100    1565            lcall   _Volts_at_Pin
06C9 8582F8    1566            mov     _linetrack_vright_1_80,dpl
06CC 8583F9    1567            mov     (_linetrack_vright_1_80 + 1),dph
06CF 85F0FA    1568            mov     (_linetrack_vright_1_80 + 2),b
06D2 F5FB      1569            mov     (_linetrack_vright_1_80 + 3),a
06D4           1570   ;        robot.c:341: pwm_Left0 = -1;
06D4 7518FF    1571            mov     _pwm_Left0,#0xFF
06D7           1572   ;        robot.c:342: pwm_Left1 = vright*vright*75/(vright*vright+vleft*vleft);
06D7 C0F8      1573            push    _linetrack_vright_1_80
06D9 C0F9      1574            push    (_linetrack_vright_1_80 + 1)
06DB C0FA      1575            push    (_linetrack_vright_1_80 + 2)
06DD C0FB      1576            push    (_linetrack_vright_1_80 + 3)
06DF 85F882    1577            mov     dpl,_linetrack_vright_1_80
06E2 85F983    1578            mov     dph,(_linetrack_vright_1_80 + 1)
06E5 85FAF0    1579            mov     b,(_linetrack_vright_1_80 + 2)
06E8 E5FB      1580            mov     a,(_linetrack_vright_1_80 + 3)
06EA 120100    1581            lcall   ___fsmul
06ED AC82      1582            mov     r4,dpl
06EF AD83      1583            mov     r5,dph
06F1 AEF0      1584            mov     r6,b
06F3 FF        1585            mov     r7,a
06F4 E581      1586            mov     a,sp
06F6 24FC      1587            add     a,#0xfc
06F8 F581      1588            mov     sp,a
06FA C004      1589            push    ar4
06FC C005      1590            push    ar5
06FE C006      1591            push    ar6
0700 C007      1592            push    ar7
0702 900000    1593            mov     dptr,#0x0000
0705 75F096    1594            mov     b,#0x96
0708 7442      1595            mov     a,#0x42
070A 120100    1596            lcall   ___fsmul
070D 858248    1597            mov     _linetrack_sloc0_1_0,dpl
0710 858349    1598            mov     (_linetrack_sloc0_1_0 + 1),dph
0713 85F04A    1599            mov     (_linetrack_sloc0_1_0 + 2),b
0716 F54B      1600            mov     (_linetrack_sloc0_1_0 + 3),a
0718 E581      1601            mov     a,sp
071A 24FC      1602            add     a,#0xfc
071C F581      1603            mov     sp,a
071E C0F8      1604            push    _linetrack_vright_1_80
0720 C0F9      1605            push    (_linetrack_vright_1_80 + 1)
0722 C0FA      1606            push    (_linetrack_vright_1_80 + 2)
0724 C0FB      1607            push    (_linetrack_vright_1_80 + 3)
0726 85F882    1608            mov     dpl,_linetrack_vright_1_80
0729 85F983    1609            mov     dph,(_linetrack_vright_1_80 + 1)
072C 85FAF0    1610            mov     b,(_linetrack_vright_1_80 + 2)
072F E5FB      1611            mov     a,(_linetrack_vright_1_80 + 3)
0731 120100    1612            lcall   ___fsmul
0734 858298    1613            mov     _linetrack_sloc1_1_0,dpl
0737 858399    1614            mov     (_linetrack_sloc1_1_0 + 1),dph
073A 85F09A    1615            mov     (_linetrack_sloc1_1_0 + 2),b
073D F59B      1616            mov     (_linetrack_sloc1_1_0 + 3),a
073F E581      1617            mov     a,sp
0741 24FC      1618            add     a,#0xfc
0743 F581      1619            mov     sp,a
0745 C0A8      1620            push    _linetrack_vleft_1_80
0747 C0A9      1621            push    (_linetrack_vleft_1_80 + 1)
0749 C0AA      1622            push    (_linetrack_vleft_1_80 + 2)
074B C0AB      1623            push    (_linetrack_vleft_1_80 + 3)
074D 85A882    1624            mov     dpl,_linetrack_vleft_1_80
0750 85A983    1625            mov     dph,(_linetrack_vleft_1_80 + 1)
0753 85AAF0    1626            mov     b,(_linetrack_vleft_1_80 + 2)
0756 E5AB      1627            mov     a,(_linetrack_vleft_1_80 + 3)
0758 120100    1628            lcall   ___fsmul
075B AE82      1629            mov     r6,dpl
075D AF83      1630            mov     r7,dph
075F ACF0      1631            mov     r4,b
0761 FD        1632            mov     r5,a
0762 E581      1633            mov     a,sp
0764 24FC      1634            add     a,#0xfc
0766 F581      1635            mov     sp,a
0768 C006      1636            push    ar6
076A C007      1637            push    ar7
076C C004      1638            push    ar4
076E C005      1639            push    ar5
0770 859882    1640            mov     dpl,_linetrack_sloc1_1_0
0773 859983    1641            mov     dph,(_linetrack_sloc1_1_0 + 1)
0776 859AF0    1642            mov     b,(_linetrack_sloc1_1_0 + 2)
0779 E59B      1643            mov     a,(_linetrack_sloc1_1_0 + 3)
077B 120100    1644            lcall   ___fsadd
077E AC82      1645            mov     r4,dpl
0780 AD83      1646            mov     r5,dph
0782 AEF0      1647            mov     r6,b
0784 FF        1648            mov     r7,a
0785 E581      1649            mov     a,sp
0787 24FC      1650            add     a,#0xfc
0789 F581      1651            mov     sp,a
078B C004      1652            push    ar4
078D C005      1653            push    ar5
078F C006      1654            push    ar6
0791 C007      1655            push    ar7
0793 854882    1656            mov     dpl,_linetrack_sloc0_1_0
0796 854983    1657            mov     dph,(_linetrack_sloc0_1_0 + 1)
0799 854AF0    1658            mov     b,(_linetrack_sloc0_1_0 + 2)
079C E54B      1659            mov     a,(_linetrack_sloc0_1_0 + 3)
079E 120100    1660            lcall   ___fsdiv
07A1 AC82      1661            mov     r4,dpl
07A3 AD83      1662            mov     r5,dph
07A5 AEF0      1663            mov     r6,b
07A7 FF        1664            mov     r7,a
07A8 E581      1665            mov     a,sp
07AA 24FC      1666            add     a,#0xfc
07AC F581      1667            mov     sp,a
07AE 8C82      1668            mov     dpl,r4
07B0 8D83      1669            mov     dph,r5
07B2 8EF0      1670            mov     b,r6
07B4 EF        1671            mov     a,r7
07B5 120100    1672            lcall   ___fs2schar
07B8 8582D8    1673            mov     _pwm_Left1,dpl
07BB           1674   ;        robot.c:343: pwm_Right1 = -1;
07BB 7558FF    1675            mov     _pwm_Right1,#0xFF
07BE           1676   ;        robot.c:344: pwm_Right0 = vleft*vleft*75/(vright*vright+vleft*vleft);
07BE C0A8      1677            push    _linetrack_vleft_1_80
07C0 C0A9      1678            push    (_linetrack_vleft_1_80 + 1)
07C2 C0AA      1679            push    (_linetrack_vleft_1_80 + 2)
07C4 C0AB      1680            push    (_linetrack_vleft_1_80 + 3)
07C6 85A882    1681            mov     dpl,_linetrack_vleft_1_80
07C9 85A983    1682            mov     dph,(_linetrack_vleft_1_80 + 1)
07CC 85AAF0    1683            mov     b,(_linetrack_vleft_1_80 + 2)
07CF E5AB      1684            mov     a,(_linetrack_vleft_1_80 + 3)
07D1 120100    1685            lcall   ___fsmul
07D4 AC82      1686            mov     r4,dpl
07D6 AD83      1687            mov     r5,dph
07D8 AEF0      1688            mov     r6,b
07DA FF        1689            mov     r7,a
07DB E581      1690            mov     a,sp
07DD 24FC      1691            add     a,#0xfc
07DF F581      1692            mov     sp,a
07E1 C004      1693            push    ar4
07E3 C005      1694            push    ar5
07E5 C006      1695            push    ar6
07E7 C007      1696            push    ar7
07E9 900000    1697            mov     dptr,#0x0000
07EC 75F096    1698            mov     b,#0x96
07EF 7442      1699            mov     a,#0x42
07F1 120100    1700            lcall   ___fsmul
07F4 858298    1701            mov     _linetrack_sloc1_1_0,dpl
07F7 858399    1702            mov     (_linetrack_sloc1_1_0 + 1),dph
07FA 85F09A    1703            mov     (_linetrack_sloc1_1_0 + 2),b
07FD F59B      1704            mov     (_linetrack_sloc1_1_0 + 3),a
07FF E581      1705            mov     a,sp
0801 24FC      1706            add     a,#0xfc
0803 F581      1707            mov     sp,a
0805 C0F8      1708            push    _linetrack_vright_1_80
0807 C0F9      1709            push    (_linetrack_vright_1_80 + 1)
0809 C0FA      1710            push    (_linetrack_vright_1_80 + 2)
080B C0FB      1711            push    (_linetrack_vright_1_80 + 3)
080D 85F882    1712            mov     dpl,_linetrack_vright_1_80
0810 85F983    1713            mov     dph,(_linetrack_vright_1_80 + 1)
0813 85FAF0    1714            mov     b,(_linetrack_vright_1_80 + 2)
0816 E5FB      1715            mov     a,(_linetrack_vright_1_80 + 3)
0818 120100    1716            lcall   ___fsmul
081B 858248    1717            mov     _linetrack_sloc0_1_0,dpl
081E 858349    1718            mov     (_linetrack_sloc0_1_0 + 1),dph
0821 85F04A    1719            mov     (_linetrack_sloc0_1_0 + 2),b
0824 F54B      1720            mov     (_linetrack_sloc0_1_0 + 3),a
0826 E581      1721            mov     a,sp
0828 24FC      1722            add     a,#0xfc
082A F581      1723            mov     sp,a
082C C0A8      1724            push    _linetrack_vleft_1_80
082E C0A9      1725            push    (_linetrack_vleft_1_80 + 1)
0830 C0AA      1726            push    (_linetrack_vleft_1_80 + 2)
0832 C0AB      1727            push    (_linetrack_vleft_1_80 + 3)
0834 85A882    1728            mov     dpl,_linetrack_vleft_1_80
0837 85A983    1729            mov     dph,(_linetrack_vleft_1_80 + 1)
083A 85AAF0    1730            mov     b,(_linetrack_vleft_1_80 + 2)
083D E5AB      1731            mov     a,(_linetrack_vleft_1_80 + 3)
083F 120100    1732            lcall   ___fsmul
0842 AE82      1733            mov     r6,dpl
0844 AF83      1734            mov     r7,dph
0846 ACF0      1735            mov     r4,b
0848 FD        1736            mov     r5,a
0849 E581      1737            mov     a,sp
084B 24FC      1738            add     a,#0xfc
084D F581      1739            mov     sp,a
084F C006      1740            push    ar6
0851 C007      1741            push    ar7
0853 C004      1742            push    ar4
0855 C005      1743            push    ar5
0857 854882    1744            mov     dpl,_linetrack_sloc0_1_0
085A 854983    1745            mov     dph,(_linetrack_sloc0_1_0 + 1)
085D 854AF0    1746            mov     b,(_linetrack_sloc0_1_0 + 2)
0860 E54B      1747            mov     a,(_linetrack_sloc0_1_0 + 3)
0862 120100    1748            lcall   ___fsadd
0865 AC82      1749            mov     r4,dpl
0867 AD83      1750            mov     r5,dph
0869 AEF0      1751            mov     r6,b
086B FF        1752            mov     r7,a
086C E581      1753            mov     a,sp
086E 24FC      1754            add     a,#0xfc
0870 F581      1755            mov     sp,a
0872 C004      1756            push    ar4
0874 C005      1757            push    ar5
0876 C006      1758            push    ar6
0878 C007      1759            push    ar7
087A 859882    1760            mov     dpl,_linetrack_sloc1_1_0
087D 859983    1761            mov     dph,(_linetrack_sloc1_1_0 + 1)
0880 859AF0    1762            mov     b,(_linetrack_sloc1_1_0 + 2)
0883 E59B      1763            mov     a,(_linetrack_sloc1_1_0 + 3)
0885 120100    1764            lcall   ___fsdiv
0888 AC82      1765            mov     r4,dpl
088A AD83      1766            mov     r5,dph
088C AEF0      1767            mov     r6,b
088E FF        1768            mov     r7,a
088F E581      1769            mov     a,sp
0891 24FC      1770            add     a,#0xfc
0893 F581      1771            mov     sp,a
0895 8C82      1772            mov     dpl,r4
0897 8D83      1773            mov     dph,r5
0899 8EF0      1774            mov     b,r6
089B EF        1775            mov     a,r7
089C 120100    1776            lcall   ___fs2schar
089F 858298    1777            mov     _pwm_Right0,dpl
08A2 22        1778            ret
08A3           1779   L005004?:
08A3           1780   ;        robot.c:345: } else if (forwardbackward == 1) {
08A3 BA0128    1781            cjne    r2,#0x01,L005011?
08A6 BB0028    1782            cjne    r3,#0x00,L005011?
08A9 8001      1783            sjmp    L005012?
08AB           1784   L005011?:
08AB 22        1785            ret
08AC           1786   L005012?:
08AC           1787   ;        robot.c:348: vleft=Volts_at_Pin(TANK_RL);
08AC 75820D    1788            mov     dpl,#0x0D
08AF 120100    1789            lcall   _Volts_at_Pin
08B2 8582A8    1790            mov     _linetrack_vleft_1_80,dpl
08B5 8583A9    1791            mov     (_linetrack_vleft_1_80 + 1),dph
08B8 85F0AA    1792            mov     (_linetrack_vleft_1_80 + 2),b
08BB F5AB      1793            mov     (_linetrack_vleft_1_80 + 3),a
08BD           1794   ;        robot.c:349: vright=Volts_at_Pin(TANK_RR);
08BD 75820E    1795            mov     dpl,#0x0E
08C0 120100    1796            lcall   _Volts_at_Pin
08C3 8582F8    1797            mov     _linetrack_vright_1_80,dpl
08C6 8583F9    1798            mov     (_linetrack_vright_1_80 + 1),dph
08C9 85F0FA    1799            mov     (_linetrack_vright_1_80 + 2),b
08CC F5FB      1800            mov     (_linetrack_vright_1_80 + 3),a
08CE           1801   ;        robot.c:352: pwm_Left1 = -1;
08CE 75D8FF    1802            mov     _pwm_Left1,#0xFF
08D1           1803   ;        robot.c:353: pwm_Left0 = vright*vright*75/(vright*vright+vleft*vleft);
08D1 C0F8      1804            push    _linetrack_vright_1_80
08D3 C0F9      1805            push    (_linetrack_vright_1_80 + 1)
08D5 C0FA      1806            push    (_linetrack_vright_1_80 + 2)
08D7 C0FB      1807            push    (_linetrack_vright_1_80 + 3)
08D9 85F882    1808            mov     dpl,_linetrack_vright_1_80
08DC 85F983    1809            mov     dph,(_linetrack_vright_1_80 + 1)
08DF 85FAF0    1810            mov     b,(_linetrack_vright_1_80 + 2)
08E2 E5FB      1811            mov     a,(_linetrack_vright_1_80 + 3)
08E4 120100    1812            lcall   ___fsmul
08E7 AA82      1813            mov     r2,dpl
08E9 AB83      1814            mov     r3,dph
08EB ACF0      1815            mov     r4,b
08ED FD        1816            mov     r5,a
08EE E581      1817            mov     a,sp
08F0 24FC      1818            add     a,#0xfc
08F2 F581      1819            mov     sp,a
08F4 C002      1820            push    ar2
08F6 C003      1821            push    ar3
08F8 C004      1822            push    ar4
08FA C005      1823            push    ar5
08FC 900000    1824            mov     dptr,#0x0000
08FF 75F096    1825            mov     b,#0x96
0902 7442      1826            mov     a,#0x42
0904 120100    1827            lcall   ___fsmul
0907 AA82      1828            mov     r2,dpl
0909 AB83      1829            mov     r3,dph
090B ACF0      1830            mov     r4,b
090D FD        1831            mov     r5,a
090E E581      1832            mov     a,sp
0910 24FC      1833            add     a,#0xfc
0912 F581      1834            mov     sp,a
0914 C002      1835            push    ar2
0916 C003      1836            push    ar3
0918 C004      1837            push    ar4
091A C005      1838            push    ar5
091C C0F8      1839            push    _linetrack_vright_1_80
091E C0F9      1840            push    (_linetrack_vright_1_80 + 1)
0920 C0FA      1841            push    (_linetrack_vright_1_80 + 2)
0922 C0FB      1842            push    (_linetrack_vright_1_80 + 3)
0924 85F882    1843            mov     dpl,_linetrack_vright_1_80
0927 85F983    1844            mov     dph,(_linetrack_vright_1_80 + 1)
092A 85FAF0    1845            mov     b,(_linetrack_vright_1_80 + 2)
092D E5FB      1846            mov     a,(_linetrack_vright_1_80 + 3)
092F 120100    1847            lcall   ___fsmul
0932 858298    1848            mov     _linetrack_sloc1_1_0,dpl
0935 858399    1849            mov     (_linetrack_sloc1_1_0 + 1),dph
0938 85F09A    1850            mov     (_linetrack_sloc1_1_0 + 2),b
093B F59B      1851            mov     (_linetrack_sloc1_1_0 + 3),a
093D E581      1852            mov     a,sp
093F 24FC      1853            add     a,#0xfc
0941 F581      1854            mov     sp,a
0943 C0A8      1855            push    _linetrack_vleft_1_80
0945 C0A9      1856            push    (_linetrack_vleft_1_80 + 1)
0947 C0AA      1857            push    (_linetrack_vleft_1_80 + 2)
0949 C0AB      1858            push    (_linetrack_vleft_1_80 + 3)
094B 85A882    1859            mov     dpl,_linetrack_vleft_1_80
094E 85A983    1860            mov     dph,(_linetrack_vleft_1_80 + 1)
0951 85AAF0    1861            mov     b,(_linetrack_vleft_1_80 + 2)
0954 E5AB      1862            mov     a,(_linetrack_vleft_1_80 + 3)
0956 120100    1863            lcall   ___fsmul
0959 AE82      1864            mov     r6,dpl
095B AF83      1865            mov     r7,dph
095D A8F0      1866            mov     r0,b
095F F9        1867            mov     r1,a
0960 E581      1868            mov     a,sp
0962 24FC      1869            add     a,#0xfc
0964 F581      1870            mov     sp,a
0966 C006      1871            push    ar6
0968 C007      1872            push    ar7
096A C000      1873            push    ar0
096C C001      1874            push    ar1
096E 859882    1875            mov     dpl,_linetrack_sloc1_1_0
0971 859983    1876            mov     dph,(_linetrack_sloc1_1_0 + 1)
0974 859AF0    1877            mov     b,(_linetrack_sloc1_1_0 + 2)
0977 E59B      1878            mov     a,(_linetrack_sloc1_1_0 + 3)
0979 120100    1879            lcall   ___fsadd
097C AE82      1880            mov     r6,dpl
097E AF83      1881            mov     r7,dph
0980 A8F0      1882            mov     r0,b
0982 F9        1883            mov     r1,a
0983 E581      1884            mov     a,sp
0985 24FC      1885            add     a,#0xfc
0987 F581      1886            mov     sp,a
0989 D005      1887            pop     ar5
098B D004      1888            pop     ar4
098D D003      1889            pop     ar3
098F D002      1890            pop     ar2
0991 C006      1891            push    ar6
0993 C007      1892            push    ar7
0995 C000      1893            push    ar0
0997 C001      1894            push    ar1
0999 8A82      1895            mov     dpl,r2
099B 8B83      1896            mov     dph,r3
099D 8CF0      1897            mov     b,r4
099F ED        1898            mov     a,r5
09A0 120100    1899            lcall   ___fsdiv
09A3 AA82      1900            mov     r2,dpl
09A5 AB83      1901            mov     r3,dph
09A7 ACF0      1902            mov     r4,b
09A9 FD        1903            mov     r5,a
09AA E581      1904            mov     a,sp
09AC 24FC      1905            add     a,#0xfc
09AE F581      1906            mov     sp,a
09B0 8A82      1907            mov     dpl,r2
09B2 8B83      1908            mov     dph,r3
09B4 8CF0      1909            mov     b,r4
09B6 ED        1910            mov     a,r5
09B7 120100    1911            lcall   ___fs2schar
09BA 858218    1912            mov     _pwm_Left0,dpl
09BD           1913   ;        robot.c:354: pwm_Right0 = -1;
09BD 7598FF    1914            mov     _pwm_Right0,#0xFF
09C0           1915   ;        robot.c:355: pwm_Right1 = vleft*vleft*75/(vright*vright+vleft*vleft);
09C0 C0A8      1916            push    _linetrack_vleft_1_80
09C2 C0A9      1917            push    (_linetrack_vleft_1_80 + 1)
09C4 C0AA      1918            push    (_linetrack_vleft_1_80 + 2)
09C6 C0AB      1919            push    (_linetrack_vleft_1_80 + 3)
09C8 85A882    1920            mov     dpl,_linetrack_vleft_1_80
09CB 85A983    1921            mov     dph,(_linetrack_vleft_1_80 + 1)
09CE 85AAF0    1922            mov     b,(_linetrack_vleft_1_80 + 2)
09D1 E5AB      1923            mov     a,(_linetrack_vleft_1_80 + 3)
09D3 120100    1924            lcall   ___fsmul
09D6 AA82      1925            mov     r2,dpl
09D8 AB83      1926            mov     r3,dph
09DA ACF0      1927            mov     r4,b
09DC FD        1928            mov     r5,a
09DD E581      1929            mov     a,sp
09DF 24FC      1930            add     a,#0xfc
09E1 F581      1931            mov     sp,a
09E3 C002      1932            push    ar2
09E5 C003      1933            push    ar3
09E7 C004      1934            push    ar4
09E9 C005      1935            push    ar5
09EB 900000    1936            mov     dptr,#0x0000
09EE 75F096    1937            mov     b,#0x96
09F1 7442      1938            mov     a,#0x42
09F3 120100    1939            lcall   ___fsmul
09F6 AA82      1940            mov     r2,dpl
09F8 AB83      1941            mov     r3,dph
09FA ACF0      1942            mov     r4,b
09FC FD        1943            mov     r5,a
09FD E581      1944            mov     a,sp
09FF 24FC      1945            add     a,#0xfc
0A01 F581      1946            mov     sp,a
0A03 C002      1947            push    ar2
0A05 C003      1948            push    ar3
0A07 C004      1949            push    ar4
0A09 C005      1950            push    ar5
0A0B C0F8      1951            push    _linetrack_vright_1_80
0A0D C0F9      1952            push    (_linetrack_vright_1_80 + 1)
0A0F C0FA      1953            push    (_linetrack_vright_1_80 + 2)
0A11 C0FB      1954            push    (_linetrack_vright_1_80 + 3)
0A13 85F882    1955            mov     dpl,_linetrack_vright_1_80
0A16 85F983    1956            mov     dph,(_linetrack_vright_1_80 + 1)
0A19 85FAF0    1957            mov     b,(_linetrack_vright_1_80 + 2)
0A1C E5FB      1958            mov     a,(_linetrack_vright_1_80 + 3)
0A1E 120100    1959            lcall   ___fsmul
0A21 858298    1960            mov     _linetrack_sloc1_1_0,dpl
0A24 858399    1961            mov     (_linetrack_sloc1_1_0 + 1),dph
0A27 85F09A    1962            mov     (_linetrack_sloc1_1_0 + 2),b
0A2A F59B      1963            mov     (_linetrack_sloc1_1_0 + 3),a
0A2C E581      1964            mov     a,sp
0A2E 24FC      1965            add     a,#0xfc
0A30 F581      1966            mov     sp,a
0A32 C0A8      1967            push    _linetrack_vleft_1_80
0A34 C0A9      1968            push    (_linetrack_vleft_1_80 + 1)
0A36 C0AA      1969            push    (_linetrack_vleft_1_80 + 2)
0A38 C0AB      1970            push    (_linetrack_vleft_1_80 + 3)
0A3A 85A882    1971            mov     dpl,_linetrack_vleft_1_80
0A3D 85A983    1972            mov     dph,(_linetrack_vleft_1_80 + 1)
0A40 85AAF0    1973            mov     b,(_linetrack_vleft_1_80 + 2)
0A43 E5AB      1974            mov     a,(_linetrack_vleft_1_80 + 3)
0A45 120100    1975            lcall   ___fsmul
0A48 AE82      1976            mov     r6,dpl
0A4A AF83      1977            mov     r7,dph
0A4C A8F0      1978            mov     r0,b
0A4E F9        1979            mov     r1,a
0A4F E581      1980            mov     a,sp
0A51 24FC      1981            add     a,#0xfc
0A53 F581      1982            mov     sp,a
0A55 C006      1983            push    ar6
0A57 C007      1984            push    ar7
0A59 C000      1985            push    ar0
0A5B C001      1986            push    ar1
0A5D 859882    1987            mov     dpl,_linetrack_sloc1_1_0
0A60 859983    1988            mov     dph,(_linetrack_sloc1_1_0 + 1)
0A63 859AF0    1989            mov     b,(_linetrack_sloc1_1_0 + 2)
0A66 E59B      1990            mov     a,(_linetrack_sloc1_1_0 + 3)
0A68 120100    1991            lcall   ___fsadd
0A6B AE82      1992            mov     r6,dpl
0A6D AF83      1993            mov     r7,dph
0A6F A8F0      1994            mov     r0,b
0A71 F9        1995            mov     r1,a
0A72 E581      1996            mov     a,sp
0A74 24FC      1997            add     a,#0xfc
0A76 F581      1998            mov     sp,a
0A78 D005      1999            pop     ar5
0A7A D004      2000            pop     ar4
0A7C D003      2001            pop     ar3
0A7E D002      2002            pop     ar2
0A80 C006      2003            push    ar6
0A82 C007      2004            push    ar7
0A84 C000      2005            push    ar0
0A86 C001      2006            push    ar1
0A88 8A82      2007            mov     dpl,r2
0A8A 8B83      2008            mov     dph,r3
0A8C 8CF0      2009            mov     b,r4
0A8E ED        2010            mov     a,r5
0A8F 120100    2011            lcall   ___fsdiv
0A92 AA82      2012            mov     r2,dpl
0A94 AB83      2013            mov     r3,dph
0A96 ACF0      2014            mov     r4,b
0A98 FD        2015            mov     r5,a
0A99 E581      2016            mov     a,sp
0A9B 24FC      2017            add     a,#0xfc
0A9D F581      2018            mov     sp,a
0A9F 8A82      2019            mov     dpl,r2
0AA1 8B83      2020            mov     dph,r3
0AA3 8CF0      2021            mov     b,r4
0AA5 ED        2022            mov     a,r5
0AA6 120100    2023            lcall   ___fs2schar
0AA9 858258    2024            mov     _pwm_Right1,dpl
0AAC 22        2025            ret
0AAD           2026   ;------------------------------------------------------------
0AAD           2027   ;Allocation info for local variables in function 'stopcar'
0AAD           2028   ;------------------------------------------------------------
0AAD           2029   ;------------------------------------------------------------
0AAD           2030   ;        robot.c:363: void stopcar(void) {
0AAD           2031   ;        -----------------------------------------
0AAD           2032   ;         function stopcar
0AAD           2033   ;        -----------------------------------------
0AAD           2034   _stopcar:
0AAD           2035   ;        robot.c:365: pwm_Left1 = -1;
0AAD 75D8FF    2036            mov     _pwm_Left1,#0xFF
0AB0           2037   ;        robot.c:366: pwm_Right1 = -1;
0AB0 7558FF    2038            mov     _pwm_Right1,#0xFF
0AB3           2039   ;        robot.c:367: pwm_Left0 = -1;
0AB3 7518FF    2040            mov     _pwm_Left0,#0xFF
0AB6           2041   ;        robot.c:368: pwm_Right0 = -1;
0AB6 7598FF    2042            mov     _pwm_Right0,#0xFF
0AB9 22        2043            ret
0ABA           2044   ;------------------------------------------------------------
0ABA           2045   ;Allocation info for local variables in function 'turncar'
0ABA           2046   ;------------------------------------------------------------
0ABA           2047   ;leftright                 Allocated to registers r2 r3 
0ABA           2048   ;v                         Allocated with name '_turncar_v_1_86'
0ABA           2049   ;direction                 Allocated with name '_turncar_direction_1_86'
0ABA           2050   ;------------------------------------------------------------
0ABA           2051   ;        robot.c:374: void turncar (int leftright) {
0ABA           2052   ;        -----------------------------------------
0ABA           2053   ;         function turncar
0ABA           2054   ;        -----------------------------------------
0ABA           2055   _turncar:
0ABA AA82      2056            mov     r2,dpl
0ABC AB83      2057            mov     r3,dph
0ABE           2058   ;        robot.c:383: pwm_Left0 = -1;
0ABE 7518FF    2059            mov     _pwm_Left0,#0xFF
0AC1           2060   ;        robot.c:384: pwm_Left1 = -1;
0AC1 75D8FF    2061            mov     _pwm_Left1,#0xFF
0AC4           2062   ;        robot.c:385: pwm_Right0 = -1;
0AC4 7598FF    2063            mov     _pwm_Right0,#0xFF
0AC7           2064   ;        robot.c:386: pwm_Right1 = -1;
0AC7 7558FF    2065            mov     _pwm_Right1,#0xFF
0ACA           2066   ;        robot.c:388: direction = currentstate - 1;
0ACA E598      2067            mov     a,_currentstate
0ACC 14        2068            dec     a
0ACD F528      2069            mov     _turncar_direction_1_86,a
0ACF           2070   ;        robot.c:391: if (leftright == 1) {
0ACF BA01A8    2071            cjne    r2,#0x01,L007062?
0AD2 BB00A8    2072            cjne    r3,#0x00,L007062?
0AD5 8001      2073            sjmp    L007063?
0AD7           2074   L007062?:
0AD7 020100    2075            ljmp    L007022?
0ADA           2076   L007063?:
0ADA           2077   ;        robot.c:393: pwm_Right0 = 100;
0ADA 759864    2078            mov     _pwm_Right0,#0x64
0ADD           2079   ;        robot.c:396: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0ADD E528      2080            mov     a,_turncar_direction_1_86
0ADF 6001      2081            jz      L007026?
0AE1 75820C    2082            mov     dpl,#0x0C
0AE4 120100    2083            lcall   _Volts_at_Pin
0AE7 AC82      2084            mov     r4,dpl
0AE9 AD83      2085            mov     r5,dph
0AEB AEF0      2086            mov     r6,b
0AED FF        2087            mov     r7,a
0AEE 8001      2088            sjmp    L007027?
0AF0           2089   L007026?:
0AF0 75820E    2090            mov     dpl,#0x0E
0AF3 120100    2091            lcall   _Volts_at_Pin
0AF6 AC82      2092            mov     r4,dpl
0AF8 AD83      2093            mov     r5,dph
0AFA AEF0      2094            mov     r6,b
0AFC FF        2095            mov     r7,a
0AFD           2096   L007027?:
0AFD 8CD8      2097            mov     _turncar_v_1_86,r4
0AFF 8DD9      2098            mov     (_turncar_v_1_86 + 1),r5
0B01 8EDA      2099            mov     (_turncar_v_1_86 + 2),r6
0B03 8FDB      2100            mov     (_turncar_v_1_86 + 3),r7
0B05           2101   ;        robot.c:398: while (v < 1.2) {
0B05           2102   L007001?:
0B05 749A      2103            mov     a,#0x9A
0B07 C0E0      2104            push    acc
0B09 7499      2105            mov     a,#0x99
0B0B C0E0      2106            push    acc
0B0D C0E0      2107            push    acc
0B0F 743F      2108            mov     a,#0x3F
0B11 C0E0      2109            push    acc
0B13 85D882    2110            mov     dpl,_turncar_v_1_86
0B16 85D983    2111            mov     dph,(_turncar_v_1_86 + 1)
0B19 85DAF0    2112            mov     b,(_turncar_v_1_86 + 2)
0B1C E5DB      2113            mov     a,(_turncar_v_1_86 + 3)
0B1E 120100    2114            lcall   ___fslt
0B21 AC82      2115            mov     r4,dpl
0B23 E581      2116            mov     a,sp
0B25 24FC      2117            add     a,#0xfc
0B27 F581      2118            mov     sp,a
0B29 EC        2119            mov     a,r4
0B2A 6001      2120            jz      L007003?
0B2C           2121   ;        robot.c:400: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0B2C E528      2122            mov     a,_turncar_direction_1_86
0B2E 6001      2123            jz      L007028?
0B30 75820C    2124            mov     dpl,#0x0C
0B33 120100    2125            lcall   _Volts_at_Pin
0B36 AC82      2126            mov     r4,dpl
0B38 AD83      2127            mov     r5,dph
0B3A AEF0      2128            mov     r6,b
0B3C FF        2129            mov     r7,a
0B3D 8001      2130            sjmp    L007029?
0B3F           2131   L007028?:
0B3F 75820E    2132            mov     dpl,#0x0E
0B42 120100    2133            lcall   _Volts_at_Pin
0B45 AC82      2134            mov     r4,dpl
0B47 AD83      2135            mov     r5,dph
0B49 AEF0      2136            mov     r6,b
0B4B FF        2137            mov     r7,a
0B4C           2138   L007029?:
0B4C 8CD8      2139            mov     _turncar_v_1_86,r4
0B4E 8DD9      2140            mov     (_turncar_v_1_86 + 1),r5
0B50 8EDA      2141            mov     (_turncar_v_1_86 + 2),r6
0B52 8FDB      2142            mov     (_turncar_v_1_86 + 3),r7
0B54           2143   ;        robot.c:401: printf ("\nv = %f\r\n", v);
0B54 C0D8      2144            push    _turncar_v_1_86
0B56 C0D9      2145            push    (_turncar_v_1_86 + 1)
0B58 C0DA      2146            push    (_turncar_v_1_86 + 2)
0B5A C0DB      2147            push    (_turncar_v_1_86 + 3)
0B5C 74E8      2148            mov     a,#__str_11
0B5E C0E0      2149            push    acc
0B60 74B2      2150            mov     a,#(__str_11 >> 8)
0B62 C0E0      2151            push    acc
0B64 7480      2152            mov     a,#0x80
0B66 C0E0      2153            push    acc
0B68 120100    2154            lcall   _printf
0B6B E581      2155            mov     a,sp
0B6D 24F9      2156            add     a,#0xf9
0B6F F581      2157            mov     sp,a
0B71 8001      2158            sjmp    L007001?
0B73           2159   L007003?:
0B73           2160   ;        robot.c:405: waitms(300);
0B73 90012C    2161            mov     dptr,#0x012C
0B76 120100    2162            lcall   _waitms
0B79           2163   ;        robot.c:408: pwm_Right0 = -1; 
0B79 7598FF    2164            mov     _pwm_Right0,#0xFF
0B7C 22        2165            ret
0B7D           2166   L007022?:
0B7D           2167   ;        robot.c:412: else if (leftright == 3) {
0B7D BA0328    2168            cjne    r2,#0x03,L007067?
0B80 BB0028    2169            cjne    r3,#0x00,L007067?
0B83 8001      2170            sjmp    L007068?
0B85           2171   L007067?:
0B85 020100    2172            ljmp    L007019?
0B88           2173   L007068?:
0B88           2174   ;        robot.c:414: pwm_Left1 = 75;
0B88 75D84B    2175            mov     _pwm_Left1,#0x4B
0B8B           2176   ;        robot.c:415: waitms(200);
0B8B 9000C8    2177            mov     dptr,#0x00C8
0B8E 120100    2178            lcall   _waitms
0B91           2179   ;        robot.c:418: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0B91 E528      2180            mov     a,_turncar_direction_1_86
0B93 6001      2181            jz      L007030?
0B95 75820B    2182            mov     dpl,#0x0B
0B98 120100    2183            lcall   _Volts_at_Pin
0B9B AC82      2184            mov     r4,dpl
0B9D AD83      2185            mov     r5,dph
0B9F AEF0      2186            mov     r6,b
0BA1 FF        2187            mov     r7,a
0BA2 8001      2188            sjmp    L007031?
0BA4           2189   L007030?:
0BA4 75820D    2190            mov     dpl,#0x0D
0BA7 120100    2191            lcall   _Volts_at_Pin
0BAA AC82      2192            mov     r4,dpl
0BAC AD83      2193            mov     r5,dph
0BAE AEF0      2194            mov     r6,b
0BB0 FF        2195            mov     r7,a
0BB1           2196   L007031?:
0BB1 8CD8      2197            mov     _turncar_v_1_86,r4
0BB3 8DD9      2198            mov     (_turncar_v_1_86 + 1),r5
0BB5 8EDA      2199            mov     (_turncar_v_1_86 + 2),r6
0BB7 8FDB      2200            mov     (_turncar_v_1_86 + 3),r7
0BB9           2201   ;        robot.c:420: while (v < 1.2) {
0BB9           2202   L007004?:
0BB9 749A      2203            mov     a,#0x9A
0BBB C0E0      2204            push    acc
0BBD 7499      2205            mov     a,#0x99
0BBF C0E0      2206            push    acc
0BC1 C0E0      2207            push    acc
0BC3 743F      2208            mov     a,#0x3F
0BC5 C0E0      2209            push    acc
0BC7 85D882    2210            mov     dpl,_turncar_v_1_86
0BCA 85D983    2211            mov     dph,(_turncar_v_1_86 + 1)
0BCD 85DAF0    2212            mov     b,(_turncar_v_1_86 + 2)
0BD0 E5DB      2213            mov     a,(_turncar_v_1_86 + 3)
0BD2 120100    2214            lcall   ___fslt
0BD5 AC82      2215            mov     r4,dpl
0BD7 E581      2216            mov     a,sp
0BD9 24FC      2217            add     a,#0xfc
0BDB F581      2218            mov     sp,a
0BDD EC        2219            mov     a,r4
0BDE 6001      2220            jz      L007006?
0BE0           2221   ;        robot.c:422: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0BE0 E528      2222            mov     a,_turncar_direction_1_86
0BE2 6001      2223            jz      L007032?
0BE4 75820B    2224            mov     dpl,#0x0B
0BE7 120100    2225            lcall   _Volts_at_Pin
0BEA AC82      2226            mov     r4,dpl
0BEC AD83      2227            mov     r5,dph
0BEE AEF0      2228            mov     r6,b
0BF0 FF        2229            mov     r7,a
0BF1 8001      2230            sjmp    L007033?
0BF3           2231   L007032?:
0BF3 75820D    2232            mov     dpl,#0x0D
0BF6 120100    2233            lcall   _Volts_at_Pin
0BF9 AC82      2234            mov     r4,dpl
0BFB AD83      2235            mov     r5,dph
0BFD AEF0      2236            mov     r6,b
0BFF FF        2237            mov     r7,a
0C00           2238   L007033?:
0C00 8CD8      2239            mov     _turncar_v_1_86,r4
0C02 8DD9      2240            mov     (_turncar_v_1_86 + 1),r5
0C04 8EDA      2241            mov     (_turncar_v_1_86 + 2),r6
0C06 8FDB      2242            mov     (_turncar_v_1_86 + 3),r7
0C08           2243   ;        robot.c:423: printf ("\nv = %f\r\n", v);
0C08 C0D8      2244            push    _turncar_v_1_86
0C0A C0D9      2245            push    (_turncar_v_1_86 + 1)
0C0C C0DA      2246            push    (_turncar_v_1_86 + 2)
0C0E C0DB      2247            push    (_turncar_v_1_86 + 3)
0C10 74E8      2248            mov     a,#__str_11
0C12 C0E0      2249            push    acc
0C14 74B2      2250            mov     a,#(__str_11 >> 8)
0C16 C0E0      2251            push    acc
0C18 7480      2252            mov     a,#0x80
0C1A C0E0      2253            push    acc
0C1C 120100    2254            lcall   _printf
0C1F E581      2255            mov     a,sp
0C21 24F9      2256            add     a,#0xf9
0C23 F581      2257            mov     sp,a
0C25 8001      2258            sjmp    L007004?
0C27           2259   L007006?:
0C27           2260   ;        robot.c:427: pwm_Left1 = -1; 
0C27 75D8FF    2261            mov     _pwm_Left1,#0xFF
0C2A 22        2262            ret
0C2B           2263   L007019?:
0C2B           2264   ;        robot.c:431: else if (leftright == 2) {
0C2B BA0268    2265            cjne    r2,#0x02,L007072?
0C2E BB0068    2266            cjne    r3,#0x00,L007072?
0C31 8001      2267            sjmp    L007073?
0C33           2268   L007072?:
0C33 020100    2269            ljmp    L007016?
0C36           2270   L007073?:
0C36           2271   ;        robot.c:433: pwm_Right1 = 100;
0C36 755864    2272            mov     _pwm_Right1,#0x64
0C39           2273   ;        robot.c:436: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0C39 E528      2274            mov     a,_turncar_direction_1_86
0C3B 6001      2275            jz      L007034?
0C3D 75820C    2276            mov     dpl,#0x0C
0C40 120100    2277            lcall   _Volts_at_Pin
0C43 AC82      2278            mov     r4,dpl
0C45 AD83      2279            mov     r5,dph
0C47 AEF0      2280            mov     r6,b
0C49 FF        2281            mov     r7,a
0C4A 8001      2282            sjmp    L007035?
0C4C           2283   L007034?:
0C4C 75820E    2284            mov     dpl,#0x0E
0C4F 120100    2285            lcall   _Volts_at_Pin
0C52 AC82      2286            mov     r4,dpl
0C54 AD83      2287            mov     r5,dph
0C56 AEF0      2288            mov     r6,b
0C58 FF        2289            mov     r7,a
0C59           2290   L007035?:
0C59 8CD8      2291            mov     _turncar_v_1_86,r4
0C5B 8DD9      2292            mov     (_turncar_v_1_86 + 1),r5
0C5D 8EDA      2293            mov     (_turncar_v_1_86 + 2),r6
0C5F 8FDB      2294            mov     (_turncar_v_1_86 + 3),r7
0C61           2295   ;        robot.c:438: while (v < 0.9) {
0C61           2296   L007007?:
0C61 7466      2297            mov     a,#0x66
0C63 C0E0      2298            push    acc
0C65 C0E0      2299            push    acc
0C67 C0E0      2300            push    acc
0C69 743F      2301            mov     a,#0x3F
0C6B C0E0      2302            push    acc
0C6D 85D882    2303            mov     dpl,_turncar_v_1_86
0C70 85D983    2304            mov     dph,(_turncar_v_1_86 + 1)
0C73 85DAF0    2305            mov     b,(_turncar_v_1_86 + 2)
0C76 E5DB      2306            mov     a,(_turncar_v_1_86 + 3)
0C78 120100    2307            lcall   ___fslt
0C7B AC82      2308            mov     r4,dpl
0C7D E581      2309            mov     a,sp
0C7F 24FC      2310            add     a,#0xfc
0C81 F581      2311            mov     sp,a
0C83 EC        2312            mov     a,r4
0C84 6001      2313            jz      L007009?
0C86           2314   ;        robot.c:440: v = direction ? Volts_at_Pin(TANK_FR) : Volts_at_Pin(TANK_RR);
0C86 E528      2315            mov     a,_turncar_direction_1_86
0C88 6001      2316            jz      L007036?
0C8A 75820C    2317            mov     dpl,#0x0C
0C8D 120100    2318            lcall   _Volts_at_Pin
0C90 AC82      2319            mov     r4,dpl
0C92 AD83      2320            mov     r5,dph
0C94 AEF0      2321            mov     r6,b
0C96 FF        2322            mov     r7,a
0C97 8001      2323            sjmp    L007037?
0C99           2324   L007036?:
0C99 75820E    2325            mov     dpl,#0x0E
0C9C 120100    2326            lcall   _Volts_at_Pin
0C9F AC82      2327            mov     r4,dpl
0CA1 AD83      2328            mov     r5,dph
0CA3 AEF0      2329            mov     r6,b
0CA5 FF        2330            mov     r7,a
0CA6           2331   L007037?:
0CA6 8CD8      2332            mov     _turncar_v_1_86,r4
0CA8 8DD9      2333            mov     (_turncar_v_1_86 + 1),r5
0CAA 8EDA      2334            mov     (_turncar_v_1_86 + 2),r6
0CAC 8FDB      2335            mov     (_turncar_v_1_86 + 3),r7
0CAE           2336   ;        robot.c:441: printf ("\nv = %f\r\n", v);
0CAE C0D8      2337            push    _turncar_v_1_86
0CB0 C0D9      2338            push    (_turncar_v_1_86 + 1)
0CB2 C0DA      2339            push    (_turncar_v_1_86 + 2)
0CB4 C0DB      2340            push    (_turncar_v_1_86 + 3)
0CB6 74E8      2341            mov     a,#__str_11
0CB8 C0E0      2342            push    acc
0CBA 74B2      2343            mov     a,#(__str_11 >> 8)
0CBC C0E0      2344            push    acc
0CBE 7480      2345            mov     a,#0x80
0CC0 C0E0      2346            push    acc
0CC2 120100    2347            lcall   _printf
0CC5 E581      2348            mov     a,sp
0CC7 24F9      2349            add     a,#0xf9
0CC9 F581      2350            mov     sp,a
0CCB 8001      2351            sjmp    L007007?
0CCD           2352   L007009?:
0CCD           2353   ;        robot.c:445: waitms(300);
0CCD 90012C    2354            mov     dptr,#0x012C
0CD0 120100    2355            lcall   _waitms
0CD3           2356   ;        robot.c:448: pwm_Right1 = -1; 
0CD3 7558FF    2357            mov     _pwm_Right1,#0xFF
0CD6 22        2358            ret
0CD7           2359   L007016?:
0CD7           2360   ;        robot.c:452: else if (leftright == 4) {
0CD7 BA04A8    2361            cjne    r2,#0x04,L007077?
0CDA BB00A8    2362            cjne    r3,#0x00,L007077?
0CDD 8001      2363            sjmp    L007078?
0CDF           2364   L007077?:
0CDF 22        2365            ret
0CE0           2366   L007078?:
0CE0           2367   ;        robot.c:454: pwm_Left0 = 75;
0CE0 75184B    2368            mov     _pwm_Left0,#0x4B
0CE3           2369   ;        robot.c:455: waitms(200);
0CE3 9000C8    2370            mov     dptr,#0x00C8
0CE6 120100    2371            lcall   _waitms
0CE9           2372   ;        robot.c:458: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0CE9 E528      2373            mov     a,_turncar_direction_1_86
0CEB 6001      2374            jz      L007038?
0CED 75820B    2375            mov     dpl,#0x0B
0CF0 120100    2376            lcall   _Volts_at_Pin
0CF3 AA82      2377            mov     r2,dpl
0CF5 AB83      2378            mov     r3,dph
0CF7 ACF0      2379            mov     r4,b
0CF9 FD        2380            mov     r5,a
0CFA 8001      2381            sjmp    L007039?
0CFC           2382   L007038?:
0CFC 75820D    2383            mov     dpl,#0x0D
0CFF 120100    2384            lcall   _Volts_at_Pin
0D02 AA82      2385            mov     r2,dpl
0D04 AB83      2386            mov     r3,dph
0D06 ACF0      2387            mov     r4,b
0D08 FD        2388            mov     r5,a
0D09           2389   L007039?:
0D09 8AD8      2390            mov     _turncar_v_1_86,r2
0D0B 8BD9      2391            mov     (_turncar_v_1_86 + 1),r3
0D0D 8CDA      2392            mov     (_turncar_v_1_86 + 2),r4
0D0F 8DDB      2393            mov     (_turncar_v_1_86 + 3),r5
0D11           2394   ;        robot.c:460: while (v < 0.9) {
0D11           2395   L007010?:
0D11 7466      2396            mov     a,#0x66
0D13 C0E0      2397            push    acc
0D15 C0E0      2398            push    acc
0D17 C0E0      2399            push    acc
0D19 743F      2400            mov     a,#0x3F
0D1B C0E0      2401            push    acc
0D1D 85D882    2402            mov     dpl,_turncar_v_1_86
0D20 85D983    2403            mov     dph,(_turncar_v_1_86 + 1)
0D23 85DAF0    2404            mov     b,(_turncar_v_1_86 + 2)
0D26 E5DB      2405            mov     a,(_turncar_v_1_86 + 3)
0D28 120100    2406            lcall   ___fslt
0D2B AA82      2407            mov     r2,dpl
0D2D E581      2408            mov     a,sp
0D2F 24FC      2409            add     a,#0xfc
0D31 F581      2410            mov     sp,a
0D33 EA        2411            mov     a,r2
0D34 6001      2412            jz      L007012?
0D36           2413   ;        robot.c:462: v = direction ? Volts_at_Pin(TANK_FL) : Volts_at_Pin(TANK_RL);
0D36 E528      2414            mov     a,_turncar_direction_1_86
0D38 6001      2415            jz      L007040?
0D3A 75820B    2416            mov     dpl,#0x0B
0D3D 120100    2417            lcall   _Volts_at_Pin
0D40 AA82      2418            mov     r2,dpl
0D42 AB83      2419            mov     r3,dph
0D44 ACF0      2420            mov     r4,b
0D46 FD        2421            mov     r5,a
0D47 8001      2422            sjmp    L007041?
0D49           2423   L007040?:
0D49 75820D    2424            mov     dpl,#0x0D
0D4C 120100    2425            lcall   _Volts_at_Pin
0D4F AA82      2426            mov     r2,dpl
0D51 AB83      2427            mov     r3,dph
0D53 ACF0      2428            mov     r4,b
0D55 FD        2429            mov     r5,a
0D56           2430   L007041?:
0D56 8AD8      2431            mov     _turncar_v_1_86,r2
0D58 8BD9      2432            mov     (_turncar_v_1_86 + 1),r3
0D5A 8CDA      2433            mov     (_turncar_v_1_86 + 2),r4
0D5C 8DDB      2434            mov     (_turncar_v_1_86 + 3),r5
0D5E           2435   ;        robot.c:463: printf ("\nv = %f\r\n", v);
0D5E C0D8      2436            push    _turncar_v_1_86
0D60 C0D9      2437            push    (_turncar_v_1_86 + 1)
0D62 C0DA      2438            push    (_turncar_v_1_86 + 2)
0D64 C0DB      2439            push    (_turncar_v_1_86 + 3)
0D66 74E8      2440            mov     a,#__str_11
0D68 C0E0      2441            push    acc
0D6A 74B2      2442            mov     a,#(__str_11 >> 8)
0D6C C0E0      2443            push    acc
0D6E 7480      2444            mov     a,#0x80
0D70 C0E0      2445            push    acc
0D72 120100    2446            lcall   _printf
0D75 E581      2447            mov     a,sp
0D77 24F9      2448            add     a,#0xf9
0D79 F581      2449            mov     sp,a
0D7B 8001      2450            sjmp    L007010?
0D7D           2451   L007012?:
0D7D           2452   ;        robot.c:467: pwm_Left0 = -1; 
0D7D 7518FF    2453            mov     _pwm_Left0,#0xFF
0D80 22        2454            ret
0D81           2455   ;------------------------------------------------------------
0D81           2456   ;Allocation info for local variables in function 'uturn'
0D81           2457   ;------------------------------------------------------------
0D81           2458   ;vleft                     Allocated with name '_uturn_vleft_1_96'
0D81           2459   ;vright                    Allocated with name '_uturn_vright_1_96'
0D81           2460   ;------------------------------------------------------------
0D81           2461   ;        robot.c:474: void uturn(void) {
0D81           2462   ;        -----------------------------------------
0D81           2463   ;         function uturn
0D81           2464   ;        -----------------------------------------
0D81           2465   _uturn:
0D81           2466   ;        robot.c:478: vleft = Volts_at_Pin(TANK_FL);
0D81 75820B    2467            mov     dpl,#0x0B
0D84 120100    2468            lcall   _Volts_at_Pin
0D87 858278    2469            mov     _uturn_vleft_1_96,dpl
0D8A 858379    2470            mov     (_uturn_vleft_1_96 + 1),dph
0D8D 85F07A    2471            mov     (_uturn_vleft_1_96 + 2),b
0D90 F57B      2472            mov     (_uturn_vleft_1_96 + 3),a
0D92           2473   ;        robot.c:479: vright = Volts_at_Pin(TANK_FR);
0D92 75820C    2474            mov     dpl,#0x0C
0D95 120100    2475            lcall   _Volts_at_Pin
0D98 8582C8    2476            mov     _uturn_vright_1_96,dpl
0D9B 8583C9    2477            mov     (_uturn_vright_1_96 + 1),dph
0D9E 85F0CA    2478            mov     (_uturn_vright_1_96 + 2),b
0DA1 F5CB      2479            mov     (_uturn_vright_1_96 + 3),a
0DA3           2480   ;        robot.c:482: pwm_Left0 = -1;
0DA3 7518FF    2481            mov     _pwm_Left0,#0xFF
0DA6           2482   ;        robot.c:483: pwm_Left1 = 50;
0DA6 75D832    2483            mov     _pwm_Left1,#0x32
0DA9           2484   ;        robot.c:484: pwm_Right0 = -1;
0DA9 7598FF    2485            mov     _pwm_Right0,#0xFF
0DAC           2486   ;        robot.c:485: pwm_Right1 = 50;
0DAC 755832    2487            mov     _pwm_Right1,#0x32
0DAF           2488   ;        robot.c:488: waitms(3000);
0DAF 900BB8    2489            mov     dptr,#0x0BB8
0DB2 120100    2490            lcall   _waitms
0DB5           2491   ;        robot.c:490: while ((Volts_at_Pin(TANK_FL)-Volts_at_Pin(TANK_FR))<-0.3 || (Volts_at_Pin(TANK_FL)-Volts_at_Pin(TANK_FR))>0.3);
0DB5           2492   L008002?:
0DB5 75820B    2493            mov     dpl,#0x0B
0DB8 120100    2494            lcall   _Volts_at_Pin
0DBB AA82      2495            mov     r2,dpl
0DBD AB83      2496            mov     r3,dph
0DBF ACF0      2497            mov     r4,b
0DC1 FD        2498            mov     r5,a
0DC2 75820C    2499            mov     dpl,#0x0C
0DC5 C002      2500            push    ar2
0DC7 C003      2501            push    ar3
0DC9 C004      2502            push    ar4
0DCB C005      2503            push    ar5
0DCD 120100    2504            lcall   _Volts_at_Pin
0DD0 AE82      2505            mov     r6,dpl
0DD2 AF83      2506            mov     r7,dph
0DD4 A8F0      2507            mov     r0,b
0DD6 F9        2508            mov     r1,a
0DD7 D005      2509            pop     ar5
0DD9 D004      2510            pop     ar4
0DDB D003      2511            pop     ar3
0DDD D002      2512            pop     ar2
0DDF C006      2513            push    ar6
0DE1 C007      2514            push    ar7
0DE3 C000      2515            push    ar0
0DE5 C001      2516            push    ar1
0DE7 8A82      2517            mov     dpl,r2
0DE9 8B83      2518            mov     dph,r3
0DEB 8CF0      2519            mov     b,r4
0DED ED        2520            mov     a,r5
0DEE 120100    2521            lcall   ___fssub
0DF1 AA82      2522            mov     r2,dpl
0DF3 AB83      2523            mov     r3,dph
0DF5 ACF0      2524            mov     r4,b
0DF7 FD        2525            mov     r5,a
0DF8 E581      2526            mov     a,sp
0DFA 24FC      2527            add     a,#0xfc
0DFC F581      2528            mov     sp,a
0DFE 749A      2529            mov     a,#0x9A
0E00 C0E0      2530            push    acc
0E02 7499      2531            mov     a,#0x99
0E04 C0E0      2532            push    acc
0E06 C0E0      2533            push    acc
0E08 74BE      2534            mov     a,#0xBE
0E0A C0E0      2535            push    acc
0E0C 8A82      2536            mov     dpl,r2
0E0E 8B83      2537            mov     dph,r3
0E10 8CF0      2538            mov     b,r4
0E12 ED        2539            mov     a,r5
0E13 120100    2540            lcall   ___fslt
0E16 AA82      2541            mov     r2,dpl
0E18 E581      2542            mov     a,sp
0E1A 24FC      2543            add     a,#0xfc
0E1C F581      2544            mov     sp,a
0E1E EA        2545            mov     a,r2
0E1F 7001      2546            jnz     L008002?
0E21 75820B    2547            mov     dpl,#0x0B
0E24 120100    2548            lcall   _Volts_at_Pin
0E27 AA82      2549            mov     r2,dpl
0E29 AB83      2550            mov     r3,dph
0E2B ACF0      2551            mov     r4,b
0E2D FD        2552            mov     r5,a
0E2E 75820C    2553            mov     dpl,#0x0C
0E31 C002      2554            push    ar2
0E33 C003      2555            push    ar3
0E35 C004      2556            push    ar4
0E37 C005      2557            push    ar5
0E39 120100    2558            lcall   _Volts_at_Pin
0E3C AE82      2559            mov     r6,dpl
0E3E AF83      2560            mov     r7,dph
0E40 A8F0      2561            mov     r0,b
0E42 F9        2562            mov     r1,a
0E43 D005      2563            pop     ar5
0E45 D004      2564            pop     ar4
0E47 D003      2565            pop     ar3
0E49 D002      2566            pop     ar2
0E4B C006      2567            push    ar6
0E4D C007      2568            push    ar7
0E4F C000      2569            push    ar0
0E51 C001      2570            push    ar1
0E53 8A82      2571            mov     dpl,r2
0E55 8B83      2572            mov     dph,r3
0E57 8CF0      2573            mov     b,r4
0E59 ED        2574            mov     a,r5
0E5A 120100    2575            lcall   ___fssub
0E5D AA82      2576            mov     r2,dpl
0E5F AB83      2577            mov     r3,dph
0E61 ACF0      2578            mov     r4,b
0E63 FD        2579            mov     r5,a
0E64 E581      2580            mov     a,sp
0E66 24FC      2581            add     a,#0xfc
0E68 F581      2582            mov     sp,a
0E6A 749A      2583            mov     a,#0x9A
0E6C C0E0      2584            push    acc
0E6E 7499      2585            mov     a,#0x99
0E70 C0E0      2586            push    acc
0E72 C0E0      2587            push    acc
0E74 743E      2588            mov     a,#0x3E
0E76 C0E0      2589            push    acc
0E78 8A82      2590            mov     dpl,r2
0E7A 8B83      2591            mov     dph,r3
0E7C 8CF0      2592            mov     b,r4
0E7E ED        2593            mov     a,r5
0E7F 120100    2594            lcall   ___fsgt
0E82 AA82      2595            mov     r2,dpl
0E84 E581      2596            mov     a,sp
0E86 24FC      2597            add     a,#0xfc
0E88 F581      2598            mov     sp,a
0E8A EA        2599            mov     a,r2
0E8B 6001      2600            jz      L008010?
0E8D 020100    2601            ljmp    L008002?
0E90           2602   L008010?:
0E90 22        2603            ret
0E91           2604   ;------------------------------------------------------------
0E91           2605   ;Allocation info for local variables in function 'Sonar_Reading'
0E91           2606   ;------------------------------------------------------------
0E91           2607   ;------------------------------------------------------------
0E91           2608   ;        robot.c:516: void Sonar_Reading(void)
0E91           2609   ;        -----------------------------------------
0E91           2610   ;         function Sonar_Reading
0E91           2611   ;        -----------------------------------------
0E91           2612   _Sonar_Reading:
0E91           2613   ;        robot.c:519: TL0=0; 
0E91 758A00    2614            mov     _TL0,#0x00
0E94           2615   ;        robot.c:520: TH0=0;
0E94 758C00    2616            mov     _TH0,#0x00
0E97           2617   ;        robot.c:521: TF0=0;
0E97 C28D      2618            clr     _TF0
0E99           2619   ;        robot.c:522: overflow_count=0;
0E99 755800    2620            mov     _overflow_count,#0x00
0E9C           2621   ;        robot.c:525: Trigger = 0; 
0E9C C286      2622            clr     _P0_6
0E9E           2623   ;        robot.c:526: Timer3us(2);
0E9E 758202    2624            mov     dpl,#0x02
0EA1 120100    2625            lcall   _Timer3us
0EA4           2626   ;        robot.c:527: Trigger = 1; // turn on trig
0EA4 D286      2627            setb    _P0_6
0EA6           2628   ;        robot.c:528: Timer3us(10);//10us delay 
0EA6 75820A    2629            mov     dpl,#0x0A
0EA9 120100    2630            lcall   _Timer3us
0EAC           2631   ;        robot.c:529: Trigger = 0; // trun off trig 
0EAC C286      2632            clr     _P0_6
0EAE           2633   ;        robot.c:530: while(Echo!=0); // Wait for the signal to be zero
0EAE           2634   L009001?:
0EAE 2081A8    2635            jb      _P0_1,L009001?
0EB1           2636   ;        robot.c:531: while(Echo!=1); // Wait for the signal to be one
0EB1           2637   L009004?:
0EB1 3081E8    2638            jnb     _P0_1,L009004?
0EB4           2639   ;        robot.c:535: TR0=1; // Start the timer
0EB4 D28C      2640            setb    _TR0
0EB6           2641   ;        robot.c:536: while(Echo!=0) // Wait for the signal to be zero
0EB6           2642   L009009?:
0EB6 308168    2643            jnb     _P0_1,L009011?
0EB9           2644   ;        robot.c:538: if(TF0==1) // Did the 16-bit timer overflow?
0EB9           2645   ;        robot.c:540: TF0=0;
0EB9 108DA8    2646            jbc     _TF0,L009023?
0EBC 8001      2647            sjmp    L009009?
0EBE           2648   L009023?:
0EBE           2649   ;        robot.c:541: overflow_count++;
0EBE 0558      2650            inc     _overflow_count
0EC0 8001      2651            sjmp    L009009?
0EC2           2652   L009011?:
0EC2           2653   ;        robot.c:544: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
0EC2 C28C      2654            clr     _TR0
0EC4           2655   ;        robot.c:545: time=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
0EC4 855882    2656            mov     dpl,_overflow_count
0EC7 120100    2657            lcall   ___uchar2fs
0ECA AA82      2658            mov     r2,dpl
0ECC AB83      2659            mov     r3,dph
0ECE ACF0      2660            mov     r4,b
0ED0 FD        2661            mov     r5,a
0ED1 C002      2662            push    ar2
0ED3 C003      2663            push    ar3
0ED5 C004      2664            push    ar4
0ED7 C005      2665            push    ar5
0ED9 900000    2666            mov     dptr,#0x0000
0EDC 75F080    2667            mov     b,#0x80
0EDF 7447      2668            mov     a,#0x47
0EE1 120100    2669            lcall   ___fsmul
0EE4 AA82      2670            mov     r2,dpl
0EE6 AB83      2671            mov     r3,dph
0EE8 ACF0      2672            mov     r4,b
0EEA FD        2673            mov     r5,a
0EEB E581      2674            mov     a,sp
0EED 24FC      2675            add     a,#0xfc
0EEF F581      2676            mov     sp,a
0EF1 858C82    2677            mov     dpl,_TH0
0EF4 C002      2678            push    ar2
0EF6 C003      2679            push    ar3
0EF8 C004      2680            push    ar4
0EFA C005      2681            push    ar5
0EFC 120100    2682            lcall   ___uchar2fs
0EFF AE82      2683            mov     r6,dpl
0F01 AF83      2684            mov     r7,dph
0F03 A8F0      2685            mov     r0,b
0F05 F9        2686            mov     r1,a
0F06 C006      2687            push    ar6
0F08 C007      2688            push    ar7
0F0A C000      2689            push    ar0
0F0C C001      2690            push    ar1
0F0E 900000    2691            mov     dptr,#0x0000
0F11 75F080    2692            mov     b,#0x80
0F14 7443      2693            mov     a,#0x43
0F16 120100    2694            lcall   ___fsmul
0F19 AE82      2695            mov     r6,dpl
0F1B AF83      2696            mov     r7,dph
0F1D A8F0      2697            mov     r0,b
0F1F F9        2698            mov     r1,a
0F20 E581      2699            mov     a,sp
0F22 24FC      2700            add     a,#0xfc
0F24 F581      2701            mov     sp,a
0F26 D005      2702            pop     ar5
0F28 D004      2703            pop     ar4
0F2A D003      2704            pop     ar3
0F2C D002      2705            pop     ar2
0F2E C006      2706            push    ar6
0F30 C007      2707            push    ar7
0F32 C000      2708            push    ar0
0F34 C001      2709            push    ar1
0F36 8A82      2710            mov     dpl,r2
0F38 8B83      2711            mov     dph,r3
0F3A 8CF0      2712            mov     b,r4
0F3C ED        2713            mov     a,r5
0F3D 120100    2714            lcall   ___fsadd
0F40 AA82      2715            mov     r2,dpl
0F42 AB83      2716            mov     r3,dph
0F44 ACF0      2717            mov     r4,b
0F46 FD        2718            mov     r5,a
0F47 E581      2719            mov     a,sp
0F49 24FC      2720            add     a,#0xfc
0F4B F581      2721            mov     sp,a
0F4D AE8A      2722            mov     r6,_TL0
0F4F 7F00      2723            mov     r7,#0x00
0F51 8E82      2724            mov     dpl,r6
0F53 8F83      2725            mov     dph,r7
0F55 C002      2726            push    ar2
0F57 C003      2727            push    ar3
0F59 C004      2728            push    ar4
0F5B C005      2729            push    ar5
0F5D 120100    2730            lcall   ___sint2fs
0F60 AE82      2731            mov     r6,dpl
0F62 AF83      2732            mov     r7,dph
0F64 A8F0      2733            mov     r0,b
0F66 F9        2734            mov     r1,a
0F67 D005      2735            pop     ar5
0F69 D004      2736            pop     ar4
0F6B D003      2737            pop     ar3
0F6D D002      2738            pop     ar2
0F6F C006      2739            push    ar6
0F71 C007      2740            push    ar7
0F73 C000      2741            push    ar0
0F75 C001      2742            push    ar1
0F77 8A82      2743            mov     dpl,r2
0F79 8B83      2744            mov     dph,r3
0F7B 8CF0      2745            mov     b,r4
0F7D ED        2746            mov     a,r5
0F7E 120100    2747            lcall   ___fsadd
0F81 AA82      2748            mov     r2,dpl
0F83 AB83      2749            mov     r3,dph
0F85 ACF0      2750            mov     r4,b
0F87 FD        2751            mov     r5,a
0F88 E581      2752            mov     a,sp
0F8A 24FC      2753            add     a,#0xfc
0F8C F581      2754            mov     sp,a
0F8E C002      2755            push    ar2
0F90 C003      2756            push    ar3
0F92 C004      2757            push    ar4
0F94 C005      2758            push    ar5
0F96 9037BD    2759            mov     dptr,#0x37BD
0F99 75F086    2760            mov     b,#0x86
0F9C 7434      2761            mov     a,#0x34
0F9E 120100    2762            lcall   ___fsmul
0FA1 858218    2763            mov     _time,dpl
0FA4 858319    2764            mov     (_time + 1),dph
0FA7 85F01A    2765            mov     (_time + 2),b
0FAA F51B      2766            mov     (_time + 3),a
0FAC E581      2767            mov     a,sp
0FAE 24FC      2768            add     a,#0xfc
0FB0 F581      2769            mov     sp,a
0FB2           2770   ;        robot.c:546: distance = ((time/2.0f)/29.1f)*100000;
0FB2 E4        2771            clr     a
0FB3 C0E0      2772            push    acc
0FB5 C0E0      2773            push    acc
0FB7 C0E0      2774            push    acc
0FB9 7440      2775            mov     a,#0x40
0FBB C0E0      2776            push    acc
0FBD 851882    2777            mov     dpl,_time
0FC0 851983    2778            mov     dph,(_time + 1)
0FC3 851AF0    2779            mov     b,(_time + 2)
0FC6 E51B      2780            mov     a,(_time + 3)
0FC8 120100    2781            lcall   ___fsdiv
0FCB AA82      2782            mov     r2,dpl
0FCD AB83      2783            mov     r3,dph
0FCF ACF0      2784            mov     r4,b
0FD1 FD        2785            mov     r5,a
0FD2 E581      2786            mov     a,sp
0FD4 24FC      2787            add     a,#0xfc
0FD6 F581      2788            mov     sp,a
0FD8 74CD      2789            mov     a,#0xCD
0FDA C0E0      2790            push    acc
0FDC 74CC      2791            mov     a,#0xCC
0FDE C0E0      2792            push    acc
0FE0 74E8      2793            mov     a,#0xE8
0FE2 C0E0      2794            push    acc
0FE4 7441      2795            mov     a,#0x41
0FE6 C0E0      2796            push    acc
0FE8 8A82      2797            mov     dpl,r2
0FEA 8B83      2798            mov     dph,r3
0FEC 8CF0      2799            mov     b,r4
0FEE ED        2800            mov     a,r5
0FEF 120100    2801            lcall   ___fsdiv
0FF2 AA82      2802            mov     r2,dpl
0FF4 AB83      2803            mov     r3,dph
0FF6 ACF0      2804            mov     r4,b
0FF8 FD        2805            mov     r5,a
0FF9 E581      2806            mov     a,sp
0FFB 24FC      2807            add     a,#0xfc
0FFD F581      2808            mov     sp,a
0FFF C002      2809            push    ar2
1001 C003      2810            push    ar3
1003 C004      2811            push    ar4
1005 C005      2812            push    ar5
1007 905000    2813            mov     dptr,#0x5000
100A 75F0C3    2814            mov     b,#0xC3
100D 7447      2815            mov     a,#0x47
100F 120100    2816            lcall   ___fsmul
1012 8582D8    2817            mov     _distance,dpl
1015 8583D9    2818            mov     (_distance + 1),dph
1018 85F0DA    2819            mov     (_distance + 2),b
101B F5DB      2820            mov     (_distance + 3),a
101D E581      2821            mov     a,sp
101F 24FC      2822            add     a,#0xfc
1021 F581      2823            mov     sp,a
1023           2824   ;        robot.c:548: printf( "\r\n p=%fcm\n" , distance);
1023 C0D8      2825            push    _distance
1025 C0D9      2826            push    (_distance + 1)
1027 C0DA      2827            push    (_distance + 2)
1029 C0DB      2828            push    (_distance + 3)
102B 7468      2829            mov     a,#__str_12
102D C0E0      2830            push    acc
102F 74BC      2831            mov     a,#(__str_12 >> 8)
1031 C0E0      2832            push    acc
1033 7480      2833            mov     a,#0x80
1035 C0E0      2834            push    acc
1037 120100    2835            lcall   _printf
103A E581      2836            mov     a,sp
103C 24F9      2837            add     a,#0xf9
103E F581      2838            mov     sp,a
1040 22        2839            ret
1041           2840            rseg R_CSEG
1041           2841   
0000           2842            rseg R_XINIT
0000           2843   
0000           2844            rseg R_CONST
0000           2845   __str_0:
0000 1B        2846            db 0x1B
0001 5B324A    2847            db '[2J'
0004 00        2848            db 0x00
0005           2849   __str_1:
0005 66726F6E  2850            db 'frontL %f frontR %f backL %f backR %f command %1d, state %1d'
     744C2025
     66206672
     6F6E7452
     20256620
     6261636B
     4C202566
     20626163
     6B522025
     6620636F
     6D6D616E
     64202531
     642C2073
     74617465
     20253164
0041 206C6566  2851            db ' left0 %3d left1 %3d right0 %3d right1 %3d'
     74302025
     3364206C
     65667431
     20253364
     20726967
     68743020
     25336420
     72696768
     74312025
     3364
006B 0D        2852            db 0x0D
006C 00        2853            db 0x00
006D           2854   __str_2:
006D 0A        2855            db 0x0A
006E 494E5445  2856            db 'INTERSECTION'
     52534543
     54494F4E
007A 0A        2857            db 0x0A
007B 00        2858            db 0x00
007C           2859   __str_3:
007C 5475726E  2860            db 'Turn left at the next intersection'
     206C6566
     74206174
     20746865
     206E6578
     7420696E
     74657273
     65637469
     6F6E
009E 0A        2861            db 0x0A
009F 00        2862            db 0x00
00A0           2863   __str_4:
00A0 0A        2864            db 0x0A
00A1 0D        2865            db 0x0D
00A2 20494E54  2866            db ' INTERSECTION'
     45525345
     4354494F
     4E
00AF 0A        2867            db 0x0A
00B0 00        2868            db 0x00
00B1           2869   __str_5:
00B1 0A        2870            db 0x0A
00B2 5475726E  2871            db 'Turn right at the next intersection'
     20726967
     68742061
     74207468
     65206E65
     78742069
     6E746572
     73656374
     696F6E
00D5 0A        2872            db 0x0A
00D6 00        2873            db 0x00
00D7           2874   __str_6:
00D7 0A        2875            db 0x0A
00D8 474F21    2876            db 'GO!'
00DB 0A        2877            db 0x0A
00DC 00        2878            db 0x00
00DD           2879   __str_7:
00DD 0A        2880            db 0x0A
00DE 52657665  2881            db 'Reverse Reverse!'
     72736520
     52657665
     72736521
00EE 0A        2882            db 0x0A
00EF 00        2883            db 0x00
00F0           2884   __str_8:
00F0 0A        2885            db 0x0A
00F1 48414C54  2886            db 'HALT peasants!'
     20706561
     73616E74
     7321
00FF 0A        2887            db 0x0A
0100 00        2888            db 0x00
0101           2889   __str_9:
0101 0A        2890            db 0x0A
0102 55545552  2891            db 'UTURN'
     4E
0107 0A        2892            db 0x0A
0108 00        2893            db 0x00
0109           2894   __str_10:
0109 0A        2895            db 0x0A
010A 436F6D6D  2896            db 'Command received: 0b_0%c%c%c'
     616E6420
     72656365
     69766564
     3A203062
     5F302563
     25632563
0126 0A        2897            db 0x0A
0127 00        2898            db 0x00
0128           2899   __str_11:
0128 0A        2900            db 0x0A
0129 76203D20  2901            db 'v = %f'
     2566
012F 0D        2902            db 0x0D
0130 0A        2903            db 0x0A
0131 00        2904            db 0x00
0132           2905   __str_12:
0132 0D        2906            db 0x0D
0133 0A        2907            db 0x0A
0134 20703D25  2908            db ' p=%fcm'
     66636D
013B 0A        2909            db 0x0A
013C 00        2910            db 0x00
013D           2911   
002E           2912            CSEG
002E           2913   
002E           2914   end
