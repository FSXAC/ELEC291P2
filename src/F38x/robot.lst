0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Tue Apr 04 03:58:49 2017
0000              5   ;--------------------------------------------------------
                  5   $name robot
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _Timer2_ISR
0000             27            public _main
0000             28            public _distance
0000             29            public _time
0000             30            public _overflow_count
0000             31            public _currentstate
0000             32            public _currentcmd
0000             33            public _direction
0000             34            public _pwm_Right1
0000             35            public _pwm_Right0
0000             36            public _pwm_Left1
0000             37            public _pwm_Left0
0000             38            public _pwm_both
0000             39            public _mode
0000             40            public _pwm_count
0000             41            public _readData
0000             42            public _linetrack
0000             43            public _stopcar
0000             44            public _turncar
0000             45            public _uturn
0000             46            public _Sonar_Reading
0000             47   ;--------------------------------------------------------
0000             48   ; Special Function Registers
0000             49   ;--------------------------------------------------------
0000             50   _P0             DATA 0x80
0000             51   _SP             DATA 0x81
0000             52   _DPL            DATA 0x82
0000             53   _DPH            DATA 0x83
0000             54   _EMI0TC         DATA 0x84
0000             55   _EMI0CF         DATA 0x85
0000             56   _OSCLCN         DATA 0x86
0000             57   _PCON           DATA 0x87
0000             58   _TCON           DATA 0x88
0000             59   _TMOD           DATA 0x89
0000             60   _TL0            DATA 0x8a
0000             61   _TL1            DATA 0x8b
0000             62   _TH0            DATA 0x8c
0000             63   _TH1            DATA 0x8d
0000             64   _CKCON          DATA 0x8e
0000             65   _PSCTL          DATA 0x8f
0000             66   _P1             DATA 0x90
0000             67   _TMR3CN         DATA 0x91
0000             68   _TMR4CN         DATA 0x91
0000             69   _TMR3RLL        DATA 0x92
0000             70   _TMR4RLL        DATA 0x92
0000             71   _TMR3RLH        DATA 0x93
0000             72   _TMR4RLH        DATA 0x93
0000             73   _TMR3L          DATA 0x94
0000             74   _TMR4L          DATA 0x94
0000             75   _TMR3H          DATA 0x95
0000             76   _TMR4H          DATA 0x95
0000             77   _USB0ADR        DATA 0x96
0000             78   _USB0DAT        DATA 0x97
0000             79   _SCON           DATA 0x98
0000             80   _SCON0          DATA 0x98
0000             81   _SBUF           DATA 0x99
0000             82   _SBUF0          DATA 0x99
0000             83   _CPT1CN         DATA 0x9a
0000             84   _CPT0CN         DATA 0x9b
0000             85   _CPT1MD         DATA 0x9c
0000             86   _CPT0MD         DATA 0x9d
0000             87   _CPT1MX         DATA 0x9e
0000             88   _CPT0MX         DATA 0x9f
0000             89   _P2             DATA 0xa0
0000             90   _SPI0CFG        DATA 0xa1
0000             91   _SPI0CKR        DATA 0xa2
0000             92   _SPI0DAT        DATA 0xa3
0000             93   _P0MDOUT        DATA 0xa4
0000             94   _P1MDOUT        DATA 0xa5
0000             95   _P2MDOUT        DATA 0xa6
0000             96   _P3MDOUT        DATA 0xa7
0000             97   _IE             DATA 0xa8
0000             98   _CLKSEL         DATA 0xa9
0000             99   _EMI0CN         DATA 0xaa
0000            100   __XPAGE         DATA 0xaa
0000            101   _SBCON1         DATA 0xac
0000            102   _P4MDOUT        DATA 0xae
0000            103   _PFE0CN         DATA 0xaf
0000            104   _P3             DATA 0xb0
0000            105   _OSCXCN         DATA 0xb1
0000            106   _OSCICN         DATA 0xb2
0000            107   _OSCICL         DATA 0xb3
0000            108   _SBRLL1         DATA 0xb4
0000            109   _SBRLH1         DATA 0xb5
0000            110   _FLSCL          DATA 0xb6
0000            111   _FLKEY          DATA 0xb7
0000            112   _IP             DATA 0xb8
0000            113   _CLKMUL         DATA 0xb9
0000            114   _SMBTC          DATA 0xb9
0000            115   _AMX0N          DATA 0xba
0000            116   _AMX0P          DATA 0xbb
0000            117   _ADC0CF         DATA 0xbc
0000            118   _ADC0L          DATA 0xbd
0000            119   _ADC0H          DATA 0xbe
0000            120   _SFRPAGE        DATA 0xbf
0000            121   _SMB0CN         DATA 0xc0
0000            122   _SMB1CN         DATA 0xc0
0000            123   _SMB0CF         DATA 0xc1
0000            124   _SMB1CF         DATA 0xc1
0000            125   _SMB0DAT        DATA 0xc2
0000            126   _SMB1DAT        DATA 0xc2
0000            127   _ADC0GTL        DATA 0xc3
0000            128   _ADC0GTH        DATA 0xc4
0000            129   _ADC0LTL        DATA 0xc5
0000            130   _ADC0LTH        DATA 0xc6
0000            131   _P4             DATA 0xc7
0000            132   _TMR2CN         DATA 0xc8
0000            133   _TMR5CN         DATA 0xc8
0000            134   _REG01CN        DATA 0xc9
0000            135   _TMR2RLL        DATA 0xca
0000            136   _TMR5RLL        DATA 0xca
0000            137   _TMR2RLH        DATA 0xcb
0000            138   _TMR5RLH        DATA 0xcb
0000            139   _TMR2L          DATA 0xcc
0000            140   _TMR5L          DATA 0xcc
0000            141   _TMR2H          DATA 0xcd
0000            142   _TMR5H          DATA 0xcd
0000            143   _SMB0ADM        DATA 0xce
0000            144   _SMB1ADM        DATA 0xce
0000            145   _SMB0ADR        DATA 0xcf
0000            146   _SMB1ADR        DATA 0xcf
0000            147   _PSW            DATA 0xd0
0000            148   _REF0CN         DATA 0xd1
0000            149   _SCON1          DATA 0xd2
0000            150   _SBUF1          DATA 0xd3
0000            151   _P0SKIP         DATA 0xd4
0000            152   _P1SKIP         DATA 0xd5
0000            153   _P2SKIP         DATA 0xd6
0000            154   _USB0XCN        DATA 0xd7
0000            155   _PCA0CN         DATA 0xd8
0000            156   _PCA0MD         DATA 0xd9
0000            157   _PCA0CPM0       DATA 0xda
0000            158   _PCA0CPM1       DATA 0xdb
0000            159   _PCA0CPM2       DATA 0xdc
0000            160   _PCA0CPM3       DATA 0xdd
0000            161   _PCA0CPM4       DATA 0xde
0000            162   _P3SKIP         DATA 0xdf
0000            163   _ACC            DATA 0xe0
0000            164   _XBR0           DATA 0xe1
0000            165   _XBR1           DATA 0xe2
0000            166   _XBR2           DATA 0xe3
0000            167   _IT01CF         DATA 0xe4
0000            168   _CKCON1         DATA 0xe4
0000            169   _SMOD1          DATA 0xe5
0000            170   _EIE1           DATA 0xe6
0000            171   _EIE2           DATA 0xe7
0000            172   _ADC0CN         DATA 0xe8
0000            173   _PCA0CPL1       DATA 0xe9
0000            174   _PCA0CPH1       DATA 0xea
0000            175   _PCA0CPL2       DATA 0xeb
0000            176   _PCA0CPH2       DATA 0xec
0000            177   _PCA0CPL3       DATA 0xed
0000            178   _PCA0CPH3       DATA 0xee
0000            179   _RSTSRC         DATA 0xef
0000            180   _B              DATA 0xf0
0000            181   _P0MDIN         DATA 0xf1
0000            182   _P1MDIN         DATA 0xf2
0000            183   _P2MDIN         DATA 0xf3
0000            184   _P3MDIN         DATA 0xf4
0000            185   _P4MDIN         DATA 0xf5
0000            186   _EIP1           DATA 0xf6
0000            187   _EIP2           DATA 0xf7
0000            188   _SPI0CN         DATA 0xf8
0000            189   _PCA0L          DATA 0xf9
0000            190   _PCA0H          DATA 0xfa
0000            191   _PCA0CPL0       DATA 0xfb
0000            192   _PCA0CPH0       DATA 0xfc
0000            193   _PCA0CPL4       DATA 0xfd
0000            194   _PCA0CPH4       DATA 0xfe
0000            195   _VDM0CN         DATA 0xff
0000            196   _DPTR           DATA 0x8382
0000            197   _TMR2RL         DATA 0xcbca
0000            198   _TMR3RL         DATA 0x9392
0000            199   _TMR4RL         DATA 0x9392
0000            200   _TMR5RL         DATA 0xcbca
0000            201   _TMR2           DATA 0xcdcc
0000            202   _TMR3           DATA 0x9594
0000            203   _TMR4           DATA 0x9594
0000            204   _TMR5           DATA 0xcdcc
0000            205   _SBRL1          DATA 0xb5b4
0000            206   _ADC0           DATA 0xbebd
0000            207   _ADC0GT         DATA 0xc4c3
0000            208   _ADC0LT         DATA 0xc6c5
0000            209   _PCA0           DATA 0xfaf9
0000            210   _PCA0CP1        DATA 0xeae9
0000            211   _PCA0CP2        DATA 0xeceb
0000            212   _PCA0CP3        DATA 0xeeed
0000            213   _PCA0CP0        DATA 0xfcfb
0000            214   _PCA0CP4        DATA 0xfefd
0000            215   ;--------------------------------------------------------
0000            216   ; special function bits
0000            217   ;--------------------------------------------------------
0000            218   _P0_0           BIT 0x80
0000            219   _P0_1           BIT 0x81
0000            220   _P0_2           BIT 0x82
0000            221   _P0_3           BIT 0x83
0000            222   _P0_4           BIT 0x84
0000            223   _P0_5           BIT 0x85
0000            224   _P0_6           BIT 0x86
0000            225   _P0_7           BIT 0x87
0000            226   _TF1            BIT 0x8f
0000            227   _TR1            BIT 0x8e
0000            228   _TF0            BIT 0x8d
0000            229   _TR0            BIT 0x8c
0000            230   _IE1            BIT 0x8b
0000            231   _IT1            BIT 0x8a
0000            232   _IE0            BIT 0x89
0000            233   _IT0            BIT 0x88
0000            234   _P1_0           BIT 0x90
0000            235   _P1_1           BIT 0x91
0000            236   _P1_2           BIT 0x92
0000            237   _P1_3           BIT 0x93
0000            238   _P1_4           BIT 0x94
0000            239   _P1_5           BIT 0x95
0000            240   _P1_6           BIT 0x96
0000            241   _P1_7           BIT 0x97
0000            242   _S0MODE         BIT 0x9f
0000            243   _SCON0_6        BIT 0x9e
0000            244   _MCE0           BIT 0x9d
0000            245   _REN0           BIT 0x9c
0000            246   _TB80           BIT 0x9b
0000            247   _RB80           BIT 0x9a
0000            248   _TI0            BIT 0x99
0000            249   _RI0            BIT 0x98
0000            250   _SCON_6         BIT 0x9e
0000            251   _MCE            BIT 0x9d
0000            252   _REN            BIT 0x9c
0000            253   _TB8            BIT 0x9b
0000            254   _RB8            BIT 0x9a
0000            255   _TI             BIT 0x99
0000            256   _RI             BIT 0x98
0000            257   _P2_0           BIT 0xa0
0000            258   _P2_1           BIT 0xa1
0000            259   _P2_2           BIT 0xa2
0000            260   _P2_3           BIT 0xa3
0000            261   _P2_4           BIT 0xa4
0000            262   _P2_5           BIT 0xa5
0000            263   _P2_6           BIT 0xa6
0000            264   _P2_7           BIT 0xa7
0000            265   _EA             BIT 0xaf
0000            266   _ESPI0          BIT 0xae
0000            267   _ET2            BIT 0xad
0000            268   _ES0            BIT 0xac
0000            269   _ET1            BIT 0xab
0000            270   _EX1            BIT 0xaa
0000            271   _ET0            BIT 0xa9
0000            272   _EX0            BIT 0xa8
0000            273   _P3_0           BIT 0xb0
0000            274   _P3_1           BIT 0xb1
0000            275   _P3_2           BIT 0xb2
0000            276   _P3_3           BIT 0xb3
0000            277   _P3_4           BIT 0xb4
0000            278   _P3_5           BIT 0xb5
0000            279   _P3_6           BIT 0xb6
0000            280   _P3_7           BIT 0xb7
0000            281   _IP_7           BIT 0xbf
0000            282   _PSPI0          BIT 0xbe
0000            283   _PT2            BIT 0xbd
0000            284   _PS0            BIT 0xbc
0000            285   _PT1            BIT 0xbb
0000            286   _PX1            BIT 0xba
0000            287   _PT0            BIT 0xb9
0000            288   _PX0            BIT 0xb8
0000            289   _MASTER0        BIT 0xc7
0000            290   _TXMODE0        BIT 0xc6
0000            291   _STA0           BIT 0xc5
0000            292   _STO0           BIT 0xc4
0000            293   _ACKRQ0         BIT 0xc3
0000            294   _ARBLOST0       BIT 0xc2
0000            295   _ACK0           BIT 0xc1
0000            296   _SI0            BIT 0xc0
0000            297   _MASTER1        BIT 0xc7
0000            298   _TXMODE1        BIT 0xc6
0000            299   _STA1           BIT 0xc5
0000            300   _STO1           BIT 0xc4
0000            301   _ACKRQ1         BIT 0xc3
0000            302   _ARBLOST1       BIT 0xc2
0000            303   _ACK1           BIT 0xc1
0000            304   _SI1            BIT 0xc0
0000            305   _TF2            BIT 0xcf
0000            306   _TF2H           BIT 0xcf
0000            307   _TF2L           BIT 0xce
0000            308   _TF2LEN         BIT 0xcd
0000            309   _TF2CEN         BIT 0xcc
0000            310   _T2SPLIT        BIT 0xcb
0000            311   _TR2            BIT 0xca
0000            312   _T2CSS          BIT 0xc9
0000            313   _T2XCLK         BIT 0xc8
0000            314   _TF5H           BIT 0xcf
0000            315   _TF5L           BIT 0xce
0000            316   _TF5LEN         BIT 0xcd
0000            317   _TMR5CN_4       BIT 0xcc
0000            318   _T5SPLIT        BIT 0xcb
0000            319   _TR5            BIT 0xca
0000            320   _TMR5CN_1       BIT 0xc9
0000            321   _T5XCLK         BIT 0xc8
0000            322   _CY             BIT 0xd7
0000            323   _AC             BIT 0xd6
0000            324   _F0             BIT 0xd5
0000            325   _RS1            BIT 0xd4
0000            326   _RS0            BIT 0xd3
0000            327   _OV             BIT 0xd2
0000            328   _F1             BIT 0xd1
0000            329   _PARITY         BIT 0xd0
0000            330   _CF             BIT 0xdf
0000            331   _CR             BIT 0xde
0000            332   _PCA0CN_5       BIT 0xde
0000            333   _CCF4           BIT 0xdc
0000            334   _CCF3           BIT 0xdb
0000            335   _CCF2           BIT 0xda
0000            336   _CCF1           BIT 0xd9
0000            337   _CCF0           BIT 0xd8
0000            338   _ACC_7          BIT 0xe7
0000            339   _ACC_6          BIT 0xe6
0000            340   _ACC_5          BIT 0xe5
0000            341   _ACC_4          BIT 0xe4
0000            342   _ACC_3          BIT 0xe3
0000            343   _ACC_2          BIT 0xe2
0000            344   _ACC_1          BIT 0xe1
0000            345   _ACC_0          BIT 0xe0
0000            346   _AD0EN          BIT 0xef
0000            347   _AD0TM          BIT 0xee
0000            348   _AD0INT         BIT 0xed
0000            349   _AD0BUSY        BIT 0xec
0000            350   _AD0WINT        BIT 0xeb
0000            351   _AD0CM2         BIT 0xea
0000            352   _AD0CM1         BIT 0xe9
0000            353   _AD0CM0         BIT 0xe8
0000            354   _B_7            BIT 0xf7
0000            355   _B_6            BIT 0xf6
0000            356   _B_5            BIT 0xf5
0000            357   _B_4            BIT 0xf4
0000            358   _B_3            BIT 0xf3
0000            359   _B_2            BIT 0xf2
0000            360   _B_1            BIT 0xf1
0000            361   _B_0            BIT 0xf0
0000            362   _SPIF           BIT 0xff
0000            363   _WCOL           BIT 0xfe
0000            364   _MODF           BIT 0xfd
0000            365   _RXOVRN         BIT 0xfc
0000            366   _NSSMD1         BIT 0xfb
0000            367   _NSSMD0         BIT 0xfa
0000            368   _TXBMT          BIT 0xf9
0000            369   _SPIEN          BIT 0xf8
0000            370   ;--------------------------------------------------------
0000            371   ; overlayable register banks
0000            372   ;--------------------------------------------------------
0000            373            rbank0 segment data overlay
0000            374   ;--------------------------------------------------------
0000            375   ; internal ram data
0000            376   ;--------------------------------------------------------
0000            377            rseg R_DSEG
0000            378   _pwm_count:
0000            379            ds 1
0001            380   _mode:
0001            381            ds 1
0002            382   _pwm_both:
0002            383            ds 1
0003            384   _pwm_Left0:
0003            385            ds 1
0004            386   _pwm_Left1:
0004            387            ds 1
0005            388   _pwm_Right0:
0005            389            ds 1
0006            390   _pwm_Right1:
0006            391            ds 1
0007            392   _direction:
0007            393            ds 1
0008            394   _currentcmd:
0008            395            ds 1
0009            396   _currentstate:
0009            397            ds 1
000A            398   _overflow_count:
000A            399            ds 1
000B            400   _time:
000B            401            ds 4
000F            402   _distance:
000F            403            ds 4
0013            404   _main_v1_1_72:
0013            405            ds 4
0017            406   _main_v2_1_72:
0017            407            ds 4
001B            408   _linetrack_vleft_1_93:
001B            409            ds 4
001F            410   _linetrack_vright_1_93:
001F            411            ds 4
0023            412   _linetrack_sloc0_1_0:
0023            413            ds 4
0027            414   _linetrack_sloc1_1_0:
0027            415            ds 4
002B            416   _turncar_v_1_99:
002B            417            ds 4
002F            418   _uturn_vleft_1_109:
002F            419            ds 4
0033            420   _uturn_vright_1_109:
0033            421            ds 4
0037            422   ;--------------------------------------------------------
0037            423   ; overlayable items in internal ram 
0037            424   ;--------------------------------------------------------
0000            425            rseg R_OSEG
0000            426   ;--------------------------------------------------------
0000            427   ; indirectly addressable internal ram data
0000            428   ;--------------------------------------------------------
0000            429            rseg R_ISEG
0000            430   ;--------------------------------------------------------
0000            431   ; absolute internal ram data
0000            432   ;--------------------------------------------------------
0000            433            DSEG
0000            434   ;--------------------------------------------------------
0000            435   ; bit data
0000            436   ;--------------------------------------------------------
0000            437            rseg R_BSEG
0000            438   _main_sloc0_1_0:
0000            439            DBIT    1
0001            440   _Timer2_ISR_sloc0_1_0:
0001            441            DBIT    1
0002            442   ;--------------------------------------------------------
0002            443   ; paged external ram data
0002            444   ;--------------------------------------------------------
0000            445            rseg R_PSEG
0000            446   ;--------------------------------------------------------
0000            447   ; external ram data
0000            448   ;--------------------------------------------------------
0000            449            rseg R_XSEG
0000            450   ;--------------------------------------------------------
0000            451   ; absolute external ram data
0000            452   ;--------------------------------------------------------
0000            453            XSEG
0000            454   ;--------------------------------------------------------
0000            455   ; external initialized ram data
0000            456   ;--------------------------------------------------------
0000            457            rseg R_IXSEG
0000            458            rseg R_HOME
0000            459            rseg R_GSINIT
0000            460            rseg R_CSEG
0000            461   ;--------------------------------------------------------
0000            462   ; Reset entry point and interrupt vectors
0000            463   ;--------------------------------------------------------
0000            464            CSEG at 0x0000
0000 020100     465            ljmp    _crt0
002B            466            CSEG at 0x002b
002B 020100     467            ljmp    _Timer2_ISR
002E            468   ;--------------------------------------------------------
002E            469   ; global & static initialisations
002E            470   ;--------------------------------------------------------
0000            471            rseg R_HOME
0000            472            rseg R_GSINIT
0000            473            rseg R_GSINIT
0000            474   ;--------------------------------------------------------
0000            475   ; data variables initialization
0000            476   ;--------------------------------------------------------
0000            477            rseg R_DINIT
0000            478   ;        robot.c:8: volatile  char pwm_count=0;
0000 75D800     479            mov     _pwm_count,#0x00
0003            480   ;        robot.c:9: volatile  char mode = 0;
0003 759800     481            mov     _mode,#0x00
0006            482   ;        robot.c:10: volatile  char pwm_both =0;
0006 755800     483            mov     _pwm_both,#0x00
0009            484   ;        robot.c:11: volatile  char pwm_Left0 = 0; //p1.5
0009 751800     485            mov     _pwm_Left0,#0x00
000C            486   ;        robot.c:12: volatile  char pwm_Left1 = 0; //p1.6
000C 75D800     487            mov     _pwm_Left1,#0x00
000F            488   ;        robot.c:13: volatile  char pwm_Right0 = 0; //p2.0
000F 759800     489            mov     _pwm_Right0,#0x00
0012            490   ;        robot.c:14: volatile  char pwm_Right1 = 0; //p2.1
0012 755800     491            mov     _pwm_Right1,#0x00
0015            492   ;        robot.c:15: volatile  char direction = 0; // 1 for back 0 for forward
0015 751800     493            mov     _direction,#0x00
0018            494   ;        robot.c:17: volatile  char currentcmd = 0;
0018 75D800     495            mov     _currentcmd,#0x00
001B            496   ;        robot.c:18: volatile  char currentstate = 1;
001B 759801     497            mov     _currentstate,#0x01
001E            498   ;        robot.c:21: volatile float time = 0.0f;
001E 751800     499            mov     _time,#0x00
0021 751900     500            mov     (_time + 1),#0x00
0024 751A00     501            mov     (_time + 2),#0x00
0027 751B00     502            mov     (_time + 3),#0x00
002A            503   ;        robot.c:22: volatile float distance = 0.0f;
002A 75D800     504            mov     _distance,#0x00
002D 75D900     505            mov     (_distance + 1),#0x00
0030 75DA00     506            mov     (_distance + 2),#0x00
0033 75DB00     507            mov     (_distance + 3),#0x00
0036            508            ; The linker places a 'ret' at the end of segment R_DINIT.
0036            509   ;--------------------------------------------------------
0036            510   ; code
0036            511   ;--------------------------------------------------------
0000            512            rseg R_CSEG
0000            513   ;------------------------------------------------------------
0000            514   ;Allocation info for local variables in function 'main'
0000            515   ;------------------------------------------------------------
0000            516   ;v1                        Allocated with name '_main_v1_1_72'
0000            517   ;v2                        Allocated with name '_main_v2_1_72'
0000            518   ;------------------------------------------------------------
0000            519   ;        robot.c:24: void main(void) {
0000            520   ;        -----------------------------------------
0000            521   ;         function main
0000            522   ;        -----------------------------------------
0000            523   _main:
0000            524            using   0
0000            525   ;        robot.c:26: volatile float v1 = 0;
0000 751800     526            mov     _main_v1_1_72,#0x00
0003 751900     527            mov     (_main_v1_1_72 + 1),#0x00
0006 751A00     528            mov     (_main_v1_1_72 + 2),#0x00
0009 751B00     529            mov     (_main_v1_1_72 + 3),#0x00
000C            530   ;        robot.c:27: volatile float v2 = 0;
000C 755800     531            mov     _main_v2_1_72,#0x00
000F 755900     532            mov     (_main_v2_1_72 + 1),#0x00
0012 755A00     533            mov     (_main_v2_1_72 + 2),#0x00
0015 755B00     534            mov     (_main_v2_1_72 + 3),#0x00
0018            535   ;        robot.c:29: MOTOR_LEFT0 = 0;
0018 C295       536            clr     _P1_5
001A            537   ;        robot.c:30: MOTOR_LEFT1 = 0;
001A C296       538            clr     _P1_6
001C            539   ;        robot.c:31: MOTOR_RIGHT0 = 0;
001C C2A0       540            clr     _P2_0
001E            541   ;        robot.c:32: MOTOR_RIGHT1 = 0;
001E C2A1       542            clr     _P2_1
0020            543   ;        robot.c:35: currentstate = 1;           //1-FORWARD, 2-BACKWARDS, 3-STOPPED, 4-DEBUGGER
0020 759801     544            mov     _currentstate,#0x01
0023            545   ;        robot.c:36: currentcmd = 0;             //0-NO COMMAND, 1-TURN LEFT, 2-TURN RIGHT, 3-FORWARDS, 4-BACKWARDS, 5-STOP, 6-UTURN
0023 75D800     546            mov     _currentcmd,#0x00
0026            547   ;        robot.c:42: InitPinADC(2, 3); // Configure P2.3 as analog input (tank1)
0026 750003     548            mov     _InitPinADC_PARM_2,#0x03
0029 758202     549            mov     dpl,#0x02
002C 120100     550            lcall   _InitPinADC
002F            551   ;        robot.c:43: InitPinADC(2, 4); // Configure P2.4 as analog input         (tank1)
002F 750004     552            mov     _InitPinADC_PARM_2,#0x04
0032 758202     553            mov     dpl,#0x02
0035 120100     554            lcall   _InitPinADC
0038            555   ;        robot.c:44: InitPinADC(2, 5); // Configure P2.5 as analog input (tank2)
0038 750005     556            mov     _InitPinADC_PARM_2,#0x05
003B 758202     557            mov     dpl,#0x02
003E 120100     558            lcall   _InitPinADC
0041            559   ;        robot.c:45: InitPinADC(2, 6); // Configure P2.6 as analog input (tank2)
0041 750006     560            mov     _InitPinADC_PARM_2,#0x06
0044 758202     561            mov     dpl,#0x02
0047 120100     562            lcall   _InitPinADC
004A            563   ;        robot.c:48: InitADC();  
004A 120100     564            lcall   _InitADC
004D            565   ;        robot.c:50: mxInit();
004D 120100     566            lcall   _mxInit
0050            567   ;        robot.c:53: while (1) {         
0050            568   L002054?:
0050            569   ;        robot.c:56: currentcmd = readData(currentcmd); 
0050 85D882     570            mov     dpl,_currentcmd
0053 120100     571            lcall   _readData
0056 8582D8     572            mov     _currentcmd,dpl
0059            573   ;        robot.c:62: if (currentcmd == CMD_LEFT) mxDirection(0);
0059 7401       574            mov     a,#0x01
005B B5D818     575            cjne    a,_currentcmd,L002014?
005E 758200     576            mov     dpl,#0x00
0061 120100     577            lcall   _mxDirection
0064 8001       578            sjmp    L002015?
0066            579   L002014?:
0066            580   ;        robot.c:63: else if (currentcmd == CMD_RIGHT) mxDirection(1);
0066 7402       581            mov     a,#0x02
0068 B5D8D8     582            cjne    a,_currentcmd,L002011?
006B 758201     583            mov     dpl,#0x01
006E 120100     584            lcall   _mxDirection
0071 8001       585            sjmp    L002015?
0073            586   L002011?:
0073            587   ;        robot.c:64: else if (currentcmd == CMD_STOP||currentstate == 3) mxStop();
0073 7405       588            mov     a,#0x05
0075 B5D818     589            cjne    a,_currentcmd,L002096?
0078 8001       590            sjmp    L002006?
007A            591   L002096?:
007A 7403       592            mov     a,#0x03
007C B59898     593            cjne    a,_currentstate,L002007?
007F            594   L002006?:
007F 120100     595            lcall   _mxStop
0082 8001       596            sjmp    L002015?
0084            597   L002007?:
0084            598   ;        robot.c:65: else if (currentcmd == CMD_UTURN) mxUTurn();
0084 7406       599            mov     a,#0x06
0086 B5D818     600            cjne    a,_currentcmd,L002004?
0089 120100     601            lcall   _mxUTurn
008C 8001       602            sjmp    L002015?
008E            603   L002004?:
008E            604   ;        robot.c:66: else if (currentcmd == CMD_NONE) mxClear();
008E E5D8       605            mov     a,_currentcmd
0090 7001       606            jnz     L002015?
0092 120100     607            lcall   _mxClear
0095            608   L002015?:
0095            609   ;        robot.c:69: Sonar_Reading();
0095 120100     610            lcall   _Sonar_Reading
0098            611   ;        robot.c:70: if (distance < 7) {
0098 E4         612            clr     a
0099 C0E0       613            push    acc
009B C0E0       614            push    acc
009D 74E0       615            mov     a,#0xE0
009F C0E0       616            push    acc
00A1 7440       617            mov     a,#0x40
00A3 C0E0       618            push    acc
00A5 85D882     619            mov     dpl,_distance
00A8 85D983     620            mov     dph,(_distance + 1)
00AB 85DAF0     621            mov     b,(_distance + 2)
00AE E5DB       622            mov     a,(_distance + 3)
00B0 120100     623            lcall   ___fslt
00B3 AA82       624            mov     r2,dpl
00B5 E581       625            mov     a,sp
00B7 24FC       626            add     a,#0xfc
00B9 F581       627            mov     sp,a
00BB EA         628            mov     a,r2
00BC 6001       629            jz      L002020?
00BE            630   ;        robot.c:71: stopcar();
00BE 120100     631            lcall   _stopcar
00C1            632   ;        robot.c:72: while (distance < 7) {
00C1            633   L002016?:
00C1 E4         634            clr     a
00C2 C0E0       635            push    acc
00C4 C0E0       636            push    acc
00C6 74E0       637            mov     a,#0xE0
00C8 C0E0       638            push    acc
00CA 7440       639            mov     a,#0x40
00CC C0E0       640            push    acc
00CE 85D882     641            mov     dpl,_distance
00D1 85D983     642            mov     dph,(_distance + 1)
00D4 85DAF0     643            mov     b,(_distance + 2)
00D7 E5DB       644            mov     a,(_distance + 3)
00D9 120100     645            lcall   ___fslt
00DC AA82       646            mov     r2,dpl
00DE E581       647            mov     a,sp
00E0 24FC       648            add     a,#0xfc
00E2 F581       649            mov     sp,a
00E4 EA         650            mov     a,r2
00E5 6001       651            jz      L002020?
00E7            652   ;        robot.c:73: Sonar_Reading();
00E7 120100     653            lcall   _Sonar_Reading
00EA            654   ;        robot.c:74: mxStop();
00EA 120100     655            lcall   _mxStop
00ED 8001       656            sjmp    L002016?
00EF            657   L002020?:
00EF            658   ;        robot.c:79: switch (currentstate) {
00EF AA98       659            mov     r2,_currentstate
00F1 BA0198     660            cjne    r2,#0x01,L002104?
00F4 8001       661            sjmp    L002021?
00F6            662   L002104?:
00F6 BA0218     663            cjne    r2,#0x02,L002105?
00F9 8001       664            sjmp    L002022?
00FB            665   L002105?:
00FB            666   ;        robot.c:80: case FORWARD_STATE:
00FB BA0398     667            cjne    r2,#0x03,L002024?
00FE 8001       668            sjmp    L002023?
0100            669   L002021?:
0100            670   ;        robot.c:81: linetrack(0);       // forwards
0100 900000     671            mov     dptr,#0x0000
0103 120100     672            lcall   _linetrack
0106            673   ;        robot.c:83: v1 = Volts_at_Pin(TANK_FL);
0106 75820B     674            mov     dpl,#0x0B
0109 120100     675            lcall   _Volts_at_Pin
010C 858218     676            mov     _main_v1_1_72,dpl
010F 858319     677            mov     (_main_v1_1_72 + 1),dph
0112 85F01A     678            mov     (_main_v1_1_72 + 2),b
0115 F51B       679            mov     (_main_v1_1_72 + 3),a
0117            680   ;        robot.c:84: v2 = Volts_at_Pin(TANK_FR);
0117 75820C     681            mov     dpl,#0x0C
011A 120100     682            lcall   _Volts_at_Pin
011D 858258     683            mov     _main_v2_1_72,dpl
0120 858359     684            mov     (_main_v2_1_72 + 1),dph
0123 85F05A     685            mov     (_main_v2_1_72 + 2),b
0126 F55B       686            mov     (_main_v2_1_72 + 3),a
0128            687   ;        robot.c:85: break;
0128            688   ;        robot.c:86: case REVERSE_STATE:
0128 8001       689            sjmp    L002024?
012A            690   L002022?:
012A            691   ;        robot.c:87: linetrack(1);       // backwards
012A 900001     692            mov     dptr,#0x0001
012D 120100     693            lcall   _linetrack
0130            694   ;        robot.c:89: v2 = Volts_at_Pin(TANK_RL);
0130 75820D     695            mov     dpl,#0x0D
0133 120100     696            lcall   _Volts_at_Pin
0136 858258     697            mov     _main_v2_1_72,dpl
0139 858359     698            mov     (_main_v2_1_72 + 1),dph
013C 85F05A     699            mov     (_main_v2_1_72 + 2),b
013F F55B       700            mov     (_main_v2_1_72 + 3),a
0141            701   ;        robot.c:90: v1 = Volts_at_Pin(TANK_RR);
0141 75820E     702            mov     dpl,#0x0E
0144 120100     703            lcall   _Volts_at_Pin
0147 858218     704            mov     _main_v1_1_72,dpl
014A 858319     705            mov     (_main_v1_1_72 + 1),dph
014D 85F01A     706            mov     (_main_v1_1_72 + 2),b
0150 F51B       707            mov     (_main_v1_1_72 + 3),a
0152            708   ;        robot.c:91: break;
0152            709   ;        robot.c:92: case STOP_STATE:
0152 8001       710            sjmp    L002024?
0154            711   L002023?:
0154            712   ;        robot.c:93: stopcar();          // stop car
0154 120100     713            lcall   _stopcar
0157            714   ;        robot.c:94: mxStop();
0157 120100     715            lcall   _mxStop
015A            716   ;        robot.c:96: }
015A            717   L002024?:
015A            718   ;        robot.c:99: switch (currentcmd) {
015A E5D8       719            mov     a,_currentcmd
015C FA         720            mov     r2,a
015D 30E758     721            jnb     acc.7,L002107?
0160 020100     722            ljmp    L002051?
0163            723   L002107?:
0163 C3         724            clr     c
0164 7486       725            mov     a,#(0x06 ^ 0x80)
0166 8AF0       726            mov     b,r2
0168 63F080     727            xrl     b,#0x80
016B 95F0       728            subb    a,b
016D 5001       729            jnc     L002108?
016F 020100     730            ljmp    L002051?
0172            731   L002108?:
0172 EA         732            mov     a,r2
0173 2A         733            add     a,r2
0174 2A         734            add     a,r2
0175 90A218     735            mov     dptr,#L002109?
0178 73         736            jmp     @a+dptr
0179            737   L002109?:
0179 020100     738            ljmp    L002025?
017C 020100     739            ljmp    L002039?
017F 020100     740            ljmp    L002043?
0182 020100     741            ljmp    L002047?
0185 020100     742            ljmp    L002048?
0188 020100     743            ljmp    L002049?
018B 020100     744            ljmp    L002050?
018E            745   ;        robot.c:101: case CMD_NONE:
018E            746   L002025?:
018E            747   ;        robot.c:103: if ((currentstate-1) ? 
018E AA98       748            mov     r2,_currentstate
0190 E598       749            mov     a,_currentstate
0192 33         750            rlc     a
0193 95E0       751            subb    a,acc
0195 FB         752            mov     r3,a
0196 1A         753            dec     r2
0197 BAFF18     754            cjne    r2,#0xff,L002110?
019A 1B         755            dec     r3
019B            756   L002110?:
019B EA         757            mov     a,r2
019C 4B         758            orl     a,r3
019D 6001       759            jz      L002058?
019F            760   ;        robot.c:104: (v1 > 1.2 && v2 > 1.2) :
019F 749A       761            mov     a,#0x9A
01A1 C0E0       762            push    acc
01A3 7499       763            mov     a,#0x99
01A5 C0E0       764            push    acc
01A7 C0E0       765            push    acc
01A9 743F       766            mov     a,#0x3F
01AB C0E0       767            push    acc
01AD 851882     768            mov     dpl,_main_v1_1_72
01B0 851983     769            mov     dph,(_main_v1_1_72 + 1)
01B3 851AF0     770            mov     b,(_main_v1_1_72 + 2)
01B6 E51B       771            mov     a,(_main_v1_1_72 + 3)
01B8 120100     772            lcall   ___fsgt
01BB AA82       773            mov     r2,dpl
01BD E581       774            mov     a,sp
01BF 24FC       775            add     a,#0xfc
01C1 F581       776            mov     sp,a
01C3 EA         777            mov     a,r2
01C4 6001       778            jz      L002060?
01C6 749A       779            mov     a,#0x9A
01C8 C0E0       780            push    acc
01CA 7499       781            mov     a,#0x99
01CC C0E0       782            push    acc
01CE C0E0       783            push    acc
01D0 743F       784            mov     a,#0x3F
01D2 C0E0       785            push    acc
01D4 855882     786            mov     dpl,_main_v2_1_72
01D7 855983     787            mov     dph,(_main_v2_1_72 + 1)
01DA 855AF0     788            mov     b,(_main_v2_1_72 + 2)
01DD E55B       789            mov     a,(_main_v2_1_72 + 3)
01DF 120100     790            lcall   ___fsgt
01E2 AA82       791            mov     r2,dpl
01E4 E581       792            mov     a,sp
01E6 24FC       793            add     a,#0xfc
01E8 F581       794            mov     sp,a
01EA EA         795            mov     a,r2
01EB 7001       796            jnz     L002061?
01ED            797   L002060?:
01ED 7A00       798            mov     r2,#0x00
01EF 8001       799            sjmp    L002062?
01F1            800   L002061?:
01F1 7A01       801            mov     r2,#0x01
01F3            802   L002062?:
01F3 EA         803            mov     a,r2
01F4 24FF       804            add     a,#0xff
01F6 92B8       805            mov     _main_sloc0_1_0,c
01F8 8001       806            sjmp    L002059?
01FA            807   L002058?:
01FA            808   ;        robot.c:105: (v1 > 0.7 && v2 > 1)) {
01FA 7433       809            mov     a,#0x33
01FC C0E0       810            push    acc
01FE C0E0       811            push    acc
0200 C0E0       812            push    acc
0202 743F       813            mov     a,#0x3F
0204 C0E0       814            push    acc
0206 851882     815            mov     dpl,_main_v1_1_72
0209 851983     816            mov     dph,(_main_v1_1_72 + 1)
020C 851AF0     817            mov     b,(_main_v1_1_72 + 2)
020F E51B       818            mov     a,(_main_v1_1_72 + 3)
0211 120100     819            lcall   ___fsgt
0214 AA82       820            mov     r2,dpl
0216 E581       821            mov     a,sp
0218 24FC       822            add     a,#0xfc
021A F581       823            mov     sp,a
021C EA         824            mov     a,r2
021D 6001       825            jz      L002063?
021F E4         826            clr     a
0220 C0E0       827            push    acc
0222 C0E0       828            push    acc
0224 7480       829            mov     a,#0x80
0226 C0E0       830            push    acc
0228 743F       831            mov     a,#0x3F
022A C0E0       832            push    acc
022C 855882     833            mov     dpl,_main_v2_1_72
022F 855983     834            mov     dph,(_main_v2_1_72 + 1)
0232 855AF0     835            mov     b,(_main_v2_1_72 + 2)
0235 E55B       836            mov     a,(_main_v2_1_72 + 3)
0237 120100     837            lcall   ___fsgt
023A AA82       838            mov     r2,dpl
023C E581       839            mov     a,sp
023E 24FC       840            add     a,#0xfc
0240 F581       841            mov     sp,a
0242 EA         842            mov     a,r2
0243 7001       843            jnz     L002064?
0245            844   L002063?:
0245 7A00       845            mov     r2,#0x00
0247 8001       846            sjmp    L002065?
0249            847   L002064?:
0249 7A01       848            mov     r2,#0x01
024B            849   L002065?:
024B EA         850            mov     a,r2
024C 24FF       851            add     a,#0xff
024E 92B8       852            mov     _main_sloc0_1_0,c
0250            853   L002059?:
0250 20B898     854            jb      _main_sloc0_1_0,L002116?
0253 020100     855            ljmp    L002054?
0256            856   L002116?:
0256            857   ;        robot.c:108: if (currentstate == 1) {
0256 7401       858            mov     a,#0x01
0258 B598D8     859            cjne    a,_currentstate,L002035?
025B            860   ;        robot.c:109: if (Volts_at_Pin(TANK_RL)>Volts_at_Pin(TANK_RR)) {
025B 75820D     861            mov     dpl,#0x0D
025E 120100     862            lcall   _Volts_at_Pin
0261 AA82       863            mov     r2,dpl
0263 AB83       864            mov     r3,dph
0265 ACF0       865            mov     r4,b
0267 FD         866            mov     r5,a
0268 75820E     867            mov     dpl,#0x0E
026B C002       868            push    ar2
026D C003       869            push    ar3
026F C004       870            push    ar4
0271 C005       871            push    ar5
0273 120100     872            lcall   _Volts_at_Pin
0276 AE82       873            mov     r6,dpl
0278 AF83       874            mov     r7,dph
027A A8F0       875            mov     r0,b
027C F9         876            mov     r1,a
027D D005       877            pop     ar5
027F D004       878            pop     ar4
0281 D003       879            pop     ar3
0283 D002       880            pop     ar2
0285 C006       881            push    ar6
0287 C007       882            push    ar7
0289 C000       883            push    ar0
028B C001       884            push    ar1
028D 8A82       885            mov     dpl,r2
028F 8B83       886            mov     dph,r3
0291 8CF0       887            mov     b,r4
0293 ED         888            mov     a,r5
0294 120100     889            lcall   ___fsgt
0297 AA82       890            mov     r2,dpl
0299 E581       891            mov     a,sp
029B 24FC       892            add     a,#0xfc
029D F581       893            mov     sp,a
029F EA         894            mov     a,r2
02A0 6001       895            jz      L002027?
02A2            896   ;        robot.c:110: pwm_Left1 = 50;
02A2 75D832     897            mov     _pwm_Left1,#0x32
02A5            898   ;        robot.c:111: pwm_Left0 = -1;
02A5 7518FF     899            mov     _pwm_Left0,#0xFF
02A8            900   ;        robot.c:112: pwm_Right0 = 30;
02A8 75981E     901            mov     _pwm_Right0,#0x1E
02AB            902   ;        robot.c:113: pwm_Right1 = -1;
02AB 7558FF     903            mov     _pwm_Right1,#0xFF
02AE 8001       904            sjmp    L002036?
02B0            905   L002027?:
02B0            906   ;        robot.c:116: pwm_Left1 = 30;
02B0 75D81E     907            mov     _pwm_Left1,#0x1E
02B3            908   ;        robot.c:117: pwm_Left0 = -1;
02B3 7518FF     909            mov     _pwm_Left0,#0xFF
02B6            910   ;        robot.c:118: pwm_Right0 = 50;
02B6 759832     911            mov     _pwm_Right0,#0x32
02B9            912   ;        robot.c:119: pwm_Right1 = -1;
02B9 7558FF     913            mov     _pwm_Right1,#0xFF
02BC 8001       914            sjmp    L002036?
02BE            915   L002035?:
02BE            916   ;        robot.c:121: } else if (currentstate == 2) {
02BE 7402       917            mov     a,#0x02
02C0 B59858     918            cjne    a,_currentstate,L002036?
02C3            919   ;        robot.c:122: if (Volts_at_Pin(TANK_FL)>Volts_at_Pin(TANK_FR)) {
02C3 75820B     920            mov     dpl,#0x0B
02C6 120100     921            lcall   _Volts_at_Pin
02C9 AA82       922            mov     r2,dpl
02CB AB83       923            mov     r3,dph
02CD ACF0       924            mov     r4,b
02CF FD         925            mov     r5,a
02D0 75820C     926            mov     dpl,#0x0C
02D3 C002       927            push    ar2
02D5 C003       928            push    ar3
02D7 C004       929            push    ar4
02D9 C005       930            push    ar5
02DB 120100     931            lcall   _Volts_at_Pin
02DE AE82       932            mov     r6,dpl
02E0 AF83       933            mov     r7,dph
02E2 A8F0       934            mov     r0,b
02E4 F9         935            mov     r1,a
02E5 D005       936            pop     ar5
02E7 D004       937            pop     ar4
02E9 D003       938            pop     ar3
02EB D002       939            pop     ar2
02ED C006       940            push    ar6
02EF C007       941            push    ar7
02F1 C000       942            push    ar0
02F3 C001       943            push    ar1
02F5 8A82       944            mov     dpl,r2
02F7 8B83       945            mov     dph,r3
02F9 8CF0       946            mov     b,r4
02FB ED         947            mov     a,r5
02FC 120100     948            lcall   ___fsgt
02FF AA82       949            mov     r2,dpl
0301 E581       950            mov     a,sp
0303 24FC       951            add     a,#0xfc
0305 F581       952            mov     sp,a
0307 EA         953            mov     a,r2
0308 6001       954            jz      L002030?
030A            955   ;        robot.c:123: pwm_Left0 = 50;
030A 751832     956            mov     _pwm_Left0,#0x32
030D            957   ;        robot.c:124: pwm_Left1 = -1;
030D 75D8FF     958            mov     _pwm_Left1,#0xFF
0310            959   ;        robot.c:125: pwm_Right0 = -1;
0310 7598FF     960            mov     _pwm_Right0,#0xFF
0313            961   ;        robot.c:126: pwm_Right1 = 30;
0313 75581E     962            mov     _pwm_Right1,#0x1E
0316 8001       963            sjmp    L002036?
0318            964   L002030?:
0318            965   ;        robot.c:129: pwm_Left0 = 30;
0318 75181E     966            mov     _pwm_Left0,#0x1E
031B            967   ;        robot.c:130: pwm_Left1 = -1;
031B 75D8FF     968            mov     _pwm_Left1,#0xFF
031E            969   ;        robot.c:131: pwm_Right0 = -1;
031E 7598FF     970            mov     _pwm_Right0,#0xFF
0321            971   ;        robot.c:132: pwm_Right1 = 50;
0321 755832     972            mov     _pwm_Right1,#0x32
0324            973   L002036?:
0324            974   ;        robot.c:136: waitms(1500);
0324 9005DC     975            mov     dptr,#0x05DC
0327 120100     976            lcall   _waitms
032A            977   ;        robot.c:139: break;
032A 020100     978            ljmp    L002054?
032D            979   ;        robot.c:141: case CMD_LEFT:
032D            980   L002039?:
032D            981   ;        robot.c:144: if (v1 > 0.7 && v2 >1)  {
032D 7433       982            mov     a,#0x33
032F C0E0       983            push    acc
0331 C0E0       984            push    acc
0333 C0E0       985            push    acc
0335 743F       986            mov     a,#0x3F
0337 C0E0       987            push    acc
0339 851882     988            mov     dpl,_main_v1_1_72
033C 851983     989            mov     dph,(_main_v1_1_72 + 1)
033F 851AF0     990            mov     b,(_main_v1_1_72 + 2)
0342 E51B       991            mov     a,(_main_v1_1_72 + 3)
0344 120100     992            lcall   ___fsgt
0347 AA82       993            mov     r2,dpl
0349 E581       994            mov     a,sp
034B 24FC       995            add     a,#0xfc
034D F581       996            mov     sp,a
034F EA         997            mov     a,r2
0350 7001       998            jnz     L002123?
0352 020100     999            ljmp    L002054?
0355           1000   L002123?:
0355 E4        1001            clr     a
0356 C0E0      1002            push    acc
0358 C0E0      1003            push    acc
035A 7480      1004            mov     a,#0x80
035C C0E0      1005            push    acc
035E 743F      1006            mov     a,#0x3F
0360 C0E0      1007            push    acc
0362 855882    1008            mov     dpl,_main_v2_1_72
0365 855983    1009            mov     dph,(_main_v2_1_72 + 1)
0368 855AF0    1010            mov     b,(_main_v2_1_72 + 2)
036B E55B      1011            mov     a,(_main_v2_1_72 + 3)
036D 120100    1012            lcall   ___fsgt
0370 AA82      1013            mov     r2,dpl
0372 E581      1014            mov     a,sp
0374 24FC      1015            add     a,#0xfc
0376 F581      1016            mov     sp,a
0378 EA        1017            mov     a,r2
0379 7001      1018            jnz     L002124?
037B 020100    1019            ljmp    L002054?
037E           1020   L002124?:
037E           1021   ;        robot.c:148: turncar(currentstate);
037E AA98      1022            mov     r2,_currentstate
0380 E598      1023            mov     a,_currentstate
0382 33        1024            rlc     a
0383 95E0      1025            subb    a,acc
0385 FB        1026            mov     r3,a
0386 8A82      1027            mov     dpl,r2
0388 8B83      1028            mov     dph,r3
038A 120100    1029            lcall   _turncar
038D           1030   ;        robot.c:149: currentcmd = 0;
038D 75D800    1031            mov     _currentcmd,#0x00
0390           1032   ;        robot.c:151: break;
0390 020100    1033            ljmp    L002054?
0393           1034   ;        robot.c:154: case CMD_RIGHT:
0393           1035   L002043?:
0393           1036   ;        robot.c:157: if (v1 > 0.7 && v2 >1) {
0393 7433      1037            mov     a,#0x33
0395 C0E0      1038            push    acc
0397 C0E0      1039            push    acc
0399 C0E0      1040            push    acc
039B 743F      1041            mov     a,#0x3F
039D C0E0      1042            push    acc
039F 851882    1043            mov     dpl,_main_v1_1_72
03A2 851983    1044            mov     dph,(_main_v1_1_72 + 1)
03A5 851AF0    1045            mov     b,(_main_v1_1_72 + 2)
03A8 E51B      1046            mov     a,(_main_v1_1_72 + 3)
03AA 120100    1047            lcall   ___fsgt
03AD AA82      1048            mov     r2,dpl
03AF E581      1049            mov     a,sp
03B1 24FC      1050            add     a,#0xfc
03B3 F581      1051            mov     sp,a
03B5 EA        1052            mov     a,r2
03B6 7001      1053            jnz     L002125?
03B8 020100    1054            ljmp    L002054?
03BB           1055   L002125?:
03BB E4        1056            clr     a
03BC C0E0      1057            push    acc
03BE C0E0      1058            push    acc
03C0 7480      1059            mov     a,#0x80
03C2 C0E0      1060            push    acc
03C4 743F      1061            mov     a,#0x3F
03C6 C0E0      1062            push    acc
03C8 855882    1063            mov     dpl,_main_v2_1_72
03CB 855983    1064            mov     dph,(_main_v2_1_72 + 1)
03CE 855AF0    1065            mov     b,(_main_v2_1_72 + 2)
03D1 E55B      1066            mov     a,(_main_v2_1_72 + 3)
03D3 120100    1067            lcall   ___fsgt
03D6 AA82      1068            mov     r2,dpl
03D8 E581      1069            mov     a,sp
03DA 24FC      1070            add     a,#0xfc
03DC F581      1071            mov     sp,a
03DE EA        1072            mov     a,r2
03DF 7001      1073            jnz     L002126?
03E1 020100    1074            ljmp    L002054?
03E4           1075   L002126?:
03E4           1076   ;        robot.c:160: turncar(currentstate + 2); //1 = right
03E4 AA98      1077            mov     r2,_currentstate
03E6 E598      1078            mov     a,_currentstate
03E8 33        1079            rlc     a
03E9 95E0      1080            subb    a,acc
03EB FB        1081            mov     r3,a
03EC 8A82      1082            mov     dpl,r2
03EE 8B83      1083            mov     dph,r3
03F0 A3        1084            inc     dptr
03F1 A3        1085            inc     dptr
03F2 120100    1086            lcall   _turncar
03F5           1087   ;        robot.c:161: currentcmd = 0;
03F5 75D800    1088            mov     _currentcmd,#0x00
03F8           1089   ;        robot.c:163: break;
03F8 020100    1090            ljmp    L002054?
03FB           1091   ;        robot.c:166: case CMD_FORWARD:
03FB           1092   L002047?:
03FB           1093   ;        robot.c:169: currentstate = 1;
03FB 759801    1094            mov     _currentstate,#0x01
03FE           1095   ;        robot.c:170: currentcmd = 0;
03FE 75D800    1096            mov     _currentcmd,#0x00
0401           1097   ;        robot.c:171: break;
0401 020100    1098            ljmp    L002054?
0404           1099   ;        robot.c:174: case CMD_REVERSE:
0404           1100   L002048?:
0404           1101   ;        robot.c:177: currentstate = 2;
0404 759802    1102            mov     _currentstate,#0x02
0407           1103   ;        robot.c:178: currentcmd = 0;
0407 75D800    1104            mov     _currentcmd,#0x00
040A           1105   ;        robot.c:179: break;
040A 020100    1106            ljmp    L002054?
040D           1107   ;        robot.c:182: case CMD_STOP:
040D           1108   L002049?:
040D           1109   ;        robot.c:185: currentstate = 3;
040D 759803    1110            mov     _currentstate,#0x03
0410           1111   ;        robot.c:186: currentcmd = 0;
0410 75D800    1112            mov     _currentcmd,#0x00
0413           1113   ;        robot.c:187: break;
0413 020100    1114            ljmp    L002054?
0416           1115   ;        robot.c:190: case CMD_UTURN:
0416           1116   L002050?:
0416           1117   ;        robot.c:191: mxUTurn();
0416 120100    1118            lcall   _mxUTurn
0419           1119   ;        robot.c:192: uturn();
0419 120100    1120            lcall   _uturn
041C           1121   ;        robot.c:194: currentcmd = 0;
041C 75D800    1122            mov     _currentcmd,#0x00
041F           1123   ;        robot.c:195: mxInit(); 
041F 120100    1124            lcall   _mxInit
0422           1125   ;        robot.c:196: break;
0422 020100    1126            ljmp    L002054?
0425           1127   ;        robot.c:199: default: 
0425           1128   L002051?:
0425           1129   ;        robot.c:200: currentstate = 1;
0425 759801    1130            mov     _currentstate,#0x01
0428           1131   ;        robot.c:201: }
0428 020100    1132            ljmp    L002054?
042B           1133   ;------------------------------------------------------------
042B           1134   ;Allocation info for local variables in function 'Timer2_ISR'
042B           1135   ;------------------------------------------------------------
042B           1136   ;------------------------------------------------------------
042B           1137   ;        robot.c:205: void Timer2_ISR (void) interrupt 5 {
042B           1138   ;        -----------------------------------------
042B           1139   ;         function Timer2_ISR
042B           1140   ;        -----------------------------------------
042B           1141   _Timer2_ISR:
042B C0E0      1142            push    acc
042D C0F0      1143            push    b
042F C0D0      1144            push    psw
0431 75D000    1145            mov     psw,#0x00
0434           1146   ;        robot.c:206: TF2H = 0; // Clear Timer2 interrupt flag
0434 C2CF      1147            clr     _TF2H
0436           1148   ;        robot.c:208: pwm_count++;
0436 05D8      1149            inc     _pwm_count
0438           1150   ;        robot.c:209: if(pwm_count>100) pwm_count=0;
0438 C3        1151            clr     c
0439 74E4      1152            mov     a,#(0x64 ^ 0x80)
043B 85D8F0    1153            mov     b,_pwm_count
043E 63F080    1154            xrl     b,#0x80
0441 95F0      1155            subb    a,b
0443 5001      1156            jnc     L003002?
0445 75D800    1157            mov     _pwm_count,#0x00
0448           1158   L003002?:
0448           1159   ;        robot.c:212: MOTOR_LEFT0 = pwm_count > pwm_Left0 ? 0 : 1; //p1.5
0448 C3        1160            clr     c
0449 E518      1161            mov     a,_pwm_Left0
044B 6480      1162            xrl     a,#0x80
044D 85D8F0    1163            mov     b,_pwm_count
0450 63F080    1164            xrl     b,#0x80
0453 95F0      1165            subb    a,b
0455 9208      1166            mov  _Timer2_ISR_sloc0_1_0,c
0457 B3        1167            cpl     c
0458 9295      1168            mov     _P1_5,c
045A           1169   ;        robot.c:213: MOTOR_LEFT1 = pwm_count > pwm_Left1 ? 0 : 1; //p1.6
045A C3        1170            clr     c
045B E5D8      1171            mov     a,_pwm_Left1
045D 6480      1172            xrl     a,#0x80
045F 85D8F0    1173            mov     b,_pwm_count
0462 63F080    1174            xrl     b,#0x80
0465 95F0      1175            subb    a,b
0467 9208      1176            mov  _Timer2_ISR_sloc0_1_0,c
0469 B3        1177            cpl     c
046A 9296      1178            mov     _P1_6,c
046C           1179   ;        robot.c:214: MOTOR_RIGHT0 = pwm_count > pwm_Right0 ? 0 : 1; //p2.0
046C C3        1180            clr     c
046D E598      1181            mov     a,_pwm_Right0
046F 6480      1182            xrl     a,#0x80
0471 85D8F0    1183            mov     b,_pwm_count
0474 63F080    1184            xrl     b,#0x80
0477 95F0      1185            subb    a,b
0479 9208      1186            mov  _Timer2_ISR_sloc0_1_0,c
047B B3        1187            cpl     c
047C 92A0      1188            mov     _P2_0,c
047E           1189   ;        robot.c:215: MOTOR_RIGHT1 = pwm_count > pwm_Right1 ? 0 : 1; //p2.1
047E C3        1190            clr     c
047F E558      1191            mov     a,_pwm_Right1
0481 6480      1192            xrl     a,#0x80
0483 85D8F0    1193            mov     b,_pwm_count
0486 63F080    1194            xrl     b,#0x80
0489 95F0      1195            subb    a,b
048B 9208      1196            mov  _Timer2_ISR_sloc0_1_0,c
048D B3        1197            cpl     c
048E 92A1      1198            mov     _P2_1,c
0490 D0D0      1199            pop     psw
0492 D0F0      1200            pop     b
0494 D0E0      1201            pop     acc
0496 32        1202            reti
0497           1203   ;        eliminated unneeded push/pop dpl
0497           1204   ;        eliminated unneeded push/pop dph
0497           1205   ;------------------------------------------------------------
0497           1206   ;Allocation info for local variables in function 'readData'
0497           1207   ;------------------------------------------------------------
0497           1208   ;prevcommand               Allocated to registers r2 
0497           1209   ;command                   Allocated to registers r3 
0497           1210   ;------------------------------------------------------------
0497           1211   ;        robot.c:308: unsigned char readData(unsigned char prevcommand) {
0497           1212   ;        -----------------------------------------
0497           1213   ;         function readData
0497           1214   ;        -----------------------------------------
0497           1215   _readData:
0497 AA82      1216            mov     r2,dpl
0499           1217   ;        robot.c:309: unsigned char command = prevcommand;
0499 8A03      1218            mov     ar3,r2
049B           1219   ;        robot.c:310: if (!COMMAND_PIN) {
049B 209198    1220            jb      _P1_1,L004010?
049E           1221   ;        robot.c:312: while (!COMMAND_PIN);
049E           1222   L004001?:
049E 3091D8    1223            jnb     _P1_1,L004001?
04A1           1224   ;        robot.c:313: P1_4 = 1;
04A1 D294      1225            setb    _P1_4
04A3           1226   ;        robot.c:314: waitms((int)(CMDFRQ + CMDFRQ/2));
04A3 900060    1227            mov     dptr,#0x0060
04A6 C002      1228            push    ar2
04A8 120100    1229            lcall   _waitms
04AB           1230   ;        robot.c:315: P1_4 = 0;
04AB C294      1231            clr     _P1_4
04AD           1232   ;        robot.c:316: command |= COMMAND_PIN<<2;
04AD A291      1233            mov     c,_P1_1
04AF E4        1234            clr     a
04B0 33        1235            rlc     a
04B1 25E0      1236            add     a,acc
04B3 25E0      1237            add     a,acc
04B5 FB        1238            mov     r3,a
04B6           1239   ;        robot.c:317: waitms(CMDFRQ);
04B6 900040    1240            mov     dptr,#0x0040
04B9 C003      1241            push    ar3
04BB 120100    1242            lcall   _waitms
04BE D003      1243            pop     ar3
04C0           1244   ;        robot.c:318: P1_4 = 1;
04C0 D294      1245            setb    _P1_4
04C2           1246   ;        robot.c:319: command |= COMMAND_PIN<<1;
04C2 A291      1247            mov     c,_P1_1
04C4 E4        1248            clr     a
04C5 33        1249            rlc     a
04C6 25E0      1250            add     a,acc
04C8 4203      1251            orl     ar3,a
04CA           1252   ;        robot.c:320: waitms(CMDFRQ);
04CA 900040    1253            mov     dptr,#0x0040
04CD C003      1254            push    ar3
04CF 120100    1255            lcall   _waitms
04D2 D003      1256            pop     ar3
04D4 D002      1257            pop     ar2
04D6           1258   ;        robot.c:321: P1_4 = 0;
04D6 C294      1259            clr     _P1_4
04D8           1260   ;        robot.c:322: command |= COMMAND_PIN;
04D8 A291      1261            mov     c,_P1_1
04DA E4        1262            clr     a
04DB 33        1263            rlc     a
04DC FC        1264            mov     r4,a
04DD 4203      1265            orl     ar3,a
04DF           1266   ;        robot.c:323: while (!COMMAND_PIN);
04DF           1267   L004004?:
04DF 309118    1268            jnb     _P1_1,L004004?
04E2           1269   ;        robot.c:328: if (command > 6) command = prevcommand; 
04E2 EB        1270            mov     a,r3
04E3 24F9      1271            add     a,#0xff - 0x06
04E5 5001      1272            jnc     L004010?
04E7 8A03      1273            mov     ar3,r2
04E9           1274   L004010?:
04E9           1275   ;        robot.c:331: return command;
04E9 8B82      1276            mov     dpl,r3
04EB 22        1277            ret
04EC           1278   ;------------------------------------------------------------
04EC           1279   ;Allocation info for local variables in function 'linetrack'
04EC           1280   ;------------------------------------------------------------
04EC           1281   ;forwardbackward           Allocated to registers r2 r3 
04EC           1282   ;vleft                     Allocated with name '_linetrack_vleft_1_93'
04EC           1283   ;vright                    Allocated with name '_linetrack_vright_1_93'
04EC           1284   ;sloc0                     Allocated with name '_linetrack_sloc0_1_0'
04EC           1285   ;sloc1                     Allocated with name '_linetrack_sloc1_1_0'
04EC           1286   ;------------------------------------------------------------
04EC           1287   ;        robot.c:338: void linetrack (int forwardbackward) {
04EC           1288   ;        -----------------------------------------
04EC           1289   ;         function linetrack
04EC           1290   ;        -----------------------------------------
04EC           1291   _linetrack:
04EC AA82      1292            mov     r2,dpl
04EE AB83      1293            mov     r3,dph
04F0           1294   ;        robot.c:346: if (forwardbackward == 0) {
04F0 EA        1295            mov     a,r2
04F1 4B        1296            orl     a,r3
04F2 6001      1297            jz      L005010?
04F4 020100    1298            ljmp    L005004?
04F7           1299   L005010?:
04F7           1300   ;        robot.c:347: vleft=Volts_at_Pin(TANK_FL);
04F7 75820B    1301            mov     dpl,#0x0B
04FA 120100    1302            lcall   _Volts_at_Pin
04FD 8582A8    1303            mov     _linetrack_vleft_1_93,dpl
0500 8583A9    1304            mov     (_linetrack_vleft_1_93 + 1),dph
0503 85F0AA    1305            mov     (_linetrack_vleft_1_93 + 2),b
0506 F5AB      1306            mov     (_linetrack_vleft_1_93 + 3),a
0508           1307   ;        robot.c:348: vright=Volts_at_Pin(TANK_FR);
0508 75820C    1308            mov     dpl,#0x0C
050B 120100    1309            lcall   _Volts_at_Pin
050E 8582F8    1310            mov     _linetrack_vright_1_93,dpl
0511 8583F9    1311            mov     (_linetrack_vright_1_93 + 1),dph
0514 85F0FA    1312            mov     (_linetrack_vright_1_93 + 2),b
0517 F5FB      1313            mov     (_linetrack_vright_1_93 + 3),a
0519           1314   ;        robot.c:351: pwm_Left0 = -1;
0519 7518FF    1315            mov     _pwm_Left0,#0xFF
051C           1316   ;        robot.c:352: pwm_Left1 = vright*vright*75/(vright*vright+vleft*vleft);
051C C0F8      1317            push    _linetrack_vright_1_93
051E C0F9      1318            push    (_linetrack_vright_1_93 + 1)
0520 C0FA      1319            push    (_linetrack_vright_1_93 + 2)
0522 C0FB      1320            push    (_linetrack_vright_1_93 + 3)
0524 85F882    1321            mov     dpl,_linetrack_vright_1_93
0527 85F983    1322            mov     dph,(_linetrack_vright_1_93 + 1)
052A 85FAF0    1323            mov     b,(_linetrack_vright_1_93 + 2)
052D E5FB      1324            mov     a,(_linetrack_vright_1_93 + 3)
052F 120100    1325            lcall   ___fsmul
0532 AC82      1326            mov     r4,dpl
0534 AD83      1327            mov     r5,dph
0536 AEF0      1328            mov     r6,b
0538 FF        1329            mov     r7,a
0539 E581      1330            mov     a,sp
053B 24FC      1331            add     a,#0xfc
053D F581      1332            mov     sp,a
053F C004      1333            push    ar4
0541 C005      1334            push    ar5
0543 C006      1335            push    ar6
0545 C007      1336            push    ar7
0547 900000    1337            mov     dptr,#0x0000
054A 75F096    1338            mov     b,#0x96
054D 7442      1339            mov     a,#0x42
054F 120100    1340            lcall   ___fsmul
0552 858248    1341            mov     _linetrack_sloc0_1_0,dpl
0555 858349    1342            mov     (_linetrack_sloc0_1_0 + 1),dph
0558 85F04A    1343            mov     (_linetrack_sloc0_1_0 + 2),b
055B F54B      1344            mov     (_linetrack_sloc0_1_0 + 3),a
055D E581      1345            mov     a,sp
055F 24FC      1346            add     a,#0xfc
0561 F581      1347            mov     sp,a
0563 C0F8      1348            push    _linetrack_vright_1_93
0565 C0F9      1349            push    (_linetrack_vright_1_93 + 1)
0567 C0FA      1350            push    (_linetrack_vright_1_93 + 2)
0569 C0FB      1351            push    (_linetrack_vright_1_93 + 3)
056B 85F882    1352            mov     dpl,_linetrack_vright_1_93
056E 85F983    1353            mov     dph,(_linetrack_vright_1_93 + 1)
0571 85FAF0    1354            mov     b,(_linetrack_vright_1_93 + 2)
0574 E5FB      1355            mov     a,(_linetrack_vright_1_93 + 3)
0576 120100    1356            lcall   ___fsmul
0579 858298    1357            mov     _linetrack_sloc1_1_0,dpl
057C 858399    1358            mov     (_linetrack_sloc1_1_0 + 1),dph
057F 85F09A    1359            mov     (_linetrack_sloc1_1_0 + 2),b
0582 F59B      1360            mov     (_linetrack_sloc1_1_0 + 3),a
0584 E581      1361            mov     a,sp
0586 24FC      1362            add     a,#0xfc
0588 F581      1363            mov     sp,a
058A C0A8      1364            push    _linetrack_vleft_1_93
058C C0A9      1365            push    (_linetrack_vleft_1_93 + 1)
058E C0AA      1366            push    (_linetrack_vleft_1_93 + 2)
0590 C0AB      1367            push    (_linetrack_vleft_1_93 + 3)
0592 85A882    1368            mov     dpl,_linetrack_vleft_1_93
0595 85A983    1369            mov     dph,(_linetrack_vleft_1_93 + 1)
0598 85AAF0    1370            mov     b,(_linetrack_vleft_1_93 + 2)
059B E5AB      1371            mov     a,(_linetrack_vleft_1_93 + 3)
059D 120100    1372            lcall   ___fsmul
05A0 AE82      1373            mov     r6,dpl
05A2 AF83      1374            mov     r7,dph
05A4 ACF0      1375            mov     r4,b
05A6 FD        1376            mov     r5,a
05A7 E581      1377            mov     a,sp
05A9 24FC      1378            add     a,#0xfc
05AB F581      1379            mov     sp,a
05AD C006      1380            push    ar6
05AF C007      1381            push    ar7
05B1 C004      1382            push    ar4
05B3 C005      1383            push    ar5
05B5 859882    1384            mov     dpl,_linetrack_sloc1_1_0
05B8 859983    1385            mov     dph,(_linetrack_sloc1_1_0 + 1)
05BB 859AF0    1386            mov     b,(_linetrack_sloc1_1_0 + 2)
05BE E59B      1387            mov     a,(_linetrack_sloc1_1_0 + 3)
05C0 120100    1388            lcall   ___fsadd
05C3 AC82      1389            mov     r4,dpl
05C5 AD83      1390            mov     r5,dph
05C7 AEF0      1391            mov     r6,b
05C9 FF        1392            mov     r7,a
05CA E581      1393            mov     a,sp
05CC 24FC      1394            add     a,#0xfc
05CE F581      1395            mov     sp,a
05D0 C004      1396            push    ar4
05D2 C005      1397            push    ar5
05D4 C006      1398            push    ar6
05D6 C007      1399            push    ar7
05D8 854882    1400            mov     dpl,_linetrack_sloc0_1_0
05DB 854983    1401            mov     dph,(_linetrack_sloc0_1_0 + 1)
05DE 854AF0    1402            mov     b,(_linetrack_sloc0_1_0 + 2)
05E1 E54B      1403            mov     a,(_linetrack_sloc0_1_0 + 3)
05E3 120100    1404            lcall   ___fsdiv
05E6 AC82      1405            mov     r4,dpl
05E8 AD83      1406            mov     r5,dph
05EA AEF0      1407            mov     r6,b
05EC FF        1408            mov     r7,a
05ED E581      1409            mov     a,sp
05EF 24FC      1410            add     a,#0xfc
05F1 F581      1411            mov     sp,a
05F3 8C82      1412            mov     dpl,r4
05F5 8D83      1413            mov     dph,r5
05F7 8EF0      1414            mov     b,r6
05F9 EF        1415            mov     a,r7
05FA 120100    1416            lcall   ___fs2schar
05FD 8582D8    1417            mov     _pwm_Left1,dpl
0600           1418   ;        robot.c:353: pwm_Right1 = -1;
0600 7558FF    1419            mov     _pwm_Right1,#0xFF
0603           1420   ;        robot.c:354: pwm_Right0 = vleft*vleft*75/(vright*vright+vleft*vleft);
0603 C0A8      1421            push    _linetrack_vleft_1_93
0605 C0A9      1422            push    (_linetrack_vleft_1_93 + 1)
0607 C0AA      1423            push    (_linetrack_vleft_1_93 + 2)
0609 C0AB      1424            push    (_linetrack_vleft_1_93 + 3)
060B 85A882    1425            mov     dpl,_linetrack_vleft_1_93
060E 85A983    1426            mov     dph,(_linetrack_vleft_1_93 + 1)
0611 85AAF0    1427            mov     b,(_linetrack_vleft_1_93 + 2)
0614 E5AB      1428            mov     a,(_linetrack_vleft_1_93 + 3)
0616 120100    1429            lcall   ___fsmul
0619 AC82      1430            mov     r4,dpl
061B AD83      1431            mov     r5,dph
061D AEF0      1432            mov     r6,b
061F FF        1433            mov     r7,a
0620 E581      1434            mov     a,sp
0622 24FC      1435            add     a,#0xfc
0624 F581      1436            mov     sp,a
0626 C004      1437            push    ar4
0628 C005      1438            push    ar5
062A C006      1439            push    ar6
062C C007      1440            push    ar7
062E 900000    1441            mov     dptr,#0x0000
0631 75F096    1442            mov     b,#0x96
0634 7442      1443            mov     a,#0x42
0636 120100    1444            lcall   ___fsmul
0639 858298    1445            mov     _linetrack_sloc1_1_0,dpl
063C 858399    1446            mov     (_linetrack_sloc1_1_0 + 1),dph
063F 85F09A    1447            mov     (_linetrack_sloc1_1_0 + 2),b
0642 F59B      1448            mov     (_linetrack_sloc1_1_0 + 3),a
0644 E581      1449            mov     a,sp
0646 24FC      1450            add     a,#0xfc
0648 F581      1451            mov     sp,a
064A C0F8      1452            push    _linetrack_vright_1_93
064C C0F9      1453            push    (_linetrack_vright_1_93 + 1)
064E C0FA      1454            push    (_linetrack_vright_1_93 + 2)
0650 C0FB      1455            push    (_linetrack_vright_1_93 + 3)
0652 85F882    1456            mov     dpl,_linetrack_vright_1_93
0655 85F983    1457            mov     dph,(_linetrack_vright_1_93 + 1)
0658 85FAF0    1458            mov     b,(_linetrack_vright_1_93 + 2)
065B E5FB      1459            mov     a,(_linetrack_vright_1_93 + 3)
065D 120100    1460            lcall   ___fsmul
0660 858248    1461            mov     _linetrack_sloc0_1_0,dpl
0663 858349    1462            mov     (_linetrack_sloc0_1_0 + 1),dph
0666 85F04A    1463            mov     (_linetrack_sloc0_1_0 + 2),b
0669 F54B      1464            mov     (_linetrack_sloc0_1_0 + 3),a
066B E581      1465            mov     a,sp
066D 24FC      1466            add     a,#0xfc
066F F581      1467            mov     sp,a
0671 C0A8      1468            push    _linetrack_vleft_1_93
0673 C0A9      1469            push    (_linetrack_vleft_1_93 + 1)
0675 C0AA      1470            push    (_linetrack_vleft_1_93 + 2)
0677 C0AB      1471            push    (_linetrack_vleft_1_93 + 3)
0679 85A882    1472            mov     dpl,_linetrack_vleft_1_93
067C 85A983    1473            mov     dph,(_linetrack_vleft_1_93 + 1)
067F 85AAF0    1474            mov     b,(_linetrack_vleft_1_93 + 2)
0682 E5AB      1475            mov     a,(_linetrack_vleft_1_93 + 3)
0684 120100    1476            lcall   ___fsmul
0687 AE82      1477            mov     r6,dpl
0689 AF83      1478            mov     r7,dph
068B ACF0      1479            mov     r4,b
068D FD        1480            mov     r5,a
068E E581      1481            mov     a,sp
0690 24FC      1482            add     a,#0xfc
0692 F581      1483            mov     sp,a
0694 C006      1484            push    ar6
0696 C007      1485            push    ar7
0698 C004      1486            push    ar4
069A C005      1487            push    ar5
069C 854882    1488            mov     dpl,_linetrack_sloc0_1_0
069F 854983    1489            mov     dph,(_linetrack_sloc0_1_0 + 1)
06A2 854AF0    1490            mov     b,(_linetrack_sloc0_1_0 + 2)
06A5 E54B      1491            mov     a,(_linetrack_sloc0_1_0 + 3)
06A7 120100    1492            lcall   ___fsadd
06AA AC82      1493            mov     r4,dpl
06AC AD83      1494            mov     r5,dph
06AE AEF0      1495            mov     r6,b
06B0 FF        1496            mov     r7,a
06B1 E581      1497            mov     a,sp
06B3 24FC      1498            add     a,#0xfc
06B5 F581      1499            mov     sp,a
06B7 C004      1500            push    ar4
06B9 C005      1501            push    ar5
06BB C006      1502            push    ar6
06BD C007      1503            push    ar7
06BF 859882    1504            mov     dpl,_linetrack_sloc1_1_0
06C2 859983    1505            mov     dph,(_linetrack_sloc1_1_0 + 1)
06C5 859AF0    1506            mov     b,(_linetrack_sloc1_1_0 + 2)
06C8 E59B      1507            mov     a,(_linetrack_sloc1_1_0 + 3)
06CA 120100    1508            lcall   ___fsdiv
06CD AC82      1509            mov     r4,dpl
06CF AD83      1510            mov     r5,dph
06D1 AEF0      1511            mov     r6,b
06D3 FF        1512            mov     r7,a
06D4 E581      1513            mov     a,sp
06D6 24FC      1514            add     a,#0xfc
06D8 F581      1515            mov     sp,a
06DA 8C82      1516            mov     dpl,r4
06DC 8D83      1517            mov     dph,r5
06DE 8EF0      1518            mov     b,r6
06E0 EF        1519            mov     a,r7
06E1 120100    1520            lcall   ___fs2schar
06E4 858298    1521            mov     _pwm_Right0,dpl
06E7 22        1522            ret
06E8           1523   L005004?:
06E8           1524   ;        robot.c:355: } else if (forwardbackward == 1) {
06E8 BA01D8    1525            cjne    r2,#0x01,L005011?
06EB BB00D8    1526            cjne    r3,#0x00,L005011?
06EE 8001      1527            sjmp    L005012?
06F0           1528   L005011?:
06F0 22        1529            ret
06F1           1530   L005012?:
06F1           1531   ;        robot.c:358: vleft=Volts_at_Pin(TANK_RL);
06F1 75820D    1532            mov     dpl,#0x0D
06F4 120100    1533            lcall   _Volts_at_Pin
06F7 8582A8    1534            mov     _linetrack_vleft_1_93,dpl
06FA 8583A9    1535            mov     (_linetrack_vleft_1_93 + 1),dph
06FD 85F0AA    1536            mov     (_linetrack_vleft_1_93 + 2),b
0700 F5AB      1537            mov     (_linetrack_vleft_1_93 + 3),a
0702           1538   ;        robot.c:359: vright=Volts_at_Pin(TANK_RR);
0702 75820E    1539            mov     dpl,#0x0E
0705 120100    1540            lcall   _Volts_at_Pin
0708 8582F8    1541            mov     _linetrack_vright_1_93,dpl
070B 8583F9    1542            mov     (_linetrack_vright_1_93 + 1),dph
070E 85F0FA    1543            mov     (_linetrack_vright_1_93 + 2),b
0711 F5FB      1544            mov     (_linetrack_vright_1_93 + 3),a
0713           1545   ;        robot.c:362: pwm_Left1 = -1;
0713 75D8FF    1546            mov     _pwm_Left1,#0xFF
0716           1547   ;        robot.c:363: pwm_Left0 = vright*vright*75/(vright*vright+vleft*vleft);
0716 C0F8      1548            push    _linetrack_vright_1_93
0718 C0F9      1549            push    (_linetrack_vright_1_93 + 1)
071A C0FA      1550            push    (_linetrack_vright_1_93 + 2)
071C C0FB      1551            push    (_linetrack_vright_1_93 + 3)
071E 85F882    1552            mov     dpl,_linetrack_vright_1_93
0721 85F983    1553            mov     dph,(_linetrack_vright_1_93 + 1)
0724 85FAF0    1554            mov     b,(_linetrack_vright_1_93 + 2)
0727 E5FB      1555            mov     a,(_linetrack_vright_1_93 + 3)
0729 120100    1556            lcall   ___fsmul
072C AA82      1557            mov     r2,dpl
072E AB83      1558            mov     r3,dph
0730 ACF0      1559            mov     r4,b
0732 FD        1560            mov     r5,a
0733 E581      1561            mov     a,sp
0735 24FC      1562            add     a,#0xfc
0737 F581      1563            mov     sp,a
0739 C002      1564            push    ar2
073B C003      1565            push    ar3
073D C004      1566            push    ar4
073F C005      1567            push    ar5
0741 900000    1568            mov     dptr,#0x0000
0744 75F096    1569            mov     b,#0x96
0747 7442      1570            mov     a,#0x42
0749 120100    1571            lcall   ___fsmul
074C AA82      1572            mov     r2,dpl
074E AB83      1573            mov     r3,dph
0750 ACF0      1574            mov     r4,b
0752 FD        1575            mov     r5,a
0753 E581      1576            mov     a,sp
0755 24FC      1577            add     a,#0xfc
0757 F581      1578            mov     sp,a
0759 C002      1579            push    ar2
075B C003      1580            push    ar3
075D C004      1581            push    ar4
075F C005      1582            push    ar5
0761 C0F8      1583            push    _linetrack_vright_1_93
0763 C0F9      1584            push    (_linetrack_vright_1_93 + 1)
0765 C0FA      1585            push    (_linetrack_vright_1_93 + 2)
0767 C0FB      1586            push    (_linetrack_vright_1_93 + 3)
0769 85F882    1587            mov     dpl,_linetrack_vright_1_93
076C 85F983    1588            mov     dph,(_linetrack_vright_1_93 + 1)
076F 85FAF0    1589            mov     b,(_linetrack_vright_1_93 + 2)
0772 E5FB      1590            mov     a,(_linetrack_vright_1_93 + 3)
0774 120100    1591            lcall   ___fsmul
0777 858298    1592            mov     _linetrack_sloc1_1_0,dpl
077A 858399    1593            mov     (_linetrack_sloc1_1_0 + 1),dph
077D 85F09A    1594            mov     (_linetrack_sloc1_1_0 + 2),b
0780 F59B      1595            mov     (_linetrack_sloc1_1_0 + 3),a
0782 E581      1596            mov     a,sp
0784 24FC      1597            add     a,#0xfc
0786 F581      1598            mov     sp,a
0788 C0A8      1599            push    _linetrack_vleft_1_93
078A C0A9      1600            push    (_linetrack_vleft_1_93 + 1)
078C C0AA      1601            push    (_linetrack_vleft_1_93 + 2)
078E C0AB      1602            push    (_linetrack_vleft_1_93 + 3)
0790 85A882    1603            mov     dpl,_linetrack_vleft_1_93
0793 85A983    1604            mov     dph,(_linetrack_vleft_1_93 + 1)
0796 85AAF0    1605            mov     b,(_linetrack_vleft_1_93 + 2)
0799 E5AB      1606            mov     a,(_linetrack_vleft_1_93 + 3)
079B 120100    1607            lcall   ___fsmul
079E AE82      1608            mov     r6,dpl
07A0 AF83      1609            mov     r7,dph
07A2 A8F0      1610            mov     r0,b
07A4 F9        1611            mov     r1,a
07A5 E581      1612            mov     a,sp
07A7 24FC      1613            add     a,#0xfc
07A9 F581      1614            mov     sp,a
07AB C006      1615            push    ar6
07AD C007      1616            push    ar7
07AF C000      1617            push    ar0
07B1 C001      1618            push    ar1
07B3 859882    1619            mov     dpl,_linetrack_sloc1_1_0
07B6 859983    1620            mov     dph,(_linetrack_sloc1_1_0 + 1)
07B9 859AF0    1621            mov     b,(_linetrack_sloc1_1_0 + 2)
07BC E59B      1622            mov     a,(_linetrack_sloc1_1_0 + 3)
07BE 120100    1623            lcall   ___fsadd
07C1 AE82      1624            mov     r6,dpl
07C3 AF83      1625            mov     r7,dph
07C5 A8F0      1626            mov     r0,b
07C7 F9        1627            mov     r1,a
07C8 E581      1628            mov     a,sp
07CA 24FC      1629            add     a,#0xfc
07CC F581      1630            mov     sp,a
07CE D005      1631            pop     ar5
07D0 D004      1632            pop     ar4
07D2 D003      1633            pop     ar3
07D4 D002      1634            pop     ar2
07D6 C006      1635            push    ar6
07D8 C007      1636            push    ar7
07DA C000      1637            push    ar0
07DC C001      1638            push    ar1
07DE 8A82      1639            mov     dpl,r2
07E0 8B83      1640            mov     dph,r3
07E2 8CF0      1641            mov     b,r4
07E4 ED        1642            mov     a,r5
07E5 120100    1643            lcall   ___fsdiv
07E8 AA82      1644            mov     r2,dpl
07EA AB83      1645            mov     r3,dph
07EC ACF0      1646            mov     r4,b
07EE FD        1647            mov     r5,a
07EF E581      1648            mov     a,sp
07F1 24FC      1649            add     a,#0xfc
07F3 F581      1650            mov     sp,a
07F5 8A82      1651            mov     dpl,r2
07F7 8B83      1652            mov     dph,r3
07F9 8CF0      1653            mov     b,r4
07FB ED        1654            mov     a,r5
07FC 120100    1655            lcall   ___fs2schar
07FF 858218    1656            mov     _pwm_Left0,dpl
0802           1657   ;        robot.c:364: pwm_Right0 = -1;
0802 7598FF    1658            mov     _pwm_Right0,#0xFF
0805           1659   ;        robot.c:365: pwm_Right1 = vleft*vleft*75/(vright*vright+vleft*vleft);
0805 C0A8      1660            push    _linetrack_vleft_1_93
0807 C0A9      1661            push    (_linetrack_vleft_1_93 + 1)
0809 C0AA      1662            push    (_linetrack_vleft_1_93 + 2)
080B C0AB      1663            push    (_linetrack_vleft_1_93 + 3)
080D 85A882    1664            mov     dpl,_linetrack_vleft_1_93
0810 85A983    1665            mov     dph,(_linetrack_vleft_1_93 + 1)
0813 85AAF0    1666            mov     b,(_linetrack_vleft_1_93 + 2)
0816 E5AB      1667            mov     a,(_linetrack_vleft_1_93 + 3)
0818 120100    1668            lcall   ___fsmul
081B AA82      1669            mov     r2,dpl
081D AB83      1670            mov     r3,dph
081F ACF0      1671            mov     r4,b
0821 FD        1672            mov     r5,a
0822 E581      1673            mov     a,sp
0824 24FC      1674            add     a,#0xfc
0826 F581      1675            mov     sp,a
0828 C002      1676            push    ar2
082A C003      1677            push    ar3
082C C004      1678            push    ar4
082E C005      1679            push    ar5
0830 900000    1680            mov     dptr,#0x0000
0833 75F096    1681            mov     b,#0x96
0836 7442      1682            mov     a,#0x42
0838 120100    1683            lcall   ___fsmul
083B AA82      1684            mov     r2,dpl
083D AB83      1685            mov     r3,dph
083F ACF0      1686            mov     r4,b
0841 FD        1687            mov     r5,a
0842 E581      1688            mov     a,sp
0844 24FC      1689            add     a,#0xfc
0846 F581      1690            mov     sp,a
0848 C002      1691            push    ar2
084A C003      1692            push    ar3
084C C004      1693            push    ar4
084E C005      1694            push    ar5
0850 C0F8      1695            push    _linetrack_vright_1_93
0852 C0F9      1696            push    (_linetrack_vright_1_93 + 1)
0854 C0FA      1697            push    (_linetrack_vright_1_93 + 2)
0856 C0FB      1698            push    (_linetrack_vright_1_93 + 3)
0858 85F882    1699            mov     dpl,_linetrack_vright_1_93
085B 85F983    1700            mov     dph,(_linetrack_vright_1_93 + 1)
085E 85FAF0    1701            mov     b,(_linetrack_vright_1_93 + 2)
0861 E5FB      1702            mov     a,(_linetrack_vright_1_93 + 3)
0863 120100    1703            lcall   ___fsmul
0866 858298    1704            mov     _linetrack_sloc1_1_0,dpl
0869 858399    1705            mov     (_linetrack_sloc1_1_0 + 1),dph
086C 85F09A    1706            mov     (_linetrack_sloc1_1_0 + 2),b
086F F59B      1707            mov     (_linetrack_sloc1_1_0 + 3),a
0871 E581      1708            mov     a,sp
0873 24FC      1709            add     a,#0xfc
0875 F581      1710            mov     sp,a
0877 C0A8      1711            push    _linetrack_vleft_1_93
0879 C0A9      1712            push    (_linetrack_vleft_1_93 + 1)
087B C0AA      1713            push    (_linetrack_vleft_1_93 + 2)
087D C0AB      1714            push    (_linetrack_vleft_1_93 + 3)
087F 85A882    1715            mov     dpl,_linetrack_vleft_1_93
0882 85A983    1716            mov     dph,(_linetrack_vleft_1_93 + 1)
0885 85AAF0    1717            mov     b,(_linetrack_vleft_1_93 + 2)
0888 E5AB      1718            mov     a,(_linetrack_vleft_1_93 + 3)
088A 120100    1719            lcall   ___fsmul
088D AE82      1720            mov     r6,dpl
088F AF83      1721            mov     r7,dph
0891 A8F0      1722            mov     r0,b
0893 F9        1723            mov     r1,a
0894 E581      1724            mov     a,sp
0896 24FC      1725            add     a,#0xfc
0898 F581      1726            mov     sp,a
089A C006      1727            push    ar6
089C C007      1728            push    ar7
089E C000      1729            push    ar0
08A0 C001      1730            push    ar1
08A2 859882    1731            mov     dpl,_linetrack_sloc1_1_0
08A5 859983    1732            mov     dph,(_linetrack_sloc1_1_0 + 1)
08A8 859AF0    1733            mov     b,(_linetrack_sloc1_1_0 + 2)
08AB E59B      1734            mov     a,(_linetrack_sloc1_1_0 + 3)
08AD 120100    1735            lcall   ___fsadd
08B0 AE82      1736            mov     r6,dpl
08B2 AF83      1737            mov     r7,dph
08B4 A8F0      1738            mov     r0,b
08B6 F9        1739            mov     r1,a
08B7 E581      1740            mov     a,sp
08B9 24FC      1741            add     a,#0xfc
08BB F581      1742            mov     sp,a
08BD D005      1743            pop     ar5
08BF D004      1744            pop     ar4
08C1 D003      1745            pop     ar3
08C3 D002      1746            pop     ar2
08C5 C006      1747            push    ar6
08C7 C007      1748            push    ar7
08C9 C000      1749            push    ar0
08CB C001      1750            push    ar1
08CD 8A82      1751            mov     dpl,r2
08CF 8B83      1752            mov     dph,r3
08D1 8CF0      1753            mov     b,r4
08D3 ED        1754            mov     a,r5
08D4 120100    1755            lcall   ___fsdiv
08D7 AA82      1756            mov     r2,dpl
08D9 AB83      1757            mov     r3,dph
08DB ACF0      1758            mov     r4,b
08DD FD        1759            mov     r5,a
08DE E581      1760            mov     a,sp
08E0 24FC      1761            add     a,#0xfc
08E2 F581      1762            mov     sp,a
08E4 8A82      1763            mov     dpl,r2
08E6 8B83      1764            mov     dph,r3
08E8 8CF0      1765            mov     b,r4
08EA ED        1766            mov     a,r5
08EB 120100    1767            lcall   ___fs2schar
08EE 858258    1768            mov     _pwm_Right1,dpl
08F1 22        1769            ret
08F2           1770   ;------------------------------------------------------------
08F2           1771   ;Allocation info for local variables in function 'stopcar'
08F2           1772   ;------------------------------------------------------------
08F2           1773   ;------------------------------------------------------------
08F2           1774   ;        robot.c:373: void stopcar(void) {
08F2           1775   ;        -----------------------------------------
08F2           1776   ;         function stopcar
08F2           1777   ;        -----------------------------------------
08F2           1778   _stopcar:
08F2           1779   ;        robot.c:375: pwm_Left1 = -1;
08F2 75D8FF    1780            mov     _pwm_Left1,#0xFF
08F5           1781   ;        robot.c:376: pwm_Right1 = -1;
08F5 7558FF    1782            mov     _pwm_Right1,#0xFF
08F8           1783   ;        robot.c:377: pwm_Left0 = -1;
08F8 7518FF    1784            mov     _pwm_Left0,#0xFF
08FB           1785   ;        robot.c:378: pwm_Right0 = -1;
08FB 7598FF    1786            mov     _pwm_Right0,#0xFF
08FE 22        1787            ret
08FF           1788   ;------------------------------------------------------------
08FF           1789   ;Allocation info for local variables in function 'turncar'
08FF           1790   ;------------------------------------------------------------
08FF           1791   ;leftright                 Allocated to registers r2 r3 
08FF           1792   ;v                         Allocated with name '_turncar_v_1_99'
08FF           1793   ;------------------------------------------------------------
08FF           1794   ;        robot.c:384: void turncar (int leftright) {
08FF           1795   ;        -----------------------------------------
08FF           1796   ;         function turncar
08FF           1797   ;        -----------------------------------------
08FF           1798   _turncar:
08FF AA82      1799            mov     r2,dpl
0901 AB83      1800            mov     r3,dph
0903           1801   ;        robot.c:392: pwm_Left0 = -1;
0903 7518FF    1802            mov     _pwm_Left0,#0xFF
0906           1803   ;        robot.c:393: pwm_Left1 = -1;
0906 75D8FF    1804            mov     _pwm_Left1,#0xFF
0909           1805   ;        robot.c:394: pwm_Right0 = -1;
0909 7598FF    1806            mov     _pwm_Right0,#0xFF
090C           1807   ;        robot.c:395: pwm_Right1 = -1;
090C 7558FF    1808            mov     _pwm_Right1,#0xFF
090F           1809   ;        robot.c:398: if (leftright == 1) {
090F BA0158    1810            cjne    r2,#0x01,L007022?
0912 BB0058    1811            cjne    r3,#0x00,L007022?
0915           1812   ;        robot.c:400: pwm_Right0 = 100;
0915 759864    1813            mov     _pwm_Right0,#0x64
0918           1814   ;        robot.c:402: waitms(750);       
0918 9002EE    1815            mov     dptr,#0x02EE
091B 120100    1816            lcall   _waitms
091E           1817   ;        robot.c:405: v = Volts_at_Pin(TANK_RR);
091E 75820E    1818            mov     dpl,#0x0E
0921 120100    1819            lcall   _Volts_at_Pin
0924 8582D8    1820            mov     _turncar_v_1_99,dpl
0927 8583D9    1821            mov     (_turncar_v_1_99 + 1),dph
092A 85F0DA    1822            mov     (_turncar_v_1_99 + 2),b
092D F5DB      1823            mov     (_turncar_v_1_99 + 3),a
092F           1824   ;        robot.c:407: while (v < 1) {
092F           1825   L007001?:
092F E4        1826            clr     a
0930 C0E0      1827            push    acc
0932 C0E0      1828            push    acc
0934 7480      1829            mov     a,#0x80
0936 C0E0      1830            push    acc
0938 743F      1831            mov     a,#0x3F
093A C0E0      1832            push    acc
093C 85D882    1833            mov     dpl,_turncar_v_1_99
093F 85D983    1834            mov     dph,(_turncar_v_1_99 + 1)
0942 85DAF0    1835            mov     b,(_turncar_v_1_99 + 2)
0945 E5DB      1836            mov     a,(_turncar_v_1_99 + 3)
0947 120100    1837            lcall   ___fslt
094A AC82      1838            mov     r4,dpl
094C E581      1839            mov     a,sp
094E 24FC      1840            add     a,#0xfc
0950 F581      1841            mov     sp,a
0952 EC        1842            mov     a,r4
0953 6001      1843            jz      L007003?
0955           1844   ;        robot.c:409: v = Volts_at_Pin(TANK_RR);
0955 75820E    1845            mov     dpl,#0x0E
0958 120100    1846            lcall   _Volts_at_Pin
095B 8582D8    1847            mov     _turncar_v_1_99,dpl
095E 8583D9    1848            mov     (_turncar_v_1_99 + 1),dph
0961 85F0DA    1849            mov     (_turncar_v_1_99 + 2),b
0964 F5DB      1850            mov     (_turncar_v_1_99 + 3),a
0966 8001      1851            sjmp    L007001?
0968           1852   L007003?:
0968           1853   ;        robot.c:414: waitms(300);
0968 90012C    1854            mov     dptr,#0x012C
096B 120100    1855            lcall   _waitms
096E           1856   ;        robot.c:417: pwm_Right0 = -1; 
096E 7598FF    1857            mov     _pwm_Right0,#0xFF
0971 22        1858            ret
0972           1859   L007022?:
0972           1860   ;        robot.c:421: else if (leftright == 3) {
0972 BA0318    1861            cjne    r2,#0x03,L007019?
0975 BB0018    1862            cjne    r3,#0x00,L007019?
0978           1863   ;        robot.c:423: pwm_Left1 = 75;
0978 75D84B    1864            mov     _pwm_Left1,#0x4B
097B           1865   ;        robot.c:424: waitms(750);
097B 9002EE    1866            mov     dptr,#0x02EE
097E 120100    1867            lcall   _waitms
0981           1868   ;        robot.c:427: v = Volts_at_Pin(TANK_RL);
0981 75820D    1869            mov     dpl,#0x0D
0984 120100    1870            lcall   _Volts_at_Pin
0987 8582D8    1871            mov     _turncar_v_1_99,dpl
098A 8583D9    1872            mov     (_turncar_v_1_99 + 1),dph
098D 85F0DA    1873            mov     (_turncar_v_1_99 + 2),b
0990 F5DB      1874            mov     (_turncar_v_1_99 + 3),a
0992           1875   ;        robot.c:429: while (v < 0.7) {
0992           1876   L007004?:
0992 7433      1877            mov     a,#0x33
0994 C0E0      1878            push    acc
0996 C0E0      1879            push    acc
0998 C0E0      1880            push    acc
099A 743F      1881            mov     a,#0x3F
099C C0E0      1882            push    acc
099E 85D882    1883            mov     dpl,_turncar_v_1_99
09A1 85D983    1884            mov     dph,(_turncar_v_1_99 + 1)
09A4 85DAF0    1885            mov     b,(_turncar_v_1_99 + 2)
09A7 E5DB      1886            mov     a,(_turncar_v_1_99 + 3)
09A9 120100    1887            lcall   ___fslt
09AC AC82      1888            mov     r4,dpl
09AE E581      1889            mov     a,sp
09B0 24FC      1890            add     a,#0xfc
09B2 F581      1891            mov     sp,a
09B4 EC        1892            mov     a,r4
09B5 6001      1893            jz      L007006?
09B7           1894   ;        robot.c:431: v = Volts_at_Pin(TANK_RL);
09B7 75820D    1895            mov     dpl,#0x0D
09BA 120100    1896            lcall   _Volts_at_Pin
09BD 8582D8    1897            mov     _turncar_v_1_99,dpl
09C0 8583D9    1898            mov     (_turncar_v_1_99 + 1),dph
09C3 85F0DA    1899            mov     (_turncar_v_1_99 + 2),b
09C6 F5DB      1900            mov     (_turncar_v_1_99 + 3),a
09C8 8001      1901            sjmp    L007004?
09CA           1902   L007006?:
09CA           1903   ;        robot.c:435: waitms(300);
09CA 90012C    1904            mov     dptr,#0x012C
09CD 120100    1905            lcall   _waitms
09D0           1906   ;        robot.c:438: pwm_Left1 = -1; 
09D0 75D8FF    1907            mov     _pwm_Left1,#0xFF
09D3 22        1908            ret
09D4           1909   L007019?:
09D4           1910   ;        robot.c:442: else if (leftright == 2) {
09D4 BA02D8    1911            cjne    r2,#0x02,L007016?
09D7 BB00D8    1912            cjne    r3,#0x00,L007016?
09DA           1913   ;        robot.c:444: pwm_Right1 = 75;
09DA 75584B    1914            mov     _pwm_Right1,#0x4B
09DD           1915   ;        robot.c:445: pwm_Left0 = 75;
09DD 75184B    1916            mov     _pwm_Left0,#0x4B
09E0           1917   ;        robot.c:447: waitms(250);
09E0 9000FA    1918            mov     dptr,#0x00FA
09E3 120100    1919            lcall   _waitms
09E6           1920   ;        robot.c:448: pwm_Left0 = -1;
09E6 7518FF    1921            mov     _pwm_Left0,#0xFF
09E9           1922   ;        robot.c:451: waitms(1000);
09E9 9003E8    1923            mov     dptr,#0x03E8
09EC 120100    1924            lcall   _waitms
09EF           1925   ;        robot.c:453: v = Volts_at_Pin(TANK_RR);
09EF 75820E    1926            mov     dpl,#0x0E
09F2 120100    1927            lcall   _Volts_at_Pin
09F5 8582D8    1928            mov     _turncar_v_1_99,dpl
09F8 8583D9    1929            mov     (_turncar_v_1_99 + 1),dph
09FB 85F0DA    1930            mov     (_turncar_v_1_99 + 2),b
09FE F5DB      1931            mov     (_turncar_v_1_99 + 3),a
0A00           1932   ;        robot.c:455: while (v < 0.7) {
0A00           1933   L007007?:
0A00 7433      1934            mov     a,#0x33
0A02 C0E0      1935            push    acc
0A04 C0E0      1936            push    acc
0A06 C0E0      1937            push    acc
0A08 743F      1938            mov     a,#0x3F
0A0A C0E0      1939            push    acc
0A0C 85D882    1940            mov     dpl,_turncar_v_1_99
0A0F 85D983    1941            mov     dph,(_turncar_v_1_99 + 1)
0A12 85DAF0    1942            mov     b,(_turncar_v_1_99 + 2)
0A15 E5DB      1943            mov     a,(_turncar_v_1_99 + 3)
0A17 120100    1944            lcall   ___fslt
0A1A AC82      1945            mov     r4,dpl
0A1C E581      1946            mov     a,sp
0A1E 24FC      1947            add     a,#0xfc
0A20 F581      1948            mov     sp,a
0A22 EC        1949            mov     a,r4
0A23 6001      1950            jz      L007009?
0A25           1951   ;        robot.c:457: v = Volts_at_Pin(TANK_RR);
0A25 75820E    1952            mov     dpl,#0x0E
0A28 120100    1953            lcall   _Volts_at_Pin
0A2B 8582D8    1954            mov     _turncar_v_1_99,dpl
0A2E 8583D9    1955            mov     (_turncar_v_1_99 + 1),dph
0A31 85F0DA    1956            mov     (_turncar_v_1_99 + 2),b
0A34 F5DB      1957            mov     (_turncar_v_1_99 + 3),a
0A36 8001      1958            sjmp    L007007?
0A38           1959   L007009?:
0A38           1960   ;        robot.c:462: pwm_Right1 = -1; 
0A38 7558FF    1961            mov     _pwm_Right1,#0xFF
0A3B 22        1962            ret
0A3C           1963   L007016?:
0A3C           1964   ;        robot.c:466: else if (leftright == 4) {
0A3C BA0498    1965            cjne    r2,#0x04,L007024?
0A3F BB0098    1966            cjne    r3,#0x00,L007024?
0A42           1967   ;        robot.c:468: pwm_Left0 = 75;
0A42 75184B    1968            mov     _pwm_Left0,#0x4B
0A45           1969   ;        robot.c:470: pwm_Right1 = 75;
0A45 75584B    1970            mov     _pwm_Right1,#0x4B
0A48           1971   ;        robot.c:472: waitms(250);
0A48 9000FA    1972            mov     dptr,#0x00FA
0A4B 120100    1973            lcall   _waitms
0A4E           1974   ;        robot.c:474: pwm_Right1 = -1;
0A4E 7558FF    1975            mov     _pwm_Right1,#0xFF
0A51           1976   ;        robot.c:476: waitms(1000);
0A51 9003E8    1977            mov     dptr,#0x03E8
0A54 120100    1978            lcall   _waitms
0A57           1979   ;        robot.c:479: v = Volts_at_Pin(TANK_RL);
0A57 75820D    1980            mov     dpl,#0x0D
0A5A 120100    1981            lcall   _Volts_at_Pin
0A5D 8582D8    1982            mov     _turncar_v_1_99,dpl
0A60 8583D9    1983            mov     (_turncar_v_1_99 + 1),dph
0A63 85F0DA    1984            mov     (_turncar_v_1_99 + 2),b
0A66 F5DB      1985            mov     (_turncar_v_1_99 + 3),a
0A68           1986   ;        robot.c:481: while (v < 0.7) {
0A68           1987   L007010?:
0A68 7433      1988            mov     a,#0x33
0A6A C0E0      1989            push    acc
0A6C C0E0      1990            push    acc
0A6E C0E0      1991            push    acc
0A70 743F      1992            mov     a,#0x3F
0A72 C0E0      1993            push    acc
0A74 85D882    1994            mov     dpl,_turncar_v_1_99
0A77 85D983    1995            mov     dph,(_turncar_v_1_99 + 1)
0A7A 85DAF0    1996            mov     b,(_turncar_v_1_99 + 2)
0A7D E5DB      1997            mov     a,(_turncar_v_1_99 + 3)
0A7F 120100    1998            lcall   ___fslt
0A82 AA82      1999            mov     r2,dpl
0A84 E581      2000            mov     a,sp
0A86 24FC      2001            add     a,#0xfc
0A88 F581      2002            mov     sp,a
0A8A EA        2003            mov     a,r2
0A8B 6001      2004            jz      L007012?
0A8D           2005   ;        robot.c:483: v = Volts_at_Pin(TANK_RL);
0A8D 75820D    2006            mov     dpl,#0x0D
0A90 120100    2007            lcall   _Volts_at_Pin
0A93 8582D8    2008            mov     _turncar_v_1_99,dpl
0A96 8583D9    2009            mov     (_turncar_v_1_99 + 1),dph
0A99 85F0DA    2010            mov     (_turncar_v_1_99 + 2),b
0A9C F5DB      2011            mov     (_turncar_v_1_99 + 3),a
0A9E 8001      2012            sjmp    L007010?
0AA0           2013   L007012?:
0AA0           2014   ;        robot.c:488: pwm_Left0 = -1; 
0AA0 7518FF    2015            mov     _pwm_Left0,#0xFF
0AA3           2016   L007024?:
0AA3 22        2017            ret
0AA4           2018   ;------------------------------------------------------------
0AA4           2019   ;Allocation info for local variables in function 'uturn'
0AA4           2020   ;------------------------------------------------------------
0AA4           2021   ;vleft                     Allocated with name '_uturn_vleft_1_109'
0AA4           2022   ;vright                    Allocated with name '_uturn_vright_1_109'
0AA4           2023   ;------------------------------------------------------------
0AA4           2024   ;        robot.c:495: void uturn(void) {
0AA4           2025   ;        -----------------------------------------
0AA4           2026   ;         function uturn
0AA4           2027   ;        -----------------------------------------
0AA4           2028   _uturn:
0AA4           2029   ;        robot.c:499: vleft = Volts_at_Pin(TANK_FL);
0AA4 75820B    2030            mov     dpl,#0x0B
0AA7 120100    2031            lcall   _Volts_at_Pin
0AAA 858228    2032            mov     _uturn_vleft_1_109,dpl
0AAD 858329    2033            mov     (_uturn_vleft_1_109 + 1),dph
0AB0 85F02A    2034            mov     (_uturn_vleft_1_109 + 2),b
0AB3 F52B      2035            mov     (_uturn_vleft_1_109 + 3),a
0AB5           2036   ;        robot.c:500: vright = Volts_at_Pin(TANK_FR);
0AB5 75820C    2037            mov     dpl,#0x0C
0AB8 120100    2038            lcall   _Volts_at_Pin
0ABB 858278    2039            mov     _uturn_vright_1_109,dpl
0ABE 858379    2040            mov     (_uturn_vright_1_109 + 1),dph
0AC1 85F07A    2041            mov     (_uturn_vright_1_109 + 2),b
0AC4 F57B      2042            mov     (_uturn_vright_1_109 + 3),a
0AC6           2043   ;        robot.c:503: pwm_Left0 = -1;
0AC6 7518FF    2044            mov     _pwm_Left0,#0xFF
0AC9           2045   ;        robot.c:504: pwm_Left1 = 50;
0AC9 75D832    2046            mov     _pwm_Left1,#0x32
0ACC           2047   ;        robot.c:505: pwm_Right0 = -1;
0ACC 7598FF    2048            mov     _pwm_Right0,#0xFF
0ACF           2049   ;        robot.c:506: pwm_Right1 = 50;
0ACF 755832    2050            mov     _pwm_Right1,#0x32
0AD2           2051   ;        robot.c:509: waitms(2000);
0AD2 9007D0    2052            mov     dptr,#0x07D0
0AD5 120100    2053            lcall   _waitms
0AD8           2054   ;        robot.c:511: while ((Volts_at_Pin(TANK_FL)-Volts_at_Pin(TANK_FR))<-0.3 || (Volts_at_Pin(TANK_FL)-Volts_at_Pin(TANK_FR))>0.3);
0AD8           2055   L008002?:
0AD8 75820B    2056            mov     dpl,#0x0B
0ADB 120100    2057            lcall   _Volts_at_Pin
0ADE AA82      2058            mov     r2,dpl
0AE0 AB83      2059            mov     r3,dph
0AE2 ACF0      2060            mov     r4,b
0AE4 FD        2061            mov     r5,a
0AE5 75820C    2062            mov     dpl,#0x0C
0AE8 C002      2063            push    ar2
0AEA C003      2064            push    ar3
0AEC C004      2065            push    ar4
0AEE C005      2066            push    ar5
0AF0 120100    2067            lcall   _Volts_at_Pin
0AF3 AE82      2068            mov     r6,dpl
0AF5 AF83      2069            mov     r7,dph
0AF7 A8F0      2070            mov     r0,b
0AF9 F9        2071            mov     r1,a
0AFA D005      2072            pop     ar5
0AFC D004      2073            pop     ar4
0AFE D003      2074            pop     ar3
0B00 D002      2075            pop     ar2
0B02 C006      2076            push    ar6
0B04 C007      2077            push    ar7
0B06 C000      2078            push    ar0
0B08 C001      2079            push    ar1
0B0A 8A82      2080            mov     dpl,r2
0B0C 8B83      2081            mov     dph,r3
0B0E 8CF0      2082            mov     b,r4
0B10 ED        2083            mov     a,r5
0B11 120100    2084            lcall   ___fssub
0B14 AA82      2085            mov     r2,dpl
0B16 AB83      2086            mov     r3,dph
0B18 ACF0      2087            mov     r4,b
0B1A FD        2088            mov     r5,a
0B1B E581      2089            mov     a,sp
0B1D 24FC      2090            add     a,#0xfc
0B1F F581      2091            mov     sp,a
0B21 749A      2092            mov     a,#0x9A
0B23 C0E0      2093            push    acc
0B25 7499      2094            mov     a,#0x99
0B27 C0E0      2095            push    acc
0B29 C0E0      2096            push    acc
0B2B 74BE      2097            mov     a,#0xBE
0B2D C0E0      2098            push    acc
0B2F 8A82      2099            mov     dpl,r2
0B31 8B83      2100            mov     dph,r3
0B33 8CF0      2101            mov     b,r4
0B35 ED        2102            mov     a,r5
0B36 120100    2103            lcall   ___fslt
0B39 AA82      2104            mov     r2,dpl
0B3B E581      2105            mov     a,sp
0B3D 24FC      2106            add     a,#0xfc
0B3F F581      2107            mov     sp,a
0B41 EA        2108            mov     a,r2
0B42 7001      2109            jnz     L008002?
0B44 75820B    2110            mov     dpl,#0x0B
0B47 120100    2111            lcall   _Volts_at_Pin
0B4A AA82      2112            mov     r2,dpl
0B4C AB83      2113            mov     r3,dph
0B4E ACF0      2114            mov     r4,b
0B50 FD        2115            mov     r5,a
0B51 75820C    2116            mov     dpl,#0x0C
0B54 C002      2117            push    ar2
0B56 C003      2118            push    ar3
0B58 C004      2119            push    ar4
0B5A C005      2120            push    ar5
0B5C 120100    2121            lcall   _Volts_at_Pin
0B5F AE82      2122            mov     r6,dpl
0B61 AF83      2123            mov     r7,dph
0B63 A8F0      2124            mov     r0,b
0B65 F9        2125            mov     r1,a
0B66 D005      2126            pop     ar5
0B68 D004      2127            pop     ar4
0B6A D003      2128            pop     ar3
0B6C D002      2129            pop     ar2
0B6E C006      2130            push    ar6
0B70 C007      2131            push    ar7
0B72 C000      2132            push    ar0
0B74 C001      2133            push    ar1
0B76 8A82      2134            mov     dpl,r2
0B78 8B83      2135            mov     dph,r3
0B7A 8CF0      2136            mov     b,r4
0B7C ED        2137            mov     a,r5
0B7D 120100    2138            lcall   ___fssub
0B80 AA82      2139            mov     r2,dpl
0B82 AB83      2140            mov     r3,dph
0B84 ACF0      2141            mov     r4,b
0B86 FD        2142            mov     r5,a
0B87 E581      2143            mov     a,sp
0B89 24FC      2144            add     a,#0xfc
0B8B F581      2145            mov     sp,a
0B8D 749A      2146            mov     a,#0x9A
0B8F C0E0      2147            push    acc
0B91 7499      2148            mov     a,#0x99
0B93 C0E0      2149            push    acc
0B95 C0E0      2150            push    acc
0B97 743E      2151            mov     a,#0x3E
0B99 C0E0      2152            push    acc
0B9B 8A82      2153            mov     dpl,r2
0B9D 8B83      2154            mov     dph,r3
0B9F 8CF0      2155            mov     b,r4
0BA1 ED        2156            mov     a,r5
0BA2 120100    2157            lcall   ___fsgt
0BA5 AA82      2158            mov     r2,dpl
0BA7 E581      2159            mov     a,sp
0BA9 24FC      2160            add     a,#0xfc
0BAB F581      2161            mov     sp,a
0BAD EA        2162            mov     a,r2
0BAE 6001      2163            jz      L008010?
0BB0 020100    2164            ljmp    L008002?
0BB3           2165   L008010?:
0BB3 22        2166            ret
0BB4           2167   ;------------------------------------------------------------
0BB4           2168   ;Allocation info for local variables in function 'Sonar_Reading'
0BB4           2169   ;------------------------------------------------------------
0BB4           2170   ;------------------------------------------------------------
0BB4           2171   ;        robot.c:537: void Sonar_Reading(void)
0BB4           2172   ;        -----------------------------------------
0BB4           2173   ;         function Sonar_Reading
0BB4           2174   ;        -----------------------------------------
0BB4           2175   _Sonar_Reading:
0BB4           2176   ;        robot.c:540: TL0=0; 
0BB4 758A00    2177            mov     _TL0,#0x00
0BB7           2178   ;        robot.c:541: TH0=0;
0BB7 758C00    2179            mov     _TH0,#0x00
0BBA           2180   ;        robot.c:542: TF0=0;
0BBA C28D      2181            clr     _TF0
0BBC           2182   ;        robot.c:543: overflow_count=0;
0BBC 755800    2183            mov     _overflow_count,#0x00
0BBF           2184   ;        robot.c:546: Trigger = 0; 
0BBF C286      2185            clr     _P0_6
0BC1           2186   ;        robot.c:547: Timer3us(2);
0BC1 758202    2187            mov     dpl,#0x02
0BC4 120100    2188            lcall   _Timer3us
0BC7           2189   ;        robot.c:548: Trigger = 1; // turn on trig
0BC7 D286      2190            setb    _P0_6
0BC9           2191   ;        robot.c:549: Timer3us(10);//10us delay 
0BC9 75820A    2192            mov     dpl,#0x0A
0BCC 120100    2193            lcall   _Timer3us
0BCF           2194   ;        robot.c:550: Trigger = 0; // trun off trig 
0BCF C286      2195            clr     _P0_6
0BD1           2196   ;        robot.c:551: while(Echo!=0); // Wait for the signal to be zero
0BD1           2197   L009001?:
0BD1 208158    2198            jb      _P0_1,L009001?
0BD4           2199   ;        robot.c:552: while(Echo!=1); // Wait for the signal to be one
0BD4           2200   L009004?:
0BD4 308198    2201            jnb     _P0_1,L009004?
0BD7           2202   ;        robot.c:556: TR0=1; // Start the timer
0BD7 D28C      2203            setb    _TR0
0BD9           2204   ;        robot.c:557: while(Echo!=0) // Wait for the signal to be zero
0BD9           2205   L009009?:
0BD9 308118    2206            jnb     _P0_1,L009011?
0BDC           2207   ;        robot.c:559: if(TF0==1) // Did the 16-bit timer overflow?
0BDC           2208   ;        robot.c:561: TF0=0;
0BDC 108D58    2209            jbc     _TF0,L009023?
0BDF 8001      2210            sjmp    L009009?
0BE1           2211   L009023?:
0BE1           2212   ;        robot.c:562: overflow_count++;
0BE1 0558      2213            inc     _overflow_count
0BE3 8001      2214            sjmp    L009009?
0BE5           2215   L009011?:
0BE5           2216   ;        robot.c:565: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
0BE5 C28C      2217            clr     _TR0
0BE7           2218   ;        robot.c:566: time=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
0BE7 855882    2219            mov     dpl,_overflow_count
0BEA 120100    2220            lcall   ___uchar2fs
0BED AA82      2221            mov     r2,dpl
0BEF AB83      2222            mov     r3,dph
0BF1 ACF0      2223            mov     r4,b
0BF3 FD        2224            mov     r5,a
0BF4 C002      2225            push    ar2
0BF6 C003      2226            push    ar3
0BF8 C004      2227            push    ar4
0BFA C005      2228            push    ar5
0BFC 900000    2229            mov     dptr,#0x0000
0BFF 75F080    2230            mov     b,#0x80
0C02 7447      2231            mov     a,#0x47
0C04 120100    2232            lcall   ___fsmul
0C07 AA82      2233            mov     r2,dpl
0C09 AB83      2234            mov     r3,dph
0C0B ACF0      2235            mov     r4,b
0C0D FD        2236            mov     r5,a
0C0E E581      2237            mov     a,sp
0C10 24FC      2238            add     a,#0xfc
0C12 F581      2239            mov     sp,a
0C14 858C82    2240            mov     dpl,_TH0
0C17 C002      2241            push    ar2
0C19 C003      2242            push    ar3
0C1B C004      2243            push    ar4
0C1D C005      2244            push    ar5
0C1F 120100    2245            lcall   ___uchar2fs
0C22 AE82      2246            mov     r6,dpl
0C24 AF83      2247            mov     r7,dph
0C26 A8F0      2248            mov     r0,b
0C28 F9        2249            mov     r1,a
0C29 C006      2250            push    ar6
0C2B C007      2251            push    ar7
0C2D C000      2252            push    ar0
0C2F C001      2253            push    ar1
0C31 900000    2254            mov     dptr,#0x0000
0C34 75F080    2255            mov     b,#0x80
0C37 7443      2256            mov     a,#0x43
0C39 120100    2257            lcall   ___fsmul
0C3C AE82      2258            mov     r6,dpl
0C3E AF83      2259            mov     r7,dph
0C40 A8F0      2260            mov     r0,b
0C42 F9        2261            mov     r1,a
0C43 E581      2262            mov     a,sp
0C45 24FC      2263            add     a,#0xfc
0C47 F581      2264            mov     sp,a
0C49 D005      2265            pop     ar5
0C4B D004      2266            pop     ar4
0C4D D003      2267            pop     ar3
0C4F D002      2268            pop     ar2
0C51 C006      2269            push    ar6
0C53 C007      2270            push    ar7
0C55 C000      2271            push    ar0
0C57 C001      2272            push    ar1
0C59 8A82      2273            mov     dpl,r2
0C5B 8B83      2274            mov     dph,r3
0C5D 8CF0      2275            mov     b,r4
0C5F ED        2276            mov     a,r5
0C60 120100    2277            lcall   ___fsadd
0C63 AA82      2278            mov     r2,dpl
0C65 AB83      2279            mov     r3,dph
0C67 ACF0      2280            mov     r4,b
0C69 FD        2281            mov     r5,a
0C6A E581      2282            mov     a,sp
0C6C 24FC      2283            add     a,#0xfc
0C6E F581      2284            mov     sp,a
0C70 AE8A      2285            mov     r6,_TL0
0C72 7F00      2286            mov     r7,#0x00
0C74 8E82      2287            mov     dpl,r6
0C76 8F83      2288            mov     dph,r7
0C78 C002      2289            push    ar2
0C7A C003      2290            push    ar3
0C7C C004      2291            push    ar4
0C7E C005      2292            push    ar5
0C80 120100    2293            lcall   ___sint2fs
0C83 AE82      2294            mov     r6,dpl
0C85 AF83      2295            mov     r7,dph
0C87 A8F0      2296            mov     r0,b
0C89 F9        2297            mov     r1,a
0C8A D005      2298            pop     ar5
0C8C D004      2299            pop     ar4
0C8E D003      2300            pop     ar3
0C90 D002      2301            pop     ar2
0C92 C006      2302            push    ar6
0C94 C007      2303            push    ar7
0C96 C000      2304            push    ar0
0C98 C001      2305            push    ar1
0C9A 8A82      2306            mov     dpl,r2
0C9C 8B83      2307            mov     dph,r3
0C9E 8CF0      2308            mov     b,r4
0CA0 ED        2309            mov     a,r5
0CA1 120100    2310            lcall   ___fsadd
0CA4 AA82      2311            mov     r2,dpl
0CA6 AB83      2312            mov     r3,dph
0CA8 ACF0      2313            mov     r4,b
0CAA FD        2314            mov     r5,a
0CAB E581      2315            mov     a,sp
0CAD 24FC      2316            add     a,#0xfc
0CAF F581      2317            mov     sp,a
0CB1 C002      2318            push    ar2
0CB3 C003      2319            push    ar3
0CB5 C004      2320            push    ar4
0CB7 C005      2321            push    ar5
0CB9 9037BD    2322            mov     dptr,#0x37BD
0CBC 75F086    2323            mov     b,#0x86
0CBF 7434      2324            mov     a,#0x34
0CC1 120100    2325            lcall   ___fsmul
0CC4 858218    2326            mov     _time,dpl
0CC7 858319    2327            mov     (_time + 1),dph
0CCA 85F01A    2328            mov     (_time + 2),b
0CCD F51B      2329            mov     (_time + 3),a
0CCF E581      2330            mov     a,sp
0CD1 24FC      2331            add     a,#0xfc
0CD3 F581      2332            mov     sp,a
0CD5           2333   ;        robot.c:567: distance = ((time/2.0f)/29.1f)*100000;
0CD5 E4        2334            clr     a
0CD6 C0E0      2335            push    acc
0CD8 C0E0      2336            push    acc
0CDA C0E0      2337            push    acc
0CDC 7440      2338            mov     a,#0x40
0CDE C0E0      2339            push    acc
0CE0 851882    2340            mov     dpl,_time
0CE3 851983    2341            mov     dph,(_time + 1)
0CE6 851AF0    2342            mov     b,(_time + 2)
0CE9 E51B      2343            mov     a,(_time + 3)
0CEB 120100    2344            lcall   ___fsdiv
0CEE AA82      2345            mov     r2,dpl
0CF0 AB83      2346            mov     r3,dph
0CF2 ACF0      2347            mov     r4,b
0CF4 FD        2348            mov     r5,a
0CF5 E581      2349            mov     a,sp
0CF7 24FC      2350            add     a,#0xfc
0CF9 F581      2351            mov     sp,a
0CFB 74CD      2352            mov     a,#0xCD
0CFD C0E0      2353            push    acc
0CFF 74CC      2354            mov     a,#0xCC
0D01 C0E0      2355            push    acc
0D03 74E8      2356            mov     a,#0xE8
0D05 C0E0      2357            push    acc
0D07 7441      2358            mov     a,#0x41
0D09 C0E0      2359            push    acc
0D0B 8A82      2360            mov     dpl,r2
0D0D 8B83      2361            mov     dph,r3
0D0F 8CF0      2362            mov     b,r4
0D11 ED        2363            mov     a,r5
0D12 120100    2364            lcall   ___fsdiv
0D15 AA82      2365            mov     r2,dpl
0D17 AB83      2366            mov     r3,dph
0D19 ACF0      2367            mov     r4,b
0D1B FD        2368            mov     r5,a
0D1C E581      2369            mov     a,sp
0D1E 24FC      2370            add     a,#0xfc
0D20 F581      2371            mov     sp,a
0D22 C002      2372            push    ar2
0D24 C003      2373            push    ar3
0D26 C004      2374            push    ar4
0D28 C005      2375            push    ar5
0D2A 905000    2376            mov     dptr,#0x5000
0D2D 75F0C3    2377            mov     b,#0xC3
0D30 7447      2378            mov     a,#0x47
0D32 120100    2379            lcall   ___fsmul
0D35 8582D8    2380            mov     _distance,dpl
0D38 8583D9    2381            mov     (_distance + 1),dph
0D3B 85F0DA    2382            mov     (_distance + 2),b
0D3E F5DB      2383            mov     (_distance + 3),a
0D40 E581      2384            mov     a,sp
0D42 24FC      2385            add     a,#0xfc
0D44 F581      2386            mov     sp,a
0D46 22        2387            ret
0D47           2388            rseg R_CSEG
0D47           2389   
0000           2390            rseg R_XINIT
0000           2391   
0000           2392            rseg R_CONST
0000           2393   
002E           2394            CSEG
002E           2395   
002E           2396   end
