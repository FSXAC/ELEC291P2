0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Tue Apr 04 07:09:09 2017
0000              5   ;--------------------------------------------------------
                  5   $name robot
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _Timer2_ISR
0000             29            public _blinkerEnabled
0000             30            public _blinkerCount
0000             31            public _distance
0000             32            public _time
0000             33            public _overflow_count
0000             34            public _currentstate
0000             35            public _currentcmd
0000             36            public _direction
0000             37            public _pwm_Right1
0000             38            public _pwm_Right0
0000             39            public _pwm_Left1
0000             40            public _pwm_Left0
0000             41            public _pwm_both
0000             42            public _mode
0000             43            public _pwm_count
0000             44            public _readData
0000             45            public _linetrack
0000             46            public _stopcar
0000             47            public _turncar
0000             48            public _uturn
0000             49            public _Sonar_Reading
0000             50   ;--------------------------------------------------------
0000             51   ; Special Function Registers
0000             52   ;--------------------------------------------------------
0000             53   _P0             DATA 0x80
0000             54   _SP             DATA 0x81
0000             55   _DPL            DATA 0x82
0000             56   _DPH            DATA 0x83
0000             57   _EMI0TC         DATA 0x84
0000             58   _EMI0CF         DATA 0x85
0000             59   _OSCLCN         DATA 0x86
0000             60   _PCON           DATA 0x87
0000             61   _TCON           DATA 0x88
0000             62   _TMOD           DATA 0x89
0000             63   _TL0            DATA 0x8a
0000             64   _TL1            DATA 0x8b
0000             65   _TH0            DATA 0x8c
0000             66   _TH1            DATA 0x8d
0000             67   _CKCON          DATA 0x8e
0000             68   _PSCTL          DATA 0x8f
0000             69   _P1             DATA 0x90
0000             70   _TMR3CN         DATA 0x91
0000             71   _TMR4CN         DATA 0x91
0000             72   _TMR3RLL        DATA 0x92
0000             73   _TMR4RLL        DATA 0x92
0000             74   _TMR3RLH        DATA 0x93
0000             75   _TMR4RLH        DATA 0x93
0000             76   _TMR3L          DATA 0x94
0000             77   _TMR4L          DATA 0x94
0000             78   _TMR3H          DATA 0x95
0000             79   _TMR4H          DATA 0x95
0000             80   _USB0ADR        DATA 0x96
0000             81   _USB0DAT        DATA 0x97
0000             82   _SCON           DATA 0x98
0000             83   _SCON0          DATA 0x98
0000             84   _SBUF           DATA 0x99
0000             85   _SBUF0          DATA 0x99
0000             86   _CPT1CN         DATA 0x9a
0000             87   _CPT0CN         DATA 0x9b
0000             88   _CPT1MD         DATA 0x9c
0000             89   _CPT0MD         DATA 0x9d
0000             90   _CPT1MX         DATA 0x9e
0000             91   _CPT0MX         DATA 0x9f
0000             92   _P2             DATA 0xa0
0000             93   _SPI0CFG        DATA 0xa1
0000             94   _SPI0CKR        DATA 0xa2
0000             95   _SPI0DAT        DATA 0xa3
0000             96   _P0MDOUT        DATA 0xa4
0000             97   _P1MDOUT        DATA 0xa5
0000             98   _P2MDOUT        DATA 0xa6
0000             99   _P3MDOUT        DATA 0xa7
0000            100   _IE             DATA 0xa8
0000            101   _CLKSEL         DATA 0xa9
0000            102   _EMI0CN         DATA 0xaa
0000            103   __XPAGE         DATA 0xaa
0000            104   _SBCON1         DATA 0xac
0000            105   _P4MDOUT        DATA 0xae
0000            106   _PFE0CN         DATA 0xaf
0000            107   _P3             DATA 0xb0
0000            108   _OSCXCN         DATA 0xb1
0000            109   _OSCICN         DATA 0xb2
0000            110   _OSCICL         DATA 0xb3
0000            111   _SBRLL1         DATA 0xb4
0000            112   _SBRLH1         DATA 0xb5
0000            113   _FLSCL          DATA 0xb6
0000            114   _FLKEY          DATA 0xb7
0000            115   _IP             DATA 0xb8
0000            116   _CLKMUL         DATA 0xb9
0000            117   _SMBTC          DATA 0xb9
0000            118   _AMX0N          DATA 0xba
0000            119   _AMX0P          DATA 0xbb
0000            120   _ADC0CF         DATA 0xbc
0000            121   _ADC0L          DATA 0xbd
0000            122   _ADC0H          DATA 0xbe
0000            123   _SFRPAGE        DATA 0xbf
0000            124   _SMB0CN         DATA 0xc0
0000            125   _SMB1CN         DATA 0xc0
0000            126   _SMB0CF         DATA 0xc1
0000            127   _SMB1CF         DATA 0xc1
0000            128   _SMB0DAT        DATA 0xc2
0000            129   _SMB1DAT        DATA 0xc2
0000            130   _ADC0GTL        DATA 0xc3
0000            131   _ADC0GTH        DATA 0xc4
0000            132   _ADC0LTL        DATA 0xc5
0000            133   _ADC0LTH        DATA 0xc6
0000            134   _P4             DATA 0xc7
0000            135   _TMR2CN         DATA 0xc8
0000            136   _TMR5CN         DATA 0xc8
0000            137   _REG01CN        DATA 0xc9
0000            138   _TMR2RLL        DATA 0xca
0000            139   _TMR5RLL        DATA 0xca
0000            140   _TMR2RLH        DATA 0xcb
0000            141   _TMR5RLH        DATA 0xcb
0000            142   _TMR2L          DATA 0xcc
0000            143   _TMR5L          DATA 0xcc
0000            144   _TMR2H          DATA 0xcd
0000            145   _TMR5H          DATA 0xcd
0000            146   _SMB0ADM        DATA 0xce
0000            147   _SMB1ADM        DATA 0xce
0000            148   _SMB0ADR        DATA 0xcf
0000            149   _SMB1ADR        DATA 0xcf
0000            150   _PSW            DATA 0xd0
0000            151   _REF0CN         DATA 0xd1
0000            152   _SCON1          DATA 0xd2
0000            153   _SBUF1          DATA 0xd3
0000            154   _P0SKIP         DATA 0xd4
0000            155   _P1SKIP         DATA 0xd5
0000            156   _P2SKIP         DATA 0xd6
0000            157   _USB0XCN        DATA 0xd7
0000            158   _PCA0CN         DATA 0xd8
0000            159   _PCA0MD         DATA 0xd9
0000            160   _PCA0CPM0       DATA 0xda
0000            161   _PCA0CPM1       DATA 0xdb
0000            162   _PCA0CPM2       DATA 0xdc
0000            163   _PCA0CPM3       DATA 0xdd
0000            164   _PCA0CPM4       DATA 0xde
0000            165   _P3SKIP         DATA 0xdf
0000            166   _ACC            DATA 0xe0
0000            167   _XBR0           DATA 0xe1
0000            168   _XBR1           DATA 0xe2
0000            169   _XBR2           DATA 0xe3
0000            170   _IT01CF         DATA 0xe4
0000            171   _CKCON1         DATA 0xe4
0000            172   _SMOD1          DATA 0xe5
0000            173   _EIE1           DATA 0xe6
0000            174   _EIE2           DATA 0xe7
0000            175   _ADC0CN         DATA 0xe8
0000            176   _PCA0CPL1       DATA 0xe9
0000            177   _PCA0CPH1       DATA 0xea
0000            178   _PCA0CPL2       DATA 0xeb
0000            179   _PCA0CPH2       DATA 0xec
0000            180   _PCA0CPL3       DATA 0xed
0000            181   _PCA0CPH3       DATA 0xee
0000            182   _RSTSRC         DATA 0xef
0000            183   _B              DATA 0xf0
0000            184   _P0MDIN         DATA 0xf1
0000            185   _P1MDIN         DATA 0xf2
0000            186   _P2MDIN         DATA 0xf3
0000            187   _P3MDIN         DATA 0xf4
0000            188   _P4MDIN         DATA 0xf5
0000            189   _EIP1           DATA 0xf6
0000            190   _EIP2           DATA 0xf7
0000            191   _SPI0CN         DATA 0xf8
0000            192   _PCA0L          DATA 0xf9
0000            193   _PCA0H          DATA 0xfa
0000            194   _PCA0CPL0       DATA 0xfb
0000            195   _PCA0CPH0       DATA 0xfc
0000            196   _PCA0CPL4       DATA 0xfd
0000            197   _PCA0CPH4       DATA 0xfe
0000            198   _VDM0CN         DATA 0xff
0000            199   _DPTR           DATA 0x8382
0000            200   _TMR2RL         DATA 0xcbca
0000            201   _TMR3RL         DATA 0x9392
0000            202   _TMR4RL         DATA 0x9392
0000            203   _TMR5RL         DATA 0xcbca
0000            204   _TMR2           DATA 0xcdcc
0000            205   _TMR3           DATA 0x9594
0000            206   _TMR4           DATA 0x9594
0000            207   _TMR5           DATA 0xcdcc
0000            208   _SBRL1          DATA 0xb5b4
0000            209   _ADC0           DATA 0xbebd
0000            210   _ADC0GT         DATA 0xc4c3
0000            211   _ADC0LT         DATA 0xc6c5
0000            212   _PCA0           DATA 0xfaf9
0000            213   _PCA0CP1        DATA 0xeae9
0000            214   _PCA0CP2        DATA 0xeceb
0000            215   _PCA0CP3        DATA 0xeeed
0000            216   _PCA0CP0        DATA 0xfcfb
0000            217   _PCA0CP4        DATA 0xfefd
0000            218   ;--------------------------------------------------------
0000            219   ; special function bits
0000            220   ;--------------------------------------------------------
0000            221   _P0_0           BIT 0x80
0000            222   _P0_1           BIT 0x81
0000            223   _P0_2           BIT 0x82
0000            224   _P0_3           BIT 0x83
0000            225   _P0_4           BIT 0x84
0000            226   _P0_5           BIT 0x85
0000            227   _P0_6           BIT 0x86
0000            228   _P0_7           BIT 0x87
0000            229   _TF1            BIT 0x8f
0000            230   _TR1            BIT 0x8e
0000            231   _TF0            BIT 0x8d
0000            232   _TR0            BIT 0x8c
0000            233   _IE1            BIT 0x8b
0000            234   _IT1            BIT 0x8a
0000            235   _IE0            BIT 0x89
0000            236   _IT0            BIT 0x88
0000            237   _P1_0           BIT 0x90
0000            238   _P1_1           BIT 0x91
0000            239   _P1_2           BIT 0x92
0000            240   _P1_3           BIT 0x93
0000            241   _P1_4           BIT 0x94
0000            242   _P1_5           BIT 0x95
0000            243   _P1_6           BIT 0x96
0000            244   _P1_7           BIT 0x97
0000            245   _S0MODE         BIT 0x9f
0000            246   _SCON0_6        BIT 0x9e
0000            247   _MCE0           BIT 0x9d
0000            248   _REN0           BIT 0x9c
0000            249   _TB80           BIT 0x9b
0000            250   _RB80           BIT 0x9a
0000            251   _TI0            BIT 0x99
0000            252   _RI0            BIT 0x98
0000            253   _SCON_6         BIT 0x9e
0000            254   _MCE            BIT 0x9d
0000            255   _REN            BIT 0x9c
0000            256   _TB8            BIT 0x9b
0000            257   _RB8            BIT 0x9a
0000            258   _TI             BIT 0x99
0000            259   _RI             BIT 0x98
0000            260   _P2_0           BIT 0xa0
0000            261   _P2_1           BIT 0xa1
0000            262   _P2_2           BIT 0xa2
0000            263   _P2_3           BIT 0xa3
0000            264   _P2_4           BIT 0xa4
0000            265   _P2_5           BIT 0xa5
0000            266   _P2_6           BIT 0xa6
0000            267   _P2_7           BIT 0xa7
0000            268   _EA             BIT 0xaf
0000            269   _ESPI0          BIT 0xae
0000            270   _ET2            BIT 0xad
0000            271   _ES0            BIT 0xac
0000            272   _ET1            BIT 0xab
0000            273   _EX1            BIT 0xaa
0000            274   _ET0            BIT 0xa9
0000            275   _EX0            BIT 0xa8
0000            276   _P3_0           BIT 0xb0
0000            277   _P3_1           BIT 0xb1
0000            278   _P3_2           BIT 0xb2
0000            279   _P3_3           BIT 0xb3
0000            280   _P3_4           BIT 0xb4
0000            281   _P3_5           BIT 0xb5
0000            282   _P3_6           BIT 0xb6
0000            283   _P3_7           BIT 0xb7
0000            284   _IP_7           BIT 0xbf
0000            285   _PSPI0          BIT 0xbe
0000            286   _PT2            BIT 0xbd
0000            287   _PS0            BIT 0xbc
0000            288   _PT1            BIT 0xbb
0000            289   _PX1            BIT 0xba
0000            290   _PT0            BIT 0xb9
0000            291   _PX0            BIT 0xb8
0000            292   _MASTER0        BIT 0xc7
0000            293   _TXMODE0        BIT 0xc6
0000            294   _STA0           BIT 0xc5
0000            295   _STO0           BIT 0xc4
0000            296   _ACKRQ0         BIT 0xc3
0000            297   _ARBLOST0       BIT 0xc2
0000            298   _ACK0           BIT 0xc1
0000            299   _SI0            BIT 0xc0
0000            300   _MASTER1        BIT 0xc7
0000            301   _TXMODE1        BIT 0xc6
0000            302   _STA1           BIT 0xc5
0000            303   _STO1           BIT 0xc4
0000            304   _ACKRQ1         BIT 0xc3
0000            305   _ARBLOST1       BIT 0xc2
0000            306   _ACK1           BIT 0xc1
0000            307   _SI1            BIT 0xc0
0000            308   _TF2            BIT 0xcf
0000            309   _TF2H           BIT 0xcf
0000            310   _TF2L           BIT 0xce
0000            311   _TF2LEN         BIT 0xcd
0000            312   _TF2CEN         BIT 0xcc
0000            313   _T2SPLIT        BIT 0xcb
0000            314   _TR2            BIT 0xca
0000            315   _T2CSS          BIT 0xc9
0000            316   _T2XCLK         BIT 0xc8
0000            317   _TF5H           BIT 0xcf
0000            318   _TF5L           BIT 0xce
0000            319   _TF5LEN         BIT 0xcd
0000            320   _TMR5CN_4       BIT 0xcc
0000            321   _T5SPLIT        BIT 0xcb
0000            322   _TR5            BIT 0xca
0000            323   _TMR5CN_1       BIT 0xc9
0000            324   _T5XCLK         BIT 0xc8
0000            325   _CY             BIT 0xd7
0000            326   _AC             BIT 0xd6
0000            327   _F0             BIT 0xd5
0000            328   _RS1            BIT 0xd4
0000            329   _RS0            BIT 0xd3
0000            330   _OV             BIT 0xd2
0000            331   _F1             BIT 0xd1
0000            332   _PARITY         BIT 0xd0
0000            333   _CF             BIT 0xdf
0000            334   _CR             BIT 0xde
0000            335   _PCA0CN_5       BIT 0xde
0000            336   _CCF4           BIT 0xdc
0000            337   _CCF3           BIT 0xdb
0000            338   _CCF2           BIT 0xda
0000            339   _CCF1           BIT 0xd9
0000            340   _CCF0           BIT 0xd8
0000            341   _ACC_7          BIT 0xe7
0000            342   _ACC_6          BIT 0xe6
0000            343   _ACC_5          BIT 0xe5
0000            344   _ACC_4          BIT 0xe4
0000            345   _ACC_3          BIT 0xe3
0000            346   _ACC_2          BIT 0xe2
0000            347   _ACC_1          BIT 0xe1
0000            348   _ACC_0          BIT 0xe0
0000            349   _AD0EN          BIT 0xef
0000            350   _AD0TM          BIT 0xee
0000            351   _AD0INT         BIT 0xed
0000            352   _AD0BUSY        BIT 0xec
0000            353   _AD0WINT        BIT 0xeb
0000            354   _AD0CM2         BIT 0xea
0000            355   _AD0CM1         BIT 0xe9
0000            356   _AD0CM0         BIT 0xe8
0000            357   _B_7            BIT 0xf7
0000            358   _B_6            BIT 0xf6
0000            359   _B_5            BIT 0xf5
0000            360   _B_4            BIT 0xf4
0000            361   _B_3            BIT 0xf3
0000            362   _B_2            BIT 0xf2
0000            363   _B_1            BIT 0xf1
0000            364   _B_0            BIT 0xf0
0000            365   _SPIF           BIT 0xff
0000            366   _WCOL           BIT 0xfe
0000            367   _MODF           BIT 0xfd
0000            368   _RXOVRN         BIT 0xfc
0000            369   _NSSMD1         BIT 0xfb
0000            370   _NSSMD0         BIT 0xfa
0000            371   _TXBMT          BIT 0xf9
0000            372   _SPIEN          BIT 0xf8
0000            373   ;--------------------------------------------------------
0000            374   ; overlayable register banks
0000            375   ;--------------------------------------------------------
0000            376            rbank0 segment data overlay
0000            377   ;--------------------------------------------------------
0000            378   ; overlayable bit register bank
0000            379   ;--------------------------------------------------------
0000            380            rseg BIT_BANK
0000            381   bits:
0000            382            ds 1
0001            383            b0 equ  bits.0 
0001            384            b1 equ  bits.1 
0001            385            b2 equ  bits.2 
0001            386            b3 equ  bits.3 
0001            387            b4 equ  bits.4 
0001            388            b5 equ  bits.5 
0001            389            b6 equ  bits.6 
0001            390            b7 equ  bits.7 
0001            391   ;--------------------------------------------------------
0001            392   ; internal ram data
0001            393   ;--------------------------------------------------------
0000            394            rseg R_DSEG
0000            395   _pwm_count:
0000            396            ds 1
0001            397   _mode:
0001            398            ds 1
0002            399   _pwm_both:
0002            400            ds 1
0003            401   _pwm_Left0:
0003            402            ds 1
0004            403   _pwm_Left1:
0004            404            ds 1
0005            405   _pwm_Right0:
0005            406            ds 1
0006            407   _pwm_Right1:
0006            408            ds 1
0007            409   _direction:
0007            410            ds 1
0008            411   _currentcmd:
0008            412            ds 1
0009            413   _currentstate:
0009            414            ds 1
000A            415   _overflow_count:
000A            416            ds 1
000B            417   _time:
000B            418            ds 4
000F            419   _distance:
000F            420            ds 4
0013            421   _blinkerCount:
0013            422            ds 2
0015            423   _blinkerEnabled:
0015            424            ds 1
0016            425   _main_v1_1_74:
0016            426            ds 4
001A            427   _main_v2_1_74:
001A            428            ds 4
001E            429   _linetrack_vleft_1_93:
001E            430            ds 4
0022            431   _linetrack_vright_1_93:
0022            432            ds 4
0026            433   _linetrack_sloc0_1_0:
0026            434            ds 4
002A            435   _linetrack_sloc1_1_0:
002A            436            ds 4
002E            437   _turncar_v_1_99:
002E            438            ds 4
0032            439   _uturn_vleft_1_109:
0032            440            ds 4
0036            441   _uturn_vright_1_109:
0036            442            ds 4
003A            443   ;--------------------------------------------------------
003A            444   ; overlayable items in internal ram 
003A            445   ;--------------------------------------------------------
0000            446            rseg R_OSEG
0000            447   ;--------------------------------------------------------
0000            448   ; indirectly addressable internal ram data
0000            449   ;--------------------------------------------------------
0000            450            rseg R_ISEG
0000            451   ;--------------------------------------------------------
0000            452   ; absolute internal ram data
0000            453   ;--------------------------------------------------------
0000            454            DSEG
0000            455   ;--------------------------------------------------------
0000            456   ; bit data
0000            457   ;--------------------------------------------------------
0000            458            rseg R_BSEG
0000            459   _Timer2_ISR_sloc0_1_0:
0000            460            DBIT    1
0001            461   _main_sloc0_1_0:
0001            462            DBIT    1
0002            463   ;--------------------------------------------------------
0002            464   ; paged external ram data
0002            465   ;--------------------------------------------------------
0000            466            rseg R_PSEG
0000            467   ;--------------------------------------------------------
0000            468   ; external ram data
0000            469   ;--------------------------------------------------------
0000            470            rseg R_XSEG
0000            471   ;--------------------------------------------------------
0000            472   ; absolute external ram data
0000            473   ;--------------------------------------------------------
0000            474            XSEG
0000            475   ;--------------------------------------------------------
0000            476   ; external initialized ram data
0000            477   ;--------------------------------------------------------
0000            478            rseg R_IXSEG
0000            479            rseg R_HOME
0000            480            rseg R_GSINIT
0000            481            rseg R_CSEG
0000            482   ;--------------------------------------------------------
0000            483   ; Reset entry point and interrupt vectors
0000            484   ;--------------------------------------------------------
0000            485            CSEG at 0x0000
0000 020100     486            ljmp    _crt0
002B            487            CSEG at 0x002b
002B 020100     488            ljmp    _Timer2_ISR
002E            489   ;--------------------------------------------------------
002E            490   ; global & static initialisations
002E            491   ;--------------------------------------------------------
0000            492            rseg R_HOME
0000            493            rseg R_GSINIT
0000            494            rseg R_GSINIT
0000            495   ;--------------------------------------------------------
0000            496   ; data variables initialization
0000            497   ;--------------------------------------------------------
0000            498            rseg R_DINIT
0000            499   ;        robot.c:10: volatile char pwm_count=0;
0000 756000     500            mov     _pwm_count,#0x00
0003            501   ;        robot.c:11: volatile char mode = 0;
0003 752000     502            mov     _mode,#0x00
0006            503   ;        robot.c:12: volatile char pwm_both =0;
0006 75E000     504            mov     _pwm_both,#0x00
0009            505   ;        robot.c:13: volatile char pwm_Left0 = 0; //p1.5
0009 75A000     506            mov     _pwm_Left0,#0x00
000C            507   ;        robot.c:14: volatile char pwm_Left1 = 0; //p1.6
000C 756000     508            mov     _pwm_Left1,#0x00
000F            509   ;        robot.c:15: volatile char pwm_Right0 = 0; //p2.0
000F 752000     510            mov     _pwm_Right0,#0x00
0012            511   ;        robot.c:16: volatile char pwm_Right1 = 0; //p2.1
0012 75F000     512            mov     _pwm_Right1,#0x00
0015            513   ;        robot.c:17: volatile char direction = 0; // 1 for back 0 for forward
0015 75B000     514            mov     _direction,#0x00
0018            515   ;        robot.c:20: volatile char currentcmd = 0;
0018 757000     516            mov     _currentcmd,#0x00
001B            517   ;        robot.c:21: volatile char currentstate = 1;
001B 753001     518            mov     _currentstate,#0x01
001E            519   ;        robot.c:25: volatile float time = 0.0f;
001E 75B000     520            mov     _time,#0x00
0021 75B100     521            mov     (_time + 1),#0x00
0024 75B200     522            mov     (_time + 2),#0x00
0027 75B300     523            mov     (_time + 3),#0x00
002A            524   ;        robot.c:26: volatile float distance = 0.0f;
002A 757000     525            mov     _distance,#0x00
002D 757100     526            mov     (_distance + 1),#0x00
0030 757200     527            mov     (_distance + 2),#0x00
0033 757300     528            mov     (_distance + 3),#0x00
0036            529   ;        robot.c:29: volatile unsigned int blinkerCount = 0;
0036 E4         530            clr     a
0037 F530       531            mov     _blinkerCount,a
0039 F531       532            mov     (_blinkerCount + 1),a
003B            533   ;        robot.c:30: unsigned char blinkerEnabled = 0;
003B 75F000     534            mov     _blinkerEnabled,#0x00
003E            535            ; The linker places a 'ret' at the end of segment R_DINIT.
003E            536   ;--------------------------------------------------------
003E            537   ; code
003E            538   ;--------------------------------------------------------
0000            539            rseg R_CSEG
0000            540   ;------------------------------------------------------------
0000            541   ;Allocation info for local variables in function 'Timer2_ISR'
0000            542   ;------------------------------------------------------------
0000            543   ;------------------------------------------------------------
0000            544   ;        robot.c:33: void Timer2_ISR (void) interrupt 5 {
0000            545   ;        -----------------------------------------
0000            546   ;         function Timer2_ISR
0000            547   ;        -----------------------------------------
0000            548   _Timer2_ISR:
0000            549            using   0
0000 C0A8       550            push    bits
0002 C0E0       551            push    acc
0004 C0F0       552            push    b
0006 C082       553            push    dpl
0008 C083       554            push    dph
000A C002       555            push    (0+2)
000C C003       556            push    (0+3)
000E C004       557            push    (0+4)
0010 C005       558            push    (0+5)
0012 C006       559            push    (0+6)
0014 C007       560            push    (0+7)
0016 C000       561            push    (0+0)
0018 C001       562            push    (0+1)
001A C0D0       563            push    psw
001C 75D000     564            mov     psw,#0x00
001F            565   ;        robot.c:35: TF2H = 0;
001F C2CF       566            clr     _TF2H
0021            567   ;        robot.c:38: blinkerCount++;
0021 7401       568            mov     a,#0x01
0023 2530       569            add     a,_blinkerCount
0025 F530       570            mov     _blinkerCount,a
0027 E4         571            clr     a
0028 3531       572            addc    a,(_blinkerCount + 1)
002A F531       573            mov     (_blinkerCount + 1),a
002C            574   ;        robot.c:39: if (!(blinkerCount%3600)) blinkerEnabled = !blinkerEnabled;
002C 750010     575            mov     __moduint_PARM_2,#0x10
002F 75010E     576            mov     (__moduint_PARM_2 + 1),#0x0E
0032 853082     577            mov     dpl,_blinkerCount
0035 853183     578            mov     dph,(_blinkerCount + 1)
0038 120100     579            lcall   __moduint
003B E582       580            mov     a,dpl
003D 8583F0     581            mov     b,dph
0040 45F0       582            orl     a,b
0042 7001       583            jnz     L002002?
0044 E5F0       584            mov     a,_blinkerEnabled
0046 B40128     585            cjne    a,#0x01,L002010?
0049            586   L002010?:
0049 E4         587            clr     a
004A 33         588            rlc     a
004B F5F0       589            mov     _blinkerEnabled,a
004D            590   L002002?:
004D            591   ;        robot.c:42: pwm_count++;
004D 0560       592            inc     _pwm_count
004F            593   ;        robot.c:43: if(pwm_count>100) pwm_count=0;
004F C3         594            clr     c
0050 74E4       595            mov     a,#(0x64 ^ 0x80)
0052 8560F0     596            mov     b,_pwm_count
0055 63F080     597            xrl     b,#0x80
0058 95F0       598            subb    a,b
005A 5001       599            jnc     L002004?
005C 756000     600            mov     _pwm_count,#0x00
005F            601   L002004?:
005F            602   ;        robot.c:46: MOTOR_LEFT0 = pwm_count > pwm_Left0 ? 0 : 1; //p1.5
005F C3         603            clr     c
0060 E5A0       604            mov     a,_pwm_Left0
0062 6480       605            xrl     a,#0x80
0064 8560F0     606            mov     b,_pwm_count
0067 63F080     607            xrl     b,#0x80
006A 95F0       608            subb    a,b
006C 9258       609            mov  _Timer2_ISR_sloc0_1_0,c
006E B3         610            cpl     c
006F 9295       611            mov     _P1_5,c
0071            612   ;        robot.c:47: MOTOR_LEFT1 = pwm_count > pwm_Left1 ? 0 : 1; //p1.6
0071 C3         613            clr     c
0072 E560       614            mov     a,_pwm_Left1
0074 6480       615            xrl     a,#0x80
0076 8560F0     616            mov     b,_pwm_count
0079 63F080     617            xrl     b,#0x80
007C 95F0       618            subb    a,b
007E 9258       619            mov  _Timer2_ISR_sloc0_1_0,c
0080 B3         620            cpl     c
0081 9296       621            mov     _P1_6,c
0083            622   ;        robot.c:48: MOTOR_RIGHT0 = pwm_count > pwm_Right0 ? 0 : 1; //p2.0
0083 C3         623            clr     c
0084 E520       624            mov     a,_pwm_Right0
0086 6480       625            xrl     a,#0x80
0088 8560F0     626            mov     b,_pwm_count
008B 63F080     627            xrl     b,#0x80
008E 95F0       628            subb    a,b
0090 9258       629            mov  _Timer2_ISR_sloc0_1_0,c
0092 B3         630            cpl     c
0093 92A0       631            mov     _P2_0,c
0095            632   ;        robot.c:49: MOTOR_RIGHT1 = pwm_count > pwm_Right1 ? 0 : 1; //p2.1
0095 C3         633            clr     c
0096 E5F0       634            mov     a,_pwm_Right1
0098 6480       635            xrl     a,#0x80
009A 8560F0     636            mov     b,_pwm_count
009D 63F080     637            xrl     b,#0x80
00A0 95F0       638            subb    a,b
00A2 9258       639            mov  _Timer2_ISR_sloc0_1_0,c
00A4 B3         640            cpl     c
00A5 92A1       641            mov     _P2_1,c
00A7 D0D0       642            pop     psw
00A9 D001       643            pop     (0+1)
00AB D000       644            pop     (0+0)
00AD D007       645            pop     (0+7)
00AF D006       646            pop     (0+6)
00B1 D005       647            pop     (0+5)
00B3 D004       648            pop     (0+4)
00B5 D003       649            pop     (0+3)
00B7 D002       650            pop     (0+2)
00B9 D083       651            pop     dph
00BB D082       652            pop     dpl
00BD D0F0       653            pop     b
00BF D0E0       654            pop     acc
00C1 D0A8       655            pop     bits
00C3 32         656            reti
00C4            657   ;------------------------------------------------------------
00C4            658   ;Allocation info for local variables in function 'main'
00C4            659   ;------------------------------------------------------------
00C4            660   ;v1                        Allocated with name '_main_v1_1_74'
00C4            661   ;v2                        Allocated with name '_main_v2_1_74'
00C4            662   ;------------------------------------------------------------
00C4            663   ;        robot.c:53: void main(void) {
00C4            664   ;        -----------------------------------------
00C4            665   ;         function main
00C4            666   ;        -----------------------------------------
00C4            667   _main:
00C4            668   ;        robot.c:55: volatile float v1 = 0;
00C4 75A800     669            mov     _main_v1_1_74,#0x00
00C7 75A900     670            mov     (_main_v1_1_74 + 1),#0x00
00CA 75AA00     671            mov     (_main_v1_1_74 + 2),#0x00
00CD 75AB00     672            mov     (_main_v1_1_74 + 3),#0x00
00D0            673   ;        robot.c:56: volatile float v2 = 0;
00D0 75E800     674            mov     _main_v2_1_74,#0x00
00D3 75E900     675            mov     (_main_v2_1_74 + 1),#0x00
00D6 75EA00     676            mov     (_main_v2_1_74 + 2),#0x00
00D9 75EB00     677            mov     (_main_v2_1_74 + 3),#0x00
00DC            678   ;        robot.c:58: MOTOR_LEFT0 = 0;
00DC C295       679            clr     _P1_5
00DE            680   ;        robot.c:59: MOTOR_LEFT1 = 0;
00DE C296       681            clr     _P1_6
00E0            682   ;        robot.c:60: MOTOR_RIGHT0 = 0;
00E0 C2A0       683            clr     _P2_0
00E2            684   ;        robot.c:61: MOTOR_RIGHT1 = 0;
00E2 C2A1       685            clr     _P2_1
00E4            686   ;        robot.c:64: currentstate = 1;           //1-FORWARD, 2-BACKWARDS, 3-STOPPED, 4-DEBUGGER
00E4 753001     687            mov     _currentstate,#0x01
00E7            688   ;        robot.c:65: currentcmd = 0;             //0-NO COMMAND, 1-TURN LEFT, 2-TURN RIGHT, 3-FORWARDS, 4-BACKWARDS, 5-STOP, 6-UTURN
00E7 757000     689            mov     _currentcmd,#0x00
00EA            690   ;        robot.c:68: InitPinADC(2, 3); // Configure P2.3 as analog input (tank1)
00EA 750003     691            mov     _InitPinADC_PARM_2,#0x03
00ED 758202     692            mov     dpl,#0x02
00F0 120100     693            lcall   _InitPinADC
00F3            694   ;        robot.c:69: InitPinADC(2, 4); // Configure P2.4 as analog input         (tank1)
00F3 750004     695            mov     _InitPinADC_PARM_2,#0x04
00F6 758202     696            mov     dpl,#0x02
00F9 120100     697            lcall   _InitPinADC
00FC            698   ;        robot.c:70: InitPinADC(2, 5); // Configure P2.5 as analog input (tank2)
00FC 750005     699            mov     _InitPinADC_PARM_2,#0x05
00FF 758202     700            mov     dpl,#0x02
0102 120100     701            lcall   _InitPinADC
0105            702   ;        robot.c:71: InitPinADC(2, 6); // Configure P2.6 as analog input (tank2)
0105 750006     703            mov     _InitPinADC_PARM_2,#0x06
0108 758202     704            mov     dpl,#0x02
010B 120100     705            lcall   _InitPinADC
010E            706   ;        robot.c:74: InitADC();  
010E 120100     707            lcall   _InitADC
0111            708   ;        robot.c:77: mxInit();
0111 120100     709            lcall   _mxInit
0114            710   ;        robot.c:80: P0MDOUT |= 0b_0000_1100;
0114 43A40C     711            orl     _P0MDOUT,#0x0C
0117            712   ;        robot.c:81: L_BLINKER = 0;
0117 C283       713            clr     _P0_3
0119            714   ;        robot.c:82: R_BLINKER = 0;
0119 C282       715            clr     _P0_2
011B            716   ;        robot.c:85: while (1) {         
011B            717   L003054?:
011B            718   ;        robot.c:88: currentcmd = readData(currentcmd); 
011B 857082     719            mov     dpl,_currentcmd
011E 120100     720            lcall   _readData
0121 858270     721            mov     _currentcmd,dpl
0124            722   ;        robot.c:96: if (currentcmd == CMD_LEFT) mxDirection(0);
0124 7401       723            mov     a,#0x01
0126 B570F8     724            cjne    a,_currentcmd,L003014?
0129 758200     725            mov     dpl,#0x00
012C 120100     726            lcall   _mxDirection
012F 8001       727            sjmp    L003015?
0131            728   L003014?:
0131            729   ;        robot.c:97: else if (currentcmd == CMD_RIGHT) mxDirection(1);
0131 7402       730            mov     a,#0x02
0133 B570B8     731            cjne    a,_currentcmd,L003011?
0136 758201     732            mov     dpl,#0x01
0139 120100     733            lcall   _mxDirection
013C 8001       734            sjmp    L003015?
013E            735   L003011?:
013E            736   ;        robot.c:98: else if (currentcmd == CMD_STOP||currentstate == 3) mxStop();
013E 7405       737            mov     a,#0x05
0140 B570F8     738            cjne    a,_currentcmd,L003114?
0143 8001       739            sjmp    L003006?
0145            740   L003114?:
0145 7403       741            mov     a,#0x03
0147 B53078     742            cjne    a,_currentstate,L003007?
014A            743   L003006?:
014A 120100     744            lcall   _mxStop
014D 8001       745            sjmp    L003015?
014F            746   L003007?:
014F            747   ;        robot.c:99: else if (currentcmd == CMD_UTURN) mxUTurn();
014F 7406       748            mov     a,#0x06
0151 B570F8     749            cjne    a,_currentcmd,L003004?
0154 120100     750            lcall   _mxUTurn
0157 8001       751            sjmp    L003015?
0159            752   L003004?:
0159            753   ;        robot.c:100: else if (currentcmd == CMD_NONE) mxClear();
0159 E570       754            mov     a,_currentcmd
015B 7001       755            jnz     L003015?
015D 120100     756            lcall   _mxClear
0160            757   L003015?:
0160            758   ;        robot.c:103: Sonar_Reading();
0160 120100     759            lcall   _Sonar_Reading
0163            760   ;        robot.c:104: if (distance < 7) {
0163 E4         761            clr     a
0164 C0E0       762            push    acc
0166 C0E0       763            push    acc
0168 74E0       764            mov     a,#0xE0
016A C0E0       765            push    acc
016C 7440       766            mov     a,#0x40
016E C0E0       767            push    acc
0170 857082     768            mov     dpl,_distance
0173 857183     769            mov     dph,(_distance + 1)
0176 8572F0     770            mov     b,(_distance + 2)
0179 E573       771            mov     a,(_distance + 3)
017B 120100     772            lcall   ___fslt
017E AA82       773            mov     r2,dpl
0180 E581       774            mov     a,sp
0182 24FC       775            add     a,#0xfc
0184 F581       776            mov     sp,a
0186 EA         777            mov     a,r2
0187 6001       778            jz      L003020?
0189            779   ;        robot.c:105: stopcar();
0189 120100     780            lcall   _stopcar
018C            781   ;        robot.c:106: while (distance < 7) {
018C            782   L003016?:
018C E4         783            clr     a
018D C0E0       784            push    acc
018F C0E0       785            push    acc
0191 74E0       786            mov     a,#0xE0
0193 C0E0       787            push    acc
0195 7440       788            mov     a,#0x40
0197 C0E0       789            push    acc
0199 857082     790            mov     dpl,_distance
019C 857183     791            mov     dph,(_distance + 1)
019F 8572F0     792            mov     b,(_distance + 2)
01A2 E573       793            mov     a,(_distance + 3)
01A4 120100     794            lcall   ___fslt
01A7 AA82       795            mov     r2,dpl
01A9 E581       796            mov     a,sp
01AB 24FC       797            add     a,#0xfc
01AD F581       798            mov     sp,a
01AF EA         799            mov     a,r2
01B0 6001       800            jz      L003020?
01B2            801   ;        robot.c:107: Sonar_Reading();
01B2 120100     802            lcall   _Sonar_Reading
01B5            803   ;        robot.c:108: mxStop();
01B5 120100     804            lcall   _mxStop
01B8 8001       805            sjmp    L003016?
01BA            806   L003020?:
01BA            807   ;        robot.c:113: L_BLINKER = (blinkerEnabled && (currentcmd == CMD_LEFT ||currentstate == 3));
01BA E5F0       808            mov     a,_blinkerEnabled
01BC 6001       809            jz      L003058?
01BE 7401       810            mov     a,#0x01
01C0 B57000     811            cjne    a,_currentcmd,L003123?
01C3 8001       812            sjmp    L003062?
01C5            813   L003123?:
01C5 7403       814            mov     a,#0x03
01C7 B53080     815            cjne    a,_currentstate,L003124?
01CA 8001       816            sjmp    L003062?
01CC            817   L003124?:
01CC C298       818            clr     _main_sloc0_1_0
01CE 8001       819            sjmp    L003063?
01D0            820   L003062?:
01D0 D298       821            setb    _main_sloc0_1_0
01D2            822   L003063?:
01D2 209800     823            jb      _main_sloc0_1_0,L003059?
01D5            824   L003058?:
01D5 C298       825            clr     _main_sloc0_1_0
01D7 8001       826            sjmp    L003060?
01D9            827   L003059?:
01D9 D298       828            setb    _main_sloc0_1_0
01DB            829   L003060?:
01DB A298       830            mov     c,_main_sloc0_1_0
01DD 9283       831            mov     _P0_3,c
01DF            832   ;        robot.c:114: R_BLINKER = (blinkerEnabled && (currentcmd == CMD_RIGHT||currentstate == 3)); 
01DF E5F0       833            mov     a,_blinkerEnabled
01E1 6001       834            jz      L003064?
01E3 7402       835            mov     a,#0x02
01E5 B570C0     836            cjne    a,_currentcmd,L003127?
01E8 8001       837            sjmp    L003068?
01EA            838   L003127?:
01EA 7403       839            mov     a,#0x03
01EC B53040     840            cjne    a,_currentstate,L003128?
01EF 8001       841            sjmp    L003068?
01F1            842   L003128?:
01F1 C298       843            clr     _main_sloc0_1_0
01F3 8001       844            sjmp    L003069?
01F5            845   L003068?:
01F5 D298       846            setb    _main_sloc0_1_0
01F7            847   L003069?:
01F7 2098C0     848            jb      _main_sloc0_1_0,L003065?
01FA            849   L003064?:
01FA C298       850            clr     _main_sloc0_1_0
01FC 8001       851            sjmp    L003066?
01FE            852   L003065?:
01FE D298       853            setb    _main_sloc0_1_0
0200            854   L003066?:
0200 A298       855            mov     c,_main_sloc0_1_0
0202 9282       856            mov     _P0_2,c
0204            857   ;        robot.c:117: switch (currentstate) {
0204 AA30       858            mov     r2,_currentstate
0206 BA0140     859            cjne    r2,#0x01,L003130?
0209 8001       860            sjmp    L003021?
020B            861   L003130?:
020B BA02C0     862            cjne    r2,#0x02,L003131?
020E 8001       863            sjmp    L003022?
0210            864   L003131?:
0210            865   ;        robot.c:118: case FORWARD_STATE:
0210 BA0340     866            cjne    r2,#0x03,L003024?
0213 8001       867            sjmp    L003023?
0215            868   L003021?:
0215            869   ;        robot.c:119: linetrack(0);      // forwards
0215 900000     870            mov     dptr,#0x0000
0218 120100     871            lcall   _linetrack
021B            872   ;        robot.c:121: v1 = Volts_at_Pin(TANK_FL);
021B 75820B     873            mov     dpl,#0x0B
021E 120100     874            lcall   _Volts_at_Pin
0221 8582A8     875            mov     _main_v1_1_74,dpl
0224 8583A9     876            mov     (_main_v1_1_74 + 1),dph
0227 85F0AA     877            mov     (_main_v1_1_74 + 2),b
022A F5AB       878            mov     (_main_v1_1_74 + 3),a
022C            879   ;        robot.c:122: v2 = Volts_at_Pin(TANK_FR);
022C 75820C     880            mov     dpl,#0x0C
022F 120100     881            lcall   _Volts_at_Pin
0232 8582E8     882            mov     _main_v2_1_74,dpl
0235 8583E9     883            mov     (_main_v2_1_74 + 1),dph
0238 85F0EA     884            mov     (_main_v2_1_74 + 2),b
023B F5EB       885            mov     (_main_v2_1_74 + 3),a
023D            886   ;        robot.c:123: break;
023D            887   ;        robot.c:124: case REVERSE_STATE:
023D 8001       888            sjmp    L003024?
023F            889   L003022?:
023F            890   ;        robot.c:125: linetrack(1);      // backwards
023F 900001     891            mov     dptr,#0x0001
0242 120100     892            lcall   _linetrack
0245            893   ;        robot.c:127: v2 = Volts_at_Pin(TANK_RL);
0245 75820D     894            mov     dpl,#0x0D
0248 120100     895            lcall   _Volts_at_Pin
024B 8582E8     896            mov     _main_v2_1_74,dpl
024E 8583E9     897            mov     (_main_v2_1_74 + 1),dph
0251 85F0EA     898            mov     (_main_v2_1_74 + 2),b
0254 F5EB       899            mov     (_main_v2_1_74 + 3),a
0256            900   ;        robot.c:128: v1 = Volts_at_Pin(TANK_RR);
0256 75820E     901            mov     dpl,#0x0E
0259 120100     902            lcall   _Volts_at_Pin
025C 8582A8     903            mov     _main_v1_1_74,dpl
025F 8583A9     904            mov     (_main_v1_1_74 + 1),dph
0262 85F0AA     905            mov     (_main_v1_1_74 + 2),b
0265 F5AB       906            mov     (_main_v1_1_74 + 3),a
0267            907   ;        robot.c:129: break;
0267            908   ;        robot.c:130: case STOP_STATE:
0267 8001       909            sjmp    L003024?
0269            910   L003023?:
0269            911   ;        robot.c:131: stopcar();                 // stop car
0269 120100     912            lcall   _stopcar
026C            913   ;        robot.c:132: mxStop();
026C 120100     914            lcall   _mxStop
026F            915   ;        robot.c:134: }
026F            916   L003024?:
026F            917   ;        robot.c:137: switch (currentcmd) {
026F E570       918            mov     a,_currentcmd
0271 FA         919            mov     r2,a
0272 30E700     920            jnb     acc.7,L003133?
0275 020100     921            ljmp    L003051?
0278            922   L003133?:
0278 C3         923            clr     c
0279 7486       924            mov     a,#(0x06 ^ 0x80)
027B 8AF0       925            mov     b,r2
027D 63F080     926            xrl     b,#0x80
0280 95F0       927            subb    a,b
0282 5001       928            jnc     L003134?
0284 020100     929            ljmp    L003051?
0287            930   L003134?:
0287 EA         931            mov     a,r2
0288 2A         932            add     a,r2
0289 2A         933            add     a,r2
028A 90A6C0     934            mov     dptr,#L003135?
028D 73         935            jmp     @a+dptr
028E            936   L003135?:
028E 020100     937            ljmp    L003025?
0291 020100     938            ljmp    L003039?
0294 020100     939            ljmp    L003043?
0297 020100     940            ljmp    L003047?
029A 020100     941            ljmp    L003048?
029D 020100     942            ljmp    L003049?
02A0 020100     943            ljmp    L003050?
02A3            944   ;        robot.c:139: case CMD_NONE:
02A3            945   L003025?:
02A3            946   ;        robot.c:141: if ((currentstate-1) ? 
02A3 AA30       947            mov     r2,_currentstate
02A5 E530       948            mov     a,_currentstate
02A7 33         949            rlc     a
02A8 95E0       950            subb    a,acc
02AA FB         951            mov     r3,a
02AB 1A         952            dec     r2
02AC BAFFC0     953            cjne    r2,#0xff,L003136?
02AF 1B         954            dec     r3
02B0            955   L003136?:
02B0 EA         956            mov     a,r2
02B1 4B         957            orl     a,r3
02B2 6001       958            jz      L003070?
02B4            959   ;        robot.c:142: (v1 > 1.2 && v2 > 1.2) :
02B4 749A       960            mov     a,#0x9A
02B6 C0E0       961            push    acc
02B8 7499       962            mov     a,#0x99
02BA C0E0       963            push    acc
02BC C0E0       964            push    acc
02BE 743F       965            mov     a,#0x3F
02C0 C0E0       966            push    acc
02C2 85A882     967            mov     dpl,_main_v1_1_74
02C5 85A983     968            mov     dph,(_main_v1_1_74 + 1)
02C8 85AAF0     969            mov     b,(_main_v1_1_74 + 2)
02CB E5AB       970            mov     a,(_main_v1_1_74 + 3)
02CD 120100     971            lcall   ___fsgt
02D0 AA82       972            mov     r2,dpl
02D2 E581       973            mov     a,sp
02D4 24FC       974            add     a,#0xfc
02D6 F581       975            mov     sp,a
02D8 EA         976            mov     a,r2
02D9 6001       977            jz      L003072?
02DB 749A       978            mov     a,#0x9A
02DD C0E0       979            push    acc
02DF 7499       980            mov     a,#0x99
02E1 C0E0       981            push    acc
02E3 C0E0       982            push    acc
02E5 743F       983            mov     a,#0x3F
02E7 C0E0       984            push    acc
02E9 85E882     985            mov     dpl,_main_v2_1_74
02EC 85E983     986            mov     dph,(_main_v2_1_74 + 1)
02EF 85EAF0     987            mov     b,(_main_v2_1_74 + 2)
02F2 E5EB       988            mov     a,(_main_v2_1_74 + 3)
02F4 120100     989            lcall   ___fsgt
02F7 AA82       990            mov     r2,dpl
02F9 E581       991            mov     a,sp
02FB 24FC       992            add     a,#0xfc
02FD F581       993            mov     sp,a
02FF EA         994            mov     a,r2
0300 7001       995            jnz     L003073?
0302            996   L003072?:
0302 7A00       997            mov     r2,#0x00
0304 8001       998            sjmp    L003074?
0306            999   L003073?:
0306 7A01      1000            mov     r2,#0x01
0308           1001   L003074?:
0308 EA        1002            mov     a,r2
0309 24FF      1003            add     a,#0xff
030B 9298      1004            mov     _main_sloc0_1_0,c
030D 8001      1005            sjmp    L003071?
030F           1006   L003070?:
030F           1007   ;        robot.c:143: (v1 > 0.7 && v2 > 1)) {
030F 7433      1008            mov     a,#0x33
0311 C0E0      1009            push    acc
0313 C0E0      1010            push    acc
0315 C0E0      1011            push    acc
0317 743F      1012            mov     a,#0x3F
0319 C0E0      1013            push    acc
031B 85A882    1014            mov     dpl,_main_v1_1_74
031E 85A983    1015            mov     dph,(_main_v1_1_74 + 1)
0321 85AAF0    1016            mov     b,(_main_v1_1_74 + 2)
0324 E5AB      1017            mov     a,(_main_v1_1_74 + 3)
0326 120100    1018            lcall   ___fsgt
0329 AA82      1019            mov     r2,dpl
032B E581      1020            mov     a,sp
032D 24FC      1021            add     a,#0xfc
032F F581      1022            mov     sp,a
0331 EA        1023            mov     a,r2
0332 6001      1024            jz      L003075?
0334 E4        1025            clr     a
0335 C0E0      1026            push    acc
0337 C0E0      1027            push    acc
0339 7480      1028            mov     a,#0x80
033B C0E0      1029            push    acc
033D 743F      1030            mov     a,#0x3F
033F C0E0      1031            push    acc
0341 85E882    1032            mov     dpl,_main_v2_1_74
0344 85E983    1033            mov     dph,(_main_v2_1_74 + 1)
0347 85EAF0    1034            mov     b,(_main_v2_1_74 + 2)
034A E5EB      1035            mov     a,(_main_v2_1_74 + 3)
034C 120100    1036            lcall   ___fsgt
034F AA82      1037            mov     r2,dpl
0351 E581      1038            mov     a,sp
0353 24FC      1039            add     a,#0xfc
0355 F581      1040            mov     sp,a
0357 EA        1041            mov     a,r2
0358 7001      1042            jnz     L003076?
035A           1043   L003075?:
035A 7A00      1044            mov     r2,#0x00
035C 8001      1045            sjmp    L003077?
035E           1046   L003076?:
035E 7A01      1047            mov     r2,#0x01
0360           1048   L003077?:
0360 EA        1049            mov     a,r2
0361 24FF      1050            add     a,#0xff
0363 9298      1051            mov     _main_sloc0_1_0,c
0365           1052   L003071?:
0365 209840    1053            jb      _main_sloc0_1_0,L003142?
0368 020100    1054            ljmp    L003054?
036B           1055   L003142?:
036B           1056   ;        robot.c:146: if (currentstate == 1) {
036B 7401      1057            mov     a,#0x01
036D B53080    1058            cjne    a,_currentstate,L003035?
0370           1059   ;        robot.c:147: if (Volts_at_Pin(TANK_RL)>Volts_at_Pin(TANK_RR)) {
0370 75820D    1060            mov     dpl,#0x0D
0373 120100    1061            lcall   _Volts_at_Pin
0376 AA82      1062            mov     r2,dpl
0378 AB83      1063            mov     r3,dph
037A ACF0      1064            mov     r4,b
037C FD        1065            mov     r5,a
037D 75820E    1066            mov     dpl,#0x0E
0380 C002      1067            push    ar2
0382 C003      1068            push    ar3
0384 C004      1069            push    ar4
0386 C005      1070            push    ar5
0388 120100    1071            lcall   _Volts_at_Pin
038B AE82      1072            mov     r6,dpl
038D AF83      1073            mov     r7,dph
038F A8F0      1074            mov     r0,b
0391 F9        1075            mov     r1,a
0392 D005      1076            pop     ar5
0394 D004      1077            pop     ar4
0396 D003      1078            pop     ar3
0398 D002      1079            pop     ar2
039A C006      1080            push    ar6
039C C007      1081            push    ar7
039E C000      1082            push    ar0
03A0 C001      1083            push    ar1
03A2 8A82      1084            mov     dpl,r2
03A4 8B83      1085            mov     dph,r3
03A6 8CF0      1086            mov     b,r4
03A8 ED        1087            mov     a,r5
03A9 120100    1088            lcall   ___fsgt
03AC AA82      1089            mov     r2,dpl
03AE E581      1090            mov     a,sp
03B0 24FC      1091            add     a,#0xfc
03B2 F581      1092            mov     sp,a
03B4 EA        1093            mov     a,r2
03B5 6001      1094            jz      L003027?
03B7           1095   ;        robot.c:148: pwm_Left1 = 50;
03B7 756032    1096            mov     _pwm_Left1,#0x32
03BA           1097   ;        robot.c:149: pwm_Left0 = -1;
03BA 75A0FF    1098            mov     _pwm_Left0,#0xFF
03BD           1099   ;        robot.c:150: pwm_Right0 = 30;
03BD 75201E    1100            mov     _pwm_Right0,#0x1E
03C0           1101   ;        robot.c:151: pwm_Right1 = -1;
03C0 75F0FF    1102            mov     _pwm_Right1,#0xFF
03C3 8001      1103            sjmp    L003036?
03C5           1104   L003027?:
03C5           1105   ;        robot.c:154: pwm_Left1 = 30;
03C5 75601E    1106            mov     _pwm_Left1,#0x1E
03C8           1107   ;        robot.c:155: pwm_Left0 = -1;
03C8 75A0FF    1108            mov     _pwm_Left0,#0xFF
03CB           1109   ;        robot.c:156: pwm_Right0 = 50;
03CB 752032    1110            mov     _pwm_Right0,#0x32
03CE           1111   ;        robot.c:157: pwm_Right1 = -1;
03CE 75F0FF    1112            mov     _pwm_Right1,#0xFF
03D1 8001      1113            sjmp    L003036?
03D3           1114   L003035?:
03D3           1115   ;        robot.c:159: } else if (currentstate == 2) {
03D3 7402      1116            mov     a,#0x02
03D5 B53000    1117            cjne    a,_currentstate,L003036?
03D8           1118   ;        robot.c:160: if (Volts_at_Pin(TANK_FL)>Volts_at_Pin(TANK_FR)) {
03D8 75820B    1119            mov     dpl,#0x0B
03DB 120100    1120            lcall   _Volts_at_Pin
03DE AA82      1121            mov     r2,dpl
03E0 AB83      1122            mov     r3,dph
03E2 ACF0      1123            mov     r4,b
03E4 FD        1124            mov     r5,a
03E5 75820C    1125            mov     dpl,#0x0C
03E8 C002      1126            push    ar2
03EA C003      1127            push    ar3
03EC C004      1128            push    ar4
03EE C005      1129            push    ar5
03F0 120100    1130            lcall   _Volts_at_Pin
03F3 AE82      1131            mov     r6,dpl
03F5 AF83      1132            mov     r7,dph
03F7 A8F0      1133            mov     r0,b
03F9 F9        1134            mov     r1,a
03FA D005      1135            pop     ar5
03FC D004      1136            pop     ar4
03FE D003      1137            pop     ar3
0400 D002      1138            pop     ar2
0402 C006      1139            push    ar6
0404 C007      1140            push    ar7
0406 C000      1141            push    ar0
0408 C001      1142            push    ar1
040A 8A82      1143            mov     dpl,r2
040C 8B83      1144            mov     dph,r3
040E 8CF0      1145            mov     b,r4
0410 ED        1146            mov     a,r5
0411 120100    1147            lcall   ___fsgt
0414 AA82      1148            mov     r2,dpl
0416 E581      1149            mov     a,sp
0418 24FC      1150            add     a,#0xfc
041A F581      1151            mov     sp,a
041C EA        1152            mov     a,r2
041D 6001      1153            jz      L003030?
041F           1154   ;        robot.c:161: pwm_Left0 = 50;
041F 75A032    1155            mov     _pwm_Left0,#0x32
0422           1156   ;        robot.c:162: pwm_Left1 = -1;
0422 7560FF    1157            mov     _pwm_Left1,#0xFF
0425           1158   ;        robot.c:163: pwm_Right0 = -1;
0425 7520FF    1159            mov     _pwm_Right0,#0xFF
0428           1160   ;        robot.c:164: pwm_Right1 = 30;
0428 75F01E    1161            mov     _pwm_Right1,#0x1E
042B 8001      1162            sjmp    L003036?
042D           1163   L003030?:
042D           1164   ;        robot.c:167: pwm_Left0 = 30;
042D 75A01E    1165            mov     _pwm_Left0,#0x1E
0430           1166   ;        robot.c:168: pwm_Left1 = -1;
0430 7560FF    1167            mov     _pwm_Left1,#0xFF
0433           1168   ;        robot.c:169: pwm_Right0 = -1;
0433 7520FF    1169            mov     _pwm_Right0,#0xFF
0436           1170   ;        robot.c:170: pwm_Right1 = 50;
0436 75F032    1171            mov     _pwm_Right1,#0x32
0439           1172   L003036?:
0439           1173   ;        robot.c:174: waitms(1500);
0439 9005DC    1174            mov     dptr,#0x05DC
043C 120100    1175            lcall   _waitms
043F           1176   ;        robot.c:177: break;
043F 020100    1177            ljmp    L003054?
0442           1178   ;        robot.c:179: case CMD_LEFT:
0442           1179   L003039?:
0442           1180   ;        robot.c:182: if (v1 > 0.7 && v2 >1)  {
0442 7433      1181            mov     a,#0x33
0444 C0E0      1182            push    acc
0446 C0E0      1183            push    acc
0448 C0E0      1184            push    acc
044A 743F      1185            mov     a,#0x3F
044C C0E0      1186            push    acc
044E 85A882    1187            mov     dpl,_main_v1_1_74
0451 85A983    1188            mov     dph,(_main_v1_1_74 + 1)
0454 85AAF0    1189            mov     b,(_main_v1_1_74 + 2)
0457 E5AB      1190            mov     a,(_main_v1_1_74 + 3)
0459 120100    1191            lcall   ___fsgt
045C AA82      1192            mov     r2,dpl
045E E581      1193            mov     a,sp
0460 24FC      1194            add     a,#0xfc
0462 F581      1195            mov     sp,a
0464 EA        1196            mov     a,r2
0465 7001      1197            jnz     L003149?
0467 020100    1198            ljmp    L003054?
046A           1199   L003149?:
046A E4        1200            clr     a
046B C0E0      1201            push    acc
046D C0E0      1202            push    acc
046F 7480      1203            mov     a,#0x80
0471 C0E0      1204            push    acc
0473 743F      1205            mov     a,#0x3F
0475 C0E0      1206            push    acc
0477 85E882    1207            mov     dpl,_main_v2_1_74
047A 85E983    1208            mov     dph,(_main_v2_1_74 + 1)
047D 85EAF0    1209            mov     b,(_main_v2_1_74 + 2)
0480 E5EB      1210            mov     a,(_main_v2_1_74 + 3)
0482 120100    1211            lcall   ___fsgt
0485 AA82      1212            mov     r2,dpl
0487 E581      1213            mov     a,sp
0489 24FC      1214            add     a,#0xfc
048B F581      1215            mov     sp,a
048D EA        1216            mov     a,r2
048E 7001      1217            jnz     L003150?
0490 020100    1218            ljmp    L003054?
0493           1219   L003150?:
0493           1220   ;        robot.c:186: turncar(currentstate);
0493 AA30      1221            mov     r2,_currentstate
0495 E530      1222            mov     a,_currentstate
0497 33        1223            rlc     a
0498 95E0      1224            subb    a,acc
049A FB        1225            mov     r3,a
049B 8A82      1226            mov     dpl,r2
049D 8B83      1227            mov     dph,r3
049F 120100    1228            lcall   _turncar
04A2           1229   ;        robot.c:187: currentcmd = 0;
04A2 757000    1230            mov     _currentcmd,#0x00
04A5           1231   ;        robot.c:189: break;
04A5 020100    1232            ljmp    L003054?
04A8           1233   ;        robot.c:192: case CMD_RIGHT:
04A8           1234   L003043?:
04A8           1235   ;        robot.c:195: if (v1 > 0.7 && v2 >1) {
04A8 7433      1236            mov     a,#0x33
04AA C0E0      1237            push    acc
04AC C0E0      1238            push    acc
04AE C0E0      1239            push    acc
04B0 743F      1240            mov     a,#0x3F
04B2 C0E0      1241            push    acc
04B4 85A882    1242            mov     dpl,_main_v1_1_74
04B7 85A983    1243            mov     dph,(_main_v1_1_74 + 1)
04BA 85AAF0    1244            mov     b,(_main_v1_1_74 + 2)
04BD E5AB      1245            mov     a,(_main_v1_1_74 + 3)
04BF 120100    1246            lcall   ___fsgt
04C2 AA82      1247            mov     r2,dpl
04C4 E581      1248            mov     a,sp
04C6 24FC      1249            add     a,#0xfc
04C8 F581      1250            mov     sp,a
04CA EA        1251            mov     a,r2
04CB 7001      1252            jnz     L003151?
04CD 020100    1253            ljmp    L003054?
04D0           1254   L003151?:
04D0 E4        1255            clr     a
04D1 C0E0      1256            push    acc
04D3 C0E0      1257            push    acc
04D5 7480      1258            mov     a,#0x80
04D7 C0E0      1259            push    acc
04D9 743F      1260            mov     a,#0x3F
04DB C0E0      1261            push    acc
04DD 85E882    1262            mov     dpl,_main_v2_1_74
04E0 85E983    1263            mov     dph,(_main_v2_1_74 + 1)
04E3 85EAF0    1264            mov     b,(_main_v2_1_74 + 2)
04E6 E5EB      1265            mov     a,(_main_v2_1_74 + 3)
04E8 120100    1266            lcall   ___fsgt
04EB AA82      1267            mov     r2,dpl
04ED E581      1268            mov     a,sp
04EF 24FC      1269            add     a,#0xfc
04F1 F581      1270            mov     sp,a
04F3 EA        1271            mov     a,r2
04F4 7001      1272            jnz     L003152?
04F6 020100    1273            ljmp    L003054?
04F9           1274   L003152?:
04F9           1275   ;        robot.c:198: turncar(currentstate + 2); //1 = right
04F9 AA30      1276            mov     r2,_currentstate
04FB E530      1277            mov     a,_currentstate
04FD 33        1278            rlc     a
04FE 95E0      1279            subb    a,acc
0500 FB        1280            mov     r3,a
0501 8A82      1281            mov     dpl,r2
0503 8B83      1282            mov     dph,r3
0505 A3        1283            inc     dptr
0506 A3        1284            inc     dptr
0507 120100    1285            lcall   _turncar
050A           1286   ;        robot.c:199: currentcmd = 0;
050A 757000    1287            mov     _currentcmd,#0x00
050D           1288   ;        robot.c:201: break;
050D 020100    1289            ljmp    L003054?
0510           1290   ;        robot.c:204: case CMD_FORWARD:
0510           1291   L003047?:
0510           1292   ;        robot.c:207: currentstate = 1;
0510 753001    1293            mov     _currentstate,#0x01
0513           1294   ;        robot.c:208: currentcmd = 0;
0513 757000    1295            mov     _currentcmd,#0x00
0516           1296   ;        robot.c:209: break;
0516 020100    1297            ljmp    L003054?
0519           1298   ;        robot.c:212: case CMD_REVERSE:
0519           1299   L003048?:
0519           1300   ;        robot.c:215: currentstate = 2;
0519 753002    1301            mov     _currentstate,#0x02
051C           1302   ;        robot.c:216: currentcmd = 0;
051C 757000    1303            mov     _currentcmd,#0x00
051F           1304   ;        robot.c:217: break;
051F 020100    1305            ljmp    L003054?
0522           1306   ;        robot.c:220: case CMD_STOP:
0522           1307   L003049?:
0522           1308   ;        robot.c:223: currentstate = 3;
0522 753003    1309            mov     _currentstate,#0x03
0525           1310   ;        robot.c:224: currentcmd = 0;
0525 757000    1311            mov     _currentcmd,#0x00
0528           1312   ;        robot.c:225: break;
0528 020100    1313            ljmp    L003054?
052B           1314   ;        robot.c:228: case CMD_UTURN:
052B           1315   L003050?:
052B           1316   ;        robot.c:229: mxUTurn();
052B 120100    1317            lcall   _mxUTurn
052E           1318   ;        robot.c:230: uturn();
052E 120100    1319            lcall   _uturn
0531           1320   ;        robot.c:232: currentcmd = 0;
0531 757000    1321            mov     _currentcmd,#0x00
0534           1322   ;        robot.c:233: mxInit(); 
0534 120100    1323            lcall   _mxInit
0537           1324   ;        robot.c:234: break;
0537 020100    1325            ljmp    L003054?
053A           1326   ;        robot.c:237: default: 
053A           1327   L003051?:
053A           1328   ;        robot.c:238: currentstate = 1;
053A 753001    1329            mov     _currentstate,#0x01
053D           1330   ;        robot.c:239: }
053D 020100    1331            ljmp    L003054?
0540           1332   ;------------------------------------------------------------
0540           1333   ;Allocation info for local variables in function 'readData'
0540           1334   ;------------------------------------------------------------
0540           1335   ;prevcommand               Allocated to registers r2 
0540           1336   ;command                   Allocated to registers r3 
0540           1337   ;------------------------------------------------------------
0540           1338   ;        robot.c:243: unsigned char readData(unsigned char prevcommand) {
0540           1339   ;        -----------------------------------------
0540           1340   ;         function readData
0540           1341   ;        -----------------------------------------
0540           1342   _readData:
0540 AA82      1343            mov     r2,dpl
0542           1344   ;        robot.c:244: unsigned char command = prevcommand;
0542 8A03      1345            mov     ar3,r2
0544           1346   ;        robot.c:245: if (!COMMAND_PIN) {
0544 2091C0    1347            jb      _P1_1,L004010?
0547           1348   ;        robot.c:247: while (!COMMAND_PIN);
0547           1349   L004001?:
0547 309100    1350            jnb     _P1_1,L004001?
054A           1351   ;        robot.c:248: waitms((int)(CMDFRQ + CMDFRQ/2));
054A 900060    1352            mov     dptr,#0x0060
054D C002      1353            push    ar2
054F 120100    1354            lcall   _waitms
0552           1355   ;        robot.c:249: command |= COMMAND_PIN<<2;
0552 A291      1356            mov     c,_P1_1
0554 E4        1357            clr     a
0555 33        1358            rlc     a
0556 25E0      1359            add     a,acc
0558 25E0      1360            add     a,acc
055A FB        1361            mov     r3,a
055B           1362   ;        robot.c:250: waitms(CMDFRQ);
055B 900040    1363            mov     dptr,#0x0040
055E C003      1364            push    ar3
0560 120100    1365            lcall   _waitms
0563 D003      1366            pop     ar3
0565           1367   ;        robot.c:251: command |= COMMAND_PIN<<1;
0565 A291      1368            mov     c,_P1_1
0567 E4        1369            clr     a
0568 33        1370            rlc     a
0569 25E0      1371            add     a,acc
056B 4203      1372            orl     ar3,a
056D           1373   ;        robot.c:252: waitms(CMDFRQ);
056D 900040    1374            mov     dptr,#0x0040
0570 C003      1375            push    ar3
0572 120100    1376            lcall   _waitms
0575 D003      1377            pop     ar3
0577 D002      1378            pop     ar2
0579           1379   ;        robot.c:253: command |= COMMAND_PIN;
0579 A291      1380            mov     c,_P1_1
057B E4        1381            clr     a
057C 33        1382            rlc     a
057D FC        1383            mov     r4,a
057E 4203      1384            orl     ar3,a
0580           1385   ;        robot.c:254: while (!COMMAND_PIN);
0580           1386   L004004?:
0580 309140    1387            jnb     _P1_1,L004004?
0583           1388   ;        robot.c:255: if (command > 6) command = prevcommand; 
0583 EB        1389            mov     a,r3
0584 24F9      1390            add     a,#0xff - 0x06
0586 5001      1391            jnc     L004010?
0588 8A03      1392            mov     ar3,r2
058A           1393   L004010?:
058A           1394   ;        robot.c:258: return command;
058A 8B82      1395            mov     dpl,r3
058C 22        1396            ret
058D           1397   ;------------------------------------------------------------
058D           1398   ;Allocation info for local variables in function 'linetrack'
058D           1399   ;------------------------------------------------------------
058D           1400   ;forwardbackward           Allocated to registers r2 r3 
058D           1401   ;vleft                     Allocated with name '_linetrack_vleft_1_93'
058D           1402   ;vright                    Allocated with name '_linetrack_vright_1_93'
058D           1403   ;sloc0                     Allocated with name '_linetrack_sloc0_1_0'
058D           1404   ;sloc1                     Allocated with name '_linetrack_sloc1_1_0'
058D           1405   ;------------------------------------------------------------
058D           1406   ;        robot.c:265: void linetrack (int forwardbackward) {
058D           1407   ;        -----------------------------------------
058D           1408   ;         function linetrack
058D           1409   ;        -----------------------------------------
058D           1410   _linetrack:
058D AA82      1411            mov     r2,dpl
058F AB83      1412            mov     r3,dph
0591           1413   ;        robot.c:273: if (forwardbackward == 0) {
0591 EA        1414            mov     a,r2
0592 4B        1415            orl     a,r3
0593 6001      1416            jz      L005010?
0595 020100    1417            ljmp    L005004?
0598           1418   L005010?:
0598           1419   ;        robot.c:274: vleft=Volts_at_Pin(TANK_FL);
0598 75820B    1420            mov     dpl,#0x0B
059B 120100    1421            lcall   _Volts_at_Pin
059E 858238    1422            mov     _linetrack_vleft_1_93,dpl
05A1 858339    1423            mov     (_linetrack_vleft_1_93 + 1),dph
05A4 85F03A    1424            mov     (_linetrack_vleft_1_93 + 2),b
05A7 F53B      1425            mov     (_linetrack_vleft_1_93 + 3),a
05A9           1426   ;        robot.c:275: vright=Volts_at_Pin(TANK_FR);
05A9 75820C    1427            mov     dpl,#0x0C
05AC 120100    1428            lcall   _Volts_at_Pin
05AF 858288    1429            mov     _linetrack_vright_1_93,dpl
05B2 858389    1430            mov     (_linetrack_vright_1_93 + 1),dph
05B5 85F08A    1431            mov     (_linetrack_vright_1_93 + 2),b
05B8 F58B      1432            mov     (_linetrack_vright_1_93 + 3),a
05BA           1433   ;        robot.c:278: pwm_Left0 = -1;
05BA 75A0FF    1434            mov     _pwm_Left0,#0xFF
05BD           1435   ;        robot.c:279: pwm_Left1 = vright*vright*75/(vright*vright+vleft*vleft);
05BD C088      1436            push    _linetrack_vright_1_93
05BF C089      1437            push    (_linetrack_vright_1_93 + 1)
05C1 C08A      1438            push    (_linetrack_vright_1_93 + 2)
05C3 C08B      1439            push    (_linetrack_vright_1_93 + 3)
05C5 858882    1440            mov     dpl,_linetrack_vright_1_93
05C8 858983    1441            mov     dph,(_linetrack_vright_1_93 + 1)
05CB 858AF0    1442            mov     b,(_linetrack_vright_1_93 + 2)
05CE E58B      1443            mov     a,(_linetrack_vright_1_93 + 3)
05D0 120100    1444            lcall   ___fsmul
05D3 AC82      1445            mov     r4,dpl
05D5 AD83      1446            mov     r5,dph
05D7 AEF0      1447            mov     r6,b
05D9 FF        1448            mov     r7,a
05DA E581      1449            mov     a,sp
05DC 24FC      1450            add     a,#0xfc
05DE F581      1451            mov     sp,a
05E0 C004      1452            push    ar4
05E2 C005      1453            push    ar5
05E4 C006      1454            push    ar6
05E6 C007      1455            push    ar7
05E8 900000    1456            mov     dptr,#0x0000
05EB 75F096    1457            mov     b,#0x96
05EE 7442      1458            mov     a,#0x42
05F0 120100    1459            lcall   ___fsmul
05F3 8582D8    1460            mov     _linetrack_sloc0_1_0,dpl
05F6 8583D9    1461            mov     (_linetrack_sloc0_1_0 + 1),dph
05F9 85F0DA    1462            mov     (_linetrack_sloc0_1_0 + 2),b
05FC F5DB      1463            mov     (_linetrack_sloc0_1_0 + 3),a
05FE E581      1464            mov     a,sp
0600 24FC      1465            add     a,#0xfc
0602 F581      1466            mov     sp,a
0604 C088      1467            push    _linetrack_vright_1_93
0606 C089      1468            push    (_linetrack_vright_1_93 + 1)
0608 C08A      1469            push    (_linetrack_vright_1_93 + 2)
060A C08B      1470            push    (_linetrack_vright_1_93 + 3)
060C 858882    1471            mov     dpl,_linetrack_vright_1_93
060F 858983    1472            mov     dph,(_linetrack_vright_1_93 + 1)
0612 858AF0    1473            mov     b,(_linetrack_vright_1_93 + 2)
0615 E58B      1474            mov     a,(_linetrack_vright_1_93 + 3)
0617 120100    1475            lcall   ___fsmul
061A 858228    1476            mov     _linetrack_sloc1_1_0,dpl
061D 858329    1477            mov     (_linetrack_sloc1_1_0 + 1),dph
0620 85F02A    1478            mov     (_linetrack_sloc1_1_0 + 2),b
0623 F52B      1479            mov     (_linetrack_sloc1_1_0 + 3),a
0625 E581      1480            mov     a,sp
0627 24FC      1481            add     a,#0xfc
0629 F581      1482            mov     sp,a
062B C038      1483            push    _linetrack_vleft_1_93
062D C039      1484            push    (_linetrack_vleft_1_93 + 1)
062F C03A      1485            push    (_linetrack_vleft_1_93 + 2)
0631 C03B      1486            push    (_linetrack_vleft_1_93 + 3)
0633 853882    1487            mov     dpl,_linetrack_vleft_1_93
0636 853983    1488            mov     dph,(_linetrack_vleft_1_93 + 1)
0639 853AF0    1489            mov     b,(_linetrack_vleft_1_93 + 2)
063C E53B      1490            mov     a,(_linetrack_vleft_1_93 + 3)
063E 120100    1491            lcall   ___fsmul
0641 AE82      1492            mov     r6,dpl
0643 AF83      1493            mov     r7,dph
0645 ACF0      1494            mov     r4,b
0647 FD        1495            mov     r5,a
0648 E581      1496            mov     a,sp
064A 24FC      1497            add     a,#0xfc
064C F581      1498            mov     sp,a
064E C006      1499            push    ar6
0650 C007      1500            push    ar7
0652 C004      1501            push    ar4
0654 C005      1502            push    ar5
0656 852882    1503            mov     dpl,_linetrack_sloc1_1_0
0659 852983    1504            mov     dph,(_linetrack_sloc1_1_0 + 1)
065C 852AF0    1505            mov     b,(_linetrack_sloc1_1_0 + 2)
065F E52B      1506            mov     a,(_linetrack_sloc1_1_0 + 3)
0661 120100    1507            lcall   ___fsadd
0664 AC82      1508            mov     r4,dpl
0666 AD83      1509            mov     r5,dph
0668 AEF0      1510            mov     r6,b
066A FF        1511            mov     r7,a
066B E581      1512            mov     a,sp
066D 24FC      1513            add     a,#0xfc
066F F581      1514            mov     sp,a
0671 C004      1515            push    ar4
0673 C005      1516            push    ar5
0675 C006      1517            push    ar6
0677 C007      1518            push    ar7
0679 85D882    1519            mov     dpl,_linetrack_sloc0_1_0
067C 85D983    1520            mov     dph,(_linetrack_sloc0_1_0 + 1)
067F 85DAF0    1521            mov     b,(_linetrack_sloc0_1_0 + 2)
0682 E5DB      1522            mov     a,(_linetrack_sloc0_1_0 + 3)
0684 120100    1523            lcall   ___fsdiv
0687 AC82      1524            mov     r4,dpl
0689 AD83      1525            mov     r5,dph
068B AEF0      1526            mov     r6,b
068D FF        1527            mov     r7,a
068E E581      1528            mov     a,sp
0690 24FC      1529            add     a,#0xfc
0692 F581      1530            mov     sp,a
0694 8C82      1531            mov     dpl,r4
0696 8D83      1532            mov     dph,r5
0698 8EF0      1533            mov     b,r6
069A EF        1534            mov     a,r7
069B 120100    1535            lcall   ___fs2schar
069E 858260    1536            mov     _pwm_Left1,dpl
06A1           1537   ;        robot.c:280: pwm_Right1 = -1;
06A1 75F0FF    1538            mov     _pwm_Right1,#0xFF
06A4           1539   ;        robot.c:281: pwm_Right0 = vleft*vleft*75/(vright*vright+vleft*vleft);
06A4 C038      1540            push    _linetrack_vleft_1_93
06A6 C039      1541            push    (_linetrack_vleft_1_93 + 1)
06A8 C03A      1542            push    (_linetrack_vleft_1_93 + 2)
06AA C03B      1543            push    (_linetrack_vleft_1_93 + 3)
06AC 853882    1544            mov     dpl,_linetrack_vleft_1_93
06AF 853983    1545            mov     dph,(_linetrack_vleft_1_93 + 1)
06B2 853AF0    1546            mov     b,(_linetrack_vleft_1_93 + 2)
06B5 E53B      1547            mov     a,(_linetrack_vleft_1_93 + 3)
06B7 120100    1548            lcall   ___fsmul
06BA AC82      1549            mov     r4,dpl
06BC AD83      1550            mov     r5,dph
06BE AEF0      1551            mov     r6,b
06C0 FF        1552            mov     r7,a
06C1 E581      1553            mov     a,sp
06C3 24FC      1554            add     a,#0xfc
06C5 F581      1555            mov     sp,a
06C7 C004      1556            push    ar4
06C9 C005      1557            push    ar5
06CB C006      1558            push    ar6
06CD C007      1559            push    ar7
06CF 900000    1560            mov     dptr,#0x0000
06D2 75F096    1561            mov     b,#0x96
06D5 7442      1562            mov     a,#0x42
06D7 120100    1563            lcall   ___fsmul
06DA 858228    1564            mov     _linetrack_sloc1_1_0,dpl
06DD 858329    1565            mov     (_linetrack_sloc1_1_0 + 1),dph
06E0 85F02A    1566            mov     (_linetrack_sloc1_1_0 + 2),b
06E3 F52B      1567            mov     (_linetrack_sloc1_1_0 + 3),a
06E5 E581      1568            mov     a,sp
06E7 24FC      1569            add     a,#0xfc
06E9 F581      1570            mov     sp,a
06EB C088      1571            push    _linetrack_vright_1_93
06ED C089      1572            push    (_linetrack_vright_1_93 + 1)
06EF C08A      1573            push    (_linetrack_vright_1_93 + 2)
06F1 C08B      1574            push    (_linetrack_vright_1_93 + 3)
06F3 858882    1575            mov     dpl,_linetrack_vright_1_93
06F6 858983    1576            mov     dph,(_linetrack_vright_1_93 + 1)
06F9 858AF0    1577            mov     b,(_linetrack_vright_1_93 + 2)
06FC E58B      1578            mov     a,(_linetrack_vright_1_93 + 3)
06FE 120100    1579            lcall   ___fsmul
0701 8582D8    1580            mov     _linetrack_sloc0_1_0,dpl
0704 8583D9    1581            mov     (_linetrack_sloc0_1_0 + 1),dph
0707 85F0DA    1582            mov     (_linetrack_sloc0_1_0 + 2),b
070A F5DB      1583            mov     (_linetrack_sloc0_1_0 + 3),a
070C E581      1584            mov     a,sp
070E 24FC      1585            add     a,#0xfc
0710 F581      1586            mov     sp,a
0712 C038      1587            push    _linetrack_vleft_1_93
0714 C039      1588            push    (_linetrack_vleft_1_93 + 1)
0716 C03A      1589            push    (_linetrack_vleft_1_93 + 2)
0718 C03B      1590            push    (_linetrack_vleft_1_93 + 3)
071A 853882    1591            mov     dpl,_linetrack_vleft_1_93
071D 853983    1592            mov     dph,(_linetrack_vleft_1_93 + 1)
0720 853AF0    1593            mov     b,(_linetrack_vleft_1_93 + 2)
0723 E53B      1594            mov     a,(_linetrack_vleft_1_93 + 3)
0725 120100    1595            lcall   ___fsmul
0728 AE82      1596            mov     r6,dpl
072A AF83      1597            mov     r7,dph
072C ACF0      1598            mov     r4,b
072E FD        1599            mov     r5,a
072F E581      1600            mov     a,sp
0731 24FC      1601            add     a,#0xfc
0733 F581      1602            mov     sp,a
0735 C006      1603            push    ar6
0737 C007      1604            push    ar7
0739 C004      1605            push    ar4
073B C005      1606            push    ar5
073D 85D882    1607            mov     dpl,_linetrack_sloc0_1_0
0740 85D983    1608            mov     dph,(_linetrack_sloc0_1_0 + 1)
0743 85DAF0    1609            mov     b,(_linetrack_sloc0_1_0 + 2)
0746 E5DB      1610            mov     a,(_linetrack_sloc0_1_0 + 3)
0748 120100    1611            lcall   ___fsadd
074B AC82      1612            mov     r4,dpl
074D AD83      1613            mov     r5,dph
074F AEF0      1614            mov     r6,b
0751 FF        1615            mov     r7,a
0752 E581      1616            mov     a,sp
0754 24FC      1617            add     a,#0xfc
0756 F581      1618            mov     sp,a
0758 C004      1619            push    ar4
075A C005      1620            push    ar5
075C C006      1621            push    ar6
075E C007      1622            push    ar7
0760 852882    1623            mov     dpl,_linetrack_sloc1_1_0
0763 852983    1624            mov     dph,(_linetrack_sloc1_1_0 + 1)
0766 852AF0    1625            mov     b,(_linetrack_sloc1_1_0 + 2)
0769 E52B      1626            mov     a,(_linetrack_sloc1_1_0 + 3)
076B 120100    1627            lcall   ___fsdiv
076E AC82      1628            mov     r4,dpl
0770 AD83      1629            mov     r5,dph
0772 AEF0      1630            mov     r6,b
0774 FF        1631            mov     r7,a
0775 E581      1632            mov     a,sp
0777 24FC      1633            add     a,#0xfc
0779 F581      1634            mov     sp,a
077B 8C82      1635            mov     dpl,r4
077D 8D83      1636            mov     dph,r5
077F 8EF0      1637            mov     b,r6
0781 EF        1638            mov     a,r7
0782 120100    1639            lcall   ___fs2schar
0785 858220    1640            mov     _pwm_Right0,dpl
0788 22        1641            ret
0789           1642   L005004?:
0789           1643   ;        robot.c:282: } else if (forwardbackward == 1) {
0789 BA0100    1644            cjne    r2,#0x01,L005011?
078C BB0000    1645            cjne    r3,#0x00,L005011?
078F 8001      1646            sjmp    L005012?
0791           1647   L005011?:
0791 22        1648            ret
0792           1649   L005012?:
0792           1650   ;        robot.c:285: vleft=Volts_at_Pin(TANK_RL);
0792 75820D    1651            mov     dpl,#0x0D
0795 120100    1652            lcall   _Volts_at_Pin
0798 858238    1653            mov     _linetrack_vleft_1_93,dpl
079B 858339    1654            mov     (_linetrack_vleft_1_93 + 1),dph
079E 85F03A    1655            mov     (_linetrack_vleft_1_93 + 2),b
07A1 F53B      1656            mov     (_linetrack_vleft_1_93 + 3),a
07A3           1657   ;        robot.c:286: vright=Volts_at_Pin(TANK_RR);
07A3 75820E    1658            mov     dpl,#0x0E
07A6 120100    1659            lcall   _Volts_at_Pin
07A9 858288    1660            mov     _linetrack_vright_1_93,dpl
07AC 858389    1661            mov     (_linetrack_vright_1_93 + 1),dph
07AF 85F08A    1662            mov     (_linetrack_vright_1_93 + 2),b
07B2 F58B      1663            mov     (_linetrack_vright_1_93 + 3),a
07B4           1664   ;        robot.c:289: pwm_Left1 = -1;
07B4 7560FF    1665            mov     _pwm_Left1,#0xFF
07B7           1666   ;        robot.c:290: pwm_Left0 = vright*vright*75/(vright*vright+vleft*vleft);
07B7 C088      1667            push    _linetrack_vright_1_93
07B9 C089      1668            push    (_linetrack_vright_1_93 + 1)
07BB C08A      1669            push    (_linetrack_vright_1_93 + 2)
07BD C08B      1670            push    (_linetrack_vright_1_93 + 3)
07BF 858882    1671            mov     dpl,_linetrack_vright_1_93
07C2 858983    1672            mov     dph,(_linetrack_vright_1_93 + 1)
07C5 858AF0    1673            mov     b,(_linetrack_vright_1_93 + 2)
07C8 E58B      1674            mov     a,(_linetrack_vright_1_93 + 3)
07CA 120100    1675            lcall   ___fsmul
07CD AA82      1676            mov     r2,dpl
07CF AB83      1677            mov     r3,dph
07D1 ACF0      1678            mov     r4,b
07D3 FD        1679            mov     r5,a
07D4 E581      1680            mov     a,sp
07D6 24FC      1681            add     a,#0xfc
07D8 F581      1682            mov     sp,a
07DA C002      1683            push    ar2
07DC C003      1684            push    ar3
07DE C004      1685            push    ar4
07E0 C005      1686            push    ar5
07E2 900000    1687            mov     dptr,#0x0000
07E5 75F096    1688            mov     b,#0x96
07E8 7442      1689            mov     a,#0x42
07EA 120100    1690            lcall   ___fsmul
07ED AA82      1691            mov     r2,dpl
07EF AB83      1692            mov     r3,dph
07F1 ACF0      1693            mov     r4,b
07F3 FD        1694            mov     r5,a
07F4 E581      1695            mov     a,sp
07F6 24FC      1696            add     a,#0xfc
07F8 F581      1697            mov     sp,a
07FA C002      1698            push    ar2
07FC C003      1699            push    ar3
07FE C004      1700            push    ar4
0800 C005      1701            push    ar5
0802 C088      1702            push    _linetrack_vright_1_93
0804 C089      1703            push    (_linetrack_vright_1_93 + 1)
0806 C08A      1704            push    (_linetrack_vright_1_93 + 2)
0808 C08B      1705            push    (_linetrack_vright_1_93 + 3)
080A 858882    1706            mov     dpl,_linetrack_vright_1_93
080D 858983    1707            mov     dph,(_linetrack_vright_1_93 + 1)
0810 858AF0    1708            mov     b,(_linetrack_vright_1_93 + 2)
0813 E58B      1709            mov     a,(_linetrack_vright_1_93 + 3)
0815 120100    1710            lcall   ___fsmul
0818 858228    1711            mov     _linetrack_sloc1_1_0,dpl
081B 858329    1712            mov     (_linetrack_sloc1_1_0 + 1),dph
081E 85F02A    1713            mov     (_linetrack_sloc1_1_0 + 2),b
0821 F52B      1714            mov     (_linetrack_sloc1_1_0 + 3),a
0823 E581      1715            mov     a,sp
0825 24FC      1716            add     a,#0xfc
0827 F581      1717            mov     sp,a
0829 C038      1718            push    _linetrack_vleft_1_93
082B C039      1719            push    (_linetrack_vleft_1_93 + 1)
082D C03A      1720            push    (_linetrack_vleft_1_93 + 2)
082F C03B      1721            push    (_linetrack_vleft_1_93 + 3)
0831 853882    1722            mov     dpl,_linetrack_vleft_1_93
0834 853983    1723            mov     dph,(_linetrack_vleft_1_93 + 1)
0837 853AF0    1724            mov     b,(_linetrack_vleft_1_93 + 2)
083A E53B      1725            mov     a,(_linetrack_vleft_1_93 + 3)
083C 120100    1726            lcall   ___fsmul
083F AE82      1727            mov     r6,dpl
0841 AF83      1728            mov     r7,dph
0843 A8F0      1729            mov     r0,b
0845 F9        1730            mov     r1,a
0846 E581      1731            mov     a,sp
0848 24FC      1732            add     a,#0xfc
084A F581      1733            mov     sp,a
084C C006      1734            push    ar6
084E C007      1735            push    ar7
0850 C000      1736            push    ar0
0852 C001      1737            push    ar1
0854 852882    1738            mov     dpl,_linetrack_sloc1_1_0
0857 852983    1739            mov     dph,(_linetrack_sloc1_1_0 + 1)
085A 852AF0    1740            mov     b,(_linetrack_sloc1_1_0 + 2)
085D E52B      1741            mov     a,(_linetrack_sloc1_1_0 + 3)
085F 120100    1742            lcall   ___fsadd
0862 AE82      1743            mov     r6,dpl
0864 AF83      1744            mov     r7,dph
0866 A8F0      1745            mov     r0,b
0868 F9        1746            mov     r1,a
0869 E581      1747            mov     a,sp
086B 24FC      1748            add     a,#0xfc
086D F581      1749            mov     sp,a
086F D005      1750            pop     ar5
0871 D004      1751            pop     ar4
0873 D003      1752            pop     ar3
0875 D002      1753            pop     ar2
0877 C006      1754            push    ar6
0879 C007      1755            push    ar7
087B C000      1756            push    ar0
087D C001      1757            push    ar1
087F 8A82      1758            mov     dpl,r2
0881 8B83      1759            mov     dph,r3
0883 8CF0      1760            mov     b,r4
0885 ED        1761            mov     a,r5
0886 120100    1762            lcall   ___fsdiv
0889 AA82      1763            mov     r2,dpl
088B AB83      1764            mov     r3,dph
088D ACF0      1765            mov     r4,b
088F FD        1766            mov     r5,a
0890 E581      1767            mov     a,sp
0892 24FC      1768            add     a,#0xfc
0894 F581      1769            mov     sp,a
0896 8A82      1770            mov     dpl,r2
0898 8B83      1771            mov     dph,r3
089A 8CF0      1772            mov     b,r4
089C ED        1773            mov     a,r5
089D 120100    1774            lcall   ___fs2schar
08A0 8582A0    1775            mov     _pwm_Left0,dpl
08A3           1776   ;        robot.c:291: pwm_Right0 = -1;
08A3 7520FF    1777            mov     _pwm_Right0,#0xFF
08A6           1778   ;        robot.c:292: pwm_Right1 = vleft*vleft*75/(vright*vright+vleft*vleft);
08A6 C038      1779            push    _linetrack_vleft_1_93
08A8 C039      1780            push    (_linetrack_vleft_1_93 + 1)
08AA C03A      1781            push    (_linetrack_vleft_1_93 + 2)
08AC C03B      1782            push    (_linetrack_vleft_1_93 + 3)
08AE 853882    1783            mov     dpl,_linetrack_vleft_1_93
08B1 853983    1784            mov     dph,(_linetrack_vleft_1_93 + 1)
08B4 853AF0    1785            mov     b,(_linetrack_vleft_1_93 + 2)
08B7 E53B      1786            mov     a,(_linetrack_vleft_1_93 + 3)
08B9 120100    1787            lcall   ___fsmul
08BC AA82      1788            mov     r2,dpl
08BE AB83      1789            mov     r3,dph
08C0 ACF0      1790            mov     r4,b
08C2 FD        1791            mov     r5,a
08C3 E581      1792            mov     a,sp
08C5 24FC      1793            add     a,#0xfc
08C7 F581      1794            mov     sp,a
08C9 C002      1795            push    ar2
08CB C003      1796            push    ar3
08CD C004      1797            push    ar4
08CF C005      1798            push    ar5
08D1 900000    1799            mov     dptr,#0x0000
08D4 75F096    1800            mov     b,#0x96
08D7 7442      1801            mov     a,#0x42
08D9 120100    1802            lcall   ___fsmul
08DC AA82      1803            mov     r2,dpl
08DE AB83      1804            mov     r3,dph
08E0 ACF0      1805            mov     r4,b
08E2 FD        1806            mov     r5,a
08E3 E581      1807            mov     a,sp
08E5 24FC      1808            add     a,#0xfc
08E7 F581      1809            mov     sp,a
08E9 C002      1810            push    ar2
08EB C003      1811            push    ar3
08ED C004      1812            push    ar4
08EF C005      1813            push    ar5
08F1 C088      1814            push    _linetrack_vright_1_93
08F3 C089      1815            push    (_linetrack_vright_1_93 + 1)
08F5 C08A      1816            push    (_linetrack_vright_1_93 + 2)
08F7 C08B      1817            push    (_linetrack_vright_1_93 + 3)
08F9 858882    1818            mov     dpl,_linetrack_vright_1_93
08FC 858983    1819            mov     dph,(_linetrack_vright_1_93 + 1)
08FF 858AF0    1820            mov     b,(_linetrack_vright_1_93 + 2)
0902 E58B      1821            mov     a,(_linetrack_vright_1_93 + 3)
0904 120100    1822            lcall   ___fsmul
0907 858228    1823            mov     _linetrack_sloc1_1_0,dpl
090A 858329    1824            mov     (_linetrack_sloc1_1_0 + 1),dph
090D 85F02A    1825            mov     (_linetrack_sloc1_1_0 + 2),b
0910 F52B      1826            mov     (_linetrack_sloc1_1_0 + 3),a
0912 E581      1827            mov     a,sp
0914 24FC      1828            add     a,#0xfc
0916 F581      1829            mov     sp,a
0918 C038      1830            push    _linetrack_vleft_1_93
091A C039      1831            push    (_linetrack_vleft_1_93 + 1)
091C C03A      1832            push    (_linetrack_vleft_1_93 + 2)
091E C03B      1833            push    (_linetrack_vleft_1_93 + 3)
0920 853882    1834            mov     dpl,_linetrack_vleft_1_93
0923 853983    1835            mov     dph,(_linetrack_vleft_1_93 + 1)
0926 853AF0    1836            mov     b,(_linetrack_vleft_1_93 + 2)
0929 E53B      1837            mov     a,(_linetrack_vleft_1_93 + 3)
092B 120100    1838            lcall   ___fsmul
092E AE82      1839            mov     r6,dpl
0930 AF83      1840            mov     r7,dph
0932 A8F0      1841            mov     r0,b
0934 F9        1842            mov     r1,a
0935 E581      1843            mov     a,sp
0937 24FC      1844            add     a,#0xfc
0939 F581      1845            mov     sp,a
093B C006      1846            push    ar6
093D C007      1847            push    ar7
093F C000      1848            push    ar0
0941 C001      1849            push    ar1
0943 852882    1850            mov     dpl,_linetrack_sloc1_1_0
0946 852983    1851            mov     dph,(_linetrack_sloc1_1_0 + 1)
0949 852AF0    1852            mov     b,(_linetrack_sloc1_1_0 + 2)
094C E52B      1853            mov     a,(_linetrack_sloc1_1_0 + 3)
094E 120100    1854            lcall   ___fsadd
0951 AE82      1855            mov     r6,dpl
0953 AF83      1856            mov     r7,dph
0955 A8F0      1857            mov     r0,b
0957 F9        1858            mov     r1,a
0958 E581      1859            mov     a,sp
095A 24FC      1860            add     a,#0xfc
095C F581      1861            mov     sp,a
095E D005      1862            pop     ar5
0960 D004      1863            pop     ar4
0962 D003      1864            pop     ar3
0964 D002      1865            pop     ar2
0966 C006      1866            push    ar6
0968 C007      1867            push    ar7
096A C000      1868            push    ar0
096C C001      1869            push    ar1
096E 8A82      1870            mov     dpl,r2
0970 8B83      1871            mov     dph,r3
0972 8CF0      1872            mov     b,r4
0974 ED        1873            mov     a,r5
0975 120100    1874            lcall   ___fsdiv
0978 AA82      1875            mov     r2,dpl
097A AB83      1876            mov     r3,dph
097C ACF0      1877            mov     r4,b
097E FD        1878            mov     r5,a
097F E581      1879            mov     a,sp
0981 24FC      1880            add     a,#0xfc
0983 F581      1881            mov     sp,a
0985 8A82      1882            mov     dpl,r2
0987 8B83      1883            mov     dph,r3
0989 8CF0      1884            mov     b,r4
098B ED        1885            mov     a,r5
098C 120100    1886            lcall   ___fs2schar
098F 8582F0    1887            mov     _pwm_Right1,dpl
0992 22        1888            ret
0993           1889   ;------------------------------------------------------------
0993           1890   ;Allocation info for local variables in function 'stopcar'
0993           1891   ;------------------------------------------------------------
0993           1892   ;------------------------------------------------------------
0993           1893   ;        robot.c:300: void stopcar(void) {
0993           1894   ;        -----------------------------------------
0993           1895   ;         function stopcar
0993           1896   ;        -----------------------------------------
0993           1897   _stopcar:
0993           1898   ;        robot.c:302: pwm_Left1 = -1;
0993 7560FF    1899            mov     _pwm_Left1,#0xFF
0996           1900   ;        robot.c:303: pwm_Right1 = -1;
0996 75F0FF    1901            mov     _pwm_Right1,#0xFF
0999           1902   ;        robot.c:304: pwm_Left0 = -1;
0999 75A0FF    1903            mov     _pwm_Left0,#0xFF
099C           1904   ;        robot.c:305: pwm_Right0 = -1;
099C 7520FF    1905            mov     _pwm_Right0,#0xFF
099F 22        1906            ret
09A0           1907   ;------------------------------------------------------------
09A0           1908   ;Allocation info for local variables in function 'turncar'
09A0           1909   ;------------------------------------------------------------
09A0           1910   ;leftright                 Allocated to registers r2 r3 
09A0           1911   ;v                         Allocated with name '_turncar_v_1_99'
09A0           1912   ;------------------------------------------------------------
09A0           1913   ;        robot.c:311: void turncar (int leftright) {
09A0           1914   ;        -----------------------------------------
09A0           1915   ;         function turncar
09A0           1916   ;        -----------------------------------------
09A0           1917   _turncar:
09A0 AA82      1918            mov     r2,dpl
09A2 AB83      1919            mov     r3,dph
09A4           1920   ;        robot.c:323: stopcar();
09A4 C002      1921            push    ar2
09A6 C003      1922            push    ar3
09A8 120100    1923            lcall   _stopcar
09AB D003      1924            pop     ar3
09AD D002      1925            pop     ar2
09AF           1926   ;        robot.c:326: if (leftright == 1) {
09AF BA0180    1927            cjne    r2,#0x01,L007022?
09B2 BB0080    1928            cjne    r3,#0x00,L007022?
09B5           1929   ;        robot.c:328: pwm_Right0 = 100;
09B5 752064    1930            mov     _pwm_Right0,#0x64
09B8           1931   ;        robot.c:330: waitms(750);       
09B8 9002EE    1932            mov     dptr,#0x02EE
09BB 120100    1933            lcall   _waitms
09BE           1934   ;        robot.c:333: v = Volts_at_Pin(TANK_RR);
09BE 75820E    1935            mov     dpl,#0x0E
09C1 120100    1936            lcall   _Volts_at_Pin
09C4 858268    1937            mov     _turncar_v_1_99,dpl
09C7 858369    1938            mov     (_turncar_v_1_99 + 1),dph
09CA 85F06A    1939            mov     (_turncar_v_1_99 + 2),b
09CD F56B      1940            mov     (_turncar_v_1_99 + 3),a
09CF           1941   ;        robot.c:335: while (v < 1) {
09CF           1942   L007001?:
09CF E4        1943            clr     a
09D0 C0E0      1944            push    acc
09D2 C0E0      1945            push    acc
09D4 7480      1946            mov     a,#0x80
09D6 C0E0      1947            push    acc
09D8 743F      1948            mov     a,#0x3F
09DA C0E0      1949            push    acc
09DC 856882    1950            mov     dpl,_turncar_v_1_99
09DF 856983    1951            mov     dph,(_turncar_v_1_99 + 1)
09E2 856AF0    1952            mov     b,(_turncar_v_1_99 + 2)
09E5 E56B      1953            mov     a,(_turncar_v_1_99 + 3)
09E7 120100    1954            lcall   ___fslt
09EA AC82      1955            mov     r4,dpl
09EC E581      1956            mov     a,sp
09EE 24FC      1957            add     a,#0xfc
09F0 F581      1958            mov     sp,a
09F2 EC        1959            mov     a,r4
09F3 6001      1960            jz      L007003?
09F5           1961   ;        robot.c:337: v = Volts_at_Pin(TANK_RR);
09F5 75820E    1962            mov     dpl,#0x0E
09F8 120100    1963            lcall   _Volts_at_Pin
09FB 858268    1964            mov     _turncar_v_1_99,dpl
09FE 858369    1965            mov     (_turncar_v_1_99 + 1),dph
0A01 85F06A    1966            mov     (_turncar_v_1_99 + 2),b
0A04 F56B      1967            mov     (_turncar_v_1_99 + 3),a
0A06 8001      1968            sjmp    L007001?
0A08           1969   L007003?:
0A08           1970   ;        robot.c:342: waitms(300);
0A08 90012C    1971            mov     dptr,#0x012C
0A0B 120100    1972            lcall   _waitms
0A0E           1973   ;        robot.c:345: pwm_Right0 = -1; 
0A0E 7520FF    1974            mov     _pwm_Right0,#0xFF
0A11 22        1975            ret
0A12           1976   L007022?:
0A12           1977   ;        robot.c:349: else if (leftright == 3) {
0A12 BA0340    1978            cjne    r2,#0x03,L007019?
0A15 BB0040    1979            cjne    r3,#0x00,L007019?
0A18           1980   ;        robot.c:351: pwm_Left1 = 75;
0A18 75604B    1981            mov     _pwm_Left1,#0x4B
0A1B           1982   ;        robot.c:352: waitms(750);
0A1B 9002EE    1983            mov     dptr,#0x02EE
0A1E 120100    1984            lcall   _waitms
0A21           1985   ;        robot.c:355: v = Volts_at_Pin(TANK_RL);
0A21 75820D    1986            mov     dpl,#0x0D
0A24 120100    1987            lcall   _Volts_at_Pin
0A27 858268    1988            mov     _turncar_v_1_99,dpl
0A2A 858369    1989            mov     (_turncar_v_1_99 + 1),dph
0A2D 85F06A    1990            mov     (_turncar_v_1_99 + 2),b
0A30 F56B      1991            mov     (_turncar_v_1_99 + 3),a
0A32           1992   ;        robot.c:357: while (v < 0.7) {
0A32           1993   L007004?:
0A32 7433      1994            mov     a,#0x33
0A34 C0E0      1995            push    acc
0A36 C0E0      1996            push    acc
0A38 C0E0      1997            push    acc
0A3A 743F      1998            mov     a,#0x3F
0A3C C0E0      1999            push    acc
0A3E 856882    2000            mov     dpl,_turncar_v_1_99
0A41 856983    2001            mov     dph,(_turncar_v_1_99 + 1)
0A44 856AF0    2002            mov     b,(_turncar_v_1_99 + 2)
0A47 E56B      2003            mov     a,(_turncar_v_1_99 + 3)
0A49 120100    2004            lcall   ___fslt
0A4C AC82      2005            mov     r4,dpl
0A4E E581      2006            mov     a,sp
0A50 24FC      2007            add     a,#0xfc
0A52 F581      2008            mov     sp,a
0A54 EC        2009            mov     a,r4
0A55 6001      2010            jz      L007006?
0A57           2011   ;        robot.c:359: v = Volts_at_Pin(TANK_RL);
0A57 75820D    2012            mov     dpl,#0x0D
0A5A 120100    2013            lcall   _Volts_at_Pin
0A5D 858268    2014            mov     _turncar_v_1_99,dpl
0A60 858369    2015            mov     (_turncar_v_1_99 + 1),dph
0A63 85F06A    2016            mov     (_turncar_v_1_99 + 2),b
0A66 F56B      2017            mov     (_turncar_v_1_99 + 3),a
0A68 8001      2018            sjmp    L007004?
0A6A           2019   L007006?:
0A6A           2020   ;        robot.c:363: waitms(300);
0A6A 90012C    2021            mov     dptr,#0x012C
0A6D 120100    2022            lcall   _waitms
0A70           2023   ;        robot.c:366: pwm_Left1 = -1; 
0A70 7560FF    2024            mov     _pwm_Left1,#0xFF
0A73 22        2025            ret
0A74           2026   L007019?:
0A74           2027   ;        robot.c:370: else if (leftright == 2) {
0A74 BA0200    2028            cjne    r2,#0x02,L007016?
0A77 BB0000    2029            cjne    r3,#0x00,L007016?
0A7A           2030   ;        robot.c:372: pwm_Right1 = 75;
0A7A 75F04B    2031            mov     _pwm_Right1,#0x4B
0A7D           2032   ;        robot.c:373: pwm_Left0 = 75;
0A7D 75A04B    2033            mov     _pwm_Left0,#0x4B
0A80           2034   ;        robot.c:375: waitms(250);
0A80 9000FA    2035            mov     dptr,#0x00FA
0A83 120100    2036            lcall   _waitms
0A86           2037   ;        robot.c:376: pwm_Left0 = -1;
0A86 75A0FF    2038            mov     _pwm_Left0,#0xFF
0A89           2039   ;        robot.c:379: waitms(1000);
0A89 9003E8    2040            mov     dptr,#0x03E8
0A8C 120100    2041            lcall   _waitms
0A8F           2042   ;        robot.c:381: v = Volts_at_Pin(TANK_RR);
0A8F 75820E    2043            mov     dpl,#0x0E
0A92 120100    2044            lcall   _Volts_at_Pin
0A95 858268    2045            mov     _turncar_v_1_99,dpl
0A98 858369    2046            mov     (_turncar_v_1_99 + 1),dph
0A9B 85F06A    2047            mov     (_turncar_v_1_99 + 2),b
0A9E F56B      2048            mov     (_turncar_v_1_99 + 3),a
0AA0           2049   ;        robot.c:383: while (v < 0.7) {
0AA0           2050   L007007?:
0AA0 7433      2051            mov     a,#0x33
0AA2 C0E0      2052            push    acc
0AA4 C0E0      2053            push    acc
0AA6 C0E0      2054            push    acc
0AA8 743F      2055            mov     a,#0x3F
0AAA C0E0      2056            push    acc
0AAC 856882    2057            mov     dpl,_turncar_v_1_99
0AAF 856983    2058            mov     dph,(_turncar_v_1_99 + 1)
0AB2 856AF0    2059            mov     b,(_turncar_v_1_99 + 2)
0AB5 E56B      2060            mov     a,(_turncar_v_1_99 + 3)
0AB7 120100    2061            lcall   ___fslt
0ABA AC82      2062            mov     r4,dpl
0ABC E581      2063            mov     a,sp
0ABE 24FC      2064            add     a,#0xfc
0AC0 F581      2065            mov     sp,a
0AC2 EC        2066            mov     a,r4
0AC3 6001      2067            jz      L007009?
0AC5           2068   ;        robot.c:385: v = Volts_at_Pin(TANK_RR);
0AC5 75820E    2069            mov     dpl,#0x0E
0AC8 120100    2070            lcall   _Volts_at_Pin
0ACB 858268    2071            mov     _turncar_v_1_99,dpl
0ACE 858369    2072            mov     (_turncar_v_1_99 + 1),dph
0AD1 85F06A    2073            mov     (_turncar_v_1_99 + 2),b
0AD4 F56B      2074            mov     (_turncar_v_1_99 + 3),a
0AD6 8001      2075            sjmp    L007007?
0AD8           2076   L007009?:
0AD8           2077   ;        robot.c:390: pwm_Right1 = -1; 
0AD8 75F0FF    2078            mov     _pwm_Right1,#0xFF
0ADB 22        2079            ret
0ADC           2080   L007016?:
0ADC           2081   ;        robot.c:394: else if (leftright == 4) {
0ADC BA04C0    2082            cjne    r2,#0x04,L007024?
0ADF BB00C0    2083            cjne    r3,#0x00,L007024?
0AE2           2084   ;        robot.c:396: pwm_Left0 = 75;
0AE2 75A04B    2085            mov     _pwm_Left0,#0x4B
0AE5           2086   ;        robot.c:398: pwm_Right1 = 75;
0AE5 75F04B    2087            mov     _pwm_Right1,#0x4B
0AE8           2088   ;        robot.c:400: waitms(250);
0AE8 9000FA    2089            mov     dptr,#0x00FA
0AEB 120100    2090            lcall   _waitms
0AEE           2091   ;        robot.c:402: pwm_Right1 = -1;
0AEE 75F0FF    2092            mov     _pwm_Right1,#0xFF
0AF1           2093   ;        robot.c:404: waitms(1000);
0AF1 9003E8    2094            mov     dptr,#0x03E8
0AF4 120100    2095            lcall   _waitms
0AF7           2096   ;        robot.c:407: v = Volts_at_Pin(TANK_RL);
0AF7 75820D    2097            mov     dpl,#0x0D
0AFA 120100    2098            lcall   _Volts_at_Pin
0AFD 858268    2099            mov     _turncar_v_1_99,dpl
0B00 858369    2100            mov     (_turncar_v_1_99 + 1),dph
0B03 85F06A    2101            mov     (_turncar_v_1_99 + 2),b
0B06 F56B      2102            mov     (_turncar_v_1_99 + 3),a
0B08           2103   ;        robot.c:409: while (v < 0.7) {
0B08           2104   L007010?:
0B08 7433      2105            mov     a,#0x33
0B0A C0E0      2106            push    acc
0B0C C0E0      2107            push    acc
0B0E C0E0      2108            push    acc
0B10 743F      2109            mov     a,#0x3F
0B12 C0E0      2110            push    acc
0B14 856882    2111            mov     dpl,_turncar_v_1_99
0B17 856983    2112            mov     dph,(_turncar_v_1_99 + 1)
0B1A 856AF0    2113            mov     b,(_turncar_v_1_99 + 2)
0B1D E56B      2114            mov     a,(_turncar_v_1_99 + 3)
0B1F 120100    2115            lcall   ___fslt
0B22 AA82      2116            mov     r2,dpl
0B24 E581      2117            mov     a,sp
0B26 24FC      2118            add     a,#0xfc
0B28 F581      2119            mov     sp,a
0B2A EA        2120            mov     a,r2
0B2B 6001      2121            jz      L007012?
0B2D           2122   ;        robot.c:411: v = Volts_at_Pin(TANK_RL);
0B2D 75820D    2123            mov     dpl,#0x0D
0B30 120100    2124            lcall   _Volts_at_Pin
0B33 858268    2125            mov     _turncar_v_1_99,dpl
0B36 858369    2126            mov     (_turncar_v_1_99 + 1),dph
0B39 85F06A    2127            mov     (_turncar_v_1_99 + 2),b
0B3C F56B      2128            mov     (_turncar_v_1_99 + 3),a
0B3E 8001      2129            sjmp    L007010?
0B40           2130   L007012?:
0B40           2131   ;        robot.c:416: pwm_Left0 = -1; 
0B40 75A0FF    2132            mov     _pwm_Left0,#0xFF
0B43           2133   L007024?:
0B43 22        2134            ret
0B44           2135   ;------------------------------------------------------------
0B44           2136   ;Allocation info for local variables in function 'uturn'
0B44           2137   ;------------------------------------------------------------
0B44           2138   ;vleft                     Allocated with name '_uturn_vleft_1_109'
0B44           2139   ;vright                    Allocated with name '_uturn_vright_1_109'
0B44           2140   ;------------------------------------------------------------
0B44           2141   ;        robot.c:423: void uturn(void) {
0B44           2142   ;        -----------------------------------------
0B44           2143   ;         function uturn
0B44           2144   ;        -----------------------------------------
0B44           2145   _uturn:
0B44           2146   ;        robot.c:427: vleft = Volts_at_Pin(TANK_FL);
0B44 75820B    2147            mov     dpl,#0x0B
0B47 120100    2148            lcall   _Volts_at_Pin
0B4A 8582B8    2149            mov     _uturn_vleft_1_109,dpl
0B4D 8583B9    2150            mov     (_uturn_vleft_1_109 + 1),dph
0B50 85F0BA    2151            mov     (_uturn_vleft_1_109 + 2),b
0B53 F5BB      2152            mov     (_uturn_vleft_1_109 + 3),a
0B55           2153   ;        robot.c:428: vright = Volts_at_Pin(TANK_FR);
0B55 75820C    2154            mov     dpl,#0x0C
0B58 120100    2155            lcall   _Volts_at_Pin
0B5B 858208    2156            mov     _uturn_vright_1_109,dpl
0B5E 858309    2157            mov     (_uturn_vright_1_109 + 1),dph
0B61 85F00A    2158            mov     (_uturn_vright_1_109 + 2),b
0B64 F50B      2159            mov     (_uturn_vright_1_109 + 3),a
0B66           2160   ;        robot.c:431: pwm_Left0 = -1;
0B66 75A0FF    2161            mov     _pwm_Left0,#0xFF
0B69           2162   ;        robot.c:432: pwm_Left1 = 50;
0B69 756032    2163            mov     _pwm_Left1,#0x32
0B6C           2164   ;        robot.c:433: pwm_Right0 = -1;
0B6C 7520FF    2165            mov     _pwm_Right0,#0xFF
0B6F           2166   ;        robot.c:434: pwm_Right1 = 50;
0B6F 75F032    2167            mov     _pwm_Right1,#0x32
0B72           2168   ;        robot.c:437: waitms(2000);
0B72 9007D0    2169            mov     dptr,#0x07D0
0B75 120100    2170            lcall   _waitms
0B78           2171   ;        robot.c:439: while ((Volts_at_Pin(TANK_FL)-Volts_at_Pin(TANK_FR))<-0.3 || (Volts_at_Pin(TANK_FL)-Volts_at_Pin(TANK_FR))>0.3);
0B78           2172   L008002?:
0B78 75820B    2173            mov     dpl,#0x0B
0B7B 120100    2174            lcall   _Volts_at_Pin
0B7E AA82      2175            mov     r2,dpl
0B80 AB83      2176            mov     r3,dph
0B82 ACF0      2177            mov     r4,b
0B84 FD        2178            mov     r5,a
0B85 75820C    2179            mov     dpl,#0x0C
0B88 C002      2180            push    ar2
0B8A C003      2181            push    ar3
0B8C C004      2182            push    ar4
0B8E C005      2183            push    ar5
0B90 120100    2184            lcall   _Volts_at_Pin
0B93 AE82      2185            mov     r6,dpl
0B95 AF83      2186            mov     r7,dph
0B97 A8F0      2187            mov     r0,b
0B99 F9        2188            mov     r1,a
0B9A D005      2189            pop     ar5
0B9C D004      2190            pop     ar4
0B9E D003      2191            pop     ar3
0BA0 D002      2192            pop     ar2
0BA2 C006      2193            push    ar6
0BA4 C007      2194            push    ar7
0BA6 C000      2195            push    ar0
0BA8 C001      2196            push    ar1
0BAA 8A82      2197            mov     dpl,r2
0BAC 8B83      2198            mov     dph,r3
0BAE 8CF0      2199            mov     b,r4
0BB0 ED        2200            mov     a,r5
0BB1 120100    2201            lcall   ___fssub
0BB4 AA82      2202            mov     r2,dpl
0BB6 AB83      2203            mov     r3,dph
0BB8 ACF0      2204            mov     r4,b
0BBA FD        2205            mov     r5,a
0BBB E581      2206            mov     a,sp
0BBD 24FC      2207            add     a,#0xfc
0BBF F581      2208            mov     sp,a
0BC1 749A      2209            mov     a,#0x9A
0BC3 C0E0      2210            push    acc
0BC5 7499      2211            mov     a,#0x99
0BC7 C0E0      2212            push    acc
0BC9 C0E0      2213            push    acc
0BCB 74BE      2214            mov     a,#0xBE
0BCD C0E0      2215            push    acc
0BCF 8A82      2216            mov     dpl,r2
0BD1 8B83      2217            mov     dph,r3
0BD3 8CF0      2218            mov     b,r4
0BD5 ED        2219            mov     a,r5
0BD6 120100    2220            lcall   ___fslt
0BD9 AA82      2221            mov     r2,dpl
0BDB E581      2222            mov     a,sp
0BDD 24FC      2223            add     a,#0xfc
0BDF F581      2224            mov     sp,a
0BE1 EA        2225            mov     a,r2
0BE2 7001      2226            jnz     L008002?
0BE4 75820B    2227            mov     dpl,#0x0B
0BE7 120100    2228            lcall   _Volts_at_Pin
0BEA AA82      2229            mov     r2,dpl
0BEC AB83      2230            mov     r3,dph
0BEE ACF0      2231            mov     r4,b
0BF0 FD        2232            mov     r5,a
0BF1 75820C    2233            mov     dpl,#0x0C
0BF4 C002      2234            push    ar2
0BF6 C003      2235            push    ar3
0BF8 C004      2236            push    ar4
0BFA C005      2237            push    ar5
0BFC 120100    2238            lcall   _Volts_at_Pin
0BFF AE82      2239            mov     r6,dpl
0C01 AF83      2240            mov     r7,dph
0C03 A8F0      2241            mov     r0,b
0C05 F9        2242            mov     r1,a
0C06 D005      2243            pop     ar5
0C08 D004      2244            pop     ar4
0C0A D003      2245            pop     ar3
0C0C D002      2246            pop     ar2
0C0E C006      2247            push    ar6
0C10 C007      2248            push    ar7
0C12 C000      2249            push    ar0
0C14 C001      2250            push    ar1
0C16 8A82      2251            mov     dpl,r2
0C18 8B83      2252            mov     dph,r3
0C1A 8CF0      2253            mov     b,r4
0C1C ED        2254            mov     a,r5
0C1D 120100    2255            lcall   ___fssub
0C20 AA82      2256            mov     r2,dpl
0C22 AB83      2257            mov     r3,dph
0C24 ACF0      2258            mov     r4,b
0C26 FD        2259            mov     r5,a
0C27 E581      2260            mov     a,sp
0C29 24FC      2261            add     a,#0xfc
0C2B F581      2262            mov     sp,a
0C2D 749A      2263            mov     a,#0x9A
0C2F C0E0      2264            push    acc
0C31 7499      2265            mov     a,#0x99
0C33 C0E0      2266            push    acc
0C35 C0E0      2267            push    acc
0C37 743E      2268            mov     a,#0x3E
0C39 C0E0      2269            push    acc
0C3B 8A82      2270            mov     dpl,r2
0C3D 8B83      2271            mov     dph,r3
0C3F 8CF0      2272            mov     b,r4
0C41 ED        2273            mov     a,r5
0C42 120100    2274            lcall   ___fsgt
0C45 AA82      2275            mov     r2,dpl
0C47 E581      2276            mov     a,sp
0C49 24FC      2277            add     a,#0xfc
0C4B F581      2278            mov     sp,a
0C4D EA        2279            mov     a,r2
0C4E 6001      2280            jz      L008010?
0C50 020100    2281            ljmp    L008002?
0C53           2282   L008010?:
0C53 22        2283            ret
0C54           2284   ;------------------------------------------------------------
0C54           2285   ;Allocation info for local variables in function 'Sonar_Reading'
0C54           2286   ;------------------------------------------------------------
0C54           2287   ;------------------------------------------------------------
0C54           2288   ;        robot.c:444: void Sonar_Reading(void) {
0C54           2289   ;        -----------------------------------------
0C54           2290   ;         function Sonar_Reading
0C54           2291   ;        -----------------------------------------
0C54           2292   _Sonar_Reading:
0C54           2293   ;        robot.c:446: TL0=0; 
0C54 758A00    2294            mov     _TL0,#0x00
0C57           2295   ;        robot.c:447: TH0=0;
0C57 758C00    2296            mov     _TH0,#0x00
0C5A           2297   ;        robot.c:448: TF0=0;
0C5A C28D      2298            clr     _TF0
0C5C           2299   ;        robot.c:449: overflow_count=0;
0C5C 75F000    2300            mov     _overflow_count,#0x00
0C5F           2301   ;        robot.c:452: Trigger = 0; 
0C5F C286      2302            clr     _P0_6
0C61           2303   ;        robot.c:453: Timer3us(2);
0C61 758202    2304            mov     dpl,#0x02
0C64 120100    2305            lcall   _Timer3us
0C67           2306   ;        robot.c:454: Trigger = 1; // turn on trig
0C67 D286      2307            setb    _P0_6
0C69           2308   ;        robot.c:455: Timer3us(10);//10us delay 
0C69 75820A    2309            mov     dpl,#0x0A
0C6C 120100    2310            lcall   _Timer3us
0C6F           2311   ;        robot.c:456: Trigger = 0; // trun off trig 
0C6F C286      2312            clr     _P0_6
0C71           2313   ;        robot.c:457: while(Echo!=0); // Wait for the signal to be zero
0C71           2314   L009001?:
0C71 208180    2315            jb      _P0_1,L009001?
0C74           2316   ;        robot.c:458: while(Echo!=1); // Wait for the signal to be one
0C74           2317   L009004?:
0C74 3081C0    2318            jnb     _P0_1,L009004?
0C77           2319   ;        robot.c:461: TR0=1; // Start the timer
0C77 D28C      2320            setb    _TR0
0C79           2321   ;        robot.c:462: while(Echo!=0) // Wait for the signal to be zero
0C79           2322   L009009?:
0C79 308140    2323            jnb     _P0_1,L009011?
0C7C           2324   ;        robot.c:464: if(TF0==1) // Did the 16-bit timer overflow?
0C7C           2325   ;        robot.c:466: TF0=0;
0C7C 108D80    2326            jbc     _TF0,L009023?
0C7F 8001      2327            sjmp    L009009?
0C81           2328   L009023?:
0C81           2329   ;        robot.c:467: overflow_count++;
0C81 05F0      2330            inc     _overflow_count
0C83 8001      2331            sjmp    L009009?
0C85           2332   L009011?:
0C85           2333   ;        robot.c:470: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
0C85 C28C      2334            clr     _TR0
0C87           2335   ;        robot.c:471: time=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
0C87 85F082    2336            mov     dpl,_overflow_count
0C8A 120100    2337            lcall   ___uchar2fs
0C8D AA82      2338            mov     r2,dpl
0C8F AB83      2339            mov     r3,dph
0C91 ACF0      2340            mov     r4,b
0C93 FD        2341            mov     r5,a
0C94 C002      2342            push    ar2
0C96 C003      2343            push    ar3
0C98 C004      2344            push    ar4
0C9A C005      2345            push    ar5
0C9C 900000    2346            mov     dptr,#0x0000
0C9F 75F080    2347            mov     b,#0x80
0CA2 7447      2348            mov     a,#0x47
0CA4 120100    2349            lcall   ___fsmul
0CA7 AA82      2350            mov     r2,dpl
0CA9 AB83      2351            mov     r3,dph
0CAB ACF0      2352            mov     r4,b
0CAD FD        2353            mov     r5,a
0CAE E581      2354            mov     a,sp
0CB0 24FC      2355            add     a,#0xfc
0CB2 F581      2356            mov     sp,a
0CB4 858C82    2357            mov     dpl,_TH0
0CB7 C002      2358            push    ar2
0CB9 C003      2359            push    ar3
0CBB C004      2360            push    ar4
0CBD C005      2361            push    ar5
0CBF 120100    2362            lcall   ___uchar2fs
0CC2 AE82      2363            mov     r6,dpl
0CC4 AF83      2364            mov     r7,dph
0CC6 A8F0      2365            mov     r0,b
0CC8 F9        2366            mov     r1,a
0CC9 C006      2367            push    ar6
0CCB C007      2368            push    ar7
0CCD C000      2369            push    ar0
0CCF C001      2370            push    ar1
0CD1 900000    2371            mov     dptr,#0x0000
0CD4 75F080    2372            mov     b,#0x80
0CD7 7443      2373            mov     a,#0x43
0CD9 120100    2374            lcall   ___fsmul
0CDC AE82      2375            mov     r6,dpl
0CDE AF83      2376            mov     r7,dph
0CE0 A8F0      2377            mov     r0,b
0CE2 F9        2378            mov     r1,a
0CE3 E581      2379            mov     a,sp
0CE5 24FC      2380            add     a,#0xfc
0CE7 F581      2381            mov     sp,a
0CE9 D005      2382            pop     ar5
0CEB D004      2383            pop     ar4
0CED D003      2384            pop     ar3
0CEF D002      2385            pop     ar2
0CF1 C006      2386            push    ar6
0CF3 C007      2387            push    ar7
0CF5 C000      2388            push    ar0
0CF7 C001      2389            push    ar1
0CF9 8A82      2390            mov     dpl,r2
0CFB 8B83      2391            mov     dph,r3
0CFD 8CF0      2392            mov     b,r4
0CFF ED        2393            mov     a,r5
0D00 120100    2394            lcall   ___fsadd
0D03 AA82      2395            mov     r2,dpl
0D05 AB83      2396            mov     r3,dph
0D07 ACF0      2397            mov     r4,b
0D09 FD        2398            mov     r5,a
0D0A E581      2399            mov     a,sp
0D0C 24FC      2400            add     a,#0xfc
0D0E F581      2401            mov     sp,a
0D10 AE8A      2402            mov     r6,_TL0
0D12 7F00      2403            mov     r7,#0x00
0D14 8E82      2404            mov     dpl,r6
0D16 8F83      2405            mov     dph,r7
0D18 C002      2406            push    ar2
0D1A C003      2407            push    ar3
0D1C C004      2408            push    ar4
0D1E C005      2409            push    ar5
0D20 120100    2410            lcall   ___sint2fs
0D23 AE82      2411            mov     r6,dpl
0D25 AF83      2412            mov     r7,dph
0D27 A8F0      2413            mov     r0,b
0D29 F9        2414            mov     r1,a
0D2A D005      2415            pop     ar5
0D2C D004      2416            pop     ar4
0D2E D003      2417            pop     ar3
0D30 D002      2418            pop     ar2
0D32 C006      2419            push    ar6
0D34 C007      2420            push    ar7
0D36 C000      2421            push    ar0
0D38 C001      2422            push    ar1
0D3A 8A82      2423            mov     dpl,r2
0D3C 8B83      2424            mov     dph,r3
0D3E 8CF0      2425            mov     b,r4
0D40 ED        2426            mov     a,r5
0D41 120100    2427            lcall   ___fsadd
0D44 AA82      2428            mov     r2,dpl
0D46 AB83      2429            mov     r3,dph
0D48 ACF0      2430            mov     r4,b
0D4A FD        2431            mov     r5,a
0D4B E581      2432            mov     a,sp
0D4D 24FC      2433            add     a,#0xfc
0D4F F581      2434            mov     sp,a
0D51 C002      2435            push    ar2
0D53 C003      2436            push    ar3
0D55 C004      2437            push    ar4
0D57 C005      2438            push    ar5
0D59 9037BD    2439            mov     dptr,#0x37BD
0D5C 75F086    2440            mov     b,#0x86
0D5F 7434      2441            mov     a,#0x34
0D61 120100    2442            lcall   ___fsmul
0D64 8582B0    2443            mov     _time,dpl
0D67 8583B1    2444            mov     (_time + 1),dph
0D6A 85F0B2    2445            mov     (_time + 2),b
0D6D F5B3      2446            mov     (_time + 3),a
0D6F E581      2447            mov     a,sp
0D71 24FC      2448            add     a,#0xfc
0D73 F581      2449            mov     sp,a
0D75           2450   ;        robot.c:472: distance = ((time/2.0f)/29.1f)*100000;
0D75 E4        2451            clr     a
0D76 C0E0      2452            push    acc
0D78 C0E0      2453            push    acc
0D7A C0E0      2454            push    acc
0D7C 7440      2455            mov     a,#0x40
0D7E C0E0      2456            push    acc
0D80 85B082    2457            mov     dpl,_time
0D83 85B183    2458            mov     dph,(_time + 1)
0D86 85B2F0    2459            mov     b,(_time + 2)
0D89 E5B3      2460            mov     a,(_time + 3)
0D8B 120100    2461            lcall   ___fsdiv
0D8E AA82      2462            mov     r2,dpl
0D90 AB83      2463            mov     r3,dph
0D92 ACF0      2464            mov     r4,b
0D94 FD        2465            mov     r5,a
0D95 E581      2466            mov     a,sp
0D97 24FC      2467            add     a,#0xfc
0D99 F581      2468            mov     sp,a
0D9B 74CD      2469            mov     a,#0xCD
0D9D C0E0      2470            push    acc
0D9F 74CC      2471            mov     a,#0xCC
0DA1 C0E0      2472            push    acc
0DA3 74E8      2473            mov     a,#0xE8
0DA5 C0E0      2474            push    acc
0DA7 7441      2475            mov     a,#0x41
0DA9 C0E0      2476            push    acc
0DAB 8A82      2477            mov     dpl,r2
0DAD 8B83      2478            mov     dph,r3
0DAF 8CF0      2479            mov     b,r4
0DB1 ED        2480            mov     a,r5
0DB2 120100    2481            lcall   ___fsdiv
0DB5 AA82      2482            mov     r2,dpl
0DB7 AB83      2483            mov     r3,dph
0DB9 ACF0      2484            mov     r4,b
0DBB FD        2485            mov     r5,a
0DBC E581      2486            mov     a,sp
0DBE 24FC      2487            add     a,#0xfc
0DC0 F581      2488            mov     sp,a
0DC2 C002      2489            push    ar2
0DC4 C003      2490            push    ar3
0DC6 C004      2491            push    ar4
0DC8 C005      2492            push    ar5
0DCA 905000    2493            mov     dptr,#0x5000
0DCD 75F0C3    2494            mov     b,#0xC3
0DD0 7447      2495            mov     a,#0x47
0DD2 120100    2496            lcall   ___fsmul
0DD5 858270    2497            mov     _distance,dpl
0DD8 858371    2498            mov     (_distance + 1),dph
0DDB 85F072    2499            mov     (_distance + 2),b
0DDE F573      2500            mov     (_distance + 3),a
0DE0 E581      2501            mov     a,sp
0DE2 24FC      2502            add     a,#0xfc
0DE4 F581      2503            mov     sp,a
0DE6 22        2504            ret
0DE7           2505            rseg R_CSEG
0DE7           2506   
0000           2507            rseg R_XINIT
0000           2508   
0000           2509            rseg R_CONST
0000           2510   
002E           2511            CSEG
002E           2512   
002E           2513   end
