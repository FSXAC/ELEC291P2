0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Sun Apr 02 23:32:52 2017
0000              5   ;--------------------------------------------------------
                  5   $name robot
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _movecar_PARM_2
0000             28            public _Timer2_ISR
0000             29            public _main
0000             30            public _currentstate
0000             31            public _currentcmd
0000             32            public _direction
0000             33            public _pwm_Right1
0000             34            public _pwm_Right0
0000             35            public _pwm_Left1
0000             36            public _pwm_Left0
0000             37            public _pwm_both
0000             38            public _mode
0000             39            public _pwm_count
0000             40            public _forward_backward
0000             41            public _readData
0000             42            public _linetrack
0000             43            public _stopcar
0000             44            public _turncar
0000             45            public _uturn
0000             46            public _movecar
0000             47   ;--------------------------------------------------------
0000             48   ; Special Function Registers
0000             49   ;--------------------------------------------------------
0000             50   _P0             DATA 0x80
0000             51   _SP             DATA 0x81
0000             52   _DPL            DATA 0x82
0000             53   _DPH            DATA 0x83
0000             54   _EMI0TC         DATA 0x84
0000             55   _EMI0CF         DATA 0x85
0000             56   _OSCLCN         DATA 0x86
0000             57   _PCON           DATA 0x87
0000             58   _TCON           DATA 0x88
0000             59   _TMOD           DATA 0x89
0000             60   _TL0            DATA 0x8a
0000             61   _TL1            DATA 0x8b
0000             62   _TH0            DATA 0x8c
0000             63   _TH1            DATA 0x8d
0000             64   _CKCON          DATA 0x8e
0000             65   _PSCTL          DATA 0x8f
0000             66   _P1             DATA 0x90
0000             67   _TMR3CN         DATA 0x91
0000             68   _TMR4CN         DATA 0x91
0000             69   _TMR3RLL        DATA 0x92
0000             70   _TMR4RLL        DATA 0x92
0000             71   _TMR3RLH        DATA 0x93
0000             72   _TMR4RLH        DATA 0x93
0000             73   _TMR3L          DATA 0x94
0000             74   _TMR4L          DATA 0x94
0000             75   _TMR3H          DATA 0x95
0000             76   _TMR4H          DATA 0x95
0000             77   _USB0ADR        DATA 0x96
0000             78   _USB0DAT        DATA 0x97
0000             79   _SCON           DATA 0x98
0000             80   _SCON0          DATA 0x98
0000             81   _SBUF           DATA 0x99
0000             82   _SBUF0          DATA 0x99
0000             83   _CPT1CN         DATA 0x9a
0000             84   _CPT0CN         DATA 0x9b
0000             85   _CPT1MD         DATA 0x9c
0000             86   _CPT0MD         DATA 0x9d
0000             87   _CPT1MX         DATA 0x9e
0000             88   _CPT0MX         DATA 0x9f
0000             89   _P2             DATA 0xa0
0000             90   _SPI0CFG        DATA 0xa1
0000             91   _SPI0CKR        DATA 0xa2
0000             92   _SPI0DAT        DATA 0xa3
0000             93   _P0MDOUT        DATA 0xa4
0000             94   _P1MDOUT        DATA 0xa5
0000             95   _P2MDOUT        DATA 0xa6
0000             96   _P3MDOUT        DATA 0xa7
0000             97   _IE             DATA 0xa8
0000             98   _CLKSEL         DATA 0xa9
0000             99   _EMI0CN         DATA 0xaa
0000            100   __XPAGE         DATA 0xaa
0000            101   _SBCON1         DATA 0xac
0000            102   _P4MDOUT        DATA 0xae
0000            103   _PFE0CN         DATA 0xaf
0000            104   _P3             DATA 0xb0
0000            105   _OSCXCN         DATA 0xb1
0000            106   _OSCICN         DATA 0xb2
0000            107   _OSCICL         DATA 0xb3
0000            108   _SBRLL1         DATA 0xb4
0000            109   _SBRLH1         DATA 0xb5
0000            110   _FLSCL          DATA 0xb6
0000            111   _FLKEY          DATA 0xb7
0000            112   _IP             DATA 0xb8
0000            113   _CLKMUL         DATA 0xb9
0000            114   _SMBTC          DATA 0xb9
0000            115   _AMX0N          DATA 0xba
0000            116   _AMX0P          DATA 0xbb
0000            117   _ADC0CF         DATA 0xbc
0000            118   _ADC0L          DATA 0xbd
0000            119   _ADC0H          DATA 0xbe
0000            120   _SFRPAGE        DATA 0xbf
0000            121   _SMB0CN         DATA 0xc0
0000            122   _SMB1CN         DATA 0xc0
0000            123   _SMB0CF         DATA 0xc1
0000            124   _SMB1CF         DATA 0xc1
0000            125   _SMB0DAT        DATA 0xc2
0000            126   _SMB1DAT        DATA 0xc2
0000            127   _ADC0GTL        DATA 0xc3
0000            128   _ADC0GTH        DATA 0xc4
0000            129   _ADC0LTL        DATA 0xc5
0000            130   _ADC0LTH        DATA 0xc6
0000            131   _P4             DATA 0xc7
0000            132   _TMR2CN         DATA 0xc8
0000            133   _TMR5CN         DATA 0xc8
0000            134   _REG01CN        DATA 0xc9
0000            135   _TMR2RLL        DATA 0xca
0000            136   _TMR5RLL        DATA 0xca
0000            137   _TMR2RLH        DATA 0xcb
0000            138   _TMR5RLH        DATA 0xcb
0000            139   _TMR2L          DATA 0xcc
0000            140   _TMR5L          DATA 0xcc
0000            141   _TMR2H          DATA 0xcd
0000            142   _TMR5H          DATA 0xcd
0000            143   _SMB0ADM        DATA 0xce
0000            144   _SMB1ADM        DATA 0xce
0000            145   _SMB0ADR        DATA 0xcf
0000            146   _SMB1ADR        DATA 0xcf
0000            147   _PSW            DATA 0xd0
0000            148   _REF0CN         DATA 0xd1
0000            149   _SCON1          DATA 0xd2
0000            150   _SBUF1          DATA 0xd3
0000            151   _P0SKIP         DATA 0xd4
0000            152   _P1SKIP         DATA 0xd5
0000            153   _P2SKIP         DATA 0xd6
0000            154   _USB0XCN        DATA 0xd7
0000            155   _PCA0CN         DATA 0xd8
0000            156   _PCA0MD         DATA 0xd9
0000            157   _PCA0CPM0       DATA 0xda
0000            158   _PCA0CPM1       DATA 0xdb
0000            159   _PCA0CPM2       DATA 0xdc
0000            160   _PCA0CPM3       DATA 0xdd
0000            161   _PCA0CPM4       DATA 0xde
0000            162   _P3SKIP         DATA 0xdf
0000            163   _ACC            DATA 0xe0
0000            164   _XBR0           DATA 0xe1
0000            165   _XBR1           DATA 0xe2
0000            166   _XBR2           DATA 0xe3
0000            167   _IT01CF         DATA 0xe4
0000            168   _CKCON1         DATA 0xe4
0000            169   _SMOD1          DATA 0xe5
0000            170   _EIE1           DATA 0xe6
0000            171   _EIE2           DATA 0xe7
0000            172   _ADC0CN         DATA 0xe8
0000            173   _PCA0CPL1       DATA 0xe9
0000            174   _PCA0CPH1       DATA 0xea
0000            175   _PCA0CPL2       DATA 0xeb
0000            176   _PCA0CPH2       DATA 0xec
0000            177   _PCA0CPL3       DATA 0xed
0000            178   _PCA0CPH3       DATA 0xee
0000            179   _RSTSRC         DATA 0xef
0000            180   _B              DATA 0xf0
0000            181   _P0MDIN         DATA 0xf1
0000            182   _P1MDIN         DATA 0xf2
0000            183   _P2MDIN         DATA 0xf3
0000            184   _P3MDIN         DATA 0xf4
0000            185   _P4MDIN         DATA 0xf5
0000            186   _EIP1           DATA 0xf6
0000            187   _EIP2           DATA 0xf7
0000            188   _SPI0CN         DATA 0xf8
0000            189   _PCA0L          DATA 0xf9
0000            190   _PCA0H          DATA 0xfa
0000            191   _PCA0CPL0       DATA 0xfb
0000            192   _PCA0CPH0       DATA 0xfc
0000            193   _PCA0CPL4       DATA 0xfd
0000            194   _PCA0CPH4       DATA 0xfe
0000            195   _VDM0CN         DATA 0xff
0000            196   _DPTR           DATA 0x8382
0000            197   _TMR2RL         DATA 0xcbca
0000            198   _TMR3RL         DATA 0x9392
0000            199   _TMR4RL         DATA 0x9392
0000            200   _TMR5RL         DATA 0xcbca
0000            201   _TMR2           DATA 0xcdcc
0000            202   _TMR3           DATA 0x9594
0000            203   _TMR4           DATA 0x9594
0000            204   _TMR5           DATA 0xcdcc
0000            205   _SBRL1          DATA 0xb5b4
0000            206   _ADC0           DATA 0xbebd
0000            207   _ADC0GT         DATA 0xc4c3
0000            208   _ADC0LT         DATA 0xc6c5
0000            209   _PCA0           DATA 0xfaf9
0000            210   _PCA0CP1        DATA 0xeae9
0000            211   _PCA0CP2        DATA 0xeceb
0000            212   _PCA0CP3        DATA 0xeeed
0000            213   _PCA0CP0        DATA 0xfcfb
0000            214   _PCA0CP4        DATA 0xfefd
0000            215   ;--------------------------------------------------------
0000            216   ; special function bits
0000            217   ;--------------------------------------------------------
0000            218   _P0_0           BIT 0x80
0000            219   _P0_1           BIT 0x81
0000            220   _P0_2           BIT 0x82
0000            221   _P0_3           BIT 0x83
0000            222   _P0_4           BIT 0x84
0000            223   _P0_5           BIT 0x85
0000            224   _P0_6           BIT 0x86
0000            225   _P0_7           BIT 0x87
0000            226   _TF1            BIT 0x8f
0000            227   _TR1            BIT 0x8e
0000            228   _TF0            BIT 0x8d
0000            229   _TR0            BIT 0x8c
0000            230   _IE1            BIT 0x8b
0000            231   _IT1            BIT 0x8a
0000            232   _IE0            BIT 0x89
0000            233   _IT0            BIT 0x88
0000            234   _P1_0           BIT 0x90
0000            235   _P1_1           BIT 0x91
0000            236   _P1_2           BIT 0x92
0000            237   _P1_3           BIT 0x93
0000            238   _P1_4           BIT 0x94
0000            239   _P1_5           BIT 0x95
0000            240   _P1_6           BIT 0x96
0000            241   _P1_7           BIT 0x97
0000            242   _S0MODE         BIT 0x9f
0000            243   _SCON0_6        BIT 0x9e
0000            244   _MCE0           BIT 0x9d
0000            245   _REN0           BIT 0x9c
0000            246   _TB80           BIT 0x9b
0000            247   _RB80           BIT 0x9a
0000            248   _TI0            BIT 0x99
0000            249   _RI0            BIT 0x98
0000            250   _SCON_6         BIT 0x9e
0000            251   _MCE            BIT 0x9d
0000            252   _REN            BIT 0x9c
0000            253   _TB8            BIT 0x9b
0000            254   _RB8            BIT 0x9a
0000            255   _TI             BIT 0x99
0000            256   _RI             BIT 0x98
0000            257   _P2_0           BIT 0xa0
0000            258   _P2_1           BIT 0xa1
0000            259   _P2_2           BIT 0xa2
0000            260   _P2_3           BIT 0xa3
0000            261   _P2_4           BIT 0xa4
0000            262   _P2_5           BIT 0xa5
0000            263   _P2_6           BIT 0xa6
0000            264   _P2_7           BIT 0xa7
0000            265   _EA             BIT 0xaf
0000            266   _ESPI0          BIT 0xae
0000            267   _ET2            BIT 0xad
0000            268   _ES0            BIT 0xac
0000            269   _ET1            BIT 0xab
0000            270   _EX1            BIT 0xaa
0000            271   _ET0            BIT 0xa9
0000            272   _EX0            BIT 0xa8
0000            273   _P3_0           BIT 0xb0
0000            274   _P3_1           BIT 0xb1
0000            275   _P3_2           BIT 0xb2
0000            276   _P3_3           BIT 0xb3
0000            277   _P3_4           BIT 0xb4
0000            278   _P3_5           BIT 0xb5
0000            279   _P3_6           BIT 0xb6
0000            280   _P3_7           BIT 0xb7
0000            281   _IP_7           BIT 0xbf
0000            282   _PSPI0          BIT 0xbe
0000            283   _PT2            BIT 0xbd
0000            284   _PS0            BIT 0xbc
0000            285   _PT1            BIT 0xbb
0000            286   _PX1            BIT 0xba
0000            287   _PT0            BIT 0xb9
0000            288   _PX0            BIT 0xb8
0000            289   _MASTER0        BIT 0xc7
0000            290   _TXMODE0        BIT 0xc6
0000            291   _STA0           BIT 0xc5
0000            292   _STO0           BIT 0xc4
0000            293   _ACKRQ0         BIT 0xc3
0000            294   _ARBLOST0       BIT 0xc2
0000            295   _ACK0           BIT 0xc1
0000            296   _SI0            BIT 0xc0
0000            297   _MASTER1        BIT 0xc7
0000            298   _TXMODE1        BIT 0xc6
0000            299   _STA1           BIT 0xc5
0000            300   _STO1           BIT 0xc4
0000            301   _ACKRQ1         BIT 0xc3
0000            302   _ARBLOST1       BIT 0xc2
0000            303   _ACK1           BIT 0xc1
0000            304   _SI1            BIT 0xc0
0000            305   _TF2            BIT 0xcf
0000            306   _TF2H           BIT 0xcf
0000            307   _TF2L           BIT 0xce
0000            308   _TF2LEN         BIT 0xcd
0000            309   _TF2CEN         BIT 0xcc
0000            310   _T2SPLIT        BIT 0xcb
0000            311   _TR2            BIT 0xca
0000            312   _T2CSS          BIT 0xc9
0000            313   _T2XCLK         BIT 0xc8
0000            314   _TF5H           BIT 0xcf
0000            315   _TF5L           BIT 0xce
0000            316   _TF5LEN         BIT 0xcd
0000            317   _TMR5CN_4       BIT 0xcc
0000            318   _T5SPLIT        BIT 0xcb
0000            319   _TR5            BIT 0xca
0000            320   _TMR5CN_1       BIT 0xc9
0000            321   _T5XCLK         BIT 0xc8
0000            322   _CY             BIT 0xd7
0000            323   _AC             BIT 0xd6
0000            324   _F0             BIT 0xd5
0000            325   _RS1            BIT 0xd4
0000            326   _RS0            BIT 0xd3
0000            327   _OV             BIT 0xd2
0000            328   _F1             BIT 0xd1
0000            329   _PARITY         BIT 0xd0
0000            330   _CF             BIT 0xdf
0000            331   _CR             BIT 0xde
0000            332   _PCA0CN_5       BIT 0xde
0000            333   _CCF4           BIT 0xdc
0000            334   _CCF3           BIT 0xdb
0000            335   _CCF2           BIT 0xda
0000            336   _CCF1           BIT 0xd9
0000            337   _CCF0           BIT 0xd8
0000            338   _ACC_7          BIT 0xe7
0000            339   _ACC_6          BIT 0xe6
0000            340   _ACC_5          BIT 0xe5
0000            341   _ACC_4          BIT 0xe4
0000            342   _ACC_3          BIT 0xe3
0000            343   _ACC_2          BIT 0xe2
0000            344   _ACC_1          BIT 0xe1
0000            345   _ACC_0          BIT 0xe0
0000            346   _AD0EN          BIT 0xef
0000            347   _AD0TM          BIT 0xee
0000            348   _AD0INT         BIT 0xed
0000            349   _AD0BUSY        BIT 0xec
0000            350   _AD0WINT        BIT 0xeb
0000            351   _AD0CM2         BIT 0xea
0000            352   _AD0CM1         BIT 0xe9
0000            353   _AD0CM0         BIT 0xe8
0000            354   _B_7            BIT 0xf7
0000            355   _B_6            BIT 0xf6
0000            356   _B_5            BIT 0xf5
0000            357   _B_4            BIT 0xf4
0000            358   _B_3            BIT 0xf3
0000            359   _B_2            BIT 0xf2
0000            360   _B_1            BIT 0xf1
0000            361   _B_0            BIT 0xf0
0000            362   _SPIF           BIT 0xff
0000            363   _WCOL           BIT 0xfe
0000            364   _MODF           BIT 0xfd
0000            365   _RXOVRN         BIT 0xfc
0000            366   _NSSMD1         BIT 0xfb
0000            367   _NSSMD0         BIT 0xfa
0000            368   _TXBMT          BIT 0xf9
0000            369   _SPIEN          BIT 0xf8
0000            370   ;--------------------------------------------------------
0000            371   ; overlayable register banks
0000            372   ;--------------------------------------------------------
0000            373            rbank0 segment data overlay
0000            374   ;--------------------------------------------------------
0000            375   ; internal ram data
0000            376   ;--------------------------------------------------------
0000            377            rseg R_DSEG
0000            378   _pwm_count:
0000            379            ds 1
0001            380   _mode:
0001            381            ds 1
0002            382   _pwm_both:
0002            383            ds 1
0003            384   _pwm_Left0:
0003            385            ds 1
0004            386   _pwm_Left1:
0004            387            ds 1
0005            388   _pwm_Right0:
0005            389            ds 1
0006            390   _pwm_Right1:
0006            391            ds 1
0007            392   _direction:
0007            393            ds 1
0008            394   _currentcmd:
0008            395            ds 1
0009            396   _currentstate:
0009            397            ds 1
000A            398   _main_v1_1_57:
000A            399            ds 4
000E            400   _main_v2_1_57:
000E            401            ds 4
0012            402   _main_sloc0_1_0:
0012            403            ds 2
0014            404   _main_sloc1_1_0:
0014            405            ds 4
0018            406   _main_sloc2_1_0:
0018            407            ds 4
001C            408   _linetrack_forwardbackward_1_84:
001C            409            ds 2
001E            410   _linetrack_vleft_1_85:
001E            411            ds 4
0022            412   _linetrack_vright_1_85:
0022            413            ds 4
0026            414   _linetrack_sloc0_1_0:
0026            415            ds 4
002A            416   _turncar_v_1_92:
002A            417            ds 4
002E            418   _turncar_direction_1_92:
002E            419            ds 1
002F            420   _uturn_vleft_1_98:
002F            421            ds 4
0033            422   _uturn_vright_1_98:
0033            423            ds 4
0037            424   ;--------------------------------------------------------
0037            425   ; overlayable items in internal ram 
0037            426   ;--------------------------------------------------------
0000            427            rseg    R_OSEG
0000            428            rseg    R_OSEG
0000            429   _movecar_PARM_2:
0000            430            ds 2
0002            431   ;--------------------------------------------------------
0002            432   ; indirectly addressable internal ram data
0002            433   ;--------------------------------------------------------
0000            434            rseg R_ISEG
0000            435   ;--------------------------------------------------------
0000            436   ; absolute internal ram data
0000            437   ;--------------------------------------------------------
0000            438            DSEG
0000            439   ;--------------------------------------------------------
0000            440   ; bit data
0000            441   ;--------------------------------------------------------
0000            442            rseg R_BSEG
0000            443   _Timer2_ISR_sloc0_1_0:
0000            444            DBIT    1
0001            445   ;--------------------------------------------------------
0001            446   ; paged external ram data
0001            447   ;--------------------------------------------------------
0000            448            rseg R_PSEG
0000            449   ;--------------------------------------------------------
0000            450   ; external ram data
0000            451   ;--------------------------------------------------------
0000            452            rseg R_XSEG
0000            453   ;--------------------------------------------------------
0000            454   ; absolute external ram data
0000            455   ;--------------------------------------------------------
0000            456            XSEG
0000            457   ;--------------------------------------------------------
0000            458   ; external initialized ram data
0000            459   ;--------------------------------------------------------
0000            460            rseg R_IXSEG
0000            461            rseg R_HOME
0000            462            rseg R_GSINIT
0000            463            rseg R_CSEG
0000            464   ;--------------------------------------------------------
0000            465   ; Reset entry point and interrupt vectors
0000            466   ;--------------------------------------------------------
0000            467            CSEG at 0x0000
0000 020100     468            ljmp    _crt0
002B            469            CSEG at 0x002b
002B 020100     470            ljmp    _Timer2_ISR
002E            471   ;--------------------------------------------------------
002E            472   ; global & static initialisations
002E            473   ;--------------------------------------------------------
0000            474            rseg R_HOME
0000            475            rseg R_GSINIT
0000            476            rseg R_GSINIT
0000            477   ;--------------------------------------------------------
0000            478   ; data variables initialization
0000            479   ;--------------------------------------------------------
0000            480            rseg R_DINIT
0000            481   ;        robot.c:10: volatile  char pwm_count=0;
0000 755800     482            mov     _pwm_count,#0x00
0003            483   ;        robot.c:11: volatile  char mode = 0;
0003 751800     484            mov     _mode,#0x00
0006            485   ;        robot.c:12: volatile  char pwm_both =0;
0006 75D800     486            mov     _pwm_both,#0x00
0009            487   ;        robot.c:13: volatile  char pwm_Left0 = 0; //p1.5
0009 759800     488            mov     _pwm_Left0,#0x00
000C            489   ;        robot.c:14: volatile  char pwm_Left1 = 0; //p1.6
000C 755800     490            mov     _pwm_Left1,#0x00
000F            491   ;        robot.c:15: volatile  char pwm_Right0 = 0; //p2.0
000F 751800     492            mov     _pwm_Right0,#0x00
0012            493   ;        robot.c:16: volatile  char pwm_Right1 = 0; //p2.1
0012 75D800     494            mov     _pwm_Right1,#0x00
0015            495   ;        robot.c:17: volatile  char direction = 0; // 1 for back 0 for forward
0015 759800     496            mov     _direction,#0x00
0018            497   ;        robot.c:19: volatile  char currentcmd = 0;
0018 755800     498            mov     _currentcmd,#0x00
001B            499   ;        robot.c:20: volatile  char currentstate = 1;
001B 751801     500            mov     _currentstate,#0x01
001E            501            ; The linker places a 'ret' at the end of segment R_DINIT.
001E            502   ;--------------------------------------------------------
001E            503   ; code
001E            504   ;--------------------------------------------------------
0000            505            rseg R_CSEG
0000            506   ;------------------------------------------------------------
0000            507   ;Allocation info for local variables in function 'main'
0000            508   ;------------------------------------------------------------
0000            509   ;v1                        Allocated with name '_main_v1_1_57'
0000            510   ;v2                        Allocated with name '_main_v2_1_57'
0000            511   ;i                         Allocated to registers 
0000            512   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0000            513   ;sloc1                     Allocated with name '_main_sloc1_1_0'
0000            514   ;sloc2                     Allocated with name '_main_sloc2_1_0'
0000            515   ;------------------------------------------------------------
0000            516   ;        robot.c:22: void main(void) {
0000            517   ;        -----------------------------------------
0000            518   ;         function main
0000            519   ;        -----------------------------------------
0000            520   _main:
0000            521            using   0
0000            522   ;        robot.c:24: volatile float v1 = 0;
0000 75E800     523            mov     _main_v1_1_57,#0x00
0003 75E900     524            mov     (_main_v1_1_57 + 1),#0x00
0006 75EA00     525            mov     (_main_v1_1_57 + 2),#0x00
0009 75EB00     526            mov     (_main_v1_1_57 + 3),#0x00
000C            527   ;        robot.c:25: volatile float v2 = 0;
000C 752800     528            mov     _main_v2_1_57,#0x00
000F 752900     529            mov     (_main_v2_1_57 + 1),#0x00
0012 752A00     530            mov     (_main_v2_1_57 + 2),#0x00
0015 752B00     531            mov     (_main_v2_1_57 + 3),#0x00
0018            532   ;        robot.c:28: MOTOR_LEFT0 =0;
0018 C295       533            clr     _P1_5
001A            534   ;        robot.c:29: MOTOR_LEFT1 =0;
001A C296       535            clr     _P1_6
001C            536   ;        robot.c:30: MOTOR_RIGHT0 =0;
001C C2A0       537            clr     _P2_0
001E            538   ;        robot.c:31: MOTOR_RIGHT1 =0;
001E C2A1       539            clr     _P2_1
0020            540   ;        robot.c:34: currentstate = 1;           //1-FORWARD, 2-BACKWARDS, 3-STOPPED, 4-DEBUGGER
0020 751801     541            mov     _currentstate,#0x01
0023            542   ;        robot.c:35: currentcmd = 0;             //0-NO COMMAND, 1-TURN LEFT, 2-TURN RIGHT, 3-FORWARDS, 4-BACKWARDS, 5-STOP, 6-UTURN
0023 755800     543            mov     _currentcmd,#0x00
0026            544   ;        robot.c:38: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0026 7428       545            mov     a,#__str_0
0028 C0E0       546            push    acc
002A 749A       547            mov     a,#(__str_0 >> 8)
002C C0E0       548            push    acc
002E 7480       549            mov     a,#0x80
0030 C0E0       550            push    acc
0032 120100     551            lcall   _printf
0035 1581       552            dec     sp
0037 1581       553            dec     sp
0039 1581       554            dec     sp
003B            555   ;        robot.c:41: InitPinADC(2, 3); // Configure P2.3 as analog input (tank1)
003B 750003     556            mov     _InitPinADC_PARM_2,#0x03
003E 758202     557            mov     dpl,#0x02
0041 120100     558            lcall   _InitPinADC
0044            559   ;        robot.c:42: InitPinADC(2, 4); // Configure P2.4 as analog input         (tank1)
0044 750004     560            mov     _InitPinADC_PARM_2,#0x04
0047 758202     561            mov     dpl,#0x02
004A 120100     562            lcall   _InitPinADC
004D            563   ;        robot.c:43: InitPinADC(2, 5); // Configure P2.5 as analog input (tank2)
004D 750005     564            mov     _InitPinADC_PARM_2,#0x05
0050 758202     565            mov     dpl,#0x02
0053 120100     566            lcall   _InitPinADC
0056            567   ;        robot.c:44: InitPinADC(2, 6); // Configure P2.6 as analog input (tank2)
0056 750006     568            mov     _InitPinADC_PARM_2,#0x06
0059 758202     569            mov     dpl,#0x02
005C 120100     570            lcall   _InitPinADC
005F            571   ;        robot.c:50: InitADC();
005F 120100     572            lcall   _InitADC
0062            573   ;        robot.c:54: while(1)
0062            574   L002029?:
0062            575   ;        robot.c:57: readData(); 
0062 120100     576            lcall   _readData
0065            577   ;        robot.c:59: printf("frontL %f frontR %f backL %f backR %f command %1d\r", Volts_at_Pin(LQFP32_MUX_P2_3),Volts_at_Pin(LQFP32_MUX_P2_4),Volts_at_Pin(LQFP32_MUX_P2_5),Volts_at_Pin(LQFP32_MUX_P2_6), currentcmd);
0065 855868     578            mov     _main_sloc0_1_0,_currentcmd
0068 E558       579            mov     a,_currentcmd
006A 33         580            rlc     a
006B 95E0       581            subb    a,acc
006D F569       582            mov     (_main_sloc0_1_0 + 1),a
006F 75820E     583            mov     dpl,#0x0E
0072 120100     584            lcall   _Volts_at_Pin
0075 AC82       585            mov     r4,dpl
0077 AD83       586            mov     r5,dph
0079 AEF0       587            mov     r6,b
007B FF         588            mov     r7,a
007C 75820D     589            mov     dpl,#0x0D
007F C004       590            push    ar4
0081 C005       591            push    ar5
0083 C006       592            push    ar6
0085 C007       593            push    ar7
0087 120100     594            lcall   _Volts_at_Pin
008A 8582A8     595            mov     _main_sloc1_1_0,dpl
008D 8583A9     596            mov     (_main_sloc1_1_0 + 1),dph
0090 85F0AA     597            mov     (_main_sloc1_1_0 + 2),b
0093 F5AB       598            mov     (_main_sloc1_1_0 + 3),a
0095 75820C     599            mov     dpl,#0x0C
0098 120100     600            lcall   _Volts_at_Pin
009B 8582E8     601            mov     _main_sloc2_1_0,dpl
009E 8583E9     602            mov     (_main_sloc2_1_0 + 1),dph
00A1 85F0EA     603            mov     (_main_sloc2_1_0 + 2),b
00A4 F5EB       604            mov     (_main_sloc2_1_0 + 3),a
00A6 75820B     605            mov     dpl,#0x0B
00A9 120100     606            lcall   _Volts_at_Pin
00AC AA82       607            mov     r2,dpl
00AE AB83       608            mov     r3,dph
00B0 A8F0       609            mov     r0,b
00B2 F9         610            mov     r1,a
00B3 D007       611            pop     ar7
00B5 D006       612            pop     ar6
00B7 D005       613            pop     ar5
00B9 D004       614            pop     ar4
00BB C068       615            push    _main_sloc0_1_0
00BD C069       616            push    (_main_sloc0_1_0 + 1)
00BF C004       617            push    ar4
00C1 C005       618            push    ar5
00C3 C006       619            push    ar6
00C5 C007       620            push    ar7
00C7 C0A8       621            push    _main_sloc1_1_0
00C9 C0A9       622            push    (_main_sloc1_1_0 + 1)
00CB C0AA       623            push    (_main_sloc1_1_0 + 2)
00CD C0AB       624            push    (_main_sloc1_1_0 + 3)
00CF C0E8       625            push    _main_sloc2_1_0
00D1 C0E9       626            push    (_main_sloc2_1_0 + 1)
00D3 C0EA       627            push    (_main_sloc2_1_0 + 2)
00D5 C0EB       628            push    (_main_sloc2_1_0 + 3)
00D7 C002       629            push    ar2
00D9 C003       630            push    ar3
00DB C000       631            push    ar0
00DD C001       632            push    ar1
00DF 7438       633            mov     a,#__str_1
00E1 C0E0       634            push    acc
00E3 749D       635            mov     a,#(__str_1 >> 8)
00E5 C0E0       636            push    acc
00E7 7480       637            mov     a,#0x80
00E9 C0E0       638            push    acc
00EB 120100     639            lcall   _printf
00EE E581       640            mov     a,sp
00F0 24EB       641            add     a,#0xeb
00F2 F581       642            mov     sp,a
00F4            643   ;        robot.c:62: switch (currentstate) {
00F4 AA18       644            mov     r2,_currentstate
00F6 BA0178     645            cjne    r2,#0x01,L002047?
00F9 8001       646            sjmp    L002001?
00FB            647   L002047?:
00FB BA02F8     648            cjne    r2,#0x02,L002048?
00FE 8001       649            sjmp    L002002?
0100            650   L002048?:
0100            651   ;        robot.c:63: case 1:
0100 BA0378     652            cjne    r2,#0x03,L002004?
0103 8001       653            sjmp    L002003?
0105            654   L002001?:
0105            655   ;        robot.c:64: linetrack(0);       //forwards
0105 900000     656            mov     dptr,#0x0000
0108 120100     657            lcall   _linetrack
010B            658   ;        robot.c:66: v1 = Volts_at_Pin(LQFP32_MUX_P2_3);
010B 75820B     659            mov     dpl,#0x0B
010E 120100     660            lcall   _Volts_at_Pin
0111 8582E8     661            mov     _main_v1_1_57,dpl
0114 8583E9     662            mov     (_main_v1_1_57 + 1),dph
0117 85F0EA     663            mov     (_main_v1_1_57 + 2),b
011A F5EB       664            mov     (_main_v1_1_57 + 3),a
011C            665   ;        robot.c:67: v2 = Volts_at_Pin(LQFP32_MUX_P2_4);
011C 75820C     666            mov     dpl,#0x0C
011F 120100     667            lcall   _Volts_at_Pin
0122 858228     668            mov     _main_v2_1_57,dpl
0125 858329     669            mov     (_main_v2_1_57 + 1),dph
0128 85F02A     670            mov     (_main_v2_1_57 + 2),b
012B F52B       671            mov     (_main_v2_1_57 + 3),a
012D            672   ;        robot.c:68: break;
012D            673   ;        robot.c:69: case 2:
012D 8001       674            sjmp    L002004?
012F            675   L002002?:
012F            676   ;        robot.c:70: linetrack(1);       //backwards
012F 900001     677            mov     dptr,#0x0001
0132 120100     678            lcall   _linetrack
0135            679   ;        robot.c:72: v2 = Volts_at_Pin(LQFP32_MUX_P2_5);
0135 75820D     680            mov     dpl,#0x0D
0138 120100     681            lcall   _Volts_at_Pin
013B 858228     682            mov     _main_v2_1_57,dpl
013E 858329     683            mov     (_main_v2_1_57 + 1),dph
0141 85F02A     684            mov     (_main_v2_1_57 + 2),b
0144 F52B       685            mov     (_main_v2_1_57 + 3),a
0146            686   ;        robot.c:73: v1 = Volts_at_Pin(LQFP32_MUX_P2_6);
0146 75820E     687            mov     dpl,#0x0E
0149 120100     688            lcall   _Volts_at_Pin
014C 8582E8     689            mov     _main_v1_1_57,dpl
014F 8583E9     690            mov     (_main_v1_1_57 + 1),dph
0152 85F0EA     691            mov     (_main_v1_1_57 + 2),b
0155 F5EB       692            mov     (_main_v1_1_57 + 3),a
0157            693   ;        robot.c:74: break;
0157            694   ;        robot.c:75: case 3:
0157 8001       695            sjmp    L002004?
0159            696   L002003?:
0159            697   ;        robot.c:76: stopcar();          //stop car
0159 120100     698            lcall   _stopcar
015C            699   ;        robot.c:78: }
015C            700   L002004?:
015C            701   ;        robot.c:81: switch (currentcmd) {
015C E558       702            mov     a,_currentcmd
015E FA         703            mov     r2,a
015F 30E7F8     704            jnb     acc.7,L002050?
0162 020100     705            ljmp    L002026?
0165            706   L002050?:
0165 C3         707            clr     c
0166 7486       708            mov     a,#(0x06 ^ 0x80)
0168 8AF0       709            mov     b,r2
016A 63F080     710            xrl     b,#0x80
016D 95F0       711            subb    a,b
016F 5001       712            jnc     L002051?
0171 020100     713            ljmp    L002026?
0174            714   L002051?:
0174 EA         715            mov     a,r2
0175 2A         716            add     a,r2
0176 2A         717            add     a,r2
0177 909FB8     718            mov     dptr,#L002052?
017A 73         719            jmp     @a+dptr
017B            720   L002052?:
017B 020100     721            ljmp    L002005?
017E 020100     722            ljmp    L002014?
0181 020100     723            ljmp    L002018?
0184 020100     724            ljmp    L002022?
0187 020100     725            ljmp    L002023?
018A 020100     726            ljmp    L002024?
018D 020100     727            ljmp    L002025?
0190            728   ;        robot.c:83: case 0 :
0190            729   L002005?:
0190            730   ;        robot.c:85: if (v1 > 0.6 && v2 >0.8) {
0190 749A       731            mov     a,#0x9A
0192 C0E0       732            push    acc
0194 7499       733            mov     a,#0x99
0196 C0E0       734            push    acc
0198 7419       735            mov     a,#0x19
019A C0E0       736            push    acc
019C 743F       737            mov     a,#0x3F
019E C0E0       738            push    acc
01A0 85E882     739            mov     dpl,_main_v1_1_57
01A3 85E983     740            mov     dph,(_main_v1_1_57 + 1)
01A6 85EAF0     741            mov     b,(_main_v1_1_57 + 2)
01A9 E5EB       742            mov     a,(_main_v1_1_57 + 3)
01AB 120100     743            lcall   ___fsgt
01AE AA82       744            mov     r2,dpl
01B0 E581       745            mov     a,sp
01B2 24FC       746            add     a,#0xfc
01B4 F581       747            mov     sp,a
01B6 EA         748            mov     a,r2
01B7 7001       749            jnz     L002053?
01B9 020100     750            ljmp    L002029?
01BC            751   L002053?:
01BC 74CD       752            mov     a,#0xCD
01BE C0E0       753            push    acc
01C0 74CC       754            mov     a,#0xCC
01C2 C0E0       755            push    acc
01C4 744C       756            mov     a,#0x4C
01C6 C0E0       757            push    acc
01C8 743F       758            mov     a,#0x3F
01CA C0E0       759            push    acc
01CC 852882     760            mov     dpl,_main_v2_1_57
01CF 852983     761            mov     dph,(_main_v2_1_57 + 1)
01D2 852AF0     762            mov     b,(_main_v2_1_57 + 2)
01D5 E52B       763            mov     a,(_main_v2_1_57 + 3)
01D7 120100     764            lcall   ___fsgt
01DA AA82       765            mov     r2,dpl
01DC E581       766            mov     a,sp
01DE 24FC       767            add     a,#0xfc
01E0 F581       768            mov     sp,a
01E2 EA         769            mov     a,r2
01E3 7001       770            jnz     L002054?
01E5 020100     771            ljmp    L002029?
01E8            772   L002054?:
01E8            773   ;        robot.c:86: printf("\nINTERSECTION\n");
01E8 7480       774            mov     a,#__str_2
01EA C0E0       775            push    acc
01EC 74A2       776            mov     a,#(__str_2 >> 8)
01EE C0E0       777            push    acc
01F0 7480       778            mov     a,#0x80
01F2 C0E0       779            push    acc
01F4 120100     780            lcall   _printf
01F7 1581       781            dec     sp
01F9 1581       782            dec     sp
01FB 1581       783            dec     sp
01FD            784   ;        robot.c:87: if (currentstate == 1) {
01FD 7401       785            mov     a,#0x01
01FF B518C0     786            cjne    a,_currentstate,L002055?
0202 8001       787            sjmp    L002056?
0204            788   L002055?:
0204 020100     789            ljmp    L002010?
0207            790   L002056?:
0207            791   ;        robot.c:88: if (Volts_at_Pin(LQFP32_MUX_P2_5)>Volts_at_Pin(LQFP32_MUX_P2_6)+0.3) {
0207 75820D     792            mov     dpl,#0x0D
020A 120100     793            lcall   _Volts_at_Pin
020D AA82       794            mov     r2,dpl
020F AB83       795            mov     r3,dph
0211 ACF0       796            mov     r4,b
0213 FD         797            mov     r5,a
0214 75820E     798            mov     dpl,#0x0E
0217 C002       799            push    ar2
0219 C003       800            push    ar3
021B C004       801            push    ar4
021D C005       802            push    ar5
021F 120100     803            lcall   _Volts_at_Pin
0222 AE82       804            mov     r6,dpl
0224 AF83       805            mov     r7,dph
0226 A8F0       806            mov     r0,b
0228 F9         807            mov     r1,a
0229 749A       808            mov     a,#0x9A
022B C0E0       809            push    acc
022D 7499       810            mov     a,#0x99
022F C0E0       811            push    acc
0231 C0E0       812            push    acc
0233 743E       813            mov     a,#0x3E
0235 C0E0       814            push    acc
0237 8E82       815            mov     dpl,r6
0239 8F83       816            mov     dph,r7
023B 88F0       817            mov     b,r0
023D E9         818            mov     a,r1
023E 120100     819            lcall   ___fsadd
0241 AE82       820            mov     r6,dpl
0243 AF83       821            mov     r7,dph
0245 A8F0       822            mov     r0,b
0247 F9         823            mov     r1,a
0248 E581       824            mov     a,sp
024A 24FC       825            add     a,#0xfc
024C F581       826            mov     sp,a
024E D005       827            pop     ar5
0250 D004       828            pop     ar4
0252 D003       829            pop     ar3
0254 D002       830            pop     ar2
0256 C006       831            push    ar6
0258 C007       832            push    ar7
025A C000       833            push    ar0
025C C001       834            push    ar1
025E 8A82       835            mov     dpl,r2
0260 8B83       836            mov     dph,r3
0262 8CF0       837            mov     b,r4
0264 ED         838            mov     a,r5
0265 120100     839            lcall   ___fsgt
0268 AA82       840            mov     r2,dpl
026A E581       841            mov     a,sp
026C 24FC       842            add     a,#0xfc
026E F581       843            mov     sp,a
0270 EA         844            mov     a,r2
0271 6001       845            jz      L002007?
0273            846   ;        robot.c:89: pwm_Left1 = 25;
0273 755819     847            mov     _pwm_Left1,#0x19
0276            848   ;        robot.c:90: pwm_Left0 = -1;
0276 7598FF     849            mov     _pwm_Left0,#0xFF
0279            850   ;        robot.c:91: pwm_Right0 = 50;
0279 751832     851            mov     _pwm_Right0,#0x32
027C            852   ;        robot.c:92: pwm_Right1 = -1;
027C 75D8FF     853            mov     _pwm_Right1,#0xFF
027F 8001       854            sjmp    L002010?
0281            855   L002007?:
0281            856   ;        robot.c:95: pwm_Left1 = 50;
0281 755832     857            mov     _pwm_Left1,#0x32
0284            858   ;        robot.c:96: pwm_Left0 = -1;
0284 7598FF     859            mov     _pwm_Left0,#0xFF
0287            860   ;        robot.c:97: pwm_Right0 = 25;
0287 751819     861            mov     _pwm_Right0,#0x19
028A            862   ;        robot.c:98: pwm_Right1 = -1;
028A 75D8FF     863            mov     _pwm_Right1,#0xFF
028D            864   L002010?:
028D            865   ;        robot.c:103: waitms(1500);
028D 9005DC     866            mov     dptr,#0x05DC
0290 120100     867            lcall   _waitms
0293            868   ;        robot.c:105: break;
0293 020100     869            ljmp    L002029?
0296            870   ;        robot.c:107: case 1 :
0296            871   L002014?:
0296            872   ;        robot.c:109: if (v1 > 0.7 && v2 >1)  {
0296 7433       873            mov     a,#0x33
0298 C0E0       874            push    acc
029A C0E0       875            push    acc
029C C0E0       876            push    acc
029E 743F       877            mov     a,#0x3F
02A0 C0E0       878            push    acc
02A2 85E882     879            mov     dpl,_main_v1_1_57
02A5 85E983     880            mov     dph,(_main_v1_1_57 + 1)
02A8 85EAF0     881            mov     b,(_main_v1_1_57 + 2)
02AB E5EB       882            mov     a,(_main_v1_1_57 + 3)
02AD 120100     883            lcall   ___fsgt
02B0 AA82       884            mov     r2,dpl
02B2 E581       885            mov     a,sp
02B4 24FC       886            add     a,#0xfc
02B6 F581       887            mov     sp,a
02B8 EA         888            mov     a,r2
02B9 7001       889            jnz     L002058?
02BB 020100     890            ljmp    L002029?
02BE            891   L002058?:
02BE E4         892            clr     a
02BF C0E0       893            push    acc
02C1 C0E0       894            push    acc
02C3 7480       895            mov     a,#0x80
02C5 C0E0       896            push    acc
02C7 743F       897            mov     a,#0x3F
02C9 C0E0       898            push    acc
02CB 852882     899            mov     dpl,_main_v2_1_57
02CE 852983     900            mov     dph,(_main_v2_1_57 + 1)
02D1 852AF0     901            mov     b,(_main_v2_1_57 + 2)
02D4 E52B       902            mov     a,(_main_v2_1_57 + 3)
02D6 120100     903            lcall   ___fsgt
02D9 AA82       904            mov     r2,dpl
02DB E581       905            mov     a,sp
02DD 24FC       906            add     a,#0xfc
02DF F581       907            mov     sp,a
02E1 EA         908            mov     a,r2
02E2 7001       909            jnz     L002059?
02E4 020100     910            ljmp    L002029?
02E7            911   L002059?:
02E7            912   ;        robot.c:110: printf("\n\r INTERSECTION\n");
02E7 74C0       913            mov     a,#__str_3
02E9 C0E0       914            push    acc
02EB 74A4       915            mov     a,#(__str_3 >> 8)
02ED C0E0       916            push    acc
02EF 7480       917            mov     a,#0x80
02F1 C0E0       918            push    acc
02F3 120100     919            lcall   _printf
02F6 1581       920            dec     sp
02F8 1581       921            dec     sp
02FA 1581       922            dec     sp
02FC            923   ;        robot.c:116: turncar(0); //0 = left
02FC 900000     924            mov     dptr,#0x0000
02FF 120100     925            lcall   _turncar
0302            926   ;        robot.c:117: currentcmd = 0;
0302 755800     927            mov     _currentcmd,#0x00
0305            928   ;        robot.c:119: break;
0305 020100     929            ljmp    L002029?
0308            930   ;        robot.c:122: case 2 :
0308            931   L002018?:
0308            932   ;        robot.c:124: if (v1 > 0.7 && v2 >1) {
0308 7433       933            mov     a,#0x33
030A C0E0       934            push    acc
030C C0E0       935            push    acc
030E C0E0       936            push    acc
0310 743F       937            mov     a,#0x3F
0312 C0E0       938            push    acc
0314 85E882     939            mov     dpl,_main_v1_1_57
0317 85E983     940            mov     dph,(_main_v1_1_57 + 1)
031A 85EAF0     941            mov     b,(_main_v1_1_57 + 2)
031D E5EB       942            mov     a,(_main_v1_1_57 + 3)
031F 120100     943            lcall   ___fsgt
0322 AA82       944            mov     r2,dpl
0324 E581       945            mov     a,sp
0326 24FC       946            add     a,#0xfc
0328 F581       947            mov     sp,a
032A EA         948            mov     a,r2
032B 7001       949            jnz     L002060?
032D 020100     950            ljmp    L002029?
0330            951   L002060?:
0330 E4         952            clr     a
0331 C0E0       953            push    acc
0333 C0E0       954            push    acc
0335 7480       955            mov     a,#0x80
0337 C0E0       956            push    acc
0339 743F       957            mov     a,#0x3F
033B C0E0       958            push    acc
033D 852882     959            mov     dpl,_main_v2_1_57
0340 852983     960            mov     dph,(_main_v2_1_57 + 1)
0343 852AF0     961            mov     b,(_main_v2_1_57 + 2)
0346 E52B       962            mov     a,(_main_v2_1_57 + 3)
0348 120100     963            lcall   ___fsgt
034B AA82       964            mov     r2,dpl
034D E581       965            mov     a,sp
034F 24FC       966            add     a,#0xfc
0351 F581       967            mov     sp,a
0353 EA         968            mov     a,r2
0354 7001       969            jnz     L002061?
0356 020100     970            ljmp    L002029?
0359            971   L002061?:
0359            972   ;        robot.c:125: printf("\n\r INTERSECTION\n");
0359 74C0       973            mov     a,#__str_3
035B C0E0       974            push    acc
035D 74A4       975            mov     a,#(__str_3 >> 8)
035F C0E0       976            push    acc
0361 7480       977            mov     a,#0x80
0363 C0E0       978            push    acc
0365 120100     979            lcall   _printf
0368 1581       980            dec     sp
036A 1581       981            dec     sp
036C 1581       982            dec     sp
036E            983   ;        robot.c:131: turncar(1); //1 = right
036E 900001     984            mov     dptr,#0x0001
0371 120100     985            lcall   _turncar
0374            986   ;        robot.c:132: currentcmd = 0;
0374 755800     987            mov     _currentcmd,#0x00
0377            988   ;        robot.c:134: break;
0377 020100     989            ljmp    L002029?
037A            990   ;        robot.c:137: case 3 :
037A            991   L002022?:
037A            992   ;        robot.c:139: currentstate = 1;
037A 751801     993            mov     _currentstate,#0x01
037D            994   ;        robot.c:140: currentcmd = 0;
037D 755800     995            mov     _currentcmd,#0x00
0380            996   ;        robot.c:141: break;
0380 020100     997            ljmp    L002029?
0383            998   ;        robot.c:144: case 4 :
0383            999   L002023?:
0383           1000   ;        robot.c:146: currentstate = 2;
0383 751802    1001            mov     _currentstate,#0x02
0386           1002   ;        robot.c:147: currentcmd = 0;
0386 755800    1003            mov     _currentcmd,#0x00
0389           1004   ;        robot.c:148: break;
0389 020100    1005            ljmp    L002029?
038C           1006   ;        robot.c:151: case 5 :
038C           1007   L002024?:
038C           1008   ;        robot.c:153: currentstate = 3;
038C 751803    1009            mov     _currentstate,#0x03
038F           1010   ;        robot.c:154: currentcmd = 0;
038F 755800    1011            mov     _currentcmd,#0x00
0392           1012   ;        robot.c:155: break;
0392 020100    1013            ljmp    L002029?
0395           1014   ;        robot.c:158: case 6 :
0395           1015   L002025?:
0395           1016   ;        robot.c:159: uturn();
0395 120100    1017            lcall   _uturn
0398           1018   ;        robot.c:160: currentcmd = 0;
0398 755800    1019            mov     _currentcmd,#0x00
039B           1020   ;        robot.c:161: break;
039B 020100    1021            ljmp    L002029?
039E           1022   ;        robot.c:164: default: 
039E           1023   L002026?:
039E           1024   ;        robot.c:165: currentstate = 1;
039E 751801    1025            mov     _currentstate,#0x01
03A1           1026   ;        robot.c:166: }
03A1 020100    1027            ljmp    L002029?
03A4           1028   ;------------------------------------------------------------
03A4           1029   ;Allocation info for local variables in function 'Timer2_ISR'
03A4           1030   ;------------------------------------------------------------
03A4           1031   ;------------------------------------------------------------
03A4           1032   ;        robot.c:170: void Timer2_ISR (void) interrupt 5 {
03A4           1033   ;        -----------------------------------------
03A4           1034   ;         function Timer2_ISR
03A4           1035   ;        -----------------------------------------
03A4           1036   _Timer2_ISR:
03A4 C0E0      1037            push    acc
03A6 C0F0      1038            push    b
03A8 C0D0      1039            push    psw
03AA 75D000    1040            mov     psw,#0x00
03AD           1041   ;        robot.c:171: TF2H = 0; // Clear Timer2 interrupt flag
03AD C2CF      1042            clr     _TF2H
03AF           1043   ;        robot.c:173: pwm_count++;
03AF 0558      1044            inc     _pwm_count
03B1           1045   ;        robot.c:174: if(pwm_count>100) pwm_count=0;
03B1 C3        1046            clr     c
03B2 74E4      1047            mov     a,#(0x64 ^ 0x80)
03B4 8558F0    1048            mov     b,_pwm_count
03B7 63F080    1049            xrl     b,#0x80
03BA 95F0      1050            subb    a,b
03BC 5001      1051            jnc     L003002?
03BE 755800    1052            mov     _pwm_count,#0x00
03C1           1053   L003002?:
03C1           1054   ;        robot.c:177: MOTOR_LEFT0 = pwm_count > pwm_Left0 ? 0 : 1; //p1.5
03C1 C3        1055            clr     c
03C2 E598      1056            mov     a,_pwm_Left0
03C4 6480      1057            xrl     a,#0x80
03C6 8558F0    1058            mov     b,_pwm_count
03C9 63F080    1059            xrl     b,#0x80
03CC 95F0      1060            subb    a,b
03CE 92A8      1061            mov  _Timer2_ISR_sloc0_1_0,c
03D0 B3        1062            cpl     c
03D1 9295      1063            mov     _P1_5,c
03D3           1064   ;        robot.c:178: MOTOR_LEFT1 = pwm_count > pwm_Left1 ? 0 : 1; //p1.6
03D3 C3        1065            clr     c
03D4 E558      1066            mov     a,_pwm_Left1
03D6 6480      1067            xrl     a,#0x80
03D8 8558F0    1068            mov     b,_pwm_count
03DB 63F080    1069            xrl     b,#0x80
03DE 95F0      1070            subb    a,b
03E0 92A8      1071            mov  _Timer2_ISR_sloc0_1_0,c
03E2 B3        1072            cpl     c
03E3 9296      1073            mov     _P1_6,c
03E5           1074   ;        robot.c:179: MOTOR_RIGHT0 = pwm_count > pwm_Right0 ? 0 : 1; //p2.0
03E5 C3        1075            clr     c
03E6 E518      1076            mov     a,_pwm_Right0
03E8 6480      1077            xrl     a,#0x80
03EA 8558F0    1078            mov     b,_pwm_count
03ED 63F080    1079            xrl     b,#0x80
03F0 95F0      1080            subb    a,b
03F2 92A8      1081            mov  _Timer2_ISR_sloc0_1_0,c
03F4 B3        1082            cpl     c
03F5 92A0      1083            mov     _P2_0,c
03F7           1084   ;        robot.c:180: MOTOR_RIGHT1 = pwm_count > pwm_Right1 ? 0 : 1; //p2.1
03F7 C3        1085            clr     c
03F8 E5D8      1086            mov     a,_pwm_Right1
03FA 6480      1087            xrl     a,#0x80
03FC 8558F0    1088            mov     b,_pwm_count
03FF 63F080    1089            xrl     b,#0x80
0402 95F0      1090            subb    a,b
0404 92A8      1091            mov  _Timer2_ISR_sloc0_1_0,c
0406 B3        1092            cpl     c
0407 92A1      1093            mov     _P2_1,c
0409 D0D0      1094            pop     psw
040B D0F0      1095            pop     b
040D D0E0      1096            pop     acc
040F 32        1097            reti
0410           1098   ;        eliminated unneeded push/pop dpl
0410           1099   ;        eliminated unneeded push/pop dph
0410           1100   ;------------------------------------------------------------
0410           1101   ;Allocation info for local variables in function 'forward_backward'
0410           1102   ;------------------------------------------------------------
0410           1103   ;direction                 Allocated to registers r2 
0410           1104   ;------------------------------------------------------------
0410           1105   ;        robot.c:187: void forward_backward(unsigned char direction) {
0410           1106   ;        -----------------------------------------
0410           1107   ;         function forward_backward
0410           1108   ;        -----------------------------------------
0410           1109   _forward_backward:
0410           1110   ;        robot.c:188: if (direction == 0) { //p2.1,1.6 on
0410 E582      1111            mov     a,dpl
0412 FA        1112            mov     r2,a
0413 7001      1113            jnz     L004004?
0415           1114   ;        robot.c:189: pwm_Left0 = pwm_Right0 = -1;
0415 7518FF    1115            mov     _pwm_Right0,#0xFF
0418 7598FF    1116            mov     _pwm_Left0,#0xFF
041B           1117   ;        robot.c:190: pwm_Left1 = pwm_Right1 = pwm_both;  //MOTOR_LEFT1 = MOTOR_RIGHT1 = pwm_both;
041B 85D8D8    1118            mov     _pwm_Right1,_pwm_both
041E 85D858    1119            mov     _pwm_Left1,_pwm_both
0421 22        1120            ret
0422           1121   L004004?:
0422           1122   ;        robot.c:193: else if (direction == 1) { //p2.0,1.5 on
0422 BA0140    1123            cjne    r2,#0x01,L004006?
0425           1124   ;        robot.c:194: pwm_Left1 = pwm_Right1 = -1;
0425 75D8FF    1125            mov     _pwm_Right1,#0xFF
0428 7558FF    1126            mov     _pwm_Left1,#0xFF
042B           1127   ;        robot.c:195: pwm_Left0 = pwm_Right0 = pwm_both; 
042B 85D818    1128            mov     _pwm_Right0,_pwm_both
042E 85D898    1129            mov     _pwm_Left0,_pwm_both
0431           1130   L004006?:
0431 22        1131            ret
0432           1132   ;------------------------------------------------------------
0432           1133   ;Allocation info for local variables in function 'readData'
0432           1134   ;------------------------------------------------------------
0432           1135   ;commandflag               Allocated to registers r2 r3 
0432           1136   ;------------------------------------------------------------
0432           1137   ;        robot.c:206: void readData (void) {
0432           1138   ;        -----------------------------------------
0432           1139   ;         function readData
0432           1140   ;        -----------------------------------------
0432           1141   _readData:
0432           1142   ;        robot.c:207: int commandflag = 0;                                       //determines if there's a real command coming in or not
0432 7A00      1143            mov     r2,#0x00
0434 7B00      1144            mov     r3,#0x00
0436           1145   ;        robot.c:210: if (COMMAND_PIN == 0) {                                    //0---
0436 309080    1146            jnb     _P1_0,L005039?
0439 020100    1147            ljmp    L005022?
043C           1148   L005039?:
043C           1149   ;        robot.c:211: waitms(CMDFRQ*1.5);
043C 900069    1150            mov     dptr,#0x0069
043F C002      1151            push    ar2
0441 C003      1152            push    ar3
0443 120100    1153            lcall   _waitms
0446 D003      1154            pop     ar3
0448 D002      1155            pop     ar2
044A           1156   ;        robot.c:212: if (COMMAND_PIN == 1) {                            //01--
044A 309000    1157            jnb     _P1_0,L005019?
044D           1158   ;        robot.c:213: waitms(CMDFRQ);
044D 900046    1159            mov     dptr,#0x0046
0450 C002      1160            push    ar2
0452 C003      1161            push    ar3
0454 120100    1162            lcall   _waitms
0457 D003      1163            pop     ar3
0459 D002      1164            pop     ar2
045B           1165   ;        robot.c:214: if (COMMAND_PIN == 0) {                    //010-
045B 209040    1166            jb      _P1_0,L005007?
045E           1167   ;        robot.c:215: waitms(CMDFRQ);
045E 900046    1168            mov     dptr,#0x0046
0461 C002      1169            push    ar2
0463 C003      1170            push    ar3
0465 120100    1171            lcall   _waitms
0468 D003      1172            pop     ar3
046A D002      1173            pop     ar2
046C           1174   ;        robot.c:216: if (COMMAND_PIN == 0)      currentcmd = 4;         //0100  
046C 209080    1175            jb      _P1_0,L005002?
046F 755804    1176            mov     _currentcmd,#0x04
0472 8001      1177            sjmp    L005022?
0474           1178   L005002?:
0474           1179   ;        robot.c:217: else                                       currentcmd = 5;         //0101
0474 755805    1180            mov     _currentcmd,#0x05
0477 8001      1181            sjmp    L005022?
0479           1182   L005007?:
0479           1183   ;        robot.c:220: waitms(CMDFRQ);
0479 900046    1184            mov     dptr,#0x0046
047C C002      1185            push    ar2
047E C003      1186            push    ar3
0480 120100    1187            lcall   _waitms
0483 D003      1188            pop     ar3
0485 D002      1189            pop     ar2
0487           1190   ;        robot.c:221: if (COMMAND_PIN == 0)      currentcmd = 6;         //0110
0487 2090C0    1191            jb      _P1_0,L005022?
048A 755806    1192            mov     _currentcmd,#0x06
048D 8001      1193            sjmp    L005022?
048F           1194   L005019?:
048F           1195   ;        robot.c:225: waitms(CMDFRQ);
048F 900046    1196            mov     dptr,#0x0046
0492 C002      1197            push    ar2
0494 C003      1198            push    ar3
0496 120100    1199            lcall   _waitms
0499 D003      1200            pop     ar3
049B D002      1201            pop     ar2
049D           1202   ;        robot.c:226: if (COMMAND_PIN == 1) {                    //001-
049D 3090C0    1203            jnb     _P1_0,L005016?
04A0           1204   ;        robot.c:227: waitms(CMDFRQ);
04A0 900046    1205            mov     dptr,#0x0046
04A3 C002      1206            push    ar2
04A5 C003      1207            push    ar3
04A7 120100    1208            lcall   _waitms
04AA D003      1209            pop     ar3
04AC D002      1210            pop     ar2
04AE           1211   ;        robot.c:228: if (COMMAND_PIN == 1)      currentcmd = 3;         //0011
04AE 309000    1212            jnb     _P1_0,L005010?
04B1 755803    1213            mov     _currentcmd,#0x03
04B4 8001      1214            sjmp    L005022?
04B6           1215   L005010?:
04B6           1216   ;        robot.c:229: else                                       currentcmd = 2;         //0010
04B6 755802    1217            mov     _currentcmd,#0x02
04B9 8001      1218            sjmp    L005022?
04BB           1219   L005016?:
04BB           1220   ;        robot.c:232: waitms(CMDFRQ);
04BB 900046    1221            mov     dptr,#0x0046
04BE C002      1222            push    ar2
04C0 C003      1223            push    ar3
04C2 120100    1224            lcall   _waitms
04C5 D003      1225            pop     ar3
04C7 D002      1226            pop     ar2
04C9           1227   ;        robot.c:233: if (COMMAND_PIN == 1)      currentcmd = 1; //0001
04C9 309040    1228            jnb     _P1_0,L005013?
04CC 755801    1229            mov     _currentcmd,#0x01
04CF 8001      1230            sjmp    L005022?
04D1           1231   L005013?:
04D1           1232   ;        robot.c:235: commandflag = 1;
04D1 7A01      1233            mov     r2,#0x01
04D3 7B00      1234            mov     r3,#0x00
04D5           1235   L005022?:
04D5           1236   ;        robot.c:242: if (commandflag == 0)      {while (COMMAND_PIN == 0);} 
04D5 EA        1237            mov     a,r2
04D6 4B        1238            orl     a,r3
04D7 7001      1239            jnz     L005028?
04D9           1240   L005023?:
04D9 3090C0    1241            jnb     _P1_0,L005023?
04DC           1242   L005028?:
04DC 22        1243            ret
04DD           1244   ;------------------------------------------------------------
04DD           1245   ;Allocation info for local variables in function 'linetrack'
04DD           1246   ;------------------------------------------------------------
04DD           1247   ;forwardbackward           Allocated with name '_linetrack_forwardbackward_1_84'
04DD           1248   ;vleft                     Allocated with name '_linetrack_vleft_1_85'
04DD           1249   ;vright                    Allocated with name '_linetrack_vright_1_85'
04DD           1250   ;sloc0                     Allocated with name '_linetrack_sloc0_1_0'
04DD           1251   ;------------------------------------------------------------
04DD           1252   ;        robot.c:252: void linetrack (int forwardbackward) {
04DD           1253   ;        -----------------------------------------
04DD           1254   ;         function linetrack
04DD           1255   ;        -----------------------------------------
04DD           1256   _linetrack:
04DD 858238    1257            mov     _linetrack_forwardbackward_1_84,dpl
04E0 858339    1258            mov     (_linetrack_forwardbackward_1_84 + 1),dph
04E3           1259   ;        robot.c:258: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
04E3 75820B    1260            mov     dpl,#0x0B
04E6 120100    1261            lcall   _Volts_at_Pin
04E9 858288    1262            mov     _linetrack_vleft_1_85,dpl
04EC 858389    1263            mov     (_linetrack_vleft_1_85 + 1),dph
04EF 85F08A    1264            mov     (_linetrack_vleft_1_85 + 2),b
04F2 F58B      1265            mov     (_linetrack_vleft_1_85 + 3),a
04F4           1266   ;        robot.c:259: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
04F4 75820C    1267            mov     dpl,#0x0C
04F7 120100    1268            lcall   _Volts_at_Pin
04FA 8582D8    1269            mov     _linetrack_vright_1_85,dpl
04FD 8583D9    1270            mov     (_linetrack_vright_1_85 + 1),dph
0500 85F0DA    1271            mov     (_linetrack_vright_1_85 + 2),b
0503 F5DB      1272            mov     (_linetrack_vright_1_85 + 3),a
0505           1273   ;        robot.c:262: if (forwardbackward == 2) {
0505 7402      1274            mov     a,#0x02
0507 B53800    1275            cjne    a,_linetrack_forwardbackward_1_84,L006013?
050A E4        1276            clr     a
050B B53900    1277            cjne    a,(_linetrack_forwardbackward_1_84 + 1),L006013?
050E 8001      1278            sjmp    L006014?
0510           1279   L006013?:
0510 8001      1280            sjmp    L006002?
0512           1281   L006014?:
0512           1282   ;        robot.c:263: vleft=Volts_at_Pin(LQFP32_MUX_P2_5);
0512 75820D    1283            mov     dpl,#0x0D
0515 120100    1284            lcall   _Volts_at_Pin
0518 858288    1285            mov     _linetrack_vleft_1_85,dpl
051B 858389    1286            mov     (_linetrack_vleft_1_85 + 1),dph
051E 85F08A    1287            mov     (_linetrack_vleft_1_85 + 2),b
0521 F58B      1288            mov     (_linetrack_vleft_1_85 + 3),a
0523           1289   ;        robot.c:264: vright=Volts_at_Pin(LQFP32_MUX_P2_6);
0523 75820E    1290            mov     dpl,#0x0E
0526 120100    1291            lcall   _Volts_at_Pin
0529 8582D8    1292            mov     _linetrack_vright_1_85,dpl
052C 8583D9    1293            mov     (_linetrack_vright_1_85 + 1),dph
052F 85F0DA    1294            mov     (_linetrack_vright_1_85 + 2),b
0532 F5DB      1295            mov     (_linetrack_vright_1_85 + 3),a
0534           1296   L006002?:
0534           1297   ;        robot.c:268: pwm_Left0 = -1;
0534 7598FF    1298            mov     _pwm_Left0,#0xFF
0537           1299   ;        robot.c:269: pwm_Left1 = vright*vright*75/(vright*vright+vleft*vleft);
0537 C0D8      1300            push    _linetrack_vright_1_85
0539 C0D9      1301            push    (_linetrack_vright_1_85 + 1)
053B C0DA      1302            push    (_linetrack_vright_1_85 + 2)
053D C0DB      1303            push    (_linetrack_vright_1_85 + 3)
053F 85D882    1304            mov     dpl,_linetrack_vright_1_85
0542 85D983    1305            mov     dph,(_linetrack_vright_1_85 + 1)
0545 85DAF0    1306            mov     b,(_linetrack_vright_1_85 + 2)
0548 E5DB      1307            mov     a,(_linetrack_vright_1_85 + 3)
054A 120100    1308            lcall   ___fsmul
054D AC82      1309            mov     r4,dpl
054F AD83      1310            mov     r5,dph
0551 AEF0      1311            mov     r6,b
0553 FF        1312            mov     r7,a
0554 E581      1313            mov     a,sp
0556 24FC      1314            add     a,#0xfc
0558 F581      1315            mov     sp,a
055A C004      1316            push    ar4
055C C005      1317            push    ar5
055E C006      1318            push    ar6
0560 C007      1319            push    ar7
0562 900000    1320            mov     dptr,#0x0000
0565 75F096    1321            mov     b,#0x96
0568 7442      1322            mov     a,#0x42
056A 120100    1323            lcall   ___fsmul
056D AC82      1324            mov     r4,dpl
056F AD83      1325            mov     r5,dph
0571 AEF0      1326            mov     r6,b
0573 FF        1327            mov     r7,a
0574 E581      1328            mov     a,sp
0576 24FC      1329            add     a,#0xfc
0578 F581      1330            mov     sp,a
057A C004      1331            push    ar4
057C C005      1332            push    ar5
057E C006      1333            push    ar6
0580 C007      1334            push    ar7
0582 C0D8      1335            push    _linetrack_vright_1_85
0584 C0D9      1336            push    (_linetrack_vright_1_85 + 1)
0586 C0DA      1337            push    (_linetrack_vright_1_85 + 2)
0588 C0DB      1338            push    (_linetrack_vright_1_85 + 3)
058A 85D882    1339            mov     dpl,_linetrack_vright_1_85
058D 85D983    1340            mov     dph,(_linetrack_vright_1_85 + 1)
0590 85DAF0    1341            mov     b,(_linetrack_vright_1_85 + 2)
0593 E5DB      1342            mov     a,(_linetrack_vright_1_85 + 3)
0595 120100    1343            lcall   ___fsmul
0598 858228    1344            mov     _linetrack_sloc0_1_0,dpl
059B 858329    1345            mov     (_linetrack_sloc0_1_0 + 1),dph
059E 85F02A    1346            mov     (_linetrack_sloc0_1_0 + 2),b
05A1 F52B      1347            mov     (_linetrack_sloc0_1_0 + 3),a
05A3 E581      1348            mov     a,sp
05A5 24FC      1349            add     a,#0xfc
05A7 F581      1350            mov     sp,a
05A9 C088      1351            push    _linetrack_vleft_1_85
05AB C089      1352            push    (_linetrack_vleft_1_85 + 1)
05AD C08A      1353            push    (_linetrack_vleft_1_85 + 2)
05AF C08B      1354            push    (_linetrack_vleft_1_85 + 3)
05B1 858882    1355            mov     dpl,_linetrack_vleft_1_85
05B4 858983    1356            mov     dph,(_linetrack_vleft_1_85 + 1)
05B7 858AF0    1357            mov     b,(_linetrack_vleft_1_85 + 2)
05BA E58B      1358            mov     a,(_linetrack_vleft_1_85 + 3)
05BC 120100    1359            lcall   ___fsmul
05BF AA82      1360            mov     r2,dpl
05C1 AB83      1361            mov     r3,dph
05C3 A8F0      1362            mov     r0,b
05C5 F9        1363            mov     r1,a
05C6 E581      1364            mov     a,sp
05C8 24FC      1365            add     a,#0xfc
05CA F581      1366            mov     sp,a
05CC C002      1367            push    ar2
05CE C003      1368            push    ar3
05D0 C000      1369            push    ar0
05D2 C001      1370            push    ar1
05D4 852882    1371            mov     dpl,_linetrack_sloc0_1_0
05D7 852983    1372            mov     dph,(_linetrack_sloc0_1_0 + 1)
05DA 852AF0    1373            mov     b,(_linetrack_sloc0_1_0 + 2)
05DD E52B      1374            mov     a,(_linetrack_sloc0_1_0 + 3)
05DF 120100    1375            lcall   ___fsadd
05E2 AA82      1376            mov     r2,dpl
05E4 AB83      1377            mov     r3,dph
05E6 A8F0      1378            mov     r0,b
05E8 F9        1379            mov     r1,a
05E9 E581      1380            mov     a,sp
05EB 24FC      1381            add     a,#0xfc
05ED F581      1382            mov     sp,a
05EF D007      1383            pop     ar7
05F1 D006      1384            pop     ar6
05F3 D005      1385            pop     ar5
05F5 D004      1386            pop     ar4
05F7 C002      1387            push    ar2
05F9 C003      1388            push    ar3
05FB C000      1389            push    ar0
05FD C001      1390            push    ar1
05FF 8C82      1391            mov     dpl,r4
0601 8D83      1392            mov     dph,r5
0603 8EF0      1393            mov     b,r6
0605 EF        1394            mov     a,r7
0606 120100    1395            lcall   ___fsdiv
0609 AA82      1396            mov     r2,dpl
060B AB83      1397            mov     r3,dph
060D ACF0      1398            mov     r4,b
060F FD        1399            mov     r5,a
0610 E581      1400            mov     a,sp
0612 24FC      1401            add     a,#0xfc
0614 F581      1402            mov     sp,a
0616 8A82      1403            mov     dpl,r2
0618 8B83      1404            mov     dph,r3
061A 8CF0      1405            mov     b,r4
061C ED        1406            mov     a,r5
061D 120100    1407            lcall   ___fs2schar
0620 858258    1408            mov     _pwm_Left1,dpl
0623           1409   ;        robot.c:270: pwm_Right1 = -1;
0623 75D8FF    1410            mov     _pwm_Right1,#0xFF
0626           1411   ;        robot.c:271: pwm_Right0 = vleft*vleft*75/(vright*vright+vleft*vleft);
0626 C088      1412            push    _linetrack_vleft_1_85
0628 C089      1413            push    (_linetrack_vleft_1_85 + 1)
062A C08A      1414            push    (_linetrack_vleft_1_85 + 2)
062C C08B      1415            push    (_linetrack_vleft_1_85 + 3)
062E 858882    1416            mov     dpl,_linetrack_vleft_1_85
0631 858983    1417            mov     dph,(_linetrack_vleft_1_85 + 1)
0634 858AF0    1418            mov     b,(_linetrack_vleft_1_85 + 2)
0637 E58B      1419            mov     a,(_linetrack_vleft_1_85 + 3)
0639 120100    1420            lcall   ___fsmul
063C AA82      1421            mov     r2,dpl
063E AB83      1422            mov     r3,dph
0640 ACF0      1423            mov     r4,b
0642 FD        1424            mov     r5,a
0643 E581      1425            mov     a,sp
0645 24FC      1426            add     a,#0xfc
0647 F581      1427            mov     sp,a
0649 C002      1428            push    ar2
064B C003      1429            push    ar3
064D C004      1430            push    ar4
064F C005      1431            push    ar5
0651 900000    1432            mov     dptr,#0x0000
0654 75F096    1433            mov     b,#0x96
0657 7442      1434            mov     a,#0x42
0659 120100    1435            lcall   ___fsmul
065C AA82      1436            mov     r2,dpl
065E AB83      1437            mov     r3,dph
0660 ACF0      1438            mov     r4,b
0662 FD        1439            mov     r5,a
0663 E581      1440            mov     a,sp
0665 24FC      1441            add     a,#0xfc
0667 F581      1442            mov     sp,a
0669 C002      1443            push    ar2
066B C003      1444            push    ar3
066D C004      1445            push    ar4
066F C005      1446            push    ar5
0671 C0D8      1447            push    _linetrack_vright_1_85
0673 C0D9      1448            push    (_linetrack_vright_1_85 + 1)
0675 C0DA      1449            push    (_linetrack_vright_1_85 + 2)
0677 C0DB      1450            push    (_linetrack_vright_1_85 + 3)
0679 85D882    1451            mov     dpl,_linetrack_vright_1_85
067C 85D983    1452            mov     dph,(_linetrack_vright_1_85 + 1)
067F 85DAF0    1453            mov     b,(_linetrack_vright_1_85 + 2)
0682 E5DB      1454            mov     a,(_linetrack_vright_1_85 + 3)
0684 120100    1455            lcall   ___fsmul
0687 858228    1456            mov     _linetrack_sloc0_1_0,dpl
068A 858329    1457            mov     (_linetrack_sloc0_1_0 + 1),dph
068D 85F02A    1458            mov     (_linetrack_sloc0_1_0 + 2),b
0690 F52B      1459            mov     (_linetrack_sloc0_1_0 + 3),a
0692 E581      1460            mov     a,sp
0694 24FC      1461            add     a,#0xfc
0696 F581      1462            mov     sp,a
0698 C088      1463            push    _linetrack_vleft_1_85
069A C089      1464            push    (_linetrack_vleft_1_85 + 1)
069C C08A      1465            push    (_linetrack_vleft_1_85 + 2)
069E C08B      1466            push    (_linetrack_vleft_1_85 + 3)
06A0 858882    1467            mov     dpl,_linetrack_vleft_1_85
06A3 858983    1468            mov     dph,(_linetrack_vleft_1_85 + 1)
06A6 858AF0    1469            mov     b,(_linetrack_vleft_1_85 + 2)
06A9 E58B      1470            mov     a,(_linetrack_vleft_1_85 + 3)
06AB 120100    1471            lcall   ___fsmul
06AE AE82      1472            mov     r6,dpl
06B0 AF83      1473            mov     r7,dph
06B2 A8F0      1474            mov     r0,b
06B4 F9        1475            mov     r1,a
06B5 E581      1476            mov     a,sp
06B7 24FC      1477            add     a,#0xfc
06B9 F581      1478            mov     sp,a
06BB C006      1479            push    ar6
06BD C007      1480            push    ar7
06BF C000      1481            push    ar0
06C1 C001      1482            push    ar1
06C3 852882    1483            mov     dpl,_linetrack_sloc0_1_0
06C6 852983    1484            mov     dph,(_linetrack_sloc0_1_0 + 1)
06C9 852AF0    1485            mov     b,(_linetrack_sloc0_1_0 + 2)
06CC E52B      1486            mov     a,(_linetrack_sloc0_1_0 + 3)
06CE 120100    1487            lcall   ___fsadd
06D1 AE82      1488            mov     r6,dpl
06D3 AF83      1489            mov     r7,dph
06D5 A8F0      1490            mov     r0,b
06D7 F9        1491            mov     r1,a
06D8 E581      1492            mov     a,sp
06DA 24FC      1493            add     a,#0xfc
06DC F581      1494            mov     sp,a
06DE D005      1495            pop     ar5
06E0 D004      1496            pop     ar4
06E2 D003      1497            pop     ar3
06E4 D002      1498            pop     ar2
06E6 C006      1499            push    ar6
06E8 C007      1500            push    ar7
06EA C000      1501            push    ar0
06EC C001      1502            push    ar1
06EE 8A82      1503            mov     dpl,r2
06F0 8B83      1504            mov     dph,r3
06F2 8CF0      1505            mov     b,r4
06F4 ED        1506            mov     a,r5
06F5 120100    1507            lcall   ___fsdiv
06F8 AA82      1508            mov     r2,dpl
06FA AB83      1509            mov     r3,dph
06FC ACF0      1510            mov     r4,b
06FE FD        1511            mov     r5,a
06FF E581      1512            mov     a,sp
0701 24FC      1513            add     a,#0xfc
0703 F581      1514            mov     sp,a
0705 8A82      1515            mov     dpl,r2
0707 8B83      1516            mov     dph,r3
0709 8CF0      1517            mov     b,r4
070B ED        1518            mov     a,r5
070C 120100    1519            lcall   ___fs2schar
070F 858218    1520            mov     _pwm_Right0,dpl
0712           1521   ;        robot.c:275: if ((forwardbackward == 1)||(forwardbackward == 3)) {
0712 7401      1522            mov     a,#0x01
0714 B53880    1523            cjne    a,_linetrack_forwardbackward_1_84,L006015?
0717 E4        1524            clr     a
0718 B53980    1525            cjne    a,(_linetrack_forwardbackward_1_84 + 1),L006015?
071B 8001      1526            sjmp    L006005?
071D           1527   L006015?:
071D 7403      1528            mov     a,#0x03
071F B53800    1529            cjne    a,_linetrack_forwardbackward_1_84,L006016?
0722 E4        1530            clr     a
0723 B53900    1531            cjne    a,(_linetrack_forwardbackward_1_84 + 1),L006016?
0726 8001      1532            sjmp    L006017?
0728           1533   L006016?:
0728 22        1534            ret
0729           1535   L006017?:
0729           1536   L006005?:
0729           1537   ;        robot.c:277: vleft=Volts_at_Pin(LQFP32_MUX_P2_5);
0729 75820D    1538            mov     dpl,#0x0D
072C 120100    1539            lcall   _Volts_at_Pin
072F 858288    1540            mov     _linetrack_vleft_1_85,dpl
0732 858389    1541            mov     (_linetrack_vleft_1_85 + 1),dph
0735 85F08A    1542            mov     (_linetrack_vleft_1_85 + 2),b
0738 F58B      1543            mov     (_linetrack_vleft_1_85 + 3),a
073A           1544   ;        robot.c:278: vright=Volts_at_Pin(LQFP32_MUX_P2_6);
073A 75820E    1545            mov     dpl,#0x0E
073D 120100    1546            lcall   _Volts_at_Pin
0740 8582D8    1547            mov     _linetrack_vright_1_85,dpl
0743 8583D9    1548            mov     (_linetrack_vright_1_85 + 1),dph
0746 85F0DA    1549            mov     (_linetrack_vright_1_85 + 2),b
0749 F5DB      1550            mov     (_linetrack_vright_1_85 + 3),a
074B           1551   ;        robot.c:281: if (forwardbackward == 3) {
074B 7403      1552            mov     a,#0x03
074D B53880    1553            cjne    a,_linetrack_forwardbackward_1_84,L006018?
0750 E4        1554            clr     a
0751 B53980    1555            cjne    a,(_linetrack_forwardbackward_1_84 + 1),L006018?
0754 8001      1556            sjmp    L006019?
0756           1557   L006018?:
0756 8001      1558            sjmp    L006004?
0758           1559   L006019?:
0758           1560   ;        robot.c:282: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0758 75820B    1561            mov     dpl,#0x0B
075B 120100    1562            lcall   _Volts_at_Pin
075E 858288    1563            mov     _linetrack_vleft_1_85,dpl
0761 858389    1564            mov     (_linetrack_vleft_1_85 + 1),dph
0764 85F08A    1565            mov     (_linetrack_vleft_1_85 + 2),b
0767 F58B      1566            mov     (_linetrack_vleft_1_85 + 3),a
0769           1567   ;        robot.c:283: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0769 75820C    1568            mov     dpl,#0x0C
076C 120100    1569            lcall   _Volts_at_Pin
076F 8582D8    1570            mov     _linetrack_vright_1_85,dpl
0772 8583D9    1571            mov     (_linetrack_vright_1_85 + 1),dph
0775 85F0DA    1572            mov     (_linetrack_vright_1_85 + 2),b
0778 F5DB      1573            mov     (_linetrack_vright_1_85 + 3),a
077A           1574   L006004?:
077A           1575   ;        robot.c:287: pwm_Left1 = -1;
077A 7558FF    1576            mov     _pwm_Left1,#0xFF
077D           1577   ;        robot.c:288: pwm_Left0 = vright*vright*75/(vright*vright+vleft*vleft);
077D C0D8      1578            push    _linetrack_vright_1_85
077F C0D9      1579            push    (_linetrack_vright_1_85 + 1)
0781 C0DA      1580            push    (_linetrack_vright_1_85 + 2)
0783 C0DB      1581            push    (_linetrack_vright_1_85 + 3)
0785 85D882    1582            mov     dpl,_linetrack_vright_1_85
0788 85D983    1583            mov     dph,(_linetrack_vright_1_85 + 1)
078B 85DAF0    1584            mov     b,(_linetrack_vright_1_85 + 2)
078E E5DB      1585            mov     a,(_linetrack_vright_1_85 + 3)
0790 120100    1586            lcall   ___fsmul
0793 AA82      1587            mov     r2,dpl
0795 AB83      1588            mov     r3,dph
0797 ACF0      1589            mov     r4,b
0799 FD        1590            mov     r5,a
079A E581      1591            mov     a,sp
079C 24FC      1592            add     a,#0xfc
079E F581      1593            mov     sp,a
07A0 C002      1594            push    ar2
07A2 C003      1595            push    ar3
07A4 C004      1596            push    ar4
07A6 C005      1597            push    ar5
07A8 900000    1598            mov     dptr,#0x0000
07AB 75F096    1599            mov     b,#0x96
07AE 7442      1600            mov     a,#0x42
07B0 120100    1601            lcall   ___fsmul
07B3 AA82      1602            mov     r2,dpl
07B5 AB83      1603            mov     r3,dph
07B7 ACF0      1604            mov     r4,b
07B9 FD        1605            mov     r5,a
07BA E581      1606            mov     a,sp
07BC 24FC      1607            add     a,#0xfc
07BE F581      1608            mov     sp,a
07C0 C002      1609            push    ar2
07C2 C003      1610            push    ar3
07C4 C004      1611            push    ar4
07C6 C005      1612            push    ar5
07C8 C0D8      1613            push    _linetrack_vright_1_85
07CA C0D9      1614            push    (_linetrack_vright_1_85 + 1)
07CC C0DA      1615            push    (_linetrack_vright_1_85 + 2)
07CE C0DB      1616            push    (_linetrack_vright_1_85 + 3)
07D0 85D882    1617            mov     dpl,_linetrack_vright_1_85
07D3 85D983    1618            mov     dph,(_linetrack_vright_1_85 + 1)
07D6 85DAF0    1619            mov     b,(_linetrack_vright_1_85 + 2)
07D9 E5DB      1620            mov     a,(_linetrack_vright_1_85 + 3)
07DB 120100    1621            lcall   ___fsmul
07DE 858228    1622            mov     _linetrack_sloc0_1_0,dpl
07E1 858329    1623            mov     (_linetrack_sloc0_1_0 + 1),dph
07E4 85F02A    1624            mov     (_linetrack_sloc0_1_0 + 2),b
07E7 F52B      1625            mov     (_linetrack_sloc0_1_0 + 3),a
07E9 E581      1626            mov     a,sp
07EB 24FC      1627            add     a,#0xfc
07ED F581      1628            mov     sp,a
07EF C088      1629            push    _linetrack_vleft_1_85
07F1 C089      1630            push    (_linetrack_vleft_1_85 + 1)
07F3 C08A      1631            push    (_linetrack_vleft_1_85 + 2)
07F5 C08B      1632            push    (_linetrack_vleft_1_85 + 3)
07F7 858882    1633            mov     dpl,_linetrack_vleft_1_85
07FA 858983    1634            mov     dph,(_linetrack_vleft_1_85 + 1)
07FD 858AF0    1635            mov     b,(_linetrack_vleft_1_85 + 2)
0800 E58B      1636            mov     a,(_linetrack_vleft_1_85 + 3)
0802 120100    1637            lcall   ___fsmul
0805 AE82      1638            mov     r6,dpl
0807 AF83      1639            mov     r7,dph
0809 A8F0      1640            mov     r0,b
080B F9        1641            mov     r1,a
080C E581      1642            mov     a,sp
080E 24FC      1643            add     a,#0xfc
0810 F581      1644            mov     sp,a
0812 C006      1645            push    ar6
0814 C007      1646            push    ar7
0816 C000      1647            push    ar0
0818 C001      1648            push    ar1
081A 852882    1649            mov     dpl,_linetrack_sloc0_1_0
081D 852983    1650            mov     dph,(_linetrack_sloc0_1_0 + 1)
0820 852AF0    1651            mov     b,(_linetrack_sloc0_1_0 + 2)
0823 E52B      1652            mov     a,(_linetrack_sloc0_1_0 + 3)
0825 120100    1653            lcall   ___fsadd
0828 AE82      1654            mov     r6,dpl
082A AF83      1655            mov     r7,dph
082C A8F0      1656            mov     r0,b
082E F9        1657            mov     r1,a
082F E581      1658            mov     a,sp
0831 24FC      1659            add     a,#0xfc
0833 F581      1660            mov     sp,a
0835 D005      1661            pop     ar5
0837 D004      1662            pop     ar4
0839 D003      1663            pop     ar3
083B D002      1664            pop     ar2
083D C006      1665            push    ar6
083F C007      1666            push    ar7
0841 C000      1667            push    ar0
0843 C001      1668            push    ar1
0845 8A82      1669            mov     dpl,r2
0847 8B83      1670            mov     dph,r3
0849 8CF0      1671            mov     b,r4
084B ED        1672            mov     a,r5
084C 120100    1673            lcall   ___fsdiv
084F AA82      1674            mov     r2,dpl
0851 AB83      1675            mov     r3,dph
0853 ACF0      1676            mov     r4,b
0855 FD        1677            mov     r5,a
0856 E581      1678            mov     a,sp
0858 24FC      1679            add     a,#0xfc
085A F581      1680            mov     sp,a
085C 8A82      1681            mov     dpl,r2
085E 8B83      1682            mov     dph,r3
0860 8CF0      1683            mov     b,r4
0862 ED        1684            mov     a,r5
0863 120100    1685            lcall   ___fs2schar
0866 858298    1686            mov     _pwm_Left0,dpl
0869           1687   ;        robot.c:289: pwm_Right0 = -1;
0869 7518FF    1688            mov     _pwm_Right0,#0xFF
086C           1689   ;        robot.c:290: pwm_Right1 = vleft*vleft*75/(vright*vright+vleft*vleft);
086C C088      1690            push    _linetrack_vleft_1_85
086E C089      1691            push    (_linetrack_vleft_1_85 + 1)
0870 C08A      1692            push    (_linetrack_vleft_1_85 + 2)
0872 C08B      1693            push    (_linetrack_vleft_1_85 + 3)
0874 858882    1694            mov     dpl,_linetrack_vleft_1_85
0877 858983    1695            mov     dph,(_linetrack_vleft_1_85 + 1)
087A 858AF0    1696            mov     b,(_linetrack_vleft_1_85 + 2)
087D E58B      1697            mov     a,(_linetrack_vleft_1_85 + 3)
087F 120100    1698            lcall   ___fsmul
0882 AA82      1699            mov     r2,dpl
0884 AB83      1700            mov     r3,dph
0886 ACF0      1701            mov     r4,b
0888 FD        1702            mov     r5,a
0889 E581      1703            mov     a,sp
088B 24FC      1704            add     a,#0xfc
088D F581      1705            mov     sp,a
088F C002      1706            push    ar2
0891 C003      1707            push    ar3
0893 C004      1708            push    ar4
0895 C005      1709            push    ar5
0897 900000    1710            mov     dptr,#0x0000
089A 75F096    1711            mov     b,#0x96
089D 7442      1712            mov     a,#0x42
089F 120100    1713            lcall   ___fsmul
08A2 AA82      1714            mov     r2,dpl
08A4 AB83      1715            mov     r3,dph
08A6 ACF0      1716            mov     r4,b
08A8 FD        1717            mov     r5,a
08A9 E581      1718            mov     a,sp
08AB 24FC      1719            add     a,#0xfc
08AD F581      1720            mov     sp,a
08AF C002      1721            push    ar2
08B1 C003      1722            push    ar3
08B3 C004      1723            push    ar4
08B5 C005      1724            push    ar5
08B7 C0D8      1725            push    _linetrack_vright_1_85
08B9 C0D9      1726            push    (_linetrack_vright_1_85 + 1)
08BB C0DA      1727            push    (_linetrack_vright_1_85 + 2)
08BD C0DB      1728            push    (_linetrack_vright_1_85 + 3)
08BF 85D882    1729            mov     dpl,_linetrack_vright_1_85
08C2 85D983    1730            mov     dph,(_linetrack_vright_1_85 + 1)
08C5 85DAF0    1731            mov     b,(_linetrack_vright_1_85 + 2)
08C8 E5DB      1732            mov     a,(_linetrack_vright_1_85 + 3)
08CA 120100    1733            lcall   ___fsmul
08CD 858228    1734            mov     _linetrack_sloc0_1_0,dpl
08D0 858329    1735            mov     (_linetrack_sloc0_1_0 + 1),dph
08D3 85F02A    1736            mov     (_linetrack_sloc0_1_0 + 2),b
08D6 F52B      1737            mov     (_linetrack_sloc0_1_0 + 3),a
08D8 E581      1738            mov     a,sp
08DA 24FC      1739            add     a,#0xfc
08DC F581      1740            mov     sp,a
08DE C088      1741            push    _linetrack_vleft_1_85
08E0 C089      1742            push    (_linetrack_vleft_1_85 + 1)
08E2 C08A      1743            push    (_linetrack_vleft_1_85 + 2)
08E4 C08B      1744            push    (_linetrack_vleft_1_85 + 3)
08E6 858882    1745            mov     dpl,_linetrack_vleft_1_85
08E9 858983    1746            mov     dph,(_linetrack_vleft_1_85 + 1)
08EC 858AF0    1747            mov     b,(_linetrack_vleft_1_85 + 2)
08EF E58B      1748            mov     a,(_linetrack_vleft_1_85 + 3)
08F1 120100    1749            lcall   ___fsmul
08F4 AE82      1750            mov     r6,dpl
08F6 AF83      1751            mov     r7,dph
08F8 A8F0      1752            mov     r0,b
08FA F9        1753            mov     r1,a
08FB E581      1754            mov     a,sp
08FD 24FC      1755            add     a,#0xfc
08FF F581      1756            mov     sp,a
0901 C006      1757            push    ar6
0903 C007      1758            push    ar7
0905 C000      1759            push    ar0
0907 C001      1760            push    ar1
0909 852882    1761            mov     dpl,_linetrack_sloc0_1_0
090C 852983    1762            mov     dph,(_linetrack_sloc0_1_0 + 1)
090F 852AF0    1763            mov     b,(_linetrack_sloc0_1_0 + 2)
0912 E52B      1764            mov     a,(_linetrack_sloc0_1_0 + 3)
0914 120100    1765            lcall   ___fsadd
0917 AE82      1766            mov     r6,dpl
0919 AF83      1767            mov     r7,dph
091B A8F0      1768            mov     r0,b
091D F9        1769            mov     r1,a
091E E581      1770            mov     a,sp
0920 24FC      1771            add     a,#0xfc
0922 F581      1772            mov     sp,a
0924 D005      1773            pop     ar5
0926 D004      1774            pop     ar4
0928 D003      1775            pop     ar3
092A D002      1776            pop     ar2
092C C006      1777            push    ar6
092E C007      1778            push    ar7
0930 C000      1779            push    ar0
0932 C001      1780            push    ar1
0934 8A82      1781            mov     dpl,r2
0936 8B83      1782            mov     dph,r3
0938 8CF0      1783            mov     b,r4
093A ED        1784            mov     a,r5
093B 120100    1785            lcall   ___fsdiv
093E AA82      1786            mov     r2,dpl
0940 AB83      1787            mov     r3,dph
0942 ACF0      1788            mov     r4,b
0944 FD        1789            mov     r5,a
0945 E581      1790            mov     a,sp
0947 24FC      1791            add     a,#0xfc
0949 F581      1792            mov     sp,a
094B 8A82      1793            mov     dpl,r2
094D 8B83      1794            mov     dph,r3
094F 8CF0      1795            mov     b,r4
0951 ED        1796            mov     a,r5
0952 120100    1797            lcall   ___fs2schar
0955 8582D8    1798            mov     _pwm_Right1,dpl
0958 22        1799            ret
0959           1800   ;------------------------------------------------------------
0959           1801   ;Allocation info for local variables in function 'stopcar'
0959           1802   ;------------------------------------------------------------
0959           1803   ;------------------------------------------------------------
0959           1804   ;        robot.c:302: void stopcar(void) {
0959           1805   ;        -----------------------------------------
0959           1806   ;         function stopcar
0959           1807   ;        -----------------------------------------
0959           1808   _stopcar:
0959           1809   ;        robot.c:304: pwm_Left1 = -1;
0959 7558FF    1810            mov     _pwm_Left1,#0xFF
095C           1811   ;        robot.c:305: pwm_Right1 = -1;
095C 75D8FF    1812            mov     _pwm_Right1,#0xFF
095F           1813   ;        robot.c:306: pwm_Left0 = -1;
095F 7598FF    1814            mov     _pwm_Left0,#0xFF
0962           1815   ;        robot.c:307: pwm_Right0 = -1;
0962 7518FF    1816            mov     _pwm_Right0,#0xFF
0965 22        1817            ret
0966           1818   ;------------------------------------------------------------
0966           1819   ;Allocation info for local variables in function 'turncar'
0966           1820   ;------------------------------------------------------------
0966           1821   ;leftright                 Allocated to registers r2 r3 
0966           1822   ;v                         Allocated with name '_turncar_v_1_92'
0966           1823   ;direction                 Allocated with name '_turncar_direction_1_92'
0966           1824   ;------------------------------------------------------------
0966           1825   ;        robot.c:313: void turncar (int leftright) {
0966           1826   ;        -----------------------------------------
0966           1827   ;         function turncar
0966           1828   ;        -----------------------------------------
0966           1829   _turncar:
0966 AA82      1830            mov     r2,dpl
0968 AB83      1831            mov     r3,dph
096A           1832   ;        robot.c:319: pwm_Left0 = -1;
096A 7598FF    1833            mov     _pwm_Left0,#0xFF
096D           1834   ;        robot.c:320: pwm_Left1 = -1;
096D 7558FF    1835            mov     _pwm_Left1,#0xFF
0970           1836   ;        robot.c:321: pwm_Right0 = -1;
0970 7518FF    1837            mov     _pwm_Right0,#0xFF
0973           1838   ;        robot.c:322: pwm_Right1 = -1;
0973 75D8FF    1839            mov     _pwm_Right1,#0xFF
0976           1840   ;        robot.c:324: direction = currentstate - 1;
0976 E518      1841            mov     a,_currentstate
0978 14        1842            dec     a
0979 F5B8      1843            mov     _turncar_direction_1_92,a
097B           1844   ;        robot.c:327: if (leftright == 0) {
097B EA        1845            mov     a,r2
097C 4B        1846            orl     a,r3
097D 6001      1847            jz      L008032?
097F 020100    1848            ljmp    L008010?
0982           1849   L008032?:
0982           1850   ;        robot.c:329: pwm_Right0 = 100;
0982 751864    1851            mov     _pwm_Right0,#0x64
0985           1852   ;        robot.c:333: v= direction ? Volts_at_Pin(LQFP32_MUX_P2_4) : Volts_at_Pin(LQFP32_MUX_P2_6);
0985 E5B8      1853            mov     a,_turncar_direction_1_92
0987 6001      1854            jz      L008014?
0989 75820C    1855            mov     dpl,#0x0C
098C 120100    1856            lcall   _Volts_at_Pin
098F AC82      1857            mov     r4,dpl
0991 AD83      1858            mov     r5,dph
0993 AEF0      1859            mov     r6,b
0995 FF        1860            mov     r7,a
0996 8001      1861            sjmp    L008015?
0998           1862   L008014?:
0998 75820E    1863            mov     dpl,#0x0E
099B 120100    1864            lcall   _Volts_at_Pin
099E AC82      1865            mov     r4,dpl
09A0 AD83      1866            mov     r5,dph
09A2 AEF0      1867            mov     r6,b
09A4 FF        1868            mov     r7,a
09A5           1869   L008015?:
09A5 8C68      1870            mov     _turncar_v_1_92,r4
09A7 8D69      1871            mov     (_turncar_v_1_92 + 1),r5
09A9 8E6A      1872            mov     (_turncar_v_1_92 + 2),r6
09AB 8F6B      1873            mov     (_turncar_v_1_92 + 3),r7
09AD           1874   ;        robot.c:335: while (v < 1.5) {
09AD           1875   L008001?:
09AD E4        1876            clr     a
09AE C0E0      1877            push    acc
09B0 C0E0      1878            push    acc
09B2 74C0      1879            mov     a,#0xC0
09B4 C0E0      1880            push    acc
09B6 743F      1881            mov     a,#0x3F
09B8 C0E0      1882            push    acc
09BA 856882    1883            mov     dpl,_turncar_v_1_92
09BD 856983    1884            mov     dph,(_turncar_v_1_92 + 1)
09C0 856AF0    1885            mov     b,(_turncar_v_1_92 + 2)
09C3 E56B      1886            mov     a,(_turncar_v_1_92 + 3)
09C5 120100    1887            lcall   ___fslt
09C8 AC82      1888            mov     r4,dpl
09CA E581      1889            mov     a,sp
09CC 24FC      1890            add     a,#0xfc
09CE F581      1891            mov     sp,a
09D0 EC        1892            mov     a,r4
09D1 6001      1893            jz      L008003?
09D3           1894   ;        robot.c:337: v= direction ? Volts_at_Pin(LQFP32_MUX_P2_4) : Volts_at_Pin(LQFP32_MUX_P2_6);
09D3 E5B8      1895            mov     a,_turncar_direction_1_92
09D5 6001      1896            jz      L008016?
09D7 75820C    1897            mov     dpl,#0x0C
09DA 120100    1898            lcall   _Volts_at_Pin
09DD AC82      1899            mov     r4,dpl
09DF AD83      1900            mov     r5,dph
09E1 AEF0      1901            mov     r6,b
09E3 FF        1902            mov     r7,a
09E4 8001      1903            sjmp    L008017?
09E6           1904   L008016?:
09E6 75820E    1905            mov     dpl,#0x0E
09E9 120100    1906            lcall   _Volts_at_Pin
09EC AC82      1907            mov     r4,dpl
09EE AD83      1908            mov     r5,dph
09F0 AEF0      1909            mov     r6,b
09F2 FF        1910            mov     r7,a
09F3           1911   L008017?:
09F3 8C68      1912            mov     _turncar_v_1_92,r4
09F5 8D69      1913            mov     (_turncar_v_1_92 + 1),r5
09F7 8E6A      1914            mov     (_turncar_v_1_92 + 2),r6
09F9 8F6B      1915            mov     (_turncar_v_1_92 + 3),r7
09FB 8001      1916            sjmp    L008001?
09FD           1917   L008003?:
09FD           1918   ;        robot.c:340: waitms(300);
09FD 90012C    1919            mov     dptr,#0x012C
0A00 120100    1920            lcall   _waitms
0A03           1921   ;        robot.c:343: pwm_Right0 = -1; 
0A03 7518FF    1922            mov     _pwm_Right0,#0xFF
0A06           1923   ;        robot.c:344: pwm_Left0 = -1;            
0A06 7598FF    1924            mov     _pwm_Left0,#0xFF
0A09 22        1925            ret
0A0A           1926   L008010?:
0A0A           1927   ;        robot.c:348: else if (leftright == 1) {
0A0A BA0180    1928            cjne    r2,#0x01,L008036?
0A0D BB0080    1929            cjne    r3,#0x00,L008036?
0A10 8001      1930            sjmp    L008037?
0A12           1931   L008036?:
0A12 22        1932            ret
0A13           1933   L008037?:
0A13           1934   ;        robot.c:350: pwm_Left1 = 100;
0A13 755864    1935            mov     _pwm_Left1,#0x64
0A16           1936   ;        robot.c:354: v= direction ? Volts_at_Pin(LQFP32_MUX_P2_3) : Volts_at_Pin(LQFP32_MUX_P2_5);
0A16 E5B8      1937            mov     a,_turncar_direction_1_92
0A18 6001      1938            jz      L008018?
0A1A 75820B    1939            mov     dpl,#0x0B
0A1D 120100    1940            lcall   _Volts_at_Pin
0A20 AA82      1941            mov     r2,dpl
0A22 AB83      1942            mov     r3,dph
0A24 ACF0      1943            mov     r4,b
0A26 FD        1944            mov     r5,a
0A27 8001      1945            sjmp    L008019?
0A29           1946   L008018?:
0A29 75820D    1947            mov     dpl,#0x0D
0A2C 120100    1948            lcall   _Volts_at_Pin
0A2F AA82      1949            mov     r2,dpl
0A31 AB83      1950            mov     r3,dph
0A33 ACF0      1951            mov     r4,b
0A35 FD        1952            mov     r5,a
0A36           1953   L008019?:
0A36 8A68      1954            mov     _turncar_v_1_92,r2
0A38 8B69      1955            mov     (_turncar_v_1_92 + 1),r3
0A3A 8C6A      1956            mov     (_turncar_v_1_92 + 2),r4
0A3C 8D6B      1957            mov     (_turncar_v_1_92 + 3),r5
0A3E           1958   ;        robot.c:356: while (v < 1.5) {
0A3E           1959   L008004?:
0A3E E4        1960            clr     a
0A3F C0E0      1961            push    acc
0A41 C0E0      1962            push    acc
0A43 74C0      1963            mov     a,#0xC0
0A45 C0E0      1964            push    acc
0A47 743F      1965            mov     a,#0x3F
0A49 C0E0      1966            push    acc
0A4B 856882    1967            mov     dpl,_turncar_v_1_92
0A4E 856983    1968            mov     dph,(_turncar_v_1_92 + 1)
0A51 856AF0    1969            mov     b,(_turncar_v_1_92 + 2)
0A54 E56B      1970            mov     a,(_turncar_v_1_92 + 3)
0A56 120100    1971            lcall   ___fslt
0A59 AA82      1972            mov     r2,dpl
0A5B E581      1973            mov     a,sp
0A5D 24FC      1974            add     a,#0xfc
0A5F F581      1975            mov     sp,a
0A61 EA        1976            mov     a,r2
0A62 6001      1977            jz      L008006?
0A64           1978   ;        robot.c:358: v= direction ? Volts_at_Pin(LQFP32_MUX_P2_3) : Volts_at_Pin(LQFP32_MUX_P2_5);
0A64 E5B8      1979            mov     a,_turncar_direction_1_92
0A66 6001      1980            jz      L008020?
0A68 75820B    1981            mov     dpl,#0x0B
0A6B 120100    1982            lcall   _Volts_at_Pin
0A6E AA82      1983            mov     r2,dpl
0A70 AB83      1984            mov     r3,dph
0A72 ACF0      1985            mov     r4,b
0A74 FD        1986            mov     r5,a
0A75 8001      1987            sjmp    L008021?
0A77           1988   L008020?:
0A77 75820D    1989            mov     dpl,#0x0D
0A7A 120100    1990            lcall   _Volts_at_Pin
0A7D AA82      1991            mov     r2,dpl
0A7F AB83      1992            mov     r3,dph
0A81 ACF0      1993            mov     r4,b
0A83 FD        1994            mov     r5,a
0A84           1995   L008021?:
0A84 8A68      1996            mov     _turncar_v_1_92,r2
0A86 8B69      1997            mov     (_turncar_v_1_92 + 1),r3
0A88 8C6A      1998            mov     (_turncar_v_1_92 + 2),r4
0A8A 8D6B      1999            mov     (_turncar_v_1_92 + 3),r5
0A8C 8001      2000            sjmp    L008004?
0A8E           2001   L008006?:
0A8E           2002   ;        robot.c:361: waitms(300);
0A8E 90012C    2003            mov     dptr,#0x012C
0A91 120100    2004            lcall   _waitms
0A94           2005   ;        robot.c:364: pwm_Left1 = -1; 
0A94 7558FF    2006            mov     _pwm_Left1,#0xFF
0A97           2007   ;        robot.c:365: pwm_Right1 = -1; 
0A97 75D8FF    2008            mov     _pwm_Right1,#0xFF
0A9A 22        2009            ret
0A9B           2010   ;------------------------------------------------------------
0A9B           2011   ;Allocation info for local variables in function 'uturn'
0A9B           2012   ;------------------------------------------------------------
0A9B           2013   ;vleft                     Allocated with name '_uturn_vleft_1_98'
0A9B           2014   ;vright                    Allocated with name '_uturn_vright_1_98'
0A9B           2015   ;------------------------------------------------------------
0A9B           2016   ;        robot.c:373: void uturn(void) {
0A9B           2017   ;        -----------------------------------------
0A9B           2018   ;         function uturn
0A9B           2019   ;        -----------------------------------------
0A9B           2020   _uturn:
0A9B           2021   ;        robot.c:377: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0A9B 75820B    2022            mov     dpl,#0x0B
0A9E 120100    2023            lcall   _Volts_at_Pin
0AA1 858208    2024            mov     _uturn_vleft_1_98,dpl
0AA4 858309    2025            mov     (_uturn_vleft_1_98 + 1),dph
0AA7 85F00A    2026            mov     (_uturn_vleft_1_98 + 2),b
0AAA F50B      2027            mov     (_uturn_vleft_1_98 + 3),a
0AAC           2028   ;        robot.c:378: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0AAC 75820C    2029            mov     dpl,#0x0C
0AAF 120100    2030            lcall   _Volts_at_Pin
0AB2 858258    2031            mov     _uturn_vright_1_98,dpl
0AB5 858359    2032            mov     (_uturn_vright_1_98 + 1),dph
0AB8 85F05A    2033            mov     (_uturn_vright_1_98 + 2),b
0ABB F55B      2034            mov     (_uturn_vright_1_98 + 3),a
0ABD           2035   ;        robot.c:381: pwm_Left0 = -1;
0ABD 7598FF    2036            mov     _pwm_Left0,#0xFF
0AC0           2037   ;        robot.c:382: pwm_Left1 = 50;
0AC0 755832    2038            mov     _pwm_Left1,#0x32
0AC3           2039   ;        robot.c:383: pwm_Right0 = -1;
0AC3 7518FF    2040            mov     _pwm_Right0,#0xFF
0AC6           2041   ;        robot.c:384: pwm_Right1 = 50;
0AC6 75D832    2042            mov     _pwm_Right1,#0x32
0AC9           2043   ;        robot.c:387: waitms(4000);
0AC9 900FA0    2044            mov     dptr,#0x0FA0
0ACC 120100    2045            lcall   _waitms
0ACF           2046   ;        robot.c:390: while (((vleft - vright) > 0.2) || ((vleft - vright) < (-0.2))) {
0ACF           2047   L009002?:
0ACF C058      2048            push    _uturn_vright_1_98
0AD1 C059      2049            push    (_uturn_vright_1_98 + 1)
0AD3 C05A      2050            push    (_uturn_vright_1_98 + 2)
0AD5 C05B      2051            push    (_uturn_vright_1_98 + 3)
0AD7 850882    2052            mov     dpl,_uturn_vleft_1_98
0ADA 850983    2053            mov     dph,(_uturn_vleft_1_98 + 1)
0ADD 850AF0    2054            mov     b,(_uturn_vleft_1_98 + 2)
0AE0 E50B      2055            mov     a,(_uturn_vleft_1_98 + 3)
0AE2 120100    2056            lcall   ___fssub
0AE5 AA82      2057            mov     r2,dpl
0AE7 AB83      2058            mov     r3,dph
0AE9 ACF0      2059            mov     r4,b
0AEB FD        2060            mov     r5,a
0AEC E581      2061            mov     a,sp
0AEE 24FC      2062            add     a,#0xfc
0AF0 F581      2063            mov     sp,a
0AF2 74CD      2064            mov     a,#0xCD
0AF4 C0E0      2065            push    acc
0AF6 74CC      2066            mov     a,#0xCC
0AF8 C0E0      2067            push    acc
0AFA 744C      2068            mov     a,#0x4C
0AFC C0E0      2069            push    acc
0AFE 743E      2070            mov     a,#0x3E
0B00 C0E0      2071            push    acc
0B02 8A82      2072            mov     dpl,r2
0B04 8B83      2073            mov     dph,r3
0B06 8CF0      2074            mov     b,r4
0B08 ED        2075            mov     a,r5
0B09 120100    2076            lcall   ___fsgt
0B0C AA82      2077            mov     r2,dpl
0B0E E581      2078            mov     a,sp
0B10 24FC      2079            add     a,#0xfc
0B12 F581      2080            mov     sp,a
0B14 EA        2081            mov     a,r2
0B15 7001      2082            jnz     L009003?
0B17 C058      2083            push    _uturn_vright_1_98
0B19 C059      2084            push    (_uturn_vright_1_98 + 1)
0B1B C05A      2085            push    (_uturn_vright_1_98 + 2)
0B1D C05B      2086            push    (_uturn_vright_1_98 + 3)
0B1F 850882    2087            mov     dpl,_uturn_vleft_1_98
0B22 850983    2088            mov     dph,(_uturn_vleft_1_98 + 1)
0B25 850AF0    2089            mov     b,(_uturn_vleft_1_98 + 2)
0B28 E50B      2090            mov     a,(_uturn_vleft_1_98 + 3)
0B2A 120100    2091            lcall   ___fssub
0B2D AA82      2092            mov     r2,dpl
0B2F AB83      2093            mov     r3,dph
0B31 ACF0      2094            mov     r4,b
0B33 FD        2095            mov     r5,a
0B34 E581      2096            mov     a,sp
0B36 24FC      2097            add     a,#0xfc
0B38 F581      2098            mov     sp,a
0B3A 74CD      2099            mov     a,#0xCD
0B3C C0E0      2100            push    acc
0B3E 74CC      2101            mov     a,#0xCC
0B40 C0E0      2102            push    acc
0B42 744C      2103            mov     a,#0x4C
0B44 C0E0      2104            push    acc
0B46 74BE      2105            mov     a,#0xBE
0B48 C0E0      2106            push    acc
0B4A 8A82      2107            mov     dpl,r2
0B4C 8B83      2108            mov     dph,r3
0B4E 8CF0      2109            mov     b,r4
0B50 ED        2110            mov     a,r5
0B51 120100    2111            lcall   ___fslt
0B54 AA82      2112            mov     r2,dpl
0B56 E581      2113            mov     a,sp
0B58 24FC      2114            add     a,#0xfc
0B5A F581      2115            mov     sp,a
0B5C EA        2116            mov     a,r2
0B5D 6001      2117            jz      L009005?
0B5F           2118   L009003?:
0B5F           2119   ;        robot.c:392: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
0B5F 75820B    2120            mov     dpl,#0x0B
0B62 120100    2121            lcall   _Volts_at_Pin
0B65 858208    2122            mov     _uturn_vleft_1_98,dpl
0B68 858309    2123            mov     (_uturn_vleft_1_98 + 1),dph
0B6B 85F00A    2124            mov     (_uturn_vleft_1_98 + 2),b
0B6E F50B      2125            mov     (_uturn_vleft_1_98 + 3),a
0B70           2126   ;        robot.c:393: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
0B70 75820C    2127            mov     dpl,#0x0C
0B73 120100    2128            lcall   _Volts_at_Pin
0B76 858258    2129            mov     _uturn_vright_1_98,dpl
0B79 858359    2130            mov     (_uturn_vright_1_98 + 1),dph
0B7C 85F05A    2131            mov     (_uturn_vright_1_98 + 2),b
0B7F F55B      2132            mov     (_uturn_vright_1_98 + 3),a
0B81 020100    2133            ljmp    L009002?
0B84           2134   L009005?:
0B84 22        2135            ret
0B85           2136   ;------------------------------------------------------------
0B85           2137   ;Allocation info for local variables in function 'movecar'
0B85           2138   ;------------------------------------------------------------
0B85           2139   ;power                     Allocated with name '_movecar_PARM_2'
0B85           2140   ;forback                   Allocated to registers r2 r3 
0B85           2141   ;------------------------------------------------------------
0B85           2142   ;        robot.c:400: void movecar (int forback, int power) {
0B85           2143   ;        -----------------------------------------
0B85           2144   ;         function movecar
0B85           2145   ;        -----------------------------------------
0B85           2146   _movecar:
0B85 AA82      2147            mov     r2,dpl
0B87 AB83      2148            mov     r3,dph
0B89           2149   ;        robot.c:402: if (forback == 1) {
0B89 BA0180    2150            cjne    r2,#0x01,L010004?
0B8C BB0080    2151            cjne    r3,#0x00,L010004?
0B8F           2152   ;        robot.c:403: pwm_Left1 = power;
0B8F AC58      2153            mov     r4,_movecar_PARM_2
0B91 8C58      2154            mov     _pwm_Left1,r4
0B93           2155   ;        robot.c:404: pwm_Left0 = -1;
0B93 7598FF    2156            mov     _pwm_Left0,#0xFF
0B96           2157   ;        robot.c:405: pwm_Right0 = power;
0B96 8C18      2158            mov     _pwm_Right0,r4
0B98           2159   ;        robot.c:406: pwm_Right1 = -1;
0B98 75D8FF    2160            mov     _pwm_Right1,#0xFF
0B9B 22        2161            ret
0B9C           2162   L010004?:
0B9C           2163   ;        robot.c:408: else if (forback == 2) {
0B9C BA02C0    2164            cjne    r2,#0x02,L010006?
0B9F BB00C0    2165            cjne    r3,#0x00,L010006?
0BA2           2166   ;        robot.c:409: pwm_Left0 = power;
0BA2 AA58      2167            mov     r2,_movecar_PARM_2
0BA4 8A98      2168            mov     _pwm_Left0,r2
0BA6           2169   ;        robot.c:410: pwm_Left1 = -1;
0BA6 7558FF    2170            mov     _pwm_Left1,#0xFF
0BA9           2171   ;        robot.c:411: pwm_Right1 = power;
0BA9 8AD8      2172            mov     _pwm_Right1,r2
0BAB           2173   ;        robot.c:412: pwm_Right0 = -1;
0BAB 7518FF    2174            mov     _pwm_Right0,#0xFF
0BAE           2175   L010006?:
0BAE 22        2176            ret
0BAF           2177            rseg R_CSEG
0BAF           2178   
0000           2179            rseg R_XINIT
0000           2180   
0000           2181            rseg R_CONST
0000           2182   __str_0:
0000 1B        2183            db 0x1B
0001 5B324A    2184            db '[2J'
0004 00        2185            db 0x00
0005           2186   __str_1:
0005 66726F6E  2187            db 'frontL %f frontR %f backL %f backR %f command %1d'
     744C2025
     66206672
     6F6E7452
     20256620
     6261636B
     4C202566
     20626163
     6B522025
     6620636F
     6D6D616E
     64202531
     64
0036 0D        2188            db 0x0D
0037 00        2189            db 0x00
0038           2190   __str_2:
0038 0A        2191            db 0x0A
0039 494E5445  2192            db 'INTERSECTION'
     52534543
     54494F4E
0045 0A        2193            db 0x0A
0046 00        2194            db 0x00
0047           2195   __str_3:
0047 0A        2196            db 0x0A
0048 0D        2197            db 0x0D
0049 20494E54  2198            db ' INTERSECTION'
     45525345
     4354494F
     4E
0056 0A        2199            db 0x0A
0057 00        2200            db 0x00
0058           2201   
002E           2202            CSEG
002E           2203   
002E           2204   end
