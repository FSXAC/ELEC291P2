0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Mon Apr 03 01:08:17 2017
0000              5   ;--------------------------------------------------------
                  5   $name robot
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _movecar_PARM_2
0000             27            public _Timer2_ISR
0000             28            public _main
0000             29            public _currentstate
0000             30            public _currentcmd
0000             31            public _direction
0000             32            public _pwm_Right1
0000             33            public _pwm_Right0
0000             34            public _pwm_Left1
0000             35            public _pwm_Left0
0000             36            public _pwm_both
0000             37            public _mode
0000             38            public _pwm_count
0000             39            public _forward_backward
0000             40            public _readData
0000             41            public _linetrack
0000             42            public _stopcar
0000             43            public _turncar
0000             44            public _uturn
0000             45            public _movecar
0000             46   ;--------------------------------------------------------
0000             47   ; Special Function Registers
0000             48   ;--------------------------------------------------------
0000             49   _P0             DATA 0x80
0000             50   _SP             DATA 0x81
0000             51   _DPL            DATA 0x82
0000             52   _DPH            DATA 0x83
0000             53   _EMI0TC         DATA 0x84
0000             54   _EMI0CF         DATA 0x85
0000             55   _OSCLCN         DATA 0x86
0000             56   _PCON           DATA 0x87
0000             57   _TCON           DATA 0x88
0000             58   _TMOD           DATA 0x89
0000             59   _TL0            DATA 0x8a
0000             60   _TL1            DATA 0x8b
0000             61   _TH0            DATA 0x8c
0000             62   _TH1            DATA 0x8d
0000             63   _CKCON          DATA 0x8e
0000             64   _PSCTL          DATA 0x8f
0000             65   _P1             DATA 0x90
0000             66   _TMR3CN         DATA 0x91
0000             67   _TMR4CN         DATA 0x91
0000             68   _TMR3RLL        DATA 0x92
0000             69   _TMR4RLL        DATA 0x92
0000             70   _TMR3RLH        DATA 0x93
0000             71   _TMR4RLH        DATA 0x93
0000             72   _TMR3L          DATA 0x94
0000             73   _TMR4L          DATA 0x94
0000             74   _TMR3H          DATA 0x95
0000             75   _TMR4H          DATA 0x95
0000             76   _USB0ADR        DATA 0x96
0000             77   _USB0DAT        DATA 0x97
0000             78   _SCON           DATA 0x98
0000             79   _SCON0          DATA 0x98
0000             80   _SBUF           DATA 0x99
0000             81   _SBUF0          DATA 0x99
0000             82   _CPT1CN         DATA 0x9a
0000             83   _CPT0CN         DATA 0x9b
0000             84   _CPT1MD         DATA 0x9c
0000             85   _CPT0MD         DATA 0x9d
0000             86   _CPT1MX         DATA 0x9e
0000             87   _CPT0MX         DATA 0x9f
0000             88   _P2             DATA 0xa0
0000             89   _SPI0CFG        DATA 0xa1
0000             90   _SPI0CKR        DATA 0xa2
0000             91   _SPI0DAT        DATA 0xa3
0000             92   _P0MDOUT        DATA 0xa4
0000             93   _P1MDOUT        DATA 0xa5
0000             94   _P2MDOUT        DATA 0xa6
0000             95   _P3MDOUT        DATA 0xa7
0000             96   _IE             DATA 0xa8
0000             97   _CLKSEL         DATA 0xa9
0000             98   _EMI0CN         DATA 0xaa
0000             99   __XPAGE         DATA 0xaa
0000            100   _SBCON1         DATA 0xac
0000            101   _P4MDOUT        DATA 0xae
0000            102   _PFE0CN         DATA 0xaf
0000            103   _P3             DATA 0xb0
0000            104   _OSCXCN         DATA 0xb1
0000            105   _OSCICN         DATA 0xb2
0000            106   _OSCICL         DATA 0xb3
0000            107   _SBRLL1         DATA 0xb4
0000            108   _SBRLH1         DATA 0xb5
0000            109   _FLSCL          DATA 0xb6
0000            110   _FLKEY          DATA 0xb7
0000            111   _IP             DATA 0xb8
0000            112   _CLKMUL         DATA 0xb9
0000            113   _SMBTC          DATA 0xb9
0000            114   _AMX0N          DATA 0xba
0000            115   _AMX0P          DATA 0xbb
0000            116   _ADC0CF         DATA 0xbc
0000            117   _ADC0L          DATA 0xbd
0000            118   _ADC0H          DATA 0xbe
0000            119   _SFRPAGE        DATA 0xbf
0000            120   _SMB0CN         DATA 0xc0
0000            121   _SMB1CN         DATA 0xc0
0000            122   _SMB0CF         DATA 0xc1
0000            123   _SMB1CF         DATA 0xc1
0000            124   _SMB0DAT        DATA 0xc2
0000            125   _SMB1DAT        DATA 0xc2
0000            126   _ADC0GTL        DATA 0xc3
0000            127   _ADC0GTH        DATA 0xc4
0000            128   _ADC0LTL        DATA 0xc5
0000            129   _ADC0LTH        DATA 0xc6
0000            130   _P4             DATA 0xc7
0000            131   _TMR2CN         DATA 0xc8
0000            132   _TMR5CN         DATA 0xc8
0000            133   _REG01CN        DATA 0xc9
0000            134   _TMR2RLL        DATA 0xca
0000            135   _TMR5RLL        DATA 0xca
0000            136   _TMR2RLH        DATA 0xcb
0000            137   _TMR5RLH        DATA 0xcb
0000            138   _TMR2L          DATA 0xcc
0000            139   _TMR5L          DATA 0xcc
0000            140   _TMR2H          DATA 0xcd
0000            141   _TMR5H          DATA 0xcd
0000            142   _SMB0ADM        DATA 0xce
0000            143   _SMB1ADM        DATA 0xce
0000            144   _SMB0ADR        DATA 0xcf
0000            145   _SMB1ADR        DATA 0xcf
0000            146   _PSW            DATA 0xd0
0000            147   _REF0CN         DATA 0xd1
0000            148   _SCON1          DATA 0xd2
0000            149   _SBUF1          DATA 0xd3
0000            150   _P0SKIP         DATA 0xd4
0000            151   _P1SKIP         DATA 0xd5
0000            152   _P2SKIP         DATA 0xd6
0000            153   _USB0XCN        DATA 0xd7
0000            154   _PCA0CN         DATA 0xd8
0000            155   _PCA0MD         DATA 0xd9
0000            156   _PCA0CPM0       DATA 0xda
0000            157   _PCA0CPM1       DATA 0xdb
0000            158   _PCA0CPM2       DATA 0xdc
0000            159   _PCA0CPM3       DATA 0xdd
0000            160   _PCA0CPM4       DATA 0xde
0000            161   _P3SKIP         DATA 0xdf
0000            162   _ACC            DATA 0xe0
0000            163   _XBR0           DATA 0xe1
0000            164   _XBR1           DATA 0xe2
0000            165   _XBR2           DATA 0xe3
0000            166   _IT01CF         DATA 0xe4
0000            167   _CKCON1         DATA 0xe4
0000            168   _SMOD1          DATA 0xe5
0000            169   _EIE1           DATA 0xe6
0000            170   _EIE2           DATA 0xe7
0000            171   _ADC0CN         DATA 0xe8
0000            172   _PCA0CPL1       DATA 0xe9
0000            173   _PCA0CPH1       DATA 0xea
0000            174   _PCA0CPL2       DATA 0xeb
0000            175   _PCA0CPH2       DATA 0xec
0000            176   _PCA0CPL3       DATA 0xed
0000            177   _PCA0CPH3       DATA 0xee
0000            178   _RSTSRC         DATA 0xef
0000            179   _B              DATA 0xf0
0000            180   _P0MDIN         DATA 0xf1
0000            181   _P1MDIN         DATA 0xf2
0000            182   _P2MDIN         DATA 0xf3
0000            183   _P3MDIN         DATA 0xf4
0000            184   _P4MDIN         DATA 0xf5
0000            185   _EIP1           DATA 0xf6
0000            186   _EIP2           DATA 0xf7
0000            187   _SPI0CN         DATA 0xf8
0000            188   _PCA0L          DATA 0xf9
0000            189   _PCA0H          DATA 0xfa
0000            190   _PCA0CPL0       DATA 0xfb
0000            191   _PCA0CPH0       DATA 0xfc
0000            192   _PCA0CPL4       DATA 0xfd
0000            193   _PCA0CPH4       DATA 0xfe
0000            194   _VDM0CN         DATA 0xff
0000            195   _DPTR           DATA 0x8382
0000            196   _TMR2RL         DATA 0xcbca
0000            197   _TMR3RL         DATA 0x9392
0000            198   _TMR4RL         DATA 0x9392
0000            199   _TMR5RL         DATA 0xcbca
0000            200   _TMR2           DATA 0xcdcc
0000            201   _TMR3           DATA 0x9594
0000            202   _TMR4           DATA 0x9594
0000            203   _TMR5           DATA 0xcdcc
0000            204   _SBRL1          DATA 0xb5b4
0000            205   _ADC0           DATA 0xbebd
0000            206   _ADC0GT         DATA 0xc4c3
0000            207   _ADC0LT         DATA 0xc6c5
0000            208   _PCA0           DATA 0xfaf9
0000            209   _PCA0CP1        DATA 0xeae9
0000            210   _PCA0CP2        DATA 0xeceb
0000            211   _PCA0CP3        DATA 0xeeed
0000            212   _PCA0CP0        DATA 0xfcfb
0000            213   _PCA0CP4        DATA 0xfefd
0000            214   ;--------------------------------------------------------
0000            215   ; special function bits
0000            216   ;--------------------------------------------------------
0000            217   _P0_0           BIT 0x80
0000            218   _P0_1           BIT 0x81
0000            219   _P0_2           BIT 0x82
0000            220   _P0_3           BIT 0x83
0000            221   _P0_4           BIT 0x84
0000            222   _P0_5           BIT 0x85
0000            223   _P0_6           BIT 0x86
0000            224   _P0_7           BIT 0x87
0000            225   _TF1            BIT 0x8f
0000            226   _TR1            BIT 0x8e
0000            227   _TF0            BIT 0x8d
0000            228   _TR0            BIT 0x8c
0000            229   _IE1            BIT 0x8b
0000            230   _IT1            BIT 0x8a
0000            231   _IE0            BIT 0x89
0000            232   _IT0            BIT 0x88
0000            233   _P1_0           BIT 0x90
0000            234   _P1_1           BIT 0x91
0000            235   _P1_2           BIT 0x92
0000            236   _P1_3           BIT 0x93
0000            237   _P1_4           BIT 0x94
0000            238   _P1_5           BIT 0x95
0000            239   _P1_6           BIT 0x96
0000            240   _P1_7           BIT 0x97
0000            241   _S0MODE         BIT 0x9f
0000            242   _SCON0_6        BIT 0x9e
0000            243   _MCE0           BIT 0x9d
0000            244   _REN0           BIT 0x9c
0000            245   _TB80           BIT 0x9b
0000            246   _RB80           BIT 0x9a
0000            247   _TI0            BIT 0x99
0000            248   _RI0            BIT 0x98
0000            249   _SCON_6         BIT 0x9e
0000            250   _MCE            BIT 0x9d
0000            251   _REN            BIT 0x9c
0000            252   _TB8            BIT 0x9b
0000            253   _RB8            BIT 0x9a
0000            254   _TI             BIT 0x99
0000            255   _RI             BIT 0x98
0000            256   _P2_0           BIT 0xa0
0000            257   _P2_1           BIT 0xa1
0000            258   _P2_2           BIT 0xa2
0000            259   _P2_3           BIT 0xa3
0000            260   _P2_4           BIT 0xa4
0000            261   _P2_5           BIT 0xa5
0000            262   _P2_6           BIT 0xa6
0000            263   _P2_7           BIT 0xa7
0000            264   _EA             BIT 0xaf
0000            265   _ESPI0          BIT 0xae
0000            266   _ET2            BIT 0xad
0000            267   _ES0            BIT 0xac
0000            268   _ET1            BIT 0xab
0000            269   _EX1            BIT 0xaa
0000            270   _ET0            BIT 0xa9
0000            271   _EX0            BIT 0xa8
0000            272   _P3_0           BIT 0xb0
0000            273   _P3_1           BIT 0xb1
0000            274   _P3_2           BIT 0xb2
0000            275   _P3_3           BIT 0xb3
0000            276   _P3_4           BIT 0xb4
0000            277   _P3_5           BIT 0xb5
0000            278   _P3_6           BIT 0xb6
0000            279   _P3_7           BIT 0xb7
0000            280   _IP_7           BIT 0xbf
0000            281   _PSPI0          BIT 0xbe
0000            282   _PT2            BIT 0xbd
0000            283   _PS0            BIT 0xbc
0000            284   _PT1            BIT 0xbb
0000            285   _PX1            BIT 0xba
0000            286   _PT0            BIT 0xb9
0000            287   _PX0            BIT 0xb8
0000            288   _MASTER0        BIT 0xc7
0000            289   _TXMODE0        BIT 0xc6
0000            290   _STA0           BIT 0xc5
0000            291   _STO0           BIT 0xc4
0000            292   _ACKRQ0         BIT 0xc3
0000            293   _ARBLOST0       BIT 0xc2
0000            294   _ACK0           BIT 0xc1
0000            295   _SI0            BIT 0xc0
0000            296   _MASTER1        BIT 0xc7
0000            297   _TXMODE1        BIT 0xc6
0000            298   _STA1           BIT 0xc5
0000            299   _STO1           BIT 0xc4
0000            300   _ACKRQ1         BIT 0xc3
0000            301   _ARBLOST1       BIT 0xc2
0000            302   _ACK1           BIT 0xc1
0000            303   _SI1            BIT 0xc0
0000            304   _TF2            BIT 0xcf
0000            305   _TF2H           BIT 0xcf
0000            306   _TF2L           BIT 0xce
0000            307   _TF2LEN         BIT 0xcd
0000            308   _TF2CEN         BIT 0xcc
0000            309   _T2SPLIT        BIT 0xcb
0000            310   _TR2            BIT 0xca
0000            311   _T2CSS          BIT 0xc9
0000            312   _T2XCLK         BIT 0xc8
0000            313   _TF5H           BIT 0xcf
0000            314   _TF5L           BIT 0xce
0000            315   _TF5LEN         BIT 0xcd
0000            316   _TMR5CN_4       BIT 0xcc
0000            317   _T5SPLIT        BIT 0xcb
0000            318   _TR5            BIT 0xca
0000            319   _TMR5CN_1       BIT 0xc9
0000            320   _T5XCLK         BIT 0xc8
0000            321   _CY             BIT 0xd7
0000            322   _AC             BIT 0xd6
0000            323   _F0             BIT 0xd5
0000            324   _RS1            BIT 0xd4
0000            325   _RS0            BIT 0xd3
0000            326   _OV             BIT 0xd2
0000            327   _F1             BIT 0xd1
0000            328   _PARITY         BIT 0xd0
0000            329   _CF             BIT 0xdf
0000            330   _CR             BIT 0xde
0000            331   _PCA0CN_5       BIT 0xde
0000            332   _CCF4           BIT 0xdc
0000            333   _CCF3           BIT 0xdb
0000            334   _CCF2           BIT 0xda
0000            335   _CCF1           BIT 0xd9
0000            336   _CCF0           BIT 0xd8
0000            337   _ACC_7          BIT 0xe7
0000            338   _ACC_6          BIT 0xe6
0000            339   _ACC_5          BIT 0xe5
0000            340   _ACC_4          BIT 0xe4
0000            341   _ACC_3          BIT 0xe3
0000            342   _ACC_2          BIT 0xe2
0000            343   _ACC_1          BIT 0xe1
0000            344   _ACC_0          BIT 0xe0
0000            345   _AD0EN          BIT 0xef
0000            346   _AD0TM          BIT 0xee
0000            347   _AD0INT         BIT 0xed
0000            348   _AD0BUSY        BIT 0xec
0000            349   _AD0WINT        BIT 0xeb
0000            350   _AD0CM2         BIT 0xea
0000            351   _AD0CM1         BIT 0xe9
0000            352   _AD0CM0         BIT 0xe8
0000            353   _B_7            BIT 0xf7
0000            354   _B_6            BIT 0xf6
0000            355   _B_5            BIT 0xf5
0000            356   _B_4            BIT 0xf4
0000            357   _B_3            BIT 0xf3
0000            358   _B_2            BIT 0xf2
0000            359   _B_1            BIT 0xf1
0000            360   _B_0            BIT 0xf0
0000            361   _SPIF           BIT 0xff
0000            362   _WCOL           BIT 0xfe
0000            363   _MODF           BIT 0xfd
0000            364   _RXOVRN         BIT 0xfc
0000            365   _NSSMD1         BIT 0xfb
0000            366   _NSSMD0         BIT 0xfa
0000            367   _TXBMT          BIT 0xf9
0000            368   _SPIEN          BIT 0xf8
0000            369   ;--------------------------------------------------------
0000            370   ; overlayable register banks
0000            371   ;--------------------------------------------------------
0000            372            rbank0 segment data overlay
0000            373   ;--------------------------------------------------------
0000            374   ; internal ram data
0000            375   ;--------------------------------------------------------
0000            376            rseg R_DSEG
0000            377   _pwm_count:
0000            378            ds 1
0001            379   _mode:
0001            380            ds 1
0002            381   _pwm_both:
0002            382            ds 1
0003            383   _pwm_Left0:
0003            384            ds 1
0004            385   _pwm_Left1:
0004            386            ds 1
0005            387   _pwm_Right0:
0005            388            ds 1
0006            389   _pwm_Right1:
0006            390            ds 1
0007            391   _direction:
0007            392            ds 1
0008            393   _currentcmd:
0008            394            ds 1
0009            395   _currentstate:
0009            396            ds 1
000A            397   _main_v1_1_57:
000A            398            ds 4
000E            399   _main_v2_1_57:
000E            400            ds 4
0012            401   _linetrack_forwardbackward_1_76:
0012            402            ds 2
0014            403   _linetrack_vleft_1_77:
0014            404            ds 4
0018            405   _linetrack_vright_1_77:
0018            406            ds 4
001C            407   _linetrack_sloc0_1_0:
001C            408            ds 4
0020            409   _turncar_v_1_84:
0020            410            ds 4
0024            411   _turncar_direction_1_84:
0024            412            ds 1
0025            413   _uturn_vleft_1_90:
0025            414            ds 4
0029            415   _uturn_vright_1_90:
0029            416            ds 4
002D            417   ;--------------------------------------------------------
002D            418   ; overlayable items in internal ram 
002D            419   ;--------------------------------------------------------
0000            420            rseg    R_OSEG
0000            421            rseg    R_OSEG
0000            422   _movecar_PARM_2:
0000            423            ds 2
0002            424   ;--------------------------------------------------------
0002            425   ; indirectly addressable internal ram data
0002            426   ;--------------------------------------------------------
0000            427            rseg R_ISEG
0000            428   ;--------------------------------------------------------
0000            429   ; absolute internal ram data
0000            430   ;--------------------------------------------------------
0000            431            DSEG
0000            432   ;--------------------------------------------------------
0000            433   ; bit data
0000            434   ;--------------------------------------------------------
0000            435            rseg R_BSEG
0000            436   _Timer2_ISR_sloc0_1_0:
0000            437            DBIT    1
0001            438   ;--------------------------------------------------------
0001            439   ; paged external ram data
0001            440   ;--------------------------------------------------------
0000            441            rseg R_PSEG
0000            442   ;--------------------------------------------------------
0000            443   ; external ram data
0000            444   ;--------------------------------------------------------
0000            445            rseg R_XSEG
0000            446   ;--------------------------------------------------------
0000            447   ; absolute external ram data
0000            448   ;--------------------------------------------------------
0000            449            XSEG
0000            450   ;--------------------------------------------------------
0000            451   ; external initialized ram data
0000            452   ;--------------------------------------------------------
0000            453            rseg R_IXSEG
0000            454            rseg R_HOME
0000            455            rseg R_GSINIT
0000            456            rseg R_CSEG
0000            457   ;--------------------------------------------------------
0000            458   ; Reset entry point and interrupt vectors
0000            459   ;--------------------------------------------------------
0000            460            CSEG at 0x0000
0000 020100     461            ljmp    _crt0
002B            462            CSEG at 0x002b
002B 020100     463            ljmp    _Timer2_ISR
002E            464   ;--------------------------------------------------------
002E            465   ; global & static initialisations
002E            466   ;--------------------------------------------------------
0000            467            rseg R_HOME
0000            468            rseg R_GSINIT
0000            469            rseg R_GSINIT
0000            470   ;--------------------------------------------------------
0000            471   ; data variables initialization
0000            472   ;--------------------------------------------------------
0000            473            rseg R_DINIT
0000            474   ;        robot.c:10: volatile  char pwm_count=0;
0000 756000     475            mov     _pwm_count,#0x00
0003            476   ;        robot.c:11: volatile  char mode = 0;
0003 752000     477            mov     _mode,#0x00
0006            478   ;        robot.c:12: volatile  char pwm_both =0;
0006 75F000     479            mov     _pwm_both,#0x00
0009            480   ;        robot.c:13: volatile  char pwm_Left0 = 0; //p1.5
0009 75B000     481            mov     _pwm_Left0,#0x00
000C            482   ;        robot.c:14: volatile  char pwm_Left1 = 0; //p1.6
000C 757000     483            mov     _pwm_Left1,#0x00
000F            484   ;        robot.c:15: volatile  char pwm_Right0 = 0; //p2.0
000F 753000     485            mov     _pwm_Right0,#0x00
0012            486   ;        robot.c:16: volatile  char pwm_Right1 = 0; //p2.1
0012 75F000     487            mov     _pwm_Right1,#0x00
0015            488   ;        robot.c:17: volatile  char direction = 0; // 1 for back 0 for forward
0015 75B000     489            mov     _direction,#0x00
0018            490   ;        robot.c:19: volatile  char currentcmd = 0;
0018 757000     491            mov     _currentcmd,#0x00
001B            492   ;        robot.c:20: volatile  char currentstate = 1;
001B 753001     493            mov     _currentstate,#0x01
001E            494            ; The linker places a 'ret' at the end of segment R_DINIT.
001E            495   ;--------------------------------------------------------
001E            496   ; code
001E            497   ;--------------------------------------------------------
0000            498            rseg R_CSEG
0000            499   ;------------------------------------------------------------
0000            500   ;Allocation info for local variables in function 'main'
0000            501   ;------------------------------------------------------------
0000            502   ;v1                        Allocated with name '_main_v1_1_57'
0000            503   ;v2                        Allocated with name '_main_v2_1_57'
0000            504   ;i                         Allocated to registers 
0000            505   ;------------------------------------------------------------
0000            506   ;        robot.c:22: void main(void) {
0000            507   ;        -----------------------------------------
0000            508   ;         function main
0000            509   ;        -----------------------------------------
0000            510   _main:
0000            511            using   0
0000            512   ;        robot.c:24: volatile float v1 = 0;
0000 75F000     513            mov     _main_v1_1_57,#0x00
0003 75F100     514            mov     (_main_v1_1_57 + 1),#0x00
0006 75F200     515            mov     (_main_v1_1_57 + 2),#0x00
0009 75F300     516            mov     (_main_v1_1_57 + 3),#0x00
000C            517   ;        robot.c:25: volatile float v2 = 0;
000C 753000     518            mov     _main_v2_1_57,#0x00
000F 753100     519            mov     (_main_v2_1_57 + 1),#0x00
0012 753200     520            mov     (_main_v2_1_57 + 2),#0x00
0015 753300     521            mov     (_main_v2_1_57 + 3),#0x00
0018            522   ;        robot.c:28: MOTOR_LEFT0 = 0;
0018 C295       523            clr     _P1_5
001A            524   ;        robot.c:29: MOTOR_LEFT1 = 0;
001A C296       525            clr     _P1_6
001C            526   ;        robot.c:30: MOTOR_RIGHT0 = 0;
001C C2A0       527            clr     _P2_0
001E            528   ;        robot.c:31: MOTOR_RIGHT1 = 0;
001E C2A1       529            clr     _P2_1
0020            530   ;        robot.c:34: currentstate = 1;           //1-FORWARD, 2-BACKWARDS, 3-STOPPED, 4-DEBUGGER
0020 753001     531            mov     _currentstate,#0x01
0023            532   ;        robot.c:35: currentcmd = 0;             //0-NO COMMAND, 1-TURN LEFT, 2-TURN RIGHT, 3-FORWARDS, 4-BACKWARDS, 5-STOP, 6-UTURN
0023 757000     533            mov     _currentcmd,#0x00
0026            534   ;        robot.c:38: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0026 7470       535            mov     a,#__str_0
0028 C0E0       536            push    acc
002A 7495       537            mov     a,#(__str_0 >> 8)
002C C0E0       538            push    acc
002E 7480       539            mov     a,#0x80
0030 C0E0       540            push    acc
0032 120100     541            lcall   _printf
0035 1581       542            dec     sp
0037 1581       543            dec     sp
0039 1581       544            dec     sp
003B            545   ;        robot.c:41: InitPinADC(2, 3); // Configure P2.3 as analog input (tank1)
003B 750003     546            mov     _InitPinADC_PARM_2,#0x03
003E 758202     547            mov     dpl,#0x02
0041 120100     548            lcall   _InitPinADC
0044            549   ;        robot.c:42: InitPinADC(2, 4); // Configure P2.4 as analog input         (tank1)
0044 750004     550            mov     _InitPinADC_PARM_2,#0x04
0047 758202     551            mov     dpl,#0x02
004A 120100     552            lcall   _InitPinADC
004D            553   ;        robot.c:43: InitPinADC(2, 5); // Configure P2.5 as analog input (tank2)
004D 750005     554            mov     _InitPinADC_PARM_2,#0x05
0050 758202     555            mov     dpl,#0x02
0053 120100     556            lcall   _InitPinADC
0056            557   ;        robot.c:44: InitPinADC(2, 6); // Configure P2.6 as analog input (tank2)
0056 750006     558            mov     _InitPinADC_PARM_2,#0x06
0059 758202     559            mov     dpl,#0x02
005C 120100     560            lcall   _InitPinADC
005F            561   ;        robot.c:47: InitADC();
005F 120100     562            lcall   _InitADC
0062            563   ;        robot.c:51: while (1) {         
0062            564   L002029?:
0062            565   ;        robot.c:54: currentcmd = readData(); 
0062 120100     566            lcall   _readData
0065 858270     567            mov     _currentcmd,dpl
0068            568   ;        robot.c:59: waitms(100);
0068 900064     569            mov     dptr,#0x0064
006B 120100     570            lcall   _waitms
006E            571   ;        robot.c:60: continue;           
006E            572   ;        robot.c:166: }
006E 8001       573            sjmp    L002029?
0070            574   ;------------------------------------------------------------
0070            575   ;Allocation info for local variables in function 'Timer2_ISR'
0070            576   ;------------------------------------------------------------
0070            577   ;------------------------------------------------------------
0070            578   ;        robot.c:170: void Timer2_ISR (void) interrupt 5 {
0070            579   ;        -----------------------------------------
0070            580   ;         function Timer2_ISR
0070            581   ;        -----------------------------------------
0070            582   _Timer2_ISR:
0070 C0E0       583            push    acc
0072 C0F0       584            push    b
0074 C0D0       585            push    psw
0076 75D000     586            mov     psw,#0x00
0079            587   ;        robot.c:171: TF2H = 0; // Clear Timer2 interrupt flag
0079 C2CF       588            clr     _TF2H
007B            589   ;        robot.c:173: pwm_count++;
007B 0560       590            inc     _pwm_count
007D            591   ;        robot.c:174: if(pwm_count>100) pwm_count=0;
007D C3         592            clr     c
007E 74E4       593            mov     a,#(0x64 ^ 0x80)
0080 8560F0     594            mov     b,_pwm_count
0083 63F080     595            xrl     b,#0x80
0086 95F0       596            subb    a,b
0088 5001       597            jnc     L003002?
008A 756000     598            mov     _pwm_count,#0x00
008D            599   L003002?:
008D            600   ;        robot.c:177: MOTOR_LEFT0 = pwm_count > pwm_Left0 ? 0 : 1; //p1.5
008D C3         601            clr     c
008E E5B0       602            mov     a,_pwm_Left0
0090 6480       603            xrl     a,#0x80
0092 8560F0     604            mov     b,_pwm_count
0095 63F080     605            xrl     b,#0x80
0098 95F0       606            subb    a,b
009A 92F0       607            mov  _Timer2_ISR_sloc0_1_0,c
009C B3         608            cpl     c
009D 9295       609            mov     _P1_5,c
009F            610   ;        robot.c:178: MOTOR_LEFT1 = pwm_count > pwm_Left1 ? 0 : 1; //p1.6
009F C3         611            clr     c
00A0 E570       612            mov     a,_pwm_Left1
00A2 6480       613            xrl     a,#0x80
00A4 8560F0     614            mov     b,_pwm_count
00A7 63F080     615            xrl     b,#0x80
00AA 95F0       616            subb    a,b
00AC 92F0       617            mov  _Timer2_ISR_sloc0_1_0,c
00AE B3         618            cpl     c
00AF 9296       619            mov     _P1_6,c
00B1            620   ;        robot.c:179: MOTOR_RIGHT0 = pwm_count > pwm_Right0 ? 0 : 1; //p2.0
00B1 C3         621            clr     c
00B2 E530       622            mov     a,_pwm_Right0
00B4 6480       623            xrl     a,#0x80
00B6 8560F0     624            mov     b,_pwm_count
00B9 63F080     625            xrl     b,#0x80
00BC 95F0       626            subb    a,b
00BE 92F0       627            mov  _Timer2_ISR_sloc0_1_0,c
00C0 B3         628            cpl     c
00C1 92A0       629            mov     _P2_0,c
00C3            630   ;        robot.c:180: MOTOR_RIGHT1 = pwm_count > pwm_Right1 ? 0 : 1; //p2.1
00C3 C3         631            clr     c
00C4 E5F0       632            mov     a,_pwm_Right1
00C6 6480       633            xrl     a,#0x80
00C8 8560F0     634            mov     b,_pwm_count
00CB 63F080     635            xrl     b,#0x80
00CE 95F0       636            subb    a,b
00D0 92F0       637            mov  _Timer2_ISR_sloc0_1_0,c
00D2 B3         638            cpl     c
00D3 92A1       639            mov     _P2_1,c
00D5 D0D0       640            pop     psw
00D7 D0F0       641            pop     b
00D9 D0E0       642            pop     acc
00DB 32         643            reti
00DC            644   ;        eliminated unneeded push/pop dpl
00DC            645   ;        eliminated unneeded push/pop dph
00DC            646   ;------------------------------------------------------------
00DC            647   ;Allocation info for local variables in function 'forward_backward'
00DC            648   ;------------------------------------------------------------
00DC            649   ;direction                 Allocated to registers r2 
00DC            650   ;------------------------------------------------------------
00DC            651   ;        robot.c:187: void forward_backward(unsigned char direction) {
00DC            652   ;        -----------------------------------------
00DC            653   ;         function forward_backward
00DC            654   ;        -----------------------------------------
00DC            655   _forward_backward:
00DC            656   ;        robot.c:188: if (direction == 0) { //p2.1,1.6 on
00DC E582       657            mov     a,dpl
00DE FA         658            mov     r2,a
00DF 7001       659            jnz     L004004?
00E1            660   ;        robot.c:189: pwm_Left0 = pwm_Right0 = -1;
00E1 7530FF     661            mov     _pwm_Right0,#0xFF
00E4 75B0FF     662            mov     _pwm_Left0,#0xFF
00E7            663   ;        robot.c:190: pwm_Left1 = pwm_Right1 = pwm_both;  //MOTOR_LEFT1 = MOTOR_RIGHT1 = pwm_both;
00E7 85F0F0     664            mov     _pwm_Right1,_pwm_both
00EA 85F070     665            mov     _pwm_Left1,_pwm_both
00ED 22         666            ret
00EE            667   L004004?:
00EE            668   ;        robot.c:193: else if (direction == 1) { //p2.0,1.5 on
00EE BA0100     669            cjne    r2,#0x01,L004006?
00F1            670   ;        robot.c:194: pwm_Left1 = pwm_Right1 = -1;
00F1 75F0FF     671            mov     _pwm_Right1,#0xFF
00F4 7570FF     672            mov     _pwm_Left1,#0xFF
00F7            673   ;        robot.c:195: pwm_Left0 = pwm_Right0 = pwm_both; 
00F7 85F030     674            mov     _pwm_Right0,_pwm_both
00FA 85F0B0     675            mov     _pwm_Left0,_pwm_both
00FD            676   L004006?:
00FD 22         677            ret
00FE            678   ;------------------------------------------------------------
00FE            679   ;Allocation info for local variables in function 'readData'
00FE            680   ;------------------------------------------------------------
00FE            681   ;command                   Allocated to registers r2 
00FE            682   ;------------------------------------------------------------
00FE            683   ;        robot.c:273: unsigned char readData(void) {
00FE            684   ;        -----------------------------------------
00FE            685   ;         function readData
00FE            686   ;        -----------------------------------------
00FE            687   _readData:
00FE            688   ;        robot.c:274: unsigned char command = 0;
00FE 7A00       689            mov     r2,#0x00
0100            690   ;        robot.c:275: if (!COMMAND_PIN) {
0100 209140     691            jb      _P1_1,L005002?
0103            692   ;        robot.c:276: P1_4 = 1;
0103 D294       693            setb    _P1_4
0105            694   ;        robot.c:277: waitms((int)(CMDFRQ + CMDFRQ/2));
0105 900069     695            mov     dptr,#0x0069
0108 120100     696            lcall   _waitms
010B            697   ;        robot.c:278: P1_4 = 0;
010B C294       698            clr     _P1_4
010D            699   ;        robot.c:279: command |= COMMAND_PIN<<1;
010D A291       700            mov     c,_P1_1
010F E4         701            clr     a
0110 33         702            rlc     a
0111 25E0       703            add     a,acc
0113 FA         704            mov     r2,a
0114            705   ;        robot.c:280: waitms(CMDFRQ);
0114 900046     706            mov     dptr,#0x0046
0117 C002       707            push    ar2
0119 120100     708            lcall   _waitms
011C D002       709            pop     ar2
011E            710   ;        robot.c:281: P1_4 = 1;
011E D294       711            setb    _P1_4
0120            712   ;        robot.c:282: command |= COMMAND_PIN<<2;
0120 A291       713            mov     c,_P1_1
0122 E4         714            clr     a
0123 33         715            rlc     a
0124 25E0       716            add     a,acc
0126 25E0       717            add     a,acc
0128 4202       718            orl     ar2,a
012A            719   ;        robot.c:283: waitms(CMDFRQ);
012A 900046     720            mov     dptr,#0x0046
012D C002       721            push    ar2
012F 120100     722            lcall   _waitms
0132 D002       723            pop     ar2
0134            724   ;        robot.c:284: P1_4 = 0;
0134 C294       725            clr     _P1_4
0136            726   ;        robot.c:285: command |= COMMAND_PIN<<3;
0136 A291       727            mov     c,_P1_1
0138 E4         728            clr     a
0139 33         729            rlc     a
013A C4         730            swap    a
013B 03         731            rr      a
013C 54F8       732            anl     a,#0xf8
013E FB         733            mov     r3,a
013F 4202       734            orl     ar2,a
0141            735   L005002?:
0141            736   ;        robot.c:288: printf("Command received: %d\n", command);
0141 8A03       737            mov     ar3,r2
0143 7C00       738            mov     r4,#0x00
0145 C002       739            push    ar2
0147 C003       740            push    ar3
0149 C004       741            push    ar4
014B 7480       742            mov     a,#__str_3
014D C0E0       743            push    acc
014F 7499       744            mov     a,#(__str_3 >> 8)
0151 C0E0       745            push    acc
0153 7480       746            mov     a,#0x80
0155 C0E0       747            push    acc
0157 120100     748            lcall   _printf
015A E581       749            mov     a,sp
015C 24FB       750            add     a,#0xfb
015E F581       751            mov     sp,a
0160 D002       752            pop     ar2
0162            753   ;        robot.c:289: return command;
0162 8A82       754            mov     dpl,r2
0164 22         755            ret
0165            756   ;------------------------------------------------------------
0165            757   ;Allocation info for local variables in function 'linetrack'
0165            758   ;------------------------------------------------------------
0165            759   ;forwardbackward           Allocated with name '_linetrack_forwardbackward_1_76'
0165            760   ;vleft                     Allocated with name '_linetrack_vleft_1_77'
0165            761   ;vright                    Allocated with name '_linetrack_vright_1_77'
0165            762   ;sloc0                     Allocated with name '_linetrack_sloc0_1_0'
0165            763   ;------------------------------------------------------------
0165            764   ;        robot.c:296: void linetrack (int forwardbackward) {
0165            765   ;        -----------------------------------------
0165            766   ;         function linetrack
0165            767   ;        -----------------------------------------
0165            768   _linetrack:
0165 858280     769            mov     _linetrack_forwardbackward_1_76,dpl
0168 858381     770            mov     (_linetrack_forwardbackward_1_76 + 1),dph
016B            771   ;        robot.c:302: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
016B 75820B     772            mov     dpl,#0x0B
016E 120100     773            lcall   _Volts_at_Pin
0171 8582D0     774            mov     _linetrack_vleft_1_77,dpl
0174 8583D1     775            mov     (_linetrack_vleft_1_77 + 1),dph
0177 85F0D2     776            mov     (_linetrack_vleft_1_77 + 2),b
017A F5D3       777            mov     (_linetrack_vleft_1_77 + 3),a
017C            778   ;        robot.c:303: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
017C 75820C     779            mov     dpl,#0x0C
017F 120100     780            lcall   _Volts_at_Pin
0182 858220     781            mov     _linetrack_vright_1_77,dpl
0185 858321     782            mov     (_linetrack_vright_1_77 + 1),dph
0188 85F022     783            mov     (_linetrack_vright_1_77 + 2),b
018B F523       784            mov     (_linetrack_vright_1_77 + 3),a
018D            785   ;        robot.c:306: if (forwardbackward == 2) {
018D 7402       786            mov     a,#0x02
018F B58040     787            cjne    a,_linetrack_forwardbackward_1_76,L006013?
0192 E4         788            clr     a
0193 B58140     789            cjne    a,(_linetrack_forwardbackward_1_76 + 1),L006013?
0196 8001       790            sjmp    L006014?
0198            791   L006013?:
0198 8001       792            sjmp    L006002?
019A            793   L006014?:
019A            794   ;        robot.c:307: vleft=Volts_at_Pin(LQFP32_MUX_P2_5);
019A 75820D     795            mov     dpl,#0x0D
019D 120100     796            lcall   _Volts_at_Pin
01A0 8582D0     797            mov     _linetrack_vleft_1_77,dpl
01A3 8583D1     798            mov     (_linetrack_vleft_1_77 + 1),dph
01A6 85F0D2     799            mov     (_linetrack_vleft_1_77 + 2),b
01A9 F5D3       800            mov     (_linetrack_vleft_1_77 + 3),a
01AB            801   ;        robot.c:308: vright=Volts_at_Pin(LQFP32_MUX_P2_6);
01AB 75820E     802            mov     dpl,#0x0E
01AE 120100     803            lcall   _Volts_at_Pin
01B1 858220     804            mov     _linetrack_vright_1_77,dpl
01B4 858321     805            mov     (_linetrack_vright_1_77 + 1),dph
01B7 85F022     806            mov     (_linetrack_vright_1_77 + 2),b
01BA F523       807            mov     (_linetrack_vright_1_77 + 3),a
01BC            808   L006002?:
01BC            809   ;        robot.c:312: pwm_Left0 = -1;
01BC 75B0FF     810            mov     _pwm_Left0,#0xFF
01BF            811   ;        robot.c:313: pwm_Left1 = vright*vright*75/(vright*vright+vleft*vleft);
01BF C020       812            push    _linetrack_vright_1_77
01C1 C021       813            push    (_linetrack_vright_1_77 + 1)
01C3 C022       814            push    (_linetrack_vright_1_77 + 2)
01C5 C023       815            push    (_linetrack_vright_1_77 + 3)
01C7 852082     816            mov     dpl,_linetrack_vright_1_77
01CA 852183     817            mov     dph,(_linetrack_vright_1_77 + 1)
01CD 8522F0     818            mov     b,(_linetrack_vright_1_77 + 2)
01D0 E523       819            mov     a,(_linetrack_vright_1_77 + 3)
01D2 120100     820            lcall   ___fsmul
01D5 AC82       821            mov     r4,dpl
01D7 AD83       822            mov     r5,dph
01D9 AEF0       823            mov     r6,b
01DB FF         824            mov     r7,a
01DC E581       825            mov     a,sp
01DE 24FC       826            add     a,#0xfc
01E0 F581       827            mov     sp,a
01E2 C004       828            push    ar4
01E4 C005       829            push    ar5
01E6 C006       830            push    ar6
01E8 C007       831            push    ar7
01EA 900000     832            mov     dptr,#0x0000
01ED 75F096     833            mov     b,#0x96
01F0 7442       834            mov     a,#0x42
01F2 120100     835            lcall   ___fsmul
01F5 AC82       836            mov     r4,dpl
01F7 AD83       837            mov     r5,dph
01F9 AEF0       838            mov     r6,b
01FB FF         839            mov     r7,a
01FC E581       840            mov     a,sp
01FE 24FC       841            add     a,#0xfc
0200 F581       842            mov     sp,a
0202 C004       843            push    ar4
0204 C005       844            push    ar5
0206 C006       845            push    ar6
0208 C007       846            push    ar7
020A C020       847            push    _linetrack_vright_1_77
020C C021       848            push    (_linetrack_vright_1_77 + 1)
020E C022       849            push    (_linetrack_vright_1_77 + 2)
0210 C023       850            push    (_linetrack_vright_1_77 + 3)
0212 852082     851            mov     dpl,_linetrack_vright_1_77
0215 852183     852            mov     dph,(_linetrack_vright_1_77 + 1)
0218 8522F0     853            mov     b,(_linetrack_vright_1_77 + 2)
021B E523       854            mov     a,(_linetrack_vright_1_77 + 3)
021D 120100     855            lcall   ___fsmul
0220 858270     856            mov     _linetrack_sloc0_1_0,dpl
0223 858371     857            mov     (_linetrack_sloc0_1_0 + 1),dph
0226 85F072     858            mov     (_linetrack_sloc0_1_0 + 2),b
0229 F573       859            mov     (_linetrack_sloc0_1_0 + 3),a
022B E581       860            mov     a,sp
022D 24FC       861            add     a,#0xfc
022F F581       862            mov     sp,a
0231 C0D0       863            push    _linetrack_vleft_1_77
0233 C0D1       864            push    (_linetrack_vleft_1_77 + 1)
0235 C0D2       865            push    (_linetrack_vleft_1_77 + 2)
0237 C0D3       866            push    (_linetrack_vleft_1_77 + 3)
0239 85D082     867            mov     dpl,_linetrack_vleft_1_77
023C 85D183     868            mov     dph,(_linetrack_vleft_1_77 + 1)
023F 85D2F0     869            mov     b,(_linetrack_vleft_1_77 + 2)
0242 E5D3       870            mov     a,(_linetrack_vleft_1_77 + 3)
0244 120100     871            lcall   ___fsmul
0247 AA82       872            mov     r2,dpl
0249 AB83       873            mov     r3,dph
024B A8F0       874            mov     r0,b
024D F9         875            mov     r1,a
024E E581       876            mov     a,sp
0250 24FC       877            add     a,#0xfc
0252 F581       878            mov     sp,a
0254 C002       879            push    ar2
0256 C003       880            push    ar3
0258 C000       881            push    ar0
025A C001       882            push    ar1
025C 857082     883            mov     dpl,_linetrack_sloc0_1_0
025F 857183     884            mov     dph,(_linetrack_sloc0_1_0 + 1)
0262 8572F0     885            mov     b,(_linetrack_sloc0_1_0 + 2)
0265 E573       886            mov     a,(_linetrack_sloc0_1_0 + 3)
0267 120100     887            lcall   ___fsadd
026A AA82       888            mov     r2,dpl
026C AB83       889            mov     r3,dph
026E A8F0       890            mov     r0,b
0270 F9         891            mov     r1,a
0271 E581       892            mov     a,sp
0273 24FC       893            add     a,#0xfc
0275 F581       894            mov     sp,a
0277 D007       895            pop     ar7
0279 D006       896            pop     ar6
027B D005       897            pop     ar5
027D D004       898            pop     ar4
027F C002       899            push    ar2
0281 C003       900            push    ar3
0283 C000       901            push    ar0
0285 C001       902            push    ar1
0287 8C82       903            mov     dpl,r4
0289 8D83       904            mov     dph,r5
028B 8EF0       905            mov     b,r6
028D EF         906            mov     a,r7
028E 120100     907            lcall   ___fsdiv
0291 AA82       908            mov     r2,dpl
0293 AB83       909            mov     r3,dph
0295 ACF0       910            mov     r4,b
0297 FD         911            mov     r5,a
0298 E581       912            mov     a,sp
029A 24FC       913            add     a,#0xfc
029C F581       914            mov     sp,a
029E 8A82       915            mov     dpl,r2
02A0 8B83       916            mov     dph,r3
02A2 8CF0       917            mov     b,r4
02A4 ED         918            mov     a,r5
02A5 120100     919            lcall   ___fs2schar
02A8 858270     920            mov     _pwm_Left1,dpl
02AB            921   ;        robot.c:314: pwm_Right1 = -1;
02AB 75F0FF     922            mov     _pwm_Right1,#0xFF
02AE            923   ;        robot.c:315: pwm_Right0 = vleft*vleft*75/(vright*vright+vleft*vleft);
02AE C0D0       924            push    _linetrack_vleft_1_77
02B0 C0D1       925            push    (_linetrack_vleft_1_77 + 1)
02B2 C0D2       926            push    (_linetrack_vleft_1_77 + 2)
02B4 C0D3       927            push    (_linetrack_vleft_1_77 + 3)
02B6 85D082     928            mov     dpl,_linetrack_vleft_1_77
02B9 85D183     929            mov     dph,(_linetrack_vleft_1_77 + 1)
02BC 85D2F0     930            mov     b,(_linetrack_vleft_1_77 + 2)
02BF E5D3       931            mov     a,(_linetrack_vleft_1_77 + 3)
02C1 120100     932            lcall   ___fsmul
02C4 AA82       933            mov     r2,dpl
02C6 AB83       934            mov     r3,dph
02C8 ACF0       935            mov     r4,b
02CA FD         936            mov     r5,a
02CB E581       937            mov     a,sp
02CD 24FC       938            add     a,#0xfc
02CF F581       939            mov     sp,a
02D1 C002       940            push    ar2
02D3 C003       941            push    ar3
02D5 C004       942            push    ar4
02D7 C005       943            push    ar5
02D9 900000     944            mov     dptr,#0x0000
02DC 75F096     945            mov     b,#0x96
02DF 7442       946            mov     a,#0x42
02E1 120100     947            lcall   ___fsmul
02E4 AA82       948            mov     r2,dpl
02E6 AB83       949            mov     r3,dph
02E8 ACF0       950            mov     r4,b
02EA FD         951            mov     r5,a
02EB E581       952            mov     a,sp
02ED 24FC       953            add     a,#0xfc
02EF F581       954            mov     sp,a
02F1 C002       955            push    ar2
02F3 C003       956            push    ar3
02F5 C004       957            push    ar4
02F7 C005       958            push    ar5
02F9 C020       959            push    _linetrack_vright_1_77
02FB C021       960            push    (_linetrack_vright_1_77 + 1)
02FD C022       961            push    (_linetrack_vright_1_77 + 2)
02FF C023       962            push    (_linetrack_vright_1_77 + 3)
0301 852082     963            mov     dpl,_linetrack_vright_1_77
0304 852183     964            mov     dph,(_linetrack_vright_1_77 + 1)
0307 8522F0     965            mov     b,(_linetrack_vright_1_77 + 2)
030A E523       966            mov     a,(_linetrack_vright_1_77 + 3)
030C 120100     967            lcall   ___fsmul
030F 858270     968            mov     _linetrack_sloc0_1_0,dpl
0312 858371     969            mov     (_linetrack_sloc0_1_0 + 1),dph
0315 85F072     970            mov     (_linetrack_sloc0_1_0 + 2),b
0318 F573       971            mov     (_linetrack_sloc0_1_0 + 3),a
031A E581       972            mov     a,sp
031C 24FC       973            add     a,#0xfc
031E F581       974            mov     sp,a
0320 C0D0       975            push    _linetrack_vleft_1_77
0322 C0D1       976            push    (_linetrack_vleft_1_77 + 1)
0324 C0D2       977            push    (_linetrack_vleft_1_77 + 2)
0326 C0D3       978            push    (_linetrack_vleft_1_77 + 3)
0328 85D082     979            mov     dpl,_linetrack_vleft_1_77
032B 85D183     980            mov     dph,(_linetrack_vleft_1_77 + 1)
032E 85D2F0     981            mov     b,(_linetrack_vleft_1_77 + 2)
0331 E5D3       982            mov     a,(_linetrack_vleft_1_77 + 3)
0333 120100     983            lcall   ___fsmul
0336 AE82       984            mov     r6,dpl
0338 AF83       985            mov     r7,dph
033A A8F0       986            mov     r0,b
033C F9         987            mov     r1,a
033D E581       988            mov     a,sp
033F 24FC       989            add     a,#0xfc
0341 F581       990            mov     sp,a
0343 C006       991            push    ar6
0345 C007       992            push    ar7
0347 C000       993            push    ar0
0349 C001       994            push    ar1
034B 857082     995            mov     dpl,_linetrack_sloc0_1_0
034E 857183     996            mov     dph,(_linetrack_sloc0_1_0 + 1)
0351 8572F0     997            mov     b,(_linetrack_sloc0_1_0 + 2)
0354 E573       998            mov     a,(_linetrack_sloc0_1_0 + 3)
0356 120100     999            lcall   ___fsadd
0359 AE82      1000            mov     r6,dpl
035B AF83      1001            mov     r7,dph
035D A8F0      1002            mov     r0,b
035F F9        1003            mov     r1,a
0360 E581      1004            mov     a,sp
0362 24FC      1005            add     a,#0xfc
0364 F581      1006            mov     sp,a
0366 D005      1007            pop     ar5
0368 D004      1008            pop     ar4
036A D003      1009            pop     ar3
036C D002      1010            pop     ar2
036E C006      1011            push    ar6
0370 C007      1012            push    ar7
0372 C000      1013            push    ar0
0374 C001      1014            push    ar1
0376 8A82      1015            mov     dpl,r2
0378 8B83      1016            mov     dph,r3
037A 8CF0      1017            mov     b,r4
037C ED        1018            mov     a,r5
037D 120100    1019            lcall   ___fsdiv
0380 AA82      1020            mov     r2,dpl
0382 AB83      1021            mov     r3,dph
0384 ACF0      1022            mov     r4,b
0386 FD        1023            mov     r5,a
0387 E581      1024            mov     a,sp
0389 24FC      1025            add     a,#0xfc
038B F581      1026            mov     sp,a
038D 8A82      1027            mov     dpl,r2
038F 8B83      1028            mov     dph,r3
0391 8CF0      1029            mov     b,r4
0393 ED        1030            mov     a,r5
0394 120100    1031            lcall   ___fs2schar
0397 858230    1032            mov     _pwm_Right0,dpl
039A           1033   ;        robot.c:319: if ((forwardbackward == 1)||(forwardbackward == 3)) {
039A 7401      1034            mov     a,#0x01
039C B58000    1035            cjne    a,_linetrack_forwardbackward_1_76,L006015?
039F E4        1036            clr     a
03A0 B58100    1037            cjne    a,(_linetrack_forwardbackward_1_76 + 1),L006015?
03A3 8001      1038            sjmp    L006005?
03A5           1039   L006015?:
03A5 7403      1040            mov     a,#0x03
03A7 B58080    1041            cjne    a,_linetrack_forwardbackward_1_76,L006016?
03AA E4        1042            clr     a
03AB B58180    1043            cjne    a,(_linetrack_forwardbackward_1_76 + 1),L006016?
03AE 8001      1044            sjmp    L006017?
03B0           1045   L006016?:
03B0 22        1046            ret
03B1           1047   L006017?:
03B1           1048   L006005?:
03B1           1049   ;        robot.c:321: vleft=Volts_at_Pin(LQFP32_MUX_P2_5);
03B1 75820D    1050            mov     dpl,#0x0D
03B4 120100    1051            lcall   _Volts_at_Pin
03B7 8582D0    1052            mov     _linetrack_vleft_1_77,dpl
03BA 8583D1    1053            mov     (_linetrack_vleft_1_77 + 1),dph
03BD 85F0D2    1054            mov     (_linetrack_vleft_1_77 + 2),b
03C0 F5D3      1055            mov     (_linetrack_vleft_1_77 + 3),a
03C2           1056   ;        robot.c:322: vright=Volts_at_Pin(LQFP32_MUX_P2_6);
03C2 75820E    1057            mov     dpl,#0x0E
03C5 120100    1058            lcall   _Volts_at_Pin
03C8 858220    1059            mov     _linetrack_vright_1_77,dpl
03CB 858321    1060            mov     (_linetrack_vright_1_77 + 1),dph
03CE 85F022    1061            mov     (_linetrack_vright_1_77 + 2),b
03D1 F523      1062            mov     (_linetrack_vright_1_77 + 3),a
03D3           1063   ;        robot.c:325: if (forwardbackward == 3) {
03D3 7403      1064            mov     a,#0x03
03D5 B58000    1065            cjne    a,_linetrack_forwardbackward_1_76,L006018?
03D8 E4        1066            clr     a
03D9 B58100    1067            cjne    a,(_linetrack_forwardbackward_1_76 + 1),L006018?
03DC 8001      1068            sjmp    L006019?
03DE           1069   L006018?:
03DE 8001      1070            sjmp    L006004?
03E0           1071   L006019?:
03E0           1072   ;        robot.c:326: vleft=Volts_at_Pin(LQFP32_MUX_P2_3);
03E0 75820B    1073            mov     dpl,#0x0B
03E3 120100    1074            lcall   _Volts_at_Pin
03E6 8582D0    1075            mov     _linetrack_vleft_1_77,dpl
03E9 8583D1    1076            mov     (_linetrack_vleft_1_77 + 1),dph
03EC 85F0D2    1077            mov     (_linetrack_vleft_1_77 + 2),b
03EF F5D3      1078            mov     (_linetrack_vleft_1_77 + 3),a
03F1           1079   ;        robot.c:327: vright=Volts_at_Pin(LQFP32_MUX_P2_4);
03F1 75820C    1080            mov     dpl,#0x0C
03F4 120100    1081            lcall   _Volts_at_Pin
03F7 858220    1082            mov     _linetrack_vright_1_77,dpl
03FA 858321    1083            mov     (_linetrack_vright_1_77 + 1),dph
03FD 85F022    1084            mov     (_linetrack_vright_1_77 + 2),b
0400 F523      1085            mov     (_linetrack_vright_1_77 + 3),a
0402           1086   L006004?:
0402           1087   ;        robot.c:331: pwm_Left1 = -1;
0402 7570FF    1088            mov     _pwm_Left1,#0xFF
0405           1089   ;        robot.c:332: pwm_Left0 = vright*vright*75/(vright*vright+vleft*vleft);
0405 C020      1090            push    _linetrack_vright_1_77
0407 C021      1091            push    (_linetrack_vright_1_77 + 1)
0409 C022      1092            push    (_linetrack_vright_1_77 + 2)
040B C023      1093            push    (_linetrack_vright_1_77 + 3)
040D 852082    1094            mov     dpl,_linetrack_vright_1_77
0410 852183    1095            mov     dph,(_linetrack_vright_1_77 + 1)
0413 8522F0    1096            mov     b,(_linetrack_vright_1_77 + 2)
0416 E523      1097            mov     a,(_linetrack_vright_1_77 + 3)
0418 120100    1098            lcall   ___fsmul
041B AA82      1099            mov     r2,dpl
041D AB83      1100            mov     r3,dph
041F ACF0      1101            mov     r4,b
0421 FD        1102            mov     r5,a
0422 E581      1103            mov     a,sp
0424 24FC      1104            add     a,#0xfc
0426 F581      1105            mov     sp,a
0428 C002      1106            push    ar2
042A C003      1107            push    ar3
042C C004      1108            push    ar4
042E C005      1109            push    ar5
0430 900000    1110            mov     dptr,#0x0000
0433 75F096    1111            mov     b,#0x96
0436 7442      1112            mov     a,#0x42
0438 120100    1113            lcall   ___fsmul
043B AA82      1114            mov     r2,dpl
043D AB83      1115            mov     r3,dph
043F ACF0      1116            mov     r4,b
0441 FD        1117            mov     r5,a
0442 E581      1118            mov     a,sp
0444 24FC      1119            add     a,#0xfc
0446 F581      1120            mov     sp,a
0448 C002      1121            push    ar2
044A C003      1122            push    ar3
044C C004      1123            push    ar4
044E C005      1124            push    ar5
0450 C020      1125            push    _linetrack_vright_1_77
0452 C021      1126            push    (_linetrack_vright_1_77 + 1)
0454 C022      1127            push    (_linetrack_vright_1_77 + 2)
0456 C023      1128            push    (_linetrack_vright_1_77 + 3)
0458 852082    1129            mov     dpl,_linetrack_vright_1_77
045B 852183    1130            mov     dph,(_linetrack_vright_1_77 + 1)
045E 8522F0    1131            mov     b,(_linetrack_vright_1_77 + 2)
0461 E523      1132            mov     a,(_linetrack_vright_1_77 + 3)
0463 120100    1133            lcall   ___fsmul
0466 858270    1134            mov     _linetrack_sloc0_1_0,dpl
0469 858371    1135            mov     (_linetrack_sloc0_1_0 + 1),dph
046C 85F072    1136            mov     (_linetrack_sloc0_1_0 + 2),b
046F F573      1137            mov     (_linetrack_sloc0_1_0 + 3),a
0471 E581      1138            mov     a,sp
0473 24FC      1139            add     a,#0xfc
0475 F581      1140            mov     sp,a
0477 C0D0      1141            push    _linetrack_vleft_1_77
0479 C0D1      1142            push    (_linetrack_vleft_1_77 + 1)
047B C0D2      1143            push    (_linetrack_vleft_1_77 + 2)
047D C0D3      1144            push    (_linetrack_vleft_1_77 + 3)
047F 85D082    1145            mov     dpl,_linetrack_vleft_1_77
0482 85D183    1146            mov     dph,(_linetrack_vleft_1_77 + 1)
0485 85D2F0    1147            mov     b,(_linetrack_vleft_1_77 + 2)
0488 E5D3      1148            mov     a,(_linetrack_vleft_1_77 + 3)
048A 120100    1149            lcall   ___fsmul
048D AE82      1150            mov     r6,dpl
048F AF83      1151            mov     r7,dph
0491 A8F0      1152            mov     r0,b
0493 F9        1153            mov     r1,a
0494 E581      1154            mov     a,sp
0496 24FC      1155            add     a,#0xfc
0498 F581      1156            mov     sp,a
049A C006      1157            push    ar6
049C C007      1158            push    ar7
049E C000      1159            push    ar0
04A0 C001      1160            push    ar1
04A2 857082    1161            mov     dpl,_linetrack_sloc0_1_0
04A5 857183    1162            mov     dph,(_linetrack_sloc0_1_0 + 1)
04A8 8572F0    1163            mov     b,(_linetrack_sloc0_1_0 + 2)
04AB E573      1164            mov     a,(_linetrack_sloc0_1_0 + 3)
04AD 120100    1165            lcall   ___fsadd
04B0 AE82      1166            mov     r6,dpl
04B2 AF83      1167            mov     r7,dph
04B4 A8F0      1168            mov     r0,b
04B6 F9        1169            mov     r1,a
04B7 E581      1170            mov     a,sp
04B9 24FC      1171            add     a,#0xfc
04BB F581      1172            mov     sp,a
04BD D005      1173            pop     ar5
04BF D004      1174            pop     ar4
04C1 D003      1175            pop     ar3
04C3 D002      1176            pop     ar2
04C5 C006      1177            push    ar6
04C7 C007      1178            push    ar7
04C9 C000      1179            push    ar0
04CB C001      1180            push    ar1
04CD 8A82      1181            mov     dpl,r2
04CF 8B83      1182            mov     dph,r3
04D1 8CF0      1183            mov     b,r4
04D3 ED        1184            mov     a,r5
04D4 120100    1185            lcall   ___fsdiv
04D7 AA82      1186            mov     r2,dpl
04D9 AB83      1187            mov     r3,dph
04DB ACF0      1188            mov     r4,b
04DD FD        1189            mov     r5,a
04DE E581      1190            mov     a,sp
04E0 24FC      1191            add     a,#0xfc
04E2 F581      1192            mov     sp,a
04E4 8A82      1193            mov     dpl,r2
04E6 8B83      1194            mov     dph,r3
04E8 8CF0      1195            mov     b,r4
04EA ED        1196            mov     a,r5
04EB 120100    1197            lcall   ___fs2schar
04EE 8582B0    1198            mov     _pwm_Left0,dpl
04F1           1199   ;        robot.c:333: pwm_Right0 = -1;
04F1 7530FF    1200            mov     _pwm_Right0,#0xFF
04F4           1201   ;        robot.c:334: pwm_Right1 = vleft*vleft*75/(vright*vright+vleft*vleft);
04F4 C0D0      1202            push    _linetrack_vleft_1_77
04F6 C0D1      1203            push    (_linetrack_vleft_1_77 + 1)
04F8 C0D2      1204            push    (_linetrack_vleft_1_77 + 2)
04FA C0D3      1205            push    (_linetrack_vleft_1_77 + 3)
04FC 85D082    1206            mov     dpl,_linetrack_vleft_1_77
04FF 85D183    1207            mov     dph,(_linetrack_vleft_1_77 + 1)
0502 85D2F0    1208            mov     b,(_linetrack_vleft_1_77 + 2)
0505 E5D3      1209            mov     a,(_linetrack_vleft_1_77 + 3)
0507 120100    1210            lcall   ___fsmul
050A AA82      1211            mov     r2,dpl
050C AB83      1212            mov     r3,dph
050E ACF0      1213            mov     r4,b
0510 FD        1214            mov     r5,a
0511 E581      1215            mov     a,sp
0513 24FC      1216            add     a,#0xfc
0515 F581      1217            mov     sp,a
0517 C002      1218            push    ar2
0519 C003      1219            push    ar3
051B C004      1220            push    ar4
051D C005      1221            push    ar5
051F 900000    1222            mov     dptr,#0x0000
0522 75F096    1223            mov     b,#0x96
0525 7442      1224            mov     a,#0x42
0527 120100    1225            lcall   ___fsmul
052A AA82      1226            mov     r2,dpl
052C AB83      1227            mov     r3,dph
052E ACF0      1228            mov     r4,b
0530 FD        1229            mov     r5,a
0531 E581      1230            mov     a,sp
0533 24FC      1231            add     a,#0xfc
0535 F581      1232            mov     sp,a
0537 C002      1233            push    ar2
0539 C003      1234            push    ar3
053B C004      1235            push    ar4
053D C005      1236            push    ar5
053F C020      1237            push    _linetrack_vright_1_77
0541 C021      1238            push    (_linetrack_vright_1_77 + 1)
0543 C022      1239            push    (_linetrack_vright_1_77 + 2)
0545 C023      1240            push    (_linetrack_vright_1_77 + 3)
0547 852082    1241            mov     dpl,_linetrack_vright_1_77
054A 852183    1242            mov     dph,(_linetrack_vright_1_77 + 1)
054D 8522F0    1243            mov     b,(_linetrack_vright_1_77 + 2)
0550 E523      1244            mov     a,(_linetrack_vright_1_77 + 3)
0552 120100    1245            lcall   ___fsmul
0555 858270    1246            mov     _linetrack_sloc0_1_0,dpl
0558 858371    1247            mov     (_linetrack_sloc0_1_0 + 1),dph
055B 85F072    1248            mov     (_linetrack_sloc0_1_0 + 2),b
055E F573      1249            mov     (_linetrack_sloc0_1_0 + 3),a
0560 E581      1250            mov     a,sp
0562 24FC      1251            add     a,#0xfc
0564 F581      1252            mov     sp,a
0566 C0D0      1253            push    _linetrack_vleft_1_77
0568 C0D1      1254            push    (_linetrack_vleft_1_77 + 1)
056A C0D2      1255            push    (_linetrack_vleft_1_77 + 2)
056C C0D3      1256            push    (_linetrack_vleft_1_77 + 3)
056E 85D082    1257            mov     dpl,_linetrack_vleft_1_77
0571 85D183    1258            mov     dph,(_linetrack_vleft_1_77 + 1)
0574 85D2F0    1259            mov     b,(_linetrack_vleft_1_77 + 2)
0577 E5D3      1260            mov     a,(_linetrack_vleft_1_77 + 3)
0579 120100    1261            lcall   ___fsmul
057C AE82      1262            mov     r6,dpl
057E AF83      1263            mov     r7,dph
0580 A8F0      1264            mov     r0,b
0582 F9        1265            mov     r1,a
0583 E581      1266            mov     a,sp
0585 24FC      1267            add     a,#0xfc
0587 F581      1268            mov     sp,a
0589 C006      1269            push    ar6
058B C007      1270            push    ar7
058D C000      1271            push    ar0
058F C001      1272            push    ar1
0591 857082    1273            mov     dpl,_linetrack_sloc0_1_0
0594 857183    1274            mov     dph,(_linetrack_sloc0_1_0 + 1)
0597 8572F0    1275            mov     b,(_linetrack_sloc0_1_0 + 2)
059A E573      1276            mov     a,(_linetrack_sloc0_1_0 + 3)
059C 120100    1277            lcall   ___fsadd
059F AE82      1278            mov     r6,dpl
05A1 AF83      1279            mov     r7,dph
05A3 A8F0      1280            mov     r0,b
05A5 F9        1281            mov     r1,a
05A6 E581      1282            mov     a,sp
05A8 24FC      1283            add     a,#0xfc
05AA F581      1284            mov     sp,a
05AC D005      1285            pop     ar5
05AE D004      1286            pop     ar4
05B0 D003      1287            pop     ar3
05B2 D002      1288            pop     ar2
05B4 C006      1289            push    ar6
05B6 C007      1290            push    ar7
05B8 C000      1291            push    ar0
05BA C001      1292            push    ar1
05BC 8A82      1293            mov     dpl,r2
05BE 8B83      1294            mov     dph,r3
05C0 8CF0      1295            mov     b,r4
05C2 ED        1296            mov     a,r5
05C3 120100    1297            lcall   ___fsdiv
05C6 AA82      1298            mov     r2,dpl
05C8 AB83      1299            mov     r3,dph
05CA ACF0      1300            mov     r4,b
05CC FD        1301            mov     r5,a
05CD E581      1302            mov     a,sp
05CF 24FC      1303            add     a,#0xfc
05D1 F581      1304            mov     sp,a
05D3 8A82      1305            mov     dpl,r2
05D5 8B83      1306            mov     dph,r3
05D7 8CF0      1307            mov     b,r4
05D9 ED        1308            mov     a,r5
05DA 120100    1309            lcall   ___fs2schar
05DD 8582F0    1310            mov     _pwm_Right1,dpl
05E0 22        1311            ret
05E1           1312   ;------------------------------------------------------------
05E1           1313   ;Allocation info for local variables in function 'stopcar'
05E1           1314   ;------------------------------------------------------------
05E1           1315   ;------------------------------------------------------------
05E1           1316   ;        robot.c:346: void stopcar(void) {
05E1           1317   ;        -----------------------------------------
05E1           1318   ;         function stopcar
05E1           1319   ;        -----------------------------------------
05E1           1320   _stopcar:
05E1           1321   ;        robot.c:348: pwm_Left1 = -1;
05E1 7570FF    1322            mov     _pwm_Left1,#0xFF
05E4           1323   ;        robot.c:349: pwm_Right1 = -1;
05E4 75F0FF    1324            mov     _pwm_Right1,#0xFF
05E7           1325   ;        robot.c:350: pwm_Left0 = -1;
05E7 75B0FF    1326            mov     _pwm_Left0,#0xFF
05EA           1327   ;        robot.c:351: pwm_Right0 = -1;
05EA 7530FF    1328            mov     _pwm_Right0,#0xFF
05ED 22        1329            ret
05EE           1330   ;------------------------------------------------------------
05EE           1331   ;Allocation info for local variables in function 'turncar'
05EE           1332   ;------------------------------------------------------------
05EE           1333   ;leftright                 Allocated to registers r2 r3 
05EE           1334   ;v                         Allocated with name '_turncar_v_1_84'
05EE           1335   ;direction                 Allocated with name '_turncar_direction_1_84'
05EE           1336   ;------------------------------------------------------------
05EE           1337   ;        robot.c:357: void turncar (int leftright) {
05EE           1338   ;        -----------------------------------------
05EE           1339   ;         function turncar
05EE           1340   ;        -----------------------------------------
05EE           1341   _turncar:
05EE AA82      1342            mov     r2,dpl
05F0 AB83      1343            mov     r3,dph
05F2           1344   ;        robot.c:363: pwm_Left0 = -1;
05F2 75B0FF    1345            mov     _pwm_Left0,#0xFF
05F5           1346   ;        robot.c:364: pwm_Left1 = -1;
05F5 7570FF    1347            mov     _pwm_Left1,#0xFF
05F8           1348   ;        robot.c:365: pwm_Right0 = -1;
05F8 7530FF    1349            mov     _pwm_Right0,#0xFF
05FB           1350   ;        robot.c:366: pwm_Right1 = -1;
05FB 75F0FF    1351            mov     _pwm_Right1,#0xFF
05FE           1352   ;        robot.c:368: direction = currentstate - 1;
05FE E530      1353            mov     a,_currentstate
0600 14        1354            dec     a
0601 F500      1355            mov     _turncar_direction_1_84,a
0603           1356   ;        robot.c:371: if (leftright == 0) {
0603 EA        1357            mov     a,r2
0604 4B        1358            orl     a,r3
0605 6001      1359            jz      L008032?
0607 020100    1360            ljmp    L008010?
060A           1361   L008032?:
060A           1362   ;        robot.c:373: pwm_Right0 = 100;
060A 753064    1363            mov     _pwm_Right0,#0x64
060D           1364   ;        robot.c:377: v= direction ? Volts_at_Pin(LQFP32_MUX_P2_4) : Volts_at_Pin(LQFP32_MUX_P2_6);
060D E500      1365            mov     a,_turncar_direction_1_84
060F 6001      1366            jz      L008014?
0611 75820C    1367            mov     dpl,#0x0C
0614 120100    1368            lcall   _Volts_at_Pin
0617 AC82      1369            mov     r4,dpl
0619 AD83      1370            mov     r5,dph
061B AEF0      1371            mov     r6,b
061D FF        1372            mov     r7,a
061E 8001      1373            sjmp    L008015?
0620           1374   L008014?:
0620 75820E    1375            mov     dpl,#0x0E
0623 120100    1376            lcall   _Volts_at_Pin
0626 AC82      1377            mov     r4,dpl
0628 AD83      1378            mov     r5,dph
062A AEF0      1379            mov     r6,b
062C FF        1380            mov     r7,a
062D           1381   L008015?:
062D 8CB0      1382            mov     _turncar_v_1_84,r4
062F 8DB1      1383            mov     (_turncar_v_1_84 + 1),r5
0631 8EB2      1384            mov     (_turncar_v_1_84 + 2),r6
0633 8FB3      1385            mov     (_turncar_v_1_84 + 3),r7
0635           1386   ;        robot.c:379: while (v < 1.5) {
0635           1387   L008001?:
0635 E4        1388            clr     a
0636 C0E0      1389            push    acc
0638 C0E0      1390            push    acc
063A 74C0      1391            mov     a,#0xC0
063C C0E0      1392            push    acc
063E 743F      1393            mov     a,#0x3F
0640 C0E0      1394            push    acc
0642 85B082    1395            mov     dpl,_turncar_v_1_84
0645 85B183    1396            mov     dph,(_turncar_v_1_84 + 1)
0648 85B2F0    1397            mov     b,(_turncar_v_1_84 + 2)
064B E5B3      1398            mov     a,(_turncar_v_1_84 + 3)
064D 120100    1399            lcall   ___fslt
0650 AC82      1400            mov     r4,dpl
0652 E581      1401            mov     a,sp
0654 24FC      1402            add     a,#0xfc
0656 F581      1403            mov     sp,a
0658 EC        1404            mov     a,r4
0659 6001      1405            jz      L008003?
065B           1406   ;        robot.c:381: v= direction ? Volts_at_Pin(LQFP32_MUX_P2_4) : Volts_at_Pin(LQFP32_MUX_P2_6);
065B E500      1407            mov     a,_turncar_direction_1_84
065D 6001      1408            jz      L008016?
065F 75820C    1409            mov     dpl,#0x0C
0662 120100    1410            lcall   _Volts_at_Pin
0665 AC82      1411            mov     r4,dpl
0667 AD83      1412            mov     r5,dph
0669 AEF0      1413            mov     r6,b
066B FF        1414            mov     r7,a
066C 8001      1415            sjmp    L008017?
066E           1416   L008016?:
066E 75820E    1417            mov     dpl,#0x0E
0671 120100    1418            lcall   _Volts_at_Pin
0674 AC82      1419            mov     r4,dpl
0676 AD83      1420            mov     r5,dph
0678 AEF0      1421            mov     r6,b
067A FF        1422            mov     r7,a
067B           1423   L008017?:
067B 8CB0      1424            mov     _turncar_v_1_84,r4
067D 8DB1      1425            mov     (_turncar_v_1_84 + 1),r5
067F 8EB2      1426            mov     (_turncar_v_1_84 + 2),r6
0681 8FB3      1427            mov     (_turncar_v_1_84 + 3),r7
0683 8001      1428            sjmp    L008001?
0685           1429   L008003?:
0685           1430   ;        robot.c:384: waitms(300);
0685 90012C    1431            mov     dptr,#0x012C
0688 120100    1432            lcall   _waitms
068B           1433   ;        robot.c:387: pwm_Right0 = -1; 
068B 7530FF    1434            mov     _pwm_Right0,#0xFF
068E           1435   ;        robot.c:388: pwm_Left0 = -1;            
068E 75B0FF    1436            mov     _pwm_Left0,#0xFF
0691 22        1437            ret
0692           1438   L008010?:
0692           1439   ;        robot.c:392: else if (leftright == 1) {
0692 BA0100    1440            cjne    r2,#0x01,L008036?
0695 BB0000    1441            cjne    r3,#0x00,L008036?
0698 8001      1442            sjmp    L008037?
069A           1443   L008036?:
069A 22        1444            ret
069B           1445   L008037?:
069B           1446   ;        robot.c:394: pwm_Left1 = 100;
069B 757064    1447            mov     _pwm_Left1,#0x64
069E           1448   ;        robot.c:398: v= direction ? Volts_at_Pin(LQFP32_MUX_P2_3) : Volts_at_Pin(LQFP32_MUX_P2_5);
069E E500      1449            mov     a,_turncar_direction_1_84
06A0 6001      1450            jz      L008018?
06A2 75820B    1451            mov     dpl,#0x0B
06A5 120100    1452            lcall   _Volts_at_Pin
06A8 AA82      1453            mov     r2,dpl
06AA AB83      1454            mov     r3,dph
06AC ACF0      1455            mov     r4,b
06AE FD        1456            mov     r5,a
06AF 8001      1457            sjmp    L008019?
06B1           1458   L008018?:
06B1 75820D    1459            mov     dpl,#0x0D
06B4 120100    1460            lcall   _Volts_at_Pin
06B7 AA82      1461            mov     r2,dpl
06B9 AB83      1462            mov     r3,dph
06BB ACF0      1463            mov     r4,b
06BD FD        1464            mov     r5,a
06BE           1465   L008019?:
06BE 8AB0      1466            mov     _turncar_v_1_84,r2
06C0 8BB1      1467            mov     (_turncar_v_1_84 + 1),r3
06C2 8CB2      1468            mov     (_turncar_v_1_84 + 2),r4
06C4 8DB3      1469            mov     (_turncar_v_1_84 + 3),r5
06C6           1470   ;        robot.c:400: while (v < 1.5) {
06C6           1471   L008004?:
06C6 E4        1472            clr     a
06C7 C0E0      1473            push    acc
06C9 C0E0      1474            push    acc
06CB 74C0      1475            mov     a,#0xC0
06CD C0E0      1476            push    acc
06CF 743F      1477            mov     a,#0x3F
06D1 C0E0      1478            push    acc
06D3 85B082    1479            mov     dpl,_turncar_v_1_84
06D6 85B183    1480            mov     dph,(_turncar_v_1_84 + 1)
06D9 85B2F0    1481            mov     b,(_turncar_v_1_84 + 2)
06DC E5B3      1482            mov     a,(_turncar_v_1_84 + 3)
06DE 120100    1483            lcall   ___fslt
06E1 AA82      1484            mov     r2,dpl
06E3 E581      1485            mov     a,sp
06E5 24FC      1486            add     a,#0xfc
06E7 F581      1487            mov     sp,a
06E9 EA        1488            mov     a,r2
06EA 6001      1489            jz      L008006?
06EC           1490   ;        robot.c:402: v= direction ? Volts_at_Pin(LQFP32_MUX_P2_3) : Volts_at_Pin(LQFP32_MUX_P2_5);
06EC E500      1491            mov     a,_turncar_direction_1_84
06EE 6001      1492            jz      L008020?
06F0 75820B    1493            mov     dpl,#0x0B
06F3 120100    1494            lcall   _Volts_at_Pin
06F6 AA82      1495            mov     r2,dpl
06F8 AB83      1496            mov     r3,dph
06FA ACF0      1497            mov     r4,b
06FC FD        1498            mov     r5,a
06FD 8001      1499            sjmp    L008021?
06FF           1500   L008020?:
06FF 75820D    1501            mov     dpl,#0x0D
0702 120100    1502            lcall   _Volts_at_Pin
0705 AA82      1503            mov     r2,dpl
0707 AB83      1504            mov     r3,dph
0709 ACF0      1505            mov     r4,b
070B FD        1506            mov     r5,a
070C           1507   L008021?:
070C 8AB0      1508            mov     _turncar_v_1_84,r2
070E 8BB1      1509            mov     (_turncar_v_1_84 + 1),r3
0710 8CB2      1510            mov     (_turncar_v_1_84 + 2),r4
0712 8DB3      1511            mov     (_turncar_v_1_84 + 3),r5
0714 8001      1512            sjmp    L008004?
0716           1513   L008006?:
0716           1514   ;        robot.c:405: waitms(300);
0716 90012C    1515            mov     dptr,#0x012C
0719 120100    1516            lcall   _waitms
071C           1517   ;        robot.c:408: pwm_Left1 = -1; 
071C 7570FF    1518            mov     _pwm_Left1,#0xFF
071F           1519   ;        robot.c:409: pwm_Right1 = -1; 
071F 75F0FF    1520            mov     _pwm_Right1,#0xFF
0722 22        1521            ret
0723           1522   ;------------------------------------------------------------
0723           1523   ;Allocation info for local variables in function 'uturn'
0723           1524   ;------------------------------------------------------------
0723           1525   ;vleft                     Allocated with name '_uturn_vleft_1_90'
0723           1526   ;vright                    Allocated with name '_uturn_vright_1_90'
0723           1527   ;------------------------------------------------------------
0723           1528   ;        robot.c:417: void uturn(void) {
0723           1529   ;        -----------------------------------------
0723           1530   ;         function uturn
0723           1531   ;        -----------------------------------------
0723           1532   _uturn:
0723           1533   ;        robot.c:421: vleft = Volts_at_Pin(LQFP32_MUX_P2_3);
0723 75820B    1534            mov     dpl,#0x0B
0726 120100    1535            lcall   _Volts_at_Pin
0729 858250    1536            mov     _uturn_vleft_1_90,dpl
072C 858351    1537            mov     (_uturn_vleft_1_90 + 1),dph
072F 85F052    1538            mov     (_uturn_vleft_1_90 + 2),b
0732 F553      1539            mov     (_uturn_vleft_1_90 + 3),a
0734           1540   ;        robot.c:422: vright = Volts_at_Pin(LQFP32_MUX_P2_4);
0734 75820C    1541            mov     dpl,#0x0C
0737 120100    1542            lcall   _Volts_at_Pin
073A 8582A0    1543            mov     _uturn_vright_1_90,dpl
073D 8583A1    1544            mov     (_uturn_vright_1_90 + 1),dph
0740 85F0A2    1545            mov     (_uturn_vright_1_90 + 2),b
0743 F5A3      1546            mov     (_uturn_vright_1_90 + 3),a
0745           1547   ;        robot.c:425: pwm_Left0 = -1;
0745 75B0FF    1548            mov     _pwm_Left0,#0xFF
0748           1549   ;        robot.c:426: pwm_Left1 = 50;
0748 757032    1550            mov     _pwm_Left1,#0x32
074B           1551   ;        robot.c:427: pwm_Right0 = -1;
074B 7530FF    1552            mov     _pwm_Right0,#0xFF
074E           1553   ;        robot.c:428: pwm_Right1 = 50;
074E 75F032    1554            mov     _pwm_Right1,#0x32
0751           1555   ;        robot.c:431: waitms(4000);
0751 900FA0    1556            mov     dptr,#0x0FA0
0754 120100    1557            lcall   _waitms
0757           1558   ;        robot.c:434: while (((vleft - vright) > 0.2) || ((vleft - vright) < (-0.2))) {
0757           1559   L009002?:
0757 C0A0      1560            push    _uturn_vright_1_90
0759 C0A1      1561            push    (_uturn_vright_1_90 + 1)
075B C0A2      1562            push    (_uturn_vright_1_90 + 2)
075D C0A3      1563            push    (_uturn_vright_1_90 + 3)
075F 855082    1564            mov     dpl,_uturn_vleft_1_90
0762 855183    1565            mov     dph,(_uturn_vleft_1_90 + 1)
0765 8552F0    1566            mov     b,(_uturn_vleft_1_90 + 2)
0768 E553      1567            mov     a,(_uturn_vleft_1_90 + 3)
076A 120100    1568            lcall   ___fssub
076D AA82      1569            mov     r2,dpl
076F AB83      1570            mov     r3,dph
0771 ACF0      1571            mov     r4,b
0773 FD        1572            mov     r5,a
0774 E581      1573            mov     a,sp
0776 24FC      1574            add     a,#0xfc
0778 F581      1575            mov     sp,a
077A 74CD      1576            mov     a,#0xCD
077C C0E0      1577            push    acc
077E 74CC      1578            mov     a,#0xCC
0780 C0E0      1579            push    acc
0782 744C      1580            mov     a,#0x4C
0784 C0E0      1581            push    acc
0786 743E      1582            mov     a,#0x3E
0788 C0E0      1583            push    acc
078A 8A82      1584            mov     dpl,r2
078C 8B83      1585            mov     dph,r3
078E 8CF0      1586            mov     b,r4
0790 ED        1587            mov     a,r5
0791 120100    1588            lcall   ___fsgt
0794 AA82      1589            mov     r2,dpl
0796 E581      1590            mov     a,sp
0798 24FC      1591            add     a,#0xfc
079A F581      1592            mov     sp,a
079C EA        1593            mov     a,r2
079D 7001      1594            jnz     L009003?
079F C0A0      1595            push    _uturn_vright_1_90
07A1 C0A1      1596            push    (_uturn_vright_1_90 + 1)
07A3 C0A2      1597            push    (_uturn_vright_1_90 + 2)
07A5 C0A3      1598            push    (_uturn_vright_1_90 + 3)
07A7 855082    1599            mov     dpl,_uturn_vleft_1_90
07AA 855183    1600            mov     dph,(_uturn_vleft_1_90 + 1)
07AD 8552F0    1601            mov     b,(_uturn_vleft_1_90 + 2)
07B0 E553      1602            mov     a,(_uturn_vleft_1_90 + 3)
07B2 120100    1603            lcall   ___fssub
07B5 AA82      1604            mov     r2,dpl
07B7 AB83      1605            mov     r3,dph
07B9 ACF0      1606            mov     r4,b
07BB FD        1607            mov     r5,a
07BC E581      1608            mov     a,sp
07BE 24FC      1609            add     a,#0xfc
07C0 F581      1610            mov     sp,a
07C2 74CD      1611            mov     a,#0xCD
07C4 C0E0      1612            push    acc
07C6 74CC      1613            mov     a,#0xCC
07C8 C0E0      1614            push    acc
07CA 744C      1615            mov     a,#0x4C
07CC C0E0      1616            push    acc
07CE 74BE      1617            mov     a,#0xBE
07D0 C0E0      1618            push    acc
07D2 8A82      1619            mov     dpl,r2
07D4 8B83      1620            mov     dph,r3
07D6 8CF0      1621            mov     b,r4
07D8 ED        1622            mov     a,r5
07D9 120100    1623            lcall   ___fslt
07DC AA82      1624            mov     r2,dpl
07DE E581      1625            mov     a,sp
07E0 24FC      1626            add     a,#0xfc
07E2 F581      1627            mov     sp,a
07E4 EA        1628            mov     a,r2
07E5 6001      1629            jz      L009005?
07E7           1630   L009003?:
07E7           1631   ;        robot.c:436: vleft  = Volts_at_Pin(LQFP32_MUX_P2_3);
07E7 75820B    1632            mov     dpl,#0x0B
07EA 120100    1633            lcall   _Volts_at_Pin
07ED 858250    1634            mov     _uturn_vleft_1_90,dpl
07F0 858351    1635            mov     (_uturn_vleft_1_90 + 1),dph
07F3 85F052    1636            mov     (_uturn_vleft_1_90 + 2),b
07F6 F553      1637            mov     (_uturn_vleft_1_90 + 3),a
07F8           1638   ;        robot.c:437: vright = Volts_at_Pin(LQFP32_MUX_P2_4);
07F8 75820C    1639            mov     dpl,#0x0C
07FB 120100    1640            lcall   _Volts_at_Pin
07FE 8582A0    1641            mov     _uturn_vright_1_90,dpl
0801 8583A1    1642            mov     (_uturn_vright_1_90 + 1),dph
0804 85F0A2    1643            mov     (_uturn_vright_1_90 + 2),b
0807 F5A3      1644            mov     (_uturn_vright_1_90 + 3),a
0809 020100    1645            ljmp    L009002?
080C           1646   L009005?:
080C 22        1647            ret
080D           1648   ;------------------------------------------------------------
080D           1649   ;Allocation info for local variables in function 'movecar'
080D           1650   ;------------------------------------------------------------
080D           1651   ;power                     Allocated with name '_movecar_PARM_2'
080D           1652   ;forback                   Allocated to registers r2 r3 
080D           1653   ;------------------------------------------------------------
080D           1654   ;        robot.c:444: void movecar (int forback, int power) {
080D           1655   ;        -----------------------------------------
080D           1656   ;         function movecar
080D           1657   ;        -----------------------------------------
080D           1658   _movecar:
080D AA82      1659            mov     r2,dpl
080F AB83      1660            mov     r3,dph
0811           1661   ;        robot.c:446: if (forback == 1) {
0811 BA0140    1662            cjne    r2,#0x01,L010004?
0814 BB0040    1663            cjne    r3,#0x00,L010004?
0817           1664   ;        robot.c:447: pwm_Left1 = power;
0817 AC70      1665            mov     r4,_movecar_PARM_2
0819 8C70      1666            mov     _pwm_Left1,r4
081B           1667   ;        robot.c:448: pwm_Left0 = -1;
081B 75B0FF    1668            mov     _pwm_Left0,#0xFF
081E           1669   ;        robot.c:449: pwm_Right0 = power;
081E 8C30      1670            mov     _pwm_Right0,r4
0820           1671   ;        robot.c:450: pwm_Right1 = -1;
0820 75F0FF    1672            mov     _pwm_Right1,#0xFF
0823 22        1673            ret
0824           1674   L010004?:
0824           1675   ;        robot.c:452: else if (forback == 2) {
0824 BA0280    1676            cjne    r2,#0x02,L010006?
0827 BB0080    1677            cjne    r3,#0x00,L010006?
082A           1678   ;        robot.c:453: pwm_Left0 = power;
082A AA70      1679            mov     r2,_movecar_PARM_2
082C 8AB0      1680            mov     _pwm_Left0,r2
082E           1681   ;        robot.c:454: pwm_Left1 = -1;
082E 7570FF    1682            mov     _pwm_Left1,#0xFF
0831           1683   ;        robot.c:455: pwm_Right1 = power;
0831 8AF0      1684            mov     _pwm_Right1,r2
0833           1685   ;        robot.c:456: pwm_Right0 = -1;
0833 7530FF    1686            mov     _pwm_Right0,#0xFF
0836           1687   L010006?:
0836 22        1688            ret
0837           1689            rseg R_CSEG
0837           1690   
0000           1691            rseg R_XINIT
0000           1692   
0000           1693            rseg R_CONST
0000           1694   __str_0:
0000 1B        1695            db 0x1B
0001 5B324A    1696            db '[2J'
0004 00        1697            db 0x00
0005           1698   __str_1:
0005 0A        1699            db 0x0A
0006 494E5445  1700            db 'INTERSECTION'
     52534543
     54494F4E
0012 0A        1701            db 0x0A
0013 00        1702            db 0x00
0014           1703   __str_2:
0014 0A        1704            db 0x0A
0015 0D        1705            db 0x0D
0016 20494E54  1706            db ' INTERSECTION'
     45525345
     4354494F
     4E
0023 0A        1707            db 0x0A
0024 00        1708            db 0x00
0025           1709   __str_3:
0025 436F6D6D  1710            db 'Command received: %d'
     616E6420
     72656365
     69766564
     3A202564
0039 0A        1711            db 0x0A
003A 00        1712            db 0x00
003B           1713   
002E           1714            CSEG
002E           1715   
002E           1716   end
